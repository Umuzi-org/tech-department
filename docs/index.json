[
{
	"uri": "/tech-department/projects/nodejs/file-io/",
	"title": "Node &amp; File IO",
	"tags": ["Node", "FileIO"],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi. In this project you\u0026rsquo;ll just be storing and retrieving information from plain old json files.\nInstructions Create the following functionality in a TDD way.\n Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{their_full_name}.json.  alice.save() # results in visitor_alice_cooper.json bob.save() # results in visitor_bob_marley.json charlie.save() # results in visitor_charley_sheen.json  Notice that the full name used in the file is all lower-case and spaces are replaced by underscores.\n Create a function called load that takes in a name and then grabs a Visitor object from file. It should simply console.log the visitor.  eg:\nload(\u0026quot;Alice Cooper\u0026quot;) // prints out all of Alice's goodies load(\u0026quot;Bob Marley\u0026quot;) // Same deal for good ol Bob  Resources  Accessing the file system JSON: Make sure you understand everything up to the end of \u0026ldquo;JSON Arrays\u0026rdquo;  Up for a challenge? Here are some upgrades you can add to your project if you are up for it.\n Update your load function so that it returns an instance of Visitor instead of just console.logging it. You\u0026rsquo;ll need to learn a little bit about Syncronous versus Asyncronous code to get this one right :)\n Make use of integer ids when saving things to files.\n  Update your save function so it works like this:\nalice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json alice.comments = \u0026quot;Kinda weird, I don't think he'll fit in\u0026quot; alice.save() # results in an UPDATE to visitor_1.json  Your load function should also get a bit of an update.\ncharlie = load(3) charlie.comments = \u0026quot;Winning!\u0026quot; charlie.save() # results in an UPDATE to visitor_3.json  "
},
{
	"uri": "/tech-department/remote-work/",
	"title": "Umuzi Remote work",
	"tags": [],
	"description": "",
	"content": " Umuzi is moving towards a remote work situation. We can\u0026rsquo;t say exactly how long this will last. However we can say that there are many dev and creative teams all over the world that prefer remote work to on premesis work. And we have been learning from those people.\nBasically we aim to make sure that this time is as productive and safe for everyone as possible. We all need to adapt to get this right. And we as an organisation believe we\u0026rsquo;ll learn a tonne from this experience.\nNow, as you know, we are all about that human-centered life. And this experience has a bunch of different humans involved. You\u0026rsquo;ll see a few different documents in this section for different categories of users. You might actually fit into multiple categories. In this case you\u0026rsquo;ll need to follow multiple recipes.\nBefore we get started here I would like to ask for your patience. We have a plan, but it\u0026rsquo;ll probably have a few bad assumptions and inefficiencies. We\u0026rsquo;re all in this together, so let us know if you think there is something we should be doing better and we will do our best to adapt. Change is life\nFoundations No matter what category of user you are, you\u0026rsquo;ll be using a couple of fundamental tools for communication\n Rocketchat. You\u0026rsquo;ll be expected to be online a lot. Not 100% of the time, but you will be expected to check your messages every morning and every 2 to 3 hours at least. Rocketchat is where the action is at. Google calandars. We\u0026rsquo;ll be scheduling a lot of video calls. Workshops, demos, meetings, they\u0026rsquo;ll all pop up on your Google calandar with nice links to video conferencing. Needless to say, if something is compulsory for you then you should be there. So check your calandar. With your eyes. Generally I just keep it open in a tab on my computer and it warns me if an appointment is drawing near. I\u0026rsquo;d recommend you do similarly. Discord. Some things just work better with voice instead of text. Sometimes text looses its tone and seems just plain rude when no offence was meant. Sometimes nuance gets lost. Discord is a really really good and free voice client. It was originally built for gamers but now it\u0026rsquo;s used all over the place.  Other stuff  Please check your Umuzi email address once per day there is a whatsapp group for the tech deparment, but any official communication should happen on Rocketchat or Email  Details details Have some links\n If you are still working on your syllabus: REMOTE-WORK: How recruits work remotely  If you are on a product team: REMOTE-WORK: Tech Product Teams   So long as we optimise for good, solid, professional communication good things will follow.\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/basic-algorithm/",
	"title": "semitone difference - basic algorithm",
	"tags": [],
	"description": "",
	"content": " Make a class called JamBuddy. JamBuddy should work like this:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # this will print an array of two notes correct = buddy.checkAnswer(1) console.log(correct) # this will print True if the `1` was the correct answer  Python:\nbuddy = JamBuddy() notes = buddy.select_notes() print(notes) # this will print an array of two notes correct = buddy.check_answer(1) print(correct) # this will print True if the `1` was the correct answer  Some finer points For now don\u0026rsquo;t worry about \u0026ldquo;flat\u0026rdquo; notes. The notes we care about are:\nA A# B C C# D D# E F F# G G#  Here is an example usage:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # let's pretend that this outputs ['A', 'B'] let correct = buddy.checkAnswer(1) console.log(correct) # false correct = buddy.checkAnswer(2) console.log(correct) # true  Acceptance criteria Make sure you do this in a TDD way. And that code sample from the top needs to run as is.\nPlease just supply a working class. The only place you should instantiate your class is inside your unit tests\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/gui-part-1/",
	"title": "Make a simple GUI",
	"tags": [],
	"description": "",
	"content": " Create a basic web site that a user can use to interact with the JamBuddy class.\n Make a page named index.html. To run the application the user will just need to open that page in their browser Make a button with the text \u0026ldquo;Get random notes\u0026rdquo;. If the user clicks on this button then the selectNotes function should be called and the notes should be displayed on the screen. make an input box where the user can enter their answer. create a button with the text \u0026ldquo;Submit answer\u0026rdquo;. If the user clicks this button then the checkAnswer function should be called.  if the answer is correct then display the message \u0026ldquo;You got it right .Well Done!\u0026rdquo; if the answer is incorrect then display the message \u0026ldquo;Wrong answer! Try again\u0026rdquo;   Acceptance criteria TDD is a must. Yes, you need to even unit test your DOM manipulations\n"
},
{
	"uri": "/tech-department/projects/nodejs/mongo/",
	"title": "Node &amp; mongoDB assignment",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Create a database and name it UmuziProspects Create a collection inside the database and name it Visiter. The collection must contain the following fields :   id: This should be automatically generated by MongoDB visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  functionality Create a single index script with the following functions:\n addNewVisitor. This should save the Visitor into the database list all visitors. This should return an array of all the visitor names and ids delete a visitor update a visitor view one visitor: given a visitor\u0026rsquo;s id, return all information about that visitor delete all visitors  NOTE You will be expected to properly test your code. You can use whatever testing framework you want. If you use something that isn\u0026rsquo;t taught at Umuzi please justify your choice (if you found something cool we might incorporate it into the syllabus)\nResources TOPICS: MongoDB and JavaScript "
},
{
	"uri": "/tech-department/syllabuses/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " We support a few different technical learning paths. Data Science, Data Engineering, Web Dev, and Java sys dev. What follows below is a week-by-week breakdown of these courses. This is all on one page because our various courses have enough in common that it makes sense to keep them synchronized.\nA note on Umuzi’s formal qualification and accreditation Umuzi is a registered training provider with MICT SETA. Our National Certificate IT (Systems Development) (NCIT) qualification is a learnership requirement (i.e. Umuzi’s employer partners can therefore recognize their training and stipend spend as part of their skills development budgets). We work hard to both meet the National Certificate requirements and deliver a practical and relevant learning experience (which are not always well aligned) however, we firmly believe the most important part is the practical application of learning rather than merely meeting the unit standard requirements. Below we refer to the formal NCIT requirements e.g. NCIT01: Business and technology.\nTerminology This is a living document and there are a few things that need to be fleshed out:\n as far as possible each bullet point that describes a piece of our syllabus should be marked as a WORKSHOP, TOPIC or PROJECT. Or exercise??\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == you know  we need to make sure all the NCIT requirements have been dealt with before hitting the summative assessment\n the syllabus is really long. There is a lot to cover so that has effects on Product teams. There are decisions to be made there.\n  Week -1: Bootcamp This is the final step of our selection process. If applicants get through the bootcamp then they are accepted as Umuzi recruits and go on with the rest of the program.\nWe start off by introducing the applicants to the development environment and resources that they\u0026rsquo;ll be using. They are given various group an individual challenges throughout the week.\nWeek 0: Make Umuzi Better A recruit’s journey starts with a one week programme called #MakeUmuziBetter. Recruits from all departments form small cross-functional teams to tackle issues at Umuzi - anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\nNCIT assessments We get a few NCIT assessments out of the way during MUB.\n NCIT 01: Conducting research and user interviews NCIT 02: Reporting NCIT 03: Research presentation  Week 1: Linux and soft skills In this week, everyone gets to know their way around linux.\n ALL:\n Department ice-breaker  WORKSHOPS: How to be a professional   REMOTE-WORK: How recruits work remotely  Introduction to NCIT curriculum  WORKSHOPS: [TODO] Introduction to Linux: Live demo   TOPICS: Introduction to Linux   PROJECTS: [TODO] Beginner Linux challenges   TOPICS: Introduction to Bash and the terminal    Everyone is also given links to resources so that they can start reading ahead.\n JAVA:\n  TOPICS: Java Dev environment setup   TOPICS: Java learning materials   WEB_DEV:\n  TOPICS: Web Dev learning materials   DATA_ENG:\n  TOPICS: Python self-learning   DATA_SCI: please take note, you don\u0026rsquo;t need to go as deep into coding as others. But it is good to know your way around\n  TOPICS: Python self-learning   TOPICS: Clean Code    Week 2: Git and personal portfolio Recruits learn a bit about how to build an online presence. Recruits submit their work using Git from the very beginning of their course.\n ALL:\n  TOPICS: Git Basics  Q\u0026amp;A Git basics  PROJECTS: Git Basic Exercises   WORKSHOPS: What to Put On A CV   PROJECTS: Build your first personal website - Introduction  TOPICS: Clean Code  NCIT 04: Version control (GIT) for teamwork  WEB_DEV:\n  WORKSHOPS: Intro to CSS architecture   TOPICS: Introduction to web design    Week 3: Finish portfolio project The recruits finish off their portfolios. From this point forward they are expected to keep their portfolios up to date on their own time.\n ALL:\n  WORKSHOPS: [TODO] Big Picture of Web Dev   PROJECTS: Build your first personal website - Deadline NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 06: Web design for business NCIT 07: Building an online business NCIT 12: Business and technology NCIT 09: Ethics and Professionalism in IT  WORKSHOPS: Clean Code (language agnostic)   DATA_SCI:\n  WORKSHOPS: Survey design   WORKSHOPS: Google forms like a boss    Week 4:   TOPICS: How to ask for help with your code  WEB_DEV:\n  TOPICS: [TODO] Super basic intro to Node  WORKSHOP: Live code. Super basic intro to node  PROJECTS: Level 1 programming katas do this in pairs  DATA_ENG:\n  PROJECTS: Level 1 programming katas do this in pairs  WORKSHOPS: [TODO] Basic Intro to OOP   TOPICS: [TODO] Python OOP basics   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week  DATA_SCI:\n  TOPICS: Unit testing (language agnostic concepts)   TOPICS: Automated Testing in Python   PROJECTS: Level 1 programming katas do this in pairs  PROJECTS: simple-calculator part 1 do this in pairs  JAVA:\n carry over any NCIT tasks from previous week  TOPICS: Introduction to Gradle   WORKSHOPS: Live coding: Introduction to Java Monday or Tuesday Recruits should be familiar with basic flow control, if, else, loops. It may be necessary to have another workshop on this  PROJECTS: Level 1 programming katas do this in pairs, they should use Gradle   Week 5: Some specific skills  DATA_SCI:\n  TOPICS: Introduction to assertive programming   TOPICS: [TODO] Assertive programming and Pandas   PROJECTS: Assertive programming kata do this in pairs  PROJECTS: Data Visualisation Projects   DATA_ENG:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   TOPICS: Automated Testing in Python   PROJECTS: simple-calculator part 1   WEB_DEV:\n  WORKSHOPS: [TODO] OOP in JS   TOPICS: [TODO] OOP in JS and Node   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week  JAVA:\n  WORKSHOPS: Basic intro to oop with IntelliJ   TOPICS: Java OOP basics resources and readings   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week NCIT 08: Pseudocode and documentation NCIT 13: Object-oriented programming workshop: oop Q\u0026amp;A might be needed   Week 6  ALL:\n  TOPICS: How the internet works   TOPICS: Data Ethics and Privacy   DATA_SCI:\n  WORKSHOPS: Data Ethics   DATA_ENG:\n  PROJECTS: password-checker  logging with python add logging to password checker  WEB_DEV:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   WORKSHOPS: Unit testing with Jasmine Introduction   PROJECTS: simple-calculator part 1   JAVA:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   TOPICS: Intro to JUnit  LIVE CODE WORKSHOP: demonstrate unit tests with intelliJ and JUnit.  PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   PROJECTS: simple-calculator part 1   TOPICS: Exception Handling   NCIT 05: History of the Internet\n NCIT 06: Web design for business\n NCIT 07: Building an online business\n NCIT 08: Pseudocode and documentation\n  Week 7  ALL:\n NCIT 09: Ethics and Professionalism in IT NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 11: Test-driven development  DATA_SCI:\n  TOPICS: Automated Testing pandas and numpy   PROJECTS: string-calculator   DATA_ENG:\n  PROJECTS: string-calculator   WEB_DEV:\n  PROJECTS: password-checker   TOPICS: Logging in Node and JS  add logging to password checker  JAVA:\n LIVE CODE WORKSHOP: Error Handling  PROJECTS: password-checker   TOPICS: Java Logging with Log4j   PROJECTS: Add logging to password checker   TOPICS: Java File IO    Week 8:  DATA_SCI:\n  PROJECTS: Statistical Thinking INTRODUCED  Java:\n  PROJECTS: File IO \u0026#43; Logging \u0026#43; Errors   TOPICS: Regular Expression Resources  NCIT 17: Search and sort techniques  DATA_ENG:\n  TOPICS: Unit testing with mocks and spies   PROJECTS: Email random inspirational quote   TOPICS: API basics   PROJECTS: Consume Github API - INTRODUCED  WEB_DEV\n  PROJECTS: string-calculator    Week 9:  DATA_SCI\n  PROJECTS: Data Wrangling   TOPICS: Intro to functional programming   DATA_ENG\n  PROJECTS: Consume Github API - DUE  TOPICS: Environmental Variables   TOPICS: [TODO] Virtual Environments   WEB_DEV:\n  TOPICS: Unit testing with mocks and spies   PROJECTS: Email random inspirational quote   TOPICS: API basics   PROJECTS: Consume Github API - INTRODUCED  JAVA\n  PROJECTS: string-calculator   TOPICS: Strings and numbers in Java    Week 10:  ALL\n  TOPICS: The Tech Landscape Terminology  NCIT 12: Business and technology  DATA_SCI:\n  PROJECTS: Data Wrangling - FINISH UP\n DATA_ENG:\n  TOPICS: Intro to Docker and Docker-compose   PROJECTS: SQL   WEB_DEV:\n  PROJECTS: Consume Github API - DUE  TOPICS: DOM manipulation with vanilla JavaScript   PROJECTS: Memory game in vanilla js INTRODUCED  JAVA:\n  PROJECTS: Java data structures   PROJECTS: Java collections   TOPICS: Java collections and data structures    Week 11  DATA_ENG\n  TOPICS: Sqlalchemy ORM   PROJECTS: create a REST api to interact with actual database   DATA_SCI:\n  PROJECTS: Cross-validation \u0026amp; Simple Linear Regression   WEB_DEV:\n  PROJECTS: Memory game in vanilla js DUE  JAVA:\n  PROJECTS: Dice INTRODUCED  PROJECTS: Java Generics   TOPICS: Java Generics   TOPICS: Introduction to Design Patterns    WEEK 12:  DATA_SCI:\n  PROJECTS: Multivariate Linear Regression  BONUS: Compare results using OOP principles in PROJECTS: Cross-validation \u0026amp; Simple Linear Regression   WEB_DEV\n  TOPICS: Node   PROJECTS: Node \u0026amp; File IO   DATA_ENG:\n  TOPICS: Sqlalchemy migrations with Alembic   PROJECTS: Database migrations with SQLAlchemy - INTRODUCTION  JAVA:\n  PROJECTS: Dice DUE  TOPICS: Intro to Docker and Docker-compose   PROJECTS: SQL INTRODUCED   Week 13  NCIT 13: Object-oriented programming\n DATA_SCI\n  TOPICS: Intro OOP(Object-oriented Programming) for Python   PROJECTS: [MISSING title or page]  DATA_ENG\n  TOPICS: Database Comparison   TOPICS: MongoDB and Python   TOPICS: optimizations and big-O   PROJECTS: Python and MongoDB - DUE  WEB_DEV:\n  TOPICS: Intro to Docker and Docker-compose   PROJECTS: SQL - INTRODUCTION  WORKSHOPS: [TODO] Introduction to Node and SQL   JAVA:\n  PROJECTS: SQL DUE  TOPICS: Environmental Variables   TOPICS: JDBC templates   TOPICS: Environmental variables and secrets with gradle   PROJECTS: [TODO] SQL Extended    Week 14  DATA_ENG\n  TOPICS: Sqlalchemy migrations with Alembic   PROJECTS: Database migrations with SQLAlchemy - DUE  TOPICS: Database Comparison   TOPICS: MongoDB and Python   PROJECTS: Python and MongoDB - INTRODUCTION  WEB_DEV:\n  PROJECTS: SQL - DUE  WORKSHOPS: [TODO] Introduction to Node and SQL   DATA_SCI\n  TOPICS: Intro to Docker and Docker-compose   TOPICS: [TODO] Virtual Environments   JAVA:\n NCIT 14: Database Development NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output  TOPICS: Introduction to Spring Boot - part 1   PROJECTS: Introduction to Spring Boot - part 1    Week 15  DATA_ENG:\n  PROJECTS: RabbitMQ   PROJECTS: DAGs with Airflow - INTRODUCED  DATA_SCI:\n  TOPICS: SQL and Python   WEB_DEV:\n  TOPICS: Environmental Variables   TOPICS: [TODO] The dotenv module   PROJECTS: Node \u0026amp; SQL assignment   Java :\n  TOPICS: Introduction to Spring Boot - part 2   PROJECTS: Introduction to Spring Boot - part 2   TOPICS: How the internet works  NCIT 05: History of the Internet   Week 16  DATA_ENG:\n  PROJECTS: DAGs with Airflow - DUE  DATA_SCI:\n  TOPICS: SQL and Python   TOPICS: Data validation and quality control   WEB_DEV:\n  PROJECTS: Express, forms and templates    ALL:\n NCIT 14: Database Development  JAVA:\n  TOPICS: Introduction to Spring Boot - part 3   PROJECTS: Introduction to Spring Boot - part 3   Week 17  JAVA:\n  TOPICS: [TODO] Kinds of web APIs REST versus SOAP and GraphQL(double check if std bank wants peeps to use soap bpm)  PROJECTS: Consume Github API   PROJECTS: [TODO] Consume own api using curl   TOPICS: Data Ethics and Privacy   WEB_DEV:\n  PROJECTS: Expose a JSON API   DATA_ENG:\n  TOPICS: Python and Kafka   PROJECTS: Python and Kafka - INTRODUCTION  DATA_SCI: BUFFER WEEK\n JAVA:\n  TOPICS: Introduction to Spring Boot - part 4   PROJECTS: Introduction to Spring Boot - part 4    Week 18  NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output\n DATA_SCI:\n  PROJECTS: Logistic regression   WEB_DEV:\n  PROJECTS: Add a little Ajax   DATA_ENG:\n  PROJECTS: Python and Kafka - DUE  TOPICS: [TODO] ZeroMQ versus RabbitMQ versus Kafka   JAVA:\n  Week 19  WEB_DEV:\n  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum   TOPICS: optimizations and big-O   DATA_ENG:\n  PROJECTS: [TODO] Python and Spark - INTRODUCED  TOPICS: Python and Spark   DATA_SCI:\n  PROJECTS: Decision Trees   JAVA:\n  TOPICS: Introduction to Spring Boot - part 3   PROJECTS: Introduction to Spring Boot - part 3    Week 20  ALL:\n  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum   TOPICS: optimizations and big-O   NCIT 16: Thinking like a machine / Boolean algebra, logic\n NCIT 17: Search and sort techniques\n NCIT 18: Agile project management\n NCIT 19: Agile meetings\n NCIT 20: Managing the Software Development Process\n  Week 21: NCIT bits and pieces MUB must happen before this point.\n DATA_ENG:   PROJECTS: [TODO] Python and Spark - DUE   ALL:\n NCIT Summative assessment\n DATA_SCI: PRODUCT TEAM ONBOARDING\n  WORKSHOPS: Git for Teamwork    Week 22:  DATA_SCI: PRODUCT TEAM WORK\n  PROJECTS: K-Means Clustering Assignment   ALL:\n  TOPICS: Database Comparison    Week 23  DATA_SCI:   TOPICS: Natural Language Processing   PROJECTS: Natural language processing    Week 24 DATA_SCI: PRODUCT TEAM WORK\nWeek 25 DATA_SCI: PRODUCT TEAM WORK\nWeek 26 DATA_SCI: PRODUCT TEAM WORK\n ALL:   WORKSHOPS: Git for Teamwork   WORKSHOPS: [TODO] Agile Recap    Optional Extras If recruits want/need to go a little further with their learning then here are a few useful resources.\n WEB_DEV:\n  TOPICS: Intro to Angular   TOPICS: Intro to React   TOPICS: Intro to Vue   WORKSHOPS: [TODO] Nodejs intro to socketIO   WORKSHOPS: [TODO] Basic introduction to Redux   WORKSHOPS: [TODO] Node Sync/Async   TOPICS: MongoDB and JavaScript   DATA_ENG:\n postgres stored procedures sql index optimisations Entity Relationship Diagrams (ERD) Data warehousing with Hive Overview of the Hadoop ecosystem Linear regressions   Optional Projects The projects listed below are not necessary but could be used to re-enforce certain learnings\n  PROJECTS: Semitone Challenge   "
},
{
	"uri": "/tech-department/topics/",
	"title": "Topics",
	"tags": [],
	"description": "",
	"content": "A topic is a collection of learning materials that the recruit can go through on their own.\n"
},
{
	"uri": "/tech-department/workshops/",
	"title": "Workshops",
	"tags": [],
	"description": "",
	"content": "A workshop is an interactive session that includes at least one Umuzi staff member. These will often be presentations, demonstrations or Q\u0026amp;A sessions.\nThis section includes all the references and explanations needed to put on a workshop.\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/advanced-algorithm/",
	"title": "Advanced algorithm",
	"tags": [],
	"description": "",
	"content": " Adjust your JamBuddy class so that it can handle flats and sharps.\nHere is an example usage:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # let's pretend that this outputs ['A#', 'Db'] let correct = buddy.checkAnswer(1) console.log(correct) # false correct = buddy.checkAnswer(3) console.log(correct) # true  Have fun :)\nAcceptance criteria The usual. TDD is a must\n"
},
{
	"uri": "/tech-department/projects/nodejs/express-forms/",
	"title": "Express, forms and templates",
	"tags": ["node", "express"],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\ncreate a basic html form Create an HTML form. This form will (eventually) be used to create Visitor fields in your mongo database. Your form should have the following fields:\n visitor name your name (name of the person who assisted the visitor) visitor\u0026rsquo;s age date of visit time of visit comments  use express to host the form as a static resource Create a basic express.js application and serve your form as a static file\nThe url should be http://localhost:[YOUR_PORT]/new_visit\nsubmit the form There should be a submit button on the form. When the user submits the form then the following should happen:\n The form data will be collected and your addNewVisitor function will be called in order to save the visitor details into your database The user should then be redirected to a page that says: \u0026ldquo;Thanks for the info! The following was saved to the database:\u0026ldquo;. This page should display the information that was saved, as well as the id of the new Visitor instance.  Make use of the pug template engine to render the \u0026ldquo;Thank you\u0026rdquo; page\nResources   TOPICS: ExpressJs   TOPICS: JavaScript template engines   TOPICS: Using the fetch api   "
},
{
	"uri": "/tech-department/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": " Units of work with strict deadlines to be completed alone or in groups\nProjects have three parts:\nPROJECT INTRO This is when the project is given to the recruits. Everything is explained, they are pointed at useful resources and clear instructions, and they are told the deadline.\nPROJECT DEADLINE This is when the projects are due. Umuzi staff members will now review the code to give feedback.\nFor code projects The recruits need to provide evidence that they got another recruit to review their work, and that they reviewed another recruits work prior to the deadline.\nThe recruit is expected to submit code and documentation in the form of a git repo. All git, coding, testing and documentation best practices that the course has covered thus far need to be adhered to.\nPROJECT CODE REVIEW Once the staff members have reviewed code projects then a code review session will be held. This is a kind of workshop where an Umuzi staff member will present on the project submissions.\n If anyone did something awesome then highlight that If there is a common misconception or mistake then highlight that highlight any subtle lessons that should have been learned get feedback from the recruits, Q\u0026amp;A get a few of the recruits to explain parts of their code and approaches to the group  If anyone submitted nonesense - either they were sloppy or they just didn\u0026rsquo;t get it, then don\u0026rsquo;t make them the center of attention. Pull them aside after the code review and have a private discussion. This should happen after the group code review session because that way they will see the standard of the group as a whole and possibly be motivated to conform.\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/gui-part-2/",
	"title": "A gui that is more...awesome",
	"tags": [],
	"description": "",
	"content": "Extend your simple gui with the following behavior:\n When the user loads the page for the first time then there should be two notes already displayed on the screen. Add a button with the text \u0026ldquo;Reveal answer\u0026rdquo;. If the user clicks on this button then ALL the notes (A, A#, B,\u0026hellip;) should be displayed in a div with the id \u0026ldquo;explanation\u0026rdquo;. The currently s4elected notes should be highlighted and the final answer should be displayed on the screen. If the user clicks on the \u0026ldquo;Get random notes\u0026rdquo; button then the \u0026ldquo;explanation\u0026rdquo; div should be emptied. If the user submits the correct answer then the \u0026ldquo;explanation\u0026rdquo; div should be populated as above. The user should be congratulated just like before Keep track of how many correct answers the user gets in a row and display this answer on the screen. This is referred to as a streak. Have some pseudocode:  user accesses gui for first time gui displays: \u0026quot;Streak: 0\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 1\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 2\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 3\u0026quot; user gets wrong answer gui displays: \u0026quot;Streak: 0\u0026quot; \u0026lt;\u0026lt;\u0026lt; the streak is reset to zero because the user got the answer wrong  "
},
{
	"uri": "/tech-department/projects/nodejs/api/",
	"title": "Expose a JSON API",
	"tags": ["node", "api", "express"],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\nInstructions Use Express to expose the following JSON endpoints.\n /addNewVisitor: create a new Visitor in the database /deleteVisitor:id: delete a single Visitor from the database /deleteAllVisitors: delete all Visitors /viewVisitors: view all Visitors /viewVisitor:id: view a single Visitor /updateVisitor:id: Update a single Visitor  Resources   TOPICS: API basics   TOPICS: APIs and Node   "
},
{
	"uri": "/tech-department/projects/nodejs/ajax/",
	"title": "Add a little Ajax",
	"tags": ["node", "ajax"],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\na new static resource Create a new HTML static web page just like the form page you made before. You can even copy-paste your form\u0026rsquo;s html here. Usually copy-pasting pieces of code is a bad idea, this time it\u0026rsquo;s ok.\nServe your new page from the following url: http://localhost:[YOUR_PORT]/single-page-app\nform submissions The submit button should make an AJAX call to the addNewVisitor. It should not redirect the user to any kind of \u0026ldquo;thank you\u0026rdquo; page\nlist existing visitors Create an html table on the same page (on your single page app). Use an ajax call to /viewVisitors to populate the table\ndelete visitors, and update the table Add a \u0026ldquo;delete\u0026rdquo; button to each line of the table. When the user clicks \u0026ldquo;delete\u0026rdquo; then\n make a request to /deleteVisitor:id and delete that visitor update the information displayed in the table  Also make sure that if you create any new visitors then they are visible in the table\nResources   TOPICS: Introduction to Ajax   "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/c-shape/",
	"title": "C shape",
	"tags": [],
	"description": "",
	"content": " C SHAPE Write a function that takes in number as argument and draws the C pattern/shape Input\nlet cPattern(5) =\u0026gt; Expected output:  def cPattern(5):  Input\n***** * * * *****  "
},
{
	"uri": "/tech-department/katas/ceasar-cipher/",
	"title": "Ceasar cipher",
	"tags": [],
	"description": "",
	"content": "What is ceasar cipher?\n Caesar Cipher:\nIs a type of substitution cipher encryption in which each letter in the plaintext is \u0026lsquo;shifted\u0026rsquo; a certain number of places down the alphabet. For example, with a shift of 1, A would be replaced by B, B would become C, and so on. The method is named after Julius Caesar, who apparently used it to communicate with his generals.\n Example\n To pass an encrypted message from one person to another, it is first necessary that both parties have the \u0026lsquo;key\u0026rsquo; for the cipher, so that the sender may encrypt it and the receiver may decrypt it. For the caesar cipher, the key is the number of characters to shift the cipher alphabet.In the example below, text we will encrypt is \u0026lsquo;defend the east wall of the castle\u0026rsquo;, with a shift (key) of 1.\n Input\nplaintext: defend the east wall of the castle  Output\nciphertext: efgfoe uif fbtu xbmm pg uif dbtumf  TASK\n1. write a function that takes in a string and number arguments and shifts each and every alphabet of the given string by/to [n] steps after the character\n//javascript function ceasarCipher(string,n) =\u0026gt;  Input\nceasarCipher(\u0026quot;fmjkbi\u0026quot;,3)  Output\nExpected output =ipmnel   calling function ceasarCipher(\u0026ldquo;fmjkbi\u0026rdquo;,3) must return output like Below\nThe Expected output =ipmnel\nNote Be: notice that every character from given String is shifted to three positions/ steps ahead\n "
},
{
	"uri": "/tech-department/katas/compound-interest/",
	"title": "Compound interest",
	"tags": [],
	"description": "",
	"content": " compound Interest 1. Write a function that calculates compount interest. It should return a number.\nEg if I have R100 in a bank account and I get 1% interest every month, I can see how much money I will have in my account at the end of each month like so:\nTry it with a loop. Try it with recursion.\n// JavaScript function finalAmount(startAmount,interest,iterations){ // clever things } finalAmount(100,0.01,1) // 101.0 finalAmount(100,0.01,2) // 102.01 finalAmount(100,0.01,3) // 103.031 finalAmount(100,0.01,100) // 270.481...  //py compountInterest(principleAmount,interest,iterations): # clever things Expected output: def compountIntere(100,10,1): # 101.0 def compountIntere(100,10,2): # 102.01 def compountIntere(100,10,3): # 103.031 def compountIntere(100,10,100): =\u0026gt; # 270.481...  ADVANCED COMPOUND INTEREST 2. Write a program that will figure out how many iterations are needed to meet a specific target amount. Eg: if I have R100 in a bank account and I get 1% interest every month, how many months do I have to wait before my bank acount contains R200?\nThere are a lot of ways to do this. Some are very inefficient (and easy to code). Some are more efficient (and hard to code). Try the easy way first. MAke it work then make it work well.\n"
},
{
	"uri": "/tech-department/katas/fibonacci-sequence/",
	"title": "Fibonacci sequence",
	"tags": [],
	"description": "",
	"content": "What is fibonacci sequence?\n Fibonacci Sequence: is the series of numbers where the next number is found by adding up the 2 numbers before it.\n TASK\n1. Write a function, fibonacci(n) that takes in a number/int argument (n) and returns the first nth terms of the sequence.\nInput\nfibonacci(12)  Output\nExpected output: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 in this case n = 2:  "
},
{
	"uri": "/tech-department/katas/",
	"title": "Katas",
	"tags": [],
	"description": "",
	"content": "This section just has a bunch of little excersises. For the most part they are language agnostic puzzles that can be used in a bunch of different ways:\n recruits can use them to practice on their own whiteboarding excercises pair programming excercises practicing tdd  Guidelines Make sure you can do this stuff without relying heavily on the built in functions. Eg if the goal is to find the maximum number in the list, using the max function wont teach you a thing. This is about algorithmic thinking. The mental capabilities you will build by doing these excercises are much more important than memorising built in functions. You should end up with skills you can apply to problems in other languages.\nNOTE all the string excercises listed should be adapted to work with arrays as well\n"
},
{
	"uri": "/tech-department/katas/palindrome/",
	"title": "Palindrome",
	"tags": [],
	"description": "",
	"content": " Palindromes Write a function that detects if an inputted string is a palindrome or not. It should return a boolean result.\n// JavaScript isPalindrome(\u0026quot;mom\u0026quot;) // returns true isPalindrome(\u0026quot;Mom\u0026quot;) // returns false isPalindrome(\u0026quot;rats live on no evil star\u0026quot;) // returns true isPalindrome(\u0026quot;rats live on no evil star.\u0026quot;) // returns false  //Py def is_palindrome(\u0026quot;mom\u0026quot;): # returns True def is_palindrome(\u0026quot;Mom\u0026quot;): # returns False def is_palindrome(\u0026quot;rats live on no evil star\u0026quot;): # returns True def is_palindrome(\u0026quot;rats live on no evil star.\u0026quot;): # returns False  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/pyramids/",
	"title": "Pyramids",
	"tags": [],
	"description": "",
	"content": " Pyramids 1. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4.\nInput:\nlet triangle=(n)=\u0026gt;{ //clever things }  def triangle(5):  Output\nexpected output: PYRAMID TRIANGLE. * *** ***** ******* *********  2. Write a function that takes in number as argument and draws a Hollow pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def traingle(n):  Output\nexpected output: HOLLOW RIGHT ANGLE TRIANGLE AND FOR ITS MIRROR. * * * * * * * ***********  3. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def triangle(5):  Output\nexpected output: PYRAMID PATTERN * ** *** **** ***** ****** ******* ****** ***** **** *** ** *  4. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle = (5) =\u0026gt;{//clever things}  def triangle(n):  Output\nexpected output: PYRAMID PATTERN ************* *********** ********* ******* ***** *** *  5. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def triangle(5):  Output\nexpected output: PYRAMID PATTERN * ** *** **** ***** ****** ******* ****** ***** **** *** ** *  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/squares/",
	"title": "Squares",
	"tags": [],
	"description": "",
	"content": " Print (triangles \u0026amp; squares) using loops 1. Write a function that takes in number as argument and prints a square\nInput\nlet square(n) =\u0026gt;  def square(n):  Output\nexpected output: remember to use \u0026quot;*\u0026quot; ##### ##### ##### ##### #####  2 Write a function that takes in number as argument and prints a hollow square in the center\nInput\nlet square(n) =\u0026gt;  def square(n):  Output\nexpected output: remember to use \u0026quot;*\u0026quot; ##### # # # # # # #####  "
},
{
	"uri": "/tech-department/katas/string-reverse/",
	"title": "String reverse",
	"tags": [],
	"description": "",
	"content": " String reverse Make a function that can reverse a string\n//javascript reverse(\u0026quot;hello\u0026quot;) =\u0026gt; // Expected output olleh  //py def reverse(\u0026quot;hello\u0026quot;): # Expected output =\u0026gt; olleh  "
},
{
	"uri": "/tech-department/katas/string-rotate/",
	"title": "String rotate",
	"tags": [],
	"description": "",
	"content": " String rotate forward/backwards Write a function that takes in string argument and n (number) argument and the rotate the given string to nth position\n//javascript rotate(\u0026quot;hello\u0026quot;,1) =\u0026gt; // Expected output: elloh rotate(\u0026quot;hello\u0026quot;,2) =\u0026gt; // Expected output: llohe rotate(\u0026quot;hello\u0026quot;,3) =\u0026gt; // Expected output: lohel rotate(\u0026quot;hello\u0026quot;,-1) =\u0026gt; // Expected output: ohell rotate(\u0026quot;hello\u0026quot;,-2) =\u0026gt; // Expected output: lohel rotate(\u0026quot;hello\u0026quot;,-3) =\u0026gt; // Expected output: llohe  //py def rotate(\u0026quot;hello\u0026quot;,1) # Expected output: elloh def rotate(\u0026quot;hello\u0026quot;,2) # Expected output: llohe def rotate(\u0026quot;hello\u0026quot;,3) # Expected output: lohel def rotate(\u0026quot;hello\u0026quot;,-1): # Expected output: ohell def rotate(\u0026quot;hello\u0026quot;,-2): # Expected output: lohel def rotate(\u0026quot;hello\u0026quot;,-3): # Expected output: llohe  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/triangles/",
	"title": "Triangles",
	"tags": [],
	"description": "",
	"content": " Print (triangles \u0026amp; squares) using loops 1. Write a function that takes in number as argument and draws a right angled triangle using the \u0026ldquo; * \u0026ldquo; characters. If the input is 4, then the output is a traingle with height 4\nInput\nlet triangle(4) =\u0026gt;  def triangle(n):  Output\nexpected output: RIGHT ANGLE TRIANGLE * ** *** ****  2. Write a function that takes in number as argument and draws a reflection/mirror of right angled triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle with height 4\nInput\nlet triangle(5) =\u0026gt;  def triangle(n):  Output\nexpected output: MIRROR OF RIGHT ANGLE TRIANGLE * ** *** ****  3. Write a function that takes in number as argument and draws a Hollow right angled triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle with height 4\n//javascript function triangle(5)  def trianlge(n):  expected output =\u0026gt; HOLLOW RIGHT ANGLE TRIANGLE AND FOR ITS MIRROR. * * * * * * * ******  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/",
	"title": "use loops to print-patterns",
	"tags": [],
	"description": "",
	"content": " Why use loops?  In order to know why we use looping in programming, we will first, be aware that different programming languages have different for loops. In Python, for instance, you can iterate through all the items in a list by writing.\n Loops are used in programming as a test to know if the arguments in a clause are true or false and then determine to do an action that may involve skipping the clause and going to the next one.\n There are many different types of looping. If your loop only needs a test to decide if it should keep looping or not, then a do-while fits that.\n  Different Kinds of Loops Distinct programming Languages such as \u0026ldquo;JavaScript, Python,C,Java \u0026amp; moar\u0026hellip;\u0026rdquo; supports different kinds of loops:\n for - loops through a block of code a number of times.\n for/in - loops through the properties of an object.\n for/of - loops through the values of an iterable object.\n foreach- loops through the iterable object checking its properties/values.\n while - loops through a block of code while a specified condition is true.\n do/while - also loops through a block of code while a specified condition is true\n  "
},
{
	"uri": "/tech-department/department-processes/",
	"title": "Department Processes",
	"tags": [],
	"description": "",
	"content": " In order to make sure our department is as effective, efficient and scalable as possible we need a few ground rules. The documents contained in this section aim to help us do our jobs better. If anything in here gets in the way of progress, if anything starts to smell like useless bureaucracy, then it should be revised or removed.\nThese are living documents. They are up for debate, and will be added to over time.\nA few things to think about  what can we do better? what should we stop doing? what do we value that is not expressed in our priorities and processes? what in this document should change? how can we stimulate better knowledge sharing between cohorts? how can we stimulate better accountability?\n how about live-coding workshops. Having senior team members run those can be very useful, empowering and encouraging junior team members to do them would be very powerful\n how can we best use and educate our strategist recruits who are helping our tech department as a \u0026ldquo;product\u0026rdquo;?\n How can we scale better? Umuzi will grow\n what will the tech department look like if we triple in size? How can we remain effective and keep our signal to noise ratio good? how will we onboard new team members so that they can be effective from day 1? what if we open another Umuzi studio? How do we ensure that the lessons we learn here can be copy-pasted into a new environment? And how will we make sure that lessons learned by staff in those new environments are available to everyone on the team?  how can we do nitty gritty annoying tasks (eg: attendance) better?\n  "
},
{
	"uri": "/tech-department/workshops/interviewing-sucessfully/",
	"title": "Interviewing sucessfully",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/16FMMbvXrrNBOS3RJfG0-CHERvlldaiY7pq_i3cs4S_c\n"
},
{
	"uri": "/tech-department/workshops/intro-to-agile/",
	"title": "Intro to Agile",
	"tags": [],
	"description": "",
	"content": "Project management with Trello (first intro to Agile and Scrum methodologies)\nTODO\n"
},
{
	"uri": "/tech-department/workshops/intro-to-node-and-friends/",
	"title": "Introduction to Node and Friends",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/1dtrsWOWjoA9A9nTmznCkdYz0oRK6O76jXRINp0tzjrQ\n"
},
{
	"uri": "/tech-department/workshops/intro-to-development-tools-and-environment-for-web/",
	"title": "Introduction to development environment for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/nodejs-async-vs-sync/",
	"title": "Node Sync/Async",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/19ppsjmkKAvJcasK_BnjptTUfF4KQwaInDKVkhK1b6vA\n"
},
{
	"uri": "/tech-department/topics/git/version-control-and-scrum/",
	"title": "Version Control &amp; Scrum using Trello &amp; Github",
	"tags": [],
	"description": "",
	"content": " Scrum roles  Team Member Developers, designers, and anyone who\u0026rsquo;s doing that actual production of work. Responsible for working with the Product Owner to break down tasks \u0026amp; reach completion on different ticket items. Scrum Master The facilitator of the scrum process. If this person is doing their job right, the team becomes independent over time. Product Owner The stakeholder for the product. This person is in charge of deciding what the MVP, and different versions of the product look like. They are also responsible for ensuring the backlog is in correct order.  Scrum Meetings Planning  When: At the beginning of the sprint What: The team commits to a set of tickets for the sprint that they think they can complete. Why: Gives a goal to work towards, ensures that there is a select pool of tickets that the team can then have the freedom to choose as they please.  Storytime  When: As needed. 2-3+ sprint\u0026rsquo;s worth of tickets should be in the backlog at all times. What: The team hashes out different story point from the product manager, converting them into tickets that are an appropriate size with unambiguous requirements. Why: So every ticket is clear on what needs to be accomplished.  Review  When: At the end of every sprint What: Team demos all work done for an audience including, but not limited to, stakeholders \u0026amp; team members Why: It\u0026rsquo;s not only nice to show off work, but it ensures that everything is actually working in harmony.  Retro  When: After the end of every sprint What: The team, with the intention of improving the scrum process, covers the following issues together What went well What went poorly What can be done to improve Why: The scrum process should be adaptable to the organization\u0026rsquo;s needs. This also allows all members of the team to participate and own the process.  Standup  When: Every day What: Team answers following questions in order - What did I do to advance the team\u0026rsquo;s goals in the sprint yesterday? - What is impeding me from working on the team\u0026rsquo;s goals for this sprint? All other discussions are tabled for smaller groups afterwards Why: Helps to adapt to problems that come up, and to initiate conversation about different topics.  General issue board procedure Every time you move a ticket from one column to another, you are unassigning yourself. A ticket in the done column is reassigned to the person who did the development work on it. Comment on the tickets as a form of taking notes \u0026amp; passing on explanations from one person to another. Attach all resources to the ticket whether they are points of reference, design documents, etc. Name the tickets so there is no confusion as to what is being accomplished. Add every requirement to the checklist, and be specific. Check off requirements as you finish work on them in development.\nBacklog Items in the backlog represent the conceived work for the team over the next 2-3+ sprints. Before items are able to be moved into the \u0026ldquo;To Do\u0026rdquo; column, they need to be looked over by the team during the \u0026ldquo;Storytime\u0026rdquo; meeting to make sure that the objectives are clear. Various labeling/measuring can take place on these tickets, like adding the feature they\u0026rsquo;re associated with, the estimated work hours to complete the feature, and more.\nTo Do Tickets in to-do are in the queue for the team\u0026rsquo;s current sprint. The team commits to completing a given amount of tickets in the coming sprint during the \u0026ldquo;Planning\u0026rdquo; meeting.\nDeveloping Tickets moved to developing are being actively worked on by the person assigned to them.\nGit Action Before any coding occurs, pull down the latest version from \u0026ldquo;origin/master\u0026rdquo;. Then, after coding is finished, create a new branch with a name corresponding to your ticket. Commit, push to origin, and create a pull request in Github.\nCode Review Tickets in code review are having their associated code (or design) reviewed. A team member will look at the pull request on Github and see that the code is well formed, doesn\u0026rsquo;t have obvious bugs, and accomplishes what it set out to do. If necessary, changes are suggested, and the ticket is sent back to development.\nGit Action If the code passes review, the pull request is approved and the branch is merged into master.\nQuality Assurance Tickets in quality assurance are being checked to make sure the user experiences what the ticket was set out to accomplish. If there\u0026rsquo;s bugs or missing functionality, send it back to development. ####Git Action Pull the merge commit from origin/master for testing.\nDone: Tickets here are done.\n"
},
{
	"uri": "/tech-department/workshops/survey-design/",
	"title": "Survey design",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/agile-scrum/",
	"title": "Agile &amp; Scrum",
	"tags": [],
	"description": "",
	"content": " NCIT Units 114059 \u0026amp; 114051 Definition of Agile: Agile project management is an iterative and incremental approach to delivering requirements throughout the project life cycle. At the core, agile projects should exhibit central values and behaviours of trust, flexibility, empowerment and collaboration.\nRead and watch the below: Read: The Agile Manefesto | Read: The 12 Agile Principles\nWatch: What is Agile?\nDefinition of Scrum Scrum (n): A framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum is:  Lightweight\n Simple to understand\n Difficult to master\n  Scrum is not a process, technique, or definitive method. Rather, it is a framework within which you can employ various processes and techniques.\nThe Scrum framework consists of Scrum Teams and their associated roles, events, artifacts (documents), and rules. Each component within the framework serves a specific purpose and is essential to Scrum’s success and usage.\nThe essence of Scrum is a small team of people. The individual team is highly flexible and adaptive. These strengths continue operating in single, several, many, and networks of teams that develop, release, operate and sustain the work and work products of thousands of people.\nWatch: Introduction to Scrum\nScrum Values When the values of commitment, courage, focus, openness and respect are embodied and lived by the Scrum Team, the Scrum pillars of transparency, inspection, and adaptation come to life and build trust for everyone. The Scrum Team members learn and explore those values as they work with the Scrum events, roles and artifacts.\nSuccessful use of Scrum depends on people becoming more proficient in living these five values. People personally commit to achieving the goals of the Scrum Team. The Scrum Team members have courage to do the right thing and work on tough problems. Everyone focuses on the work of the Sprint and the goals of the Scrum Team. The Scrum Team and its stakeholders agree to be open about all the work and the challenges with performing the work. Scrum Team members respect each other to be capable, independent people.\nWatch: SCRUM: Twice the Work, Half the Time\n"
},
{
	"uri": "/tech-department/topics/apis/basics/",
	"title": "API basics",
	"tags": [],
	"description": "",
	"content": "Please read the following content:\n What is an API What is a RESTful API  You\u0026rsquo;ll also need to know a bit about JSON\n Intro to JSON Using JSON in JavaScript Using JSON in Python  The following tools are useful for manually playing with api:\n curl Postman  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/apis-with-node/",
	"title": "APIs and Node",
	"tags": [],
	"description": "",
	"content": " Build a restful API with node  "
},
{
	"uri": "/tech-department/projects/semitone-challenge/add-redux/",
	"title": "Add Redux to your semitone game",
	"tags": [],
	"description": "",
	"content": "Add redux to your game. Everything to do with updating what is displayed based on your data should be handled using redux.\n"
},
{
	"uri": "/tech-department/projects/tdd/password-checker/part2/",
	"title": "Add logging to password checker",
	"tags": ["logging"],
	"description": "",
	"content": "In part one of this excercise you created two functions. Now you are going to upgrade that program by adding some logging capabilities.\n Whenever passwordIsOk returns true, log the following message  User password is ok  Otherwise:\nUser password is not ok  The log level of these messages should be debug. Make sure that your messages get printed to the standard output / terminal / console.\nTake note, we aren\u0026rsquo;t actually logging the user\u0026rsquo;s password. In general you want to avoid logging sensitive information.\n Whenever an exception is raised by passwordIsValid then log the exact error message.   The log level should be error The log should be printed to the standard output / terminal / console Error logs should also be stored in a file called errors.log Your debug logs SHOULD NOT be inside the error.log file Make sure that you update your .gitignore so that the error.log file is not in your repo  Please take note: All your previous tests should all pass.\n"
},
{
	"uri": "/tech-department/projects/linux/advanced/",
	"title": "Advanced Linux challenges",
	"tags": [],
	"description": "",
	"content": " Task 1 User environment  Use echo to display Hello followed by your username. (use a bash variable!) Create a variable myName with a value containing your full name. Copy the value of $LANG to a new variable called $MyLANG. List all current shell variables. Create a nodejs/python script that fetch all created variable and prints/logs them out  Resources  https://dzone.com/articles/linux-environment-variables https://codeburst.io/how-to-create-shortcut-commands-in-the-terminal-for-your-mac-9e016e25e4d7  Task 2 Bash and basic scripting  Write a bash script that prints Welcome to my world! on the screen Modify the shell script from point (1) to include a variable. The variable will hold this valuee Welcome to my world! Store the output of the command hostname in a variable. Display This script is running on _. where _ is the output of the hostname command. Write a shell script to check to see if the file “file_path” exists. If it does exist, display “file_path passwords are enabled.” Next, check to see if you can write to the file. If you can, display “You have permissions to edit “file_path.””If you cannot, display “You do NOT have permissions to edit “file_path”” Write a shell script that displays man, bear, pig, dog, cat and sheep on the screen with each appearing on a separate line. Try to do this in as few lines as possible. Write a shell script that prompts the user for a name of a file or directory and reports if it is a regular file, a directory, or another type of file. Also perform an ls command against the file or directory with the long listing option. If that doesn\u0026rsquo;t make sense please try these on: ls --help and man ls Modify the previous script to that it accepts the file or directory name as an argument instead of prompting the user to enter it. Write a shell script that displays, This script will exit status 0. Be sure that the script does indeed exit with a 0 exit status. Write a shell script that accepts a file or directory name as an argument. Have the script report if it is reguler file, a directory, or another type of file. If it is a directory, exit with a 1 exit status. If it is some other type of file, exit with a 2 exit status.  Resources  https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php https://www.taniarascia.com/how-to-create-and-use-bash-scripts/  "
},
{
	"uri": "/tech-department/tags/agile/",
	"title": "Agile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/114051/",
	"title": "Agile Meetings",
	"tags": ["agile", "scrum"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/114059/",
	"title": "Agile Project Management",
	"tags": ["agile", "scrum"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/agile-recap/",
	"title": "Agile Recap",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;re just about to go onto your product teams. Well Done You!\nBefore you get cracking with your next Umuzi adventure we need to quickly recap what it means to be agile within the context of a dev team.\n"
},
{
	"uri": "/tech-department/topics/agile-triage/",
	"title": "Agile Triage",
	"tags": [],
	"description": "",
	"content": " From this day forward you\u0026rsquo;ll be expected to spend your workdays behaving like a professional on an agile team. Now we know you aren\u0026rsquo;t an expert in agile just yet so what follows below is a little description of what is expected and why.\nTo start off with, here is a summary of how you should use your board to choose your next action. We\u0026rsquo;ll go into detail on each of these points in the rest of this article.\nSteps to Success  Look at your \u0026ldquo;Review\u0026rdquo; column. Are there any cards in there that need a review from you? If yes, your first task is to review those cards. Try to start with cards that havent had feedback yet. And try get the easy stuff done first. Look at Github. Does anyone need a review on a Pull Request? Do all the reviews anyone has asked you for. Look at your \u0026ldquo;Review Feedback\u0026rdquo; column. Do you have any cards there that need to be fixed up? If yes, start from the top. If you have any PRs and people have given you feedback, your next step is to address that feedback. When addressing your own feedback always try to work on the simplest project first. Look at your \u0026ldquo;In Progress\u0026rdquo; column. As usual, start from the top. Finish all the things before moving on. Look at your Backlog. What would you like to work on next? Move one of the available cards over to your \u0026ldquo;In Progress\u0026rdquo; column  So basically, you should work from right to left. The closer a card is to \u0026ldquo;complete\u0026rdquo; the more important it is. Easy enough.\nBut why??? There are a few reasons for this:\nFirst let\u0026rsquo;s talk about the most obvious one. You are here to become a professional developer, and professional developers need to be able to read code and communicate about code. I mean\u0026hellip;\nvia GIPHY\nIt\u0026rsquo;s actually a huge part of the job. Most of you will end up working on a team of developers and if the team can\u0026rsquo;t communicate about the team\u0026rsquo;s code then the team should probably all go work at MacDonalds or something and communicate about burger flipping instead. Yeah, it\u0026rsquo;s that serious.\nThe second reason is a bit more subtle. And pretty cool in my opinion. It\u0026rsquo;s basically the secret sauce to high functioning teams. Ok ok\u0026hellip; one of the secret sauces, there are a few. And if you take these philosophies and apply them anywhere in your life things will just go better for you.\nAlright, are you ready? A little curious?\nBasically if you have a team of developers working on a thing they generally want success right? I mean, they want a working product. They want to deliver real world solutions. Again, this is obvious. So if you have a team of devs and they are all writing code then that\u0026rsquo;s great and all, but if nothing ever gets completed they aren\u0026rsquo;t creating any value in the world. They might as well be reading Harry Potter fan fiction instead of wasting their client\u0026rsquo;s money.\nTo paraphrase:\nYour code is useless until is is complete. Your team\u0026rsquo;s code is useless until is is complete.\nSo your TOP PRIORITY is to get code to be complete!\nStarting new things can be more fun. But that\u0026rsquo;s just like running on a hamster wheel. Professionals complete their work.\nSo don\u0026rsquo;t be a hamster, ok. You are not here to be adorable!\nvia GIPHY\nThe idea of actually finishing your work instead of just starting a million useless things seems sort of obvious, doesn\u0026rsquo;t it? But it hasn\u0026rsquo;t always been so clear. There is a special flavour of agile called kanban that talks a lot about how wasteful it is to have stuff in progress instead of complete.\nYou can read more about kanban here. Kanban is basically what you\u0026rsquo;ll be doing for the duration of your learning journey.\nBut how do we move cards from \u0026ldquo;Review\u0026rdquo; to \u0026ldquo;Complete\u0026rdquo;?\nGood question young Ravenclaw. The answer is: teamwork.\nYou\u0026rsquo;ll notice that there is an \u0026ldquo;Add review\u0026rdquo; button on certain cards. You can click on that and give your opinion on the project. Basically you can say a project has one of 4 statuses. Whatever you say there cannot be edited and it will be visible to the person you are reviewing as well as staff members. So be careful.\nIf you review a project and say that it is \u0026ldquo;Not Yet Competent\u0026rdquo; or \u0026ldquo;RED FLAG\u0026rdquo; then the card will move backwards to the \u0026ldquo;Review Feedback\u0026rdquo; column so that any problems can be fixed. We\u0026rsquo;ll talk more about that a bit later.\nIf you review a project and say it is \u0026ldquo;Competent\u0026rdquo; or \u0026ldquo;Excellent\u0026rdquo; then the card will actually stay still. If you see a Card in the \u0026ldquo;review\u0026rdquo; column that has already been reviewed by someone else, then add your review as well. In industry every piece of code is generally reviewed by a bunch of people.\nOnce there are enough positive reviews on a Project Card then a staff member will add a review. Now focus:\nTHIS IS A TEST\nIf you give a project a positive review (\u0026ldquo;competent\u0026rdquo; or \u0026ldquo;excellent\u0026rdquo;), and then a staff member gives it a negative review (\u0026ldquo;red flag\u0026rdquo; or \u0026ldquo;not yet competent\u0026rdquo;) then this means one of two things:\n maybe you don\u0026rsquo;t know what competent looks like, maybe you don\u0026rsquo;t have the skills. Or maybe you are not a team player and don\u0026rsquo;t care about giving good feedback to your peers  You will be measured on this stuff! So do a good job!\nIf you feel that you don\u0026rsquo;t yet have the skills to give a review to a project then do what you can to level up before doing the review. Don\u0026rsquo;t make guesses and don\u0026rsquo;t take shortcuts. And on our side we will do our best to only assign you to projects that you should be ready to review.\nGetting code into the Review column We need to get project cards to move into the Review column so that they can be marked as Complete.\nOn the frontend you\u0026rsquo;ll see there is a \u0026ldquo;Request Review\u0026rdquo; button that you can use to put your own cards there. But when should this button be pressed? If you just press it without doing the right things first then you\u0026rsquo;ll just get a \u0026ldquo;Not yet competent\u0026rdquo; or \u0026ldquo;Red flag\u0026rdquo; review and that\u0026rsquo;ll just suck.\nSo the fist thing to do is get your code ready for the final review. Get it to a point where you personally believe that your code is at least competent.\nHow? By following the project instructions of course. But there is another part to it as well.\nWhen working on a professional dev team one generally doesn\u0026rsquo;t commit directly to the master branch. A dev will create a seperate branch, do some work there, and then make a PR (Pull Request). A PR basically asks the question: \u0026ldquo;Will merging my branch into the master branch make the master branch better?\u0026rdquo;. If enough people approve your PR then the answer is yes. Then the code is merged.\nPlease Note if your project code has not been merged into the master branch then putting it into the Review column will just be a waste of time. This is also a test and it will be recorded. Professionals know how to use PRs. If your master branch is empty then you have more work to do.\nIn order to get your code into your master branch you need to get your PR approved so that your code can be merged. If 2 of your peers approve your PR it can get merged.\nThis means that your second highest priority is giving people feedback on their PRs so that stuff can get merged. You will prioritise your peers, and your peers will prioritise you.\nOf course by prioritising FEEDBACK FIRST we help things get closed as fast as possible, but it also helps you to learn as fast as possible! If you make a mistake or get something right then it\u0026rsquo;s good to know where you stand.\nBy always setting up your peers for success, you will be set up for success.\nWhat does good feedback look like? Code review is a tricky thing. Please remember that people have feelings. The first rule of good review is:\nDon\u0026rsquo;t be an A55h0L3!\nSeriously. Be kind to each other. You are all here to grow. And you\u0026rsquo;ll grow by helping each other. Code review can be frustrating and emotionally difficlt for a lot of people. If you ever start feeling annoyed try to be curious instead. It\u0026rsquo;s a weird hack but it works for some people.\nThe second rule is:\nMinimise back and forth\nDo this by reviewing as much of the code as you can. Don\u0026rsquo;t just stop at the first problem, talk about all the problems you see. That way when they ask for another review it will closer to Complete.\nThe third rule of a good review is:\nHelp them to understand!\nYou wont be doing anyone any favors by doing their homework for them. Sometimes cheating the system seems like the easy way out but in the long run it\u0026rsquo;s pretty dumb. Here are some consequences to taking part in cheating:\n Your buddy will just struggle more on their next project Your buddy might just get fired from their very first job Cheating on your work is also of course a serious offence and if anyone gets caught then there are consequences. And it sucks for everyone. So just dont.  If there is someone who is struggling and you feel like they need a staff member to come help them, please reach out. The whole point of this organisation is to help people grow! And that means everytone should understand what they are doing.\nEnough squishy stuff! What else can you tell me? Of course you aren\u0026rsquo;t just here to help others with their work, you are also here to build your own stuff. So resist your inner-hamster - take on one project at a time. Trust your peers to help move your cards to Complete.\nThat\u0026rsquo;s it really.\nExtra reading Our methods are based heavily on Kanban and (weirly enough) lean manufacturing methods. Check this out, it might chnge how you think: Waste in software development\nThen if you want to know about how git really supports teamwork then you can learn about the git feature branching (you\u0026rsquo;ll learn about this later) stratergy.\n"
},
{
	"uri": "/tech-department/workshops/agile-scrum/",
	"title": "Agile and Scrum",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/tags/ajax/",
	"title": "Ajax",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ios-mobile/alerts-notifications-application-life-cycle/",
	"title": "Alerts Notifications and Application Life Cycle",
	"tags": [],
	"description": "",
	"content": " Slides Alerts Notifications and Application Life Cycle (Lecture 15) Video Lectures: Lecture 15: Alerts, Notifications, Application Lifecycle "
},
{
	"uri": "/tech-department/topics/ncit/115365/",
	"title": "Analytics, Surveys, and Reports",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/android/android-application-lifecycles/",
	"title": "Android Application Lifecycle",
	"tags": [],
	"description": "",
	"content": " The Android Application Lifecycle refers to how pages and the app handles navigation and the state of the app.\nThe various states in an App\u0026rsquo;s lifecycle can be utilised to maintain the state of the app you would like to keep whilst also allowing the app to clear non-required pages and data from memory to optimise performance.\nActivity Lifecycle Here is some documentation explaining each stage in the lifecycle and when it is called in an App.\nYou can also view this Video.\nFragment Lifecycle Fragments can be thought of as screens within a screen. A Fragment can take up a portion of the user interface on the screen.\nThese Fragments also have their own lifecycle that should be accounted for. You can read more about that here.\n"
},
{
	"uri": "/tech-department/syllabuses/andriod-kotlin/",
	"title": "Android Development With Kotlin",
	"tags": [],
	"description": "",
	"content": " Part 1  Basic Introduction and Control Flow.  TOPICS: Basic Control Flow   PROJECTS: Linear layout using the Layout Editor   Part 2  Layouts and Data Binding  TOPICS: Grid Layout   TOPICS: Data Binding   TOPICS: Data Classes   PROJECTS: Data Binding Basics   Part 3  Classes and Objects  TOPICS: Sealed Classes   Part 4  Generics, nested and enum classes.  TOPICS: Enum Classes   Part 5  Delegation and delegated properties.  TOPICS: Delegated Properties   "
},
{
	"uri": "/tech-department/topics/android/android-self-learning/",
	"title": "Android learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your Android development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nSome of our favourite Android resources across multiple mediums One of the most powerful mediums in getting started with Android development is online video courses/tutorials. What is extremely important is to code along with the videos. You can always rewind if you feel like you\u0026rsquo;ve missed something.\nUdacity Udacity consists of a wide range of videos spanning multiple programming languages and is free to sign up for. While there are paid courses, the free courses are more than enough to get you started.\nLook out for the following:\nKotlin bootcamp for programmers by Google.\nThe bootcamp might not be Android specific, but will assist with familiarising yourself with Kotlin and will help in getting to know the syntax and structure of the language.\nDeveloping Android apps with Kotlin by Google.\nAdvanced Android with Kotlin by Google.\nMake sure to start off with the simpler bootcamp courses before jumping into the advanced courses. These courses were designed by Google and provide videos along with documentation on each section.\nUdemy Similar to Udacity, Udemy consists of online courses. While most are paid courses, they have regular specials in which a course can be purchased for R100 - R200.\nThe complete Android Kotlin developer course.\nKotlin Android development masterclass.\nAndroid documentation When it comes to all things Android you can find most of what you need on the Android developer website.\nFor more information regarding User Interface design, Tutorialspoint and the Android developer website have some great pages that drill down into the various components and layouts.\nYoutube  Here\u0026rsquo;s a youtube course  "
},
{
	"uri": "/tech-department/topics/android/ui-resources/",
	"title": "Android user interface resources",
	"tags": [],
	"description": "",
	"content": " When creating an Android application, the user experience plays a big role in the way a user experiences the app. These resources are to describe the various elements available for creating an Android apps user interface.\nAndroid UI controls Here is a list of various Android controls that can be used along with descriptions of each and some code samples.\nAndroid UI layouts When developing a screen on an application, the UI elements are placed inside layouts. Layouts are essentially containers for your controls.\nEach layout has it\u0026rsquo;s own characteristics when it comes to placing controls on the screen.\nYou can find information on the various Android layouts here.\nOne of the more newly developed and powerful layouts is a the ConstraintLayout.\nMaterial design Material design refers to the best practices that should be kept in mind when creating the various screens in your application.\nFor more extensive information on the topic, you can find various articles and documentation here.\nUdacity has a great free course on material design named: Material design for Android Developers, created by employees from Google.\nNote: For optimal performance, it is advised to refrain from nesting layouts as much as possible.\n"
},
{
	"uri": "/tech-department/projects/kotlin/",
	"title": "Android with Kotlin Projects",
	"tags": [],
	"description": "",
	"content": " What you should already know You should be familiar with:  The basics of a modern, object-oriented, statically typed programming language such as Java or C#\n How to program with classes, methods, and exception handling in at least one language\n Using an IDE such as IntelliJ IDEA, Android Studio, Eclipse, or Visual Studio\n  "
},
{
	"uri": "/tech-department/topics/kotlin/",
	"title": "Android-Kotlin",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/android/",
	"title": "Androids",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/android/",
	"title": "Androids",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/angular-elements/",
	"title": "Angular Elements",
	"tags": [],
	"description": "",
	"content": "Are you detecting a pattern yet?\nhttps://angular.io/guide/elements\nMmmm offical documentation.\n"
},
{
	"uri": "/tech-department/projects/angular-tutorial/",
	"title": "Angular Tutorial",
	"tags": [],
	"description": "",
	"content": "The official Angular tutorial is great. It\u0026rsquo;ll give you a solid foundation from which to work.\nhttps://angular.io/tutorial\n"
},
{
	"uri": "/tech-department/topics/angular-material/",
	"title": "Angular material",
	"tags": [],
	"description": "",
	"content": "https://material.angular.io/guide/getting-started\n"
},
{
	"uri": "/tech-department/topics/angular-testing/",
	"title": "Angular unit tests",
	"tags": [],
	"description": "",
	"content": "You know the drill\nhttps://angular.io/guide/testing\n"
},
{
	"uri": "/tech-department/projects/oop/animals/",
	"title": "Animals",
	"tags": [],
	"description": "",
	"content": "  PROJECTS: Animals Part 1. OOP basics   PROJECTS: Animals Part 2. Adding Tests   "
},
{
	"uri": "/tech-department/projects/oop/animals/part1/",
	"title": "Animals Part 1. OOP basics",
	"tags": ["oop"],
	"description": "",
	"content": " Project structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main └── java ├── Animal.java \u0026lt;-------- names are important ├── Cat.java \u0026lt;-------- names are important ├── Dog.java \u0026lt;-------- names are important ├── Home.java \u0026lt;-------- names are important └── MainProgram.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions This Challenge should test topics from your OOP knowledge\n Encapsulation Inheritance Polymophism Composition  In this challenge you will create 3 classes\n Super class called Animal Dog and Cat class which both extends Animal class (a dog is an animal and a cat is an animal) Dog and Cat class should only have 1 function, which is their own implementation of the sound() function. This is polymorphism a Home class. But we\u0026rsquo;ll talk about that later\u0026hellip;  // Java ? dog = new Dog() dog.eat() // -\u0026gt; 'Rax eats' dog.sounds() // -\u0026gt; 'Dog barks' ? cat = new Cat() cat.eat() // -\u0026gt; 'Stormy eats' cat.sounds() // -\u0026gt; 'Cat meows'  // Javascript var dog = new Dog(); dog.eat(); // -\u0026gt; 'Rax eat' dog.sounds();// -\u0026gt; 'Dog barks' var cat = new Cat(); cat.eat();// -\u0026gt; 'Stormy eats' cat.sounds();// -\u0026gt; 'Cat meows'  Now let\u0026rsquo;s add composition. Make a new class called Home. Lots of people have dogs and cats in their homes. Home should have a function called adoptPet that takes any Animal as an input. The new pet should be stored in the Home object in an array/list. The Home object should also have a function called makeAllSounds. It should work like this:\n// Java Home home = new Home() ? dog1 = new Dog() ? dog2 = new Dog() ? cat = new Cat() home.makeAllSounds() // this doesn't do anything home.adoptPet(dog1) home.makeAllSounds() // this prints: // Dog barks home.adoptPet(cat) home.makeAllSounds() // this prints: // Dog barks // Cat meows home.adoptPet(dog2) home.makeAllSounds() // this prints: // Dog barks // Cat meows // Dog barks  // Javascript var home = new Home(); var dog1 = new Dog(); var dog2 = new Dog(); var cat = new Cat(); home.makeAllSounds();// this doesn't give/return any result/data home.adoptPet(dog1); home.makeAllSounds(); // this prints : // Dog barks home.adoptPet(cat); home.makeAllSounds(); // this prints : // Dog barks // Cat meows home.adoptPet(dog2); home.makeAllSounds(); // this prints : // Dog barks // Cat meows //Dog barks  Up for a Challenge? This section is not compulsory. If you do this we\u0026rsquo;ll think you\u0026rsquo;re cool.\nAdd some functionality to adoptPet so that an error/exception gets raised if you try to adoptThe same pet twice\neg:\nhome.adoptPet(dog1) // totally ok home.adoptPet(dog1) // not ok at all  "
},
{
	"uri": "/tech-department/projects/oop/animals/part2/",
	"title": "Animals Part 2. Adding Tests",
	"tags": ["unit-testing", "oop"],
	"description": "",
	"content": " In this challenge you will update your current Animals project and add unit tests to the project\nProject structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main | └── java | ├── Animal.java \u0026lt;-------- names are important | ├── Cat.java \u0026lt;-------- names are important | ├── Dog.java \u0026lt;-------- names are important | ├── Home.java \u0026lt;-------- names are important | └── MainProgram.java \u0026lt;-------- names are important └── test └── java ├── CatTest.java \u0026lt;-------- names are important └── DogTest.java \u0026lt;-------- names are important ... other logical things  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions You\u0026rsquo;ll be using JUnit.\n Create a class called AnimalTests Update Animal super class eats() function to return a String, \u0026ldquo;Food\u0026rdquo;. Update Dog class sounds() function to return a String, \u0026ldquo;Bark\u0026rdquo;. Update Cat class sounds() function to return a String, \u0026ldquo;Meow\u0026rdquo;.  // Java Dog dog = new Dog() dog.eats() // -\u0026gt; 'Food' dog.sounds() // -\u0026gt; 'Barks' Cat cat = new Cat() cat.eat() // -\u0026gt; 'Food' cat.sounds() // -\u0026gt; 'Meow'  Now let\u0026rsquo;s add our first JUnit test to our AnimalTests. The class should have the following methods TestDogSound(), TestDogEats(), TestCatSound() and TestCatEats().Each method should have the @Test tag placed above it. The tests should work as follows.\n// Java //Dog Tests Test -\u0026gt; Does dog eat Food should Pass Test -\u0026gt; Does dog eat food should Fail //Cat Tests Cat cat = new Cat(); Test -\u0026gt; Does cat Barkark should Fail Test -\u0026gt; Does cat Meow should Pass Test -\u0026gt; Does cat eat meat should Fail Test -\u0026gt; Does cat eat Food should Pass Test -\u0026gt; Does cat eat food should Fail  Up for a Challenge? This section is not compulsory. If you do this we\u0026rsquo;ll think you\u0026rsquo;re cool.\nAdd some functionality to TestDog() and TestCat() so that the tests aren\u0026rsquo;t case sensitive\neg:\nTest -\u0026gt; Does dog eat Food -\u0026gt; Pass Test -\u0026gt; Does dog eat food -\u0026gt; Pass  "
},
{
	"uri": "/tech-department/topics/kotlin/annotations/",
	"title": "Annotations",
	"tags": [],
	"description": "",
	"content": " Annotation Declaration Annotations are means of attaching metadata to code. To declare an annotation, put the annotation modifier in front of a class: I\nannotation class Fancy  Additional attributes of the annotation can be specified by annotating the annotation class with meta-annotations:\n @Target specifies the possible kinds of elements which can be annotated with the annotation (classes, functions, properties, expressions etc.); @Retention specifies whether the annotation is stored in the compiled class files and whether it\u0026rsquo;s visible through reflection at runtime (by default, both are true); @Repeatable allows using the same annotation on a single element multiple times; @MustBeDocumented specifies that the annotation is part of the public API and should be included in the class or method signature shown in the generated API documentation.   @Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.EXPRESSION) @Retention(AnnotationRetention.SOURCE) @MustBeDocumented annotation class Fancy  Usage @Fancy class Foo { @Fancy fun baz(@Fancy foo: Int): Int { return (@Fancy 1) } }  If you need to annotate the primary constructor of a class, you need to add the constructor keyword to the constructor declaration, and add the annotations before it:\nclass Foo @Inject constructor(dependency: MyDependency) { ... }  You can also annotate property accessors:\nclass Foo { var x: MyDependency? = null @Inject set }  Constructors Annotations may have constructors that take parameters.\nannotation class Special(val why: String) @Special(\u0026quot;example\u0026quot;) class Foo {}  Allowed parameter types are:\n types that correspond to Java primitive types (Int, Long etc.); strings; classes (Foo::class); enums; other annotations; arrays of the types listed above.  Annotation parameters cannot have nullable types, because the JVM does not support storing null as a value of an annotation attribute.\nIf an annotation is used as a parameter of another annotation, its name is not prefixed with the @ character:\nannotation class ReplaceWith(val expression: String) ​ annotation class Deprecated( val message: String, val replaceWith: ReplaceWith = ReplaceWith(\u0026quot;\u0026quot;)) ​ @Deprecated(\u0026quot;This function is deprecated, use === instead\u0026quot;, ReplaceWith(\u0026quot;this === other\u0026quot;))  If you need to specify a class as an argument of an annotation, use a Kotlin class (KClass). The Kotlin compiler will automatically convert it to a Java class, so that the Java code can access the annotations and arguments normally.\nimport kotlin.reflect.KClass ​ annotation class Ann(val arg1: KClass\u0026lt;*\u0026gt;, val arg2: KClass\u0026lt;out Any\u0026gt;) ​ @Ann(String::class, Int::class) class MyClass  Lambdas Annotations can also be used on lambdas. They will be applied to the invoke() method into which the body of the lambda is generated. This is useful for frameworks like Quasar, which uses annotations for concurrency control.\nannotation class Suspendable ​ val f = @Suspendable { Fiber.sleep(10) }  Annotation Use-site Targets When you\u0026rsquo;re annotating a property or a primary constructor parameter, there are multiple Java elements which are generated from the corresponding Kotlin element, and therefore multiple possible locations for the annotation in the generated Java bytecode. To specify how exactly the annotation should be generated, use the following syntax:\nclass Example(@field:Ann val foo, // annotate Java field @get:Ann val bar, // annotate Java getter @param:Ann val quux) // annotate Java constructor parameter  The same syntax can be used to annotate the entire file. To do this, put an annotation with the target file at the top level of a file, before the package directive or before all imports if the file is in the default package:\n@file:JvmName(\u0026quot;Foo\u0026quot;) ​ package org.jetbrains.demo  If you have multiple annotations with the same target, you can avoid repeating the target by adding brackets after the target and putting all the annotations inside the brackets:\nclass Example { @set:[Inject VisibleForTesting] var collaborator: Collaborator }  The full list of supported use-site targets is:\n file; property (annotations with this target are not visible to Java); field; get (property getter); set (property setter); receiver (receiver parameter of an extension function or property); param (constructor parameter); setparam (property setter parameter); delegate (the field storing the delegate instance for a delegated property). To annotate the receiver parameter of an extension function, use the following syntax:  fun @receiver:Fancy String.myExtension() { ... }  If you don\u0026rsquo;t specify a use-site target, the target is chosen according to the @Target annotation of the annotation being used. If there are multiple applicable targets, the first applicable target from the following list is used:\n param; property; field.\nJava Annotations Java annotations are 100% compatible with Kotlin:\n  import org.junit.Test import org.junit.Assert.* import org.junit.Rule import org.junit.rules.* ​ class Tests { // apply @Rule annotation to property getter @get:Rule val tempFolder = TemporaryFolder() ​ @Test fun simple() { val f = tempFolder.newFile() assertEquals(42, getTheAnswer()) } }  Since the order of parameters for an annotation written in Java is not defined, you can\u0026rsquo;t use a regular function call syntax for passing the arguments. Instead, you need to use the named argument syntax:\n// Java public @interface Ann { int intValue(); String stringValue(); }  // Kotlin @Ann(intValue = 1, stringValue = \u0026quot;abc\u0026quot;) class C  Just like in Java, a special case is the value parameter; its value can be specified without an explicit name:\n// Java public @interface AnnWithValue { String value(); }  // Kotlin @AnnWithValue(\u0026quot;abc\u0026quot;) class C Arrays as annotation parameters If the value argument in Java has an array type, it becomes a vararg parameter in Kotlin:  // Java public @interface AnnWithArrayValue { String[] value(); }  // Kotlin @AnnWithArrayValue(\u0026quot;abc\u0026quot;, \u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;) class C  For other arguments that have an array type, you need to use the array literal syntax (since Kotlin 1.2) or arrayOf(\u0026hellip;):\n// Java public @interface AnnWithArrayMethod { String[] names(); }  // Kotlin 1.2+: @AnnWithArrayMethod(names = [\u0026quot;abc\u0026quot;, \u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;]) class C  // Older Kotlin versions: @AnnWithArrayMethod(names = arrayOf(\u0026quot;abc\u0026quot;, \u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;)) class D  Accessing properties of an annotation instance Values of an annotation instance are exposed as properties to Kotlin code:\n// Java public @interface Ann { int value(); }  // Kotlin fun foo(ann: Ann) { val i = ann.value }  "
},
{
	"uri": "/tech-department/tags/apache-airflow/",
	"title": "Apache Airflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/api/",
	"title": "Api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/apis/",
	"title": "Apis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/applied-accessability/",
	"title": "Applied Accessability",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;Applied Accessability\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/applied-visual-design/",
	"title": "Applied Visual Design",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;Applied Visual Design\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/asserive-programming-tricks-for-pandas/",
	"title": "Assertive programming and Pandas",
	"tags": [],
	"description": "",
	"content": "Just talk about some basic things peeps might want to do\n assert that a column only has positive values assert dimensions are ok assert column names are as expected assert that there are no null values assert that there are no duplicate columns and row entries assert that index and target variable columns have correct data type  "
},
{
	"uri": "/tech-department/projects/basic-flow-control-katas-assertive/",
	"title": "Assertive programming kata",
	"tags": [],
	"description": "",
	"content": " These katas are a bit harder than the last bunch. Make use of assertions to help make sure that your code is doing the right thing, and to add readability.\nExercise: Morse code Create two functions:\nlettersToMorseCode morseCodeToLetters  eg:\nlettersToMoreseCode(\u0026quot;Hi there\u0026quot;) // should return // \u0026quot;.... .. / - .... . .-. .\u0026quot;  Include the following assertions in your code:\n assert that the output and input both have the same number of characters represented assert that there are the right number of spaces represented in the output  Make sure that when you do this, your code remains clean and DRY. DRY - it\u0026rsquo;s a thing. Google it.\nResources  https://en.wikipedia.org/wiki/Morse_code https://morsecode.scphillips.com/translator.html  Remarks Admittedly this kata is a little bit contrived. Assertions are great for adding runtime checks to values and adding documentation as code.\nFor a problem like this one, unit tests are more appropriate.\nUp for a challenge? Add unit tests to your code. Leave the asserions in there just so that we can see that you know how to hit the requirements we laid out. But if you have some passing tests as well that would be sweet.\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-0-introduction/",
	"title": "Automate the boring stuff: Chapter 0 – Introduction",
	"tags": [],
	"description": "",
	"content": " This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter0/\nIMPORTANT We follow PEP8 naming conventions. Automate the boaring stuff DOES NOT. All of your projects need to follow this naming convention:\nhttps://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-1-basics/",
	"title": "Automate the boring stuff: Chapter 1 – Python Basics",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter1/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-10-organising-files/",
	"title": "Automate the boring stuff: Chapter 10 – Organizing Files",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter10/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-11-debugging/",
	"title": "Automate the boring stuff: Chapter 11 – Debugging",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter11/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-12-web-scraping/",
	"title": "Automate the boring stuff: Chapter 12 – Web Scraping",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter12/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-13-working-with-excel-spreadsheets/",
	"title": "Automate the boring stuff: Chapter 13 – Working with Excel Spreadsheets",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter13/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-14-working-with-google-spreadsheets/",
	"title": "Automate the boring stuff: Chapter 14 – Working with Google Spreadsheets",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter14/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-15-working-with-pdf-and-word-docs/",
	"title": "Automate the boring stuff: Chapter 15 – Working with PDF and Word docs",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter15/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-16-working-with-csv-and-json-data/",
	"title": "Automate the boring stuff: Chapter 16 – Working with CSV Files and JSON Data",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter16/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-17-time-and-scheduling/",
	"title": "Automate the boring stuff: Chapter 17 – Keeping Time, Scheduling Tasks, and Launching Programs",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter17/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-20-automating-keyboard-and-mouse/",
	"title": "Automate the boring stuff: Chapter 18 – Controlling the Keyboard and Mouse with GUI Automation",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter20/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-19-image-manipulation/",
	"title": "Automate the boring stuff: Chapter 18 – Manipulating Images",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter19/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-18-email-and-text/",
	"title": "Automate the boring stuff: Chapter 18 – Sending Email and Text Messages",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter18/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-2-flow-control/",
	"title": "Automate the boring stuff: Chapter 2 – Flow Control",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter2/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-3-functions/",
	"title": "Automate the boring stuff: Chapter 3 – Functions",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter3/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-4-lists/",
	"title": "Automate the boring stuff: Chapter 4 – Lists",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter4/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-5-dictionaries-and-structuring-data/",
	"title": "Automate the boring stuff: Chapter 5 – Dictionaries and Structuring Data",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter5/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-6-manipulating-strings/",
	"title": "Automate the boring stuff: Chapter 6 – Manipulating Strings",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter6/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-7-pattern-matching-with-regular-expressions/",
	"title": "Automate the boring stuff: Chapter 7 – Pattern Matching with Regular Expressions",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter7/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-8-input-validation/",
	"title": "Automate the boring stuff: Chapter 8 – Input Validation",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter8/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/chapter-9-reading-and-writing-files/",
	"title": "Automate the boring stuff: Chapter 9 – Reading and Writing Files",
	"tags": [],
	"description": "",
	"content": "This is a great book. Lots of amazing coders started out with it. You don\u0026rsquo;t need to read the whole thing, but it is generally very very useful.\nhttps://automatetheboringstuff.com/2e/chapter9/\n"
},
{
	"uri": "/tech-department/topics/python-specific/automate-the-boring-stuff-book/",
	"title": "Automate-the-boring-stuff-books",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/automated-testing-with-pytest/",
	"title": "Automated Testing in Python",
	"tags": [],
	"description": "",
	"content": " There are a many of different test frameworks and test runners that Python allows. The main ones people tend to use are\n unittest pytest  These are both great tools with pros and cons. We have chosen to teach pytest for our course. But don\u0026rsquo;t be scared of different frameworks!\nDifferent testing tools have different ways of achieving similar goals. Make sure you understand why we test, what to test and when to test.\nIf you end up working on a project that uses unnittest instead of pytest then use unittest. Eg: Django projects are traditionally tested using unittest instead of Pytest so there is a bunch of cool Django tooling around that, which is totally fine.\nRead and understand the following:\n https://github.com/shashikumarraja/pytest_tutorial https://automationpanda.com/2017/03/14/python-testing-101-pytest/ Writing Tests Improve your python understanding: Unit testing  And here are the pytest docs. The official documentation is a source of the latest and greatest straight-from-the-horses-mouth knowledge.\nVideos Pytest is the nicest python testing framework currently out there, but there aren\u0026rsquo;t so many videos on it, so here are some videos on unit testing in javascript (but they provide a great explanation of why and how you need to test your code) and unit testing with python\u0026rsquo;s unittest.\n Fun Fun Function: Unit testing in Javascript unittest  Pytest directory structure We will expect your project to follow industry-recognised best practices when you submit them to us.\nTake a look atthis repo. We\u0026rsquo;ll require that you follow this structure when you submit your work.\n"
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/automated-testing-pandas-and-numpy/",
	"title": "Automated Testing pandas and numpy",
	"tags": [],
	"description": "",
	"content": "Testing and data can get a little tricky. Check these out:\nAutomate your data analysis testing (Stephen Childs) https://www.youtube.com/watch?v=ovvU41ve1FQ\nhttps://penandpants.com/2014/10/07/testing-with-numpy-and-pandas/\nDatacamp course covering the use of Unit tests in Python for Data Science https://www.datacamp.com/courses/unit-testing-for-data-science-in-python\n"
},
{
	"uri": "/tech-department/projects/oop/bank_accounts/",
	"title": "Bank Accounts",
	"tags": [],
	"description": "",
	"content": " As usual: TDD please\npart 1: Bank Account A Bank Account has a balance, an interest rate and a monthly fee.\nFor example if a person has an interest rate of 12% (which is totally unrealistic but make the numbers easier) and they have R1000 in their bank account then they will receive (R1000 x 12% / 12) after one month of saving. That means they earned R10 in interest. Now if their monthly fee on that account is R50 then their final balance after 1 month is R1000+R10-R50 = R960.\n Create a class called BankAccount. it should be constructed with the necessary parameters described above. add a function to your bank account class called finishMonth(js) or finish_month(python). This function should update the balance accordingly The balance of a bank account can also change if a deposit or withdrawal is made. Create a function called deposit and another one called withdraw  part 2: Bank Create a class called Bank. A Bank contains many bank accounts. A bank associates each bank account with a 10 digit number known as a bank account number. In OOP, this is called encapsulation.\nCreate the following functions on your Bank class:\nJavaScript:\n withdraw(bankAccountNumber,amount) deposit(bankAccountNumber,amount) transfer(fromBankAccountNumber,toBankAccountNumber, amount)  Python:\n withdraw(bank_account_number,amount) deposit(bank_account_number,amount) transfer(from_bank_account_number,to_bank_account_number, amount)  Part 3: Customers This part is a little bit advanced. Stop and think before you write any code. Have a plan. Maybe even draw a picture of your plan\nCreate a class called Customer. A customer can be associated with multiple bank accounts. Each customer also has a secret password. The customer should be able to update their password through use of a setPassword(js) or set_password(python) function.\nWhenever money is taken out of a bank account then the relevent customer\u0026rsquo;s secret password must be checked. You don\u0026rsquo;t need a special password when depositing money.\nUpdate your Bank functions to be like this:\nJavaScript:\n withdraw(bankAccountNumber,amount,secretPassword) deposit(bankAccountNumber,amount) transfer(fromBankAccountNumber,toBankAccountNumber,amount,secretPassword)  Python:\n withdraw(bank_account_number,amount,secret_password) deposit(bank_account_number,amount) transfer(from_bank_account_number,to_bank_account_number,amount,secret_password)  If a password is required and the wrong one is provided then raise an error that says wrong password.\nFor now just keep it simple. Just store Customer\u0026rsquo;s passwords in plain text in a variable on the appropriate object. Of course in real life, password managment and storage is kinda tricky. Here\u0026rsquo;s a nice article from Mozilla that will give you some background on how to do it the right way.\n"
},
{
	"uri": "/tech-department/tags/bash/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/bootcamp/bash-for-bootcamp/",
	"title": "Bash for bootcamp",
	"tags": [],
	"description": "",
	"content": "In order to interact properly with Git, you\u0026rsquo;ll need to know a little bit about \u0026ldquo;the command line\u0026rdquo;.\nThe first step is to open the command line or terminal on your device:\n If you are running Android, then open your termux app If you are running Windows, then  open your git shell OR using linux subsystem for windows, just open your linux terminal  If you are using mac or linux, jkust open your terminal  If this is the first time you\u0026rsquo;ve ever opened such a program, DONT PANIC! You\u0026rsquo;ll get used to this thing.\nNow you\u0026rsquo;ll need to learn a few basic commands to get by:\nhttp://korflab.ucdavis.edu/bootcamp.html\nMake sure you understand everything up to step 14.\nLater on, if you get into Umuzi, you\u0026rsquo;ll be expected to know all that stuff. But for the bootcamp, just the basics are ok.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/basic-algorithmic-scripting/",
	"title": "Basic Algorithm Scripting",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Basic Algorithm Scripting \u0026ldquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/basic-css/",
	"title": "Basic CSS",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;Basic CSS\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/kotlin/basic-control-flow/",
	"title": "Basic Control Flow",
	"tags": [],
	"description": "",
	"content": " \u0026ldquo;If\u0026rdquo; Expression In Kotlin, \u0026ldquo;if\u0026rdquo; is an expression, i.e. it returns a value. Therefore there is no ternary operator (condition ? then : else), because ordinary if works fine in this role.\n// Traditional usage var max = a if (a \\\u0026amp;lt; b) max = b // With else var max: Int if (a \u0026gt;; b) { max = a } else { max = b } // As expression val max = if (a \u0026gt; b) a else b  \u0026ldquo;if\u0026rdquo; branches can be blocks, and the last expression is the value of a block:\n val max = if (a \u0026gt; b) { print(\u0026quot;Choose a\u0026quot;) a } else { print(\u0026quot;Choose b\u0026quot;) b }  If you\u0026rsquo;re using \u0026ldquo;if\u0026rdquo; as an expression rather than a statement (for example, returning its value or assigning it to a variable), the expression is required to have an else branch.\nWhen Expression when replaces the switch operator of C-like languages. In the simplest form it looks like this\nwhen (x) { 1 -\u0026gt; print(\u0026quot;x == 1\u0026quot;) 2 -\u0026gt; print(\u0026quot;x == 2\u0026quot;) else -\u0026gt; { // Note the block print(\u0026quot;x is neither 1 nor 2\u0026quot;) } }  when matches its argument against all branches sequentially until some branch condition is satisfied. when can be used either as an expression or as a statement. If it is used as an expression, the value of the satisfied branch becomes the value of the overall expression. If it is used as a statement, the values of individual branches are ignored. (Just like with if, each branch can be a block, and its value is the value of the last expression in the block.)\nThe else branch is evaluated if none of the other branch conditions are satisfied. If when is used as an expression, the else branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions.\nIf many cases should be handled in the same way, the branch conditions may be combined with a comma:\nwhen (x) { 0, 1 -\u0026gt; print(\u0026quot;x == 0 or x == 1\u0026quot;) else -\u0026gt; print(\u0026quot;otherwise\u0026quot;) }  We can use arbitrary expressions (not only constants) as branch conditions\nwhen (x) { arseInt(s) -\u0026gt; print(\u0026quot;s encodes x\u0026quot;) else -\u0026gt; print(\u0026quot;s does not encode x\u0026quot;) }  We can also check a value for being in or !in a range or a collection:\nwhen (x) { in 1..10 -\u0026gt; print(\u0026quot;x is in the range\u0026quot;) in validNumbers -\u0026gt; print(\u0026quot;x is valid\u0026quot;) !in 10..20 -\u0026gt; print(\u0026quot;x is outside the range\u0026quot;) else -\u0026gt; print(\u0026quot;none of the above\u0026quot;) }  Another possibility is to check that a value is or !is of a particular type. Note that, due to smart casts, you can access the methods and properties of the type without any extra checks.\nfun hasPrefix(x: Any) = when(x) { is String -\u0026gt; x.startsWith(\u0026quot;prefix\u0026quot;) else -\u0026gt; false }  when can also be used as a replacement for an if-else if chain. If no argument is supplied, the branch conditions are simply boolean expressions, and a branch is executed when its condition is true:\nwhen { x.isOdd() -\u0026gt; print(\u0026quot;x is odd\u0026quot;) x.isEven() -\u0026gt; print(\u0026quot;x is even\u0026quot;) else -\u0026gt; print(\u0026quot;x is funny\u0026quot;) }  For Loops for loop iterates through anything that provides an iterator. The syntax is as follows: for (item in collection) print(item) The body can be a block. for (item: Int in ints) { // ... }  As mentioned before, for iterates through anything that provides an iterator, i.e.\nhas a member- or extension-function iterator(), whose return type\nhas a member- or extension-function next(), and\nhas a member- or extension-function hasNext() that returns Boolean.\nAll of these three functions need to be marked as operator.\nA for loop over an array compiled to an index-based loop that does not create an iterator object.\nIf you want to iterate through an array or a list with an index, you can do it this way:\nfor (i in array.indices) { print(array[i]) }  Note that this \u0026quot;iteration through a range\u0026quot; is compiled down to optimal implementation with no extra objects created.\nAlternatively, you can use the withIndex library function:\nfor ((index, value) in array.withIndex()) { println(\u0026quot;the element at $index is $value\u0026quot;) }  While Loops while and do..while work as usual\nwhile (x \u0026gt; 0) { x-- } do { val y = retrieveData() } while (y != null) // y is visible here!  Break and continue in loops Kotlin supports traditional break and continue operators in loops.\nReturns and Jumps Kotlin has three structural jump expressions:\nreturn. By default returns from the nearest enclosing function or anonymous function. break. Terminates the nearest enclosing loop. continue. Proceeds to the next step of the nearest enclosing loop. All of these expressions can be used as part of larger expressions:\nval s = person.name ?: return  The type of these expressions is the Nothing type.\nBreak and Continue Labels Any expression in Kotlin may be marked with a label. Labels have the form of an identifier followed by the @ sign, for example: abc@, fooBar@ are valid labels. To label an expression, we just put a label in front of it\nloop@ for (i in 1..100) { // ... }  Now, we can qualify a break or a continue with a label:\nloop@ for (i in 1..100) { for (j in 1..100) { if (...) break@loop } }  A break qualified with a label jumps to the execution point right after the loop marked with that label. A continue proceeds to the next iteration of that loop.\nReturn at Labels With function literals, local functions and object expression, functions can be nested in Kotlin. Qualified returns allow us to return from an outer function. The most important use case is returning from a lambda expression. Recall that when we write this:\nfun foo() { ints.forEach { if (it == 0) return print(it) } }  The return-expression returns from the nearest enclosing function, i.e. foo. (Note that such non-local returns are supported only for lambda expressions passed to inline functions.) If we need to return from a lambda expression, we have to label it and qualify the return:\nfun foo() { ints.forEach lit@ { if (it == 0) return@lit print(it) } }  Now, it returns only from the lambda expression. Oftentimes it is more convenient to use implicits labels: such a label has the same name as the function to which the lambda is passed.\nfun foo() { ints.forEach { if (it == 0) return@forEach print(it) } }  Alternatively, we can replace the lambda expression with an anonymous function. A return statement in an anomymous function will return from the anonymous function itself.\nfun foo() { ints.forEach(fun(value: Int) { if (value == 0) return print(value) }) }  When returning a value, the parser gives preference to the qualified return, i.e.\nreturn@a 1 means \u0026ldquo;return 1 at label @a\u0026rdquo; and not \u0026ldquo;return a labeled expression (@a 1)\u0026rdquo;.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/basic-data-structures/",
	"title": "Basic Data Structures",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Basic Data Structures \u0026ldquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/basic-html-and-html-5/",
	"title": "Basic HTML and HTM5",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;Basic HTML and HTM5\u0026rdquo;\n"
},
{
	"uri": "/tech-department/workshops/python-specific/basic-intro-to-oop/",
	"title": "Basic Intro to OOP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/basic-javascript/",
	"title": "Basic Javascript",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Basic JavaScript\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/kotlin/basic-syntax-types/",
	"title": "Basic Syntax &amp; Types",
	"tags": [],
	"description": "",
	"content": " var us val:  val and var both are used to declare a variable. var is like general variable and it\u0026#39;s known as a mutable variable in Kotlin and can be assigned multiple times. val is like Final variable and it\u0026#39;s known as immutable in Kotlin and can be initialized only single time., after it become read only. The IllegalAccessorError will occur when you try to reassign the value. You can enforce a type called strongtyping. This is the opposite of statically typed.  Syntaxt : var book:String = \u0026quot;Maths\u0026quot; // This should only be used when necessary.\nNumbers:  Kotlin handles numbers in a way close to Java, but not exactly the same. Kotlin provides the following built in types representing numbers (this is close to Java):     Type Bit Width     Double 64   Float 32   Long 64   Int(Default data type in Kotlin) 32   Short 16   Byte 8    Characters:  Note that characters are not numbers in Kotlin. Characters are represented by the type Char. They cannot be treated directly as number. In Java they are stored as numbers internally.  https://www.youtube.com/watch?v=LBQrD2nkKQg   Fun check(c: Char){ If (c == 1) { // Error : incomaptable types will occur } }  Booleans: The type Boolean represents booleans, has a true or false value.\nArrays:\nArrays in Kotlin are represented by the array class, that has get and set functions (that turn into [] by operator overloading conventions), and size property, along with a few other useful member functions:\nClass Array private constructor() { val size: int operator fun get (index : Int) T operator fun set(index : Int, value: T ) : Unit }  Strings Strings represented by the type String. Strings are immutable.\nThey are immutable in nature.\nShould be written in double quotes.\nElements of a string are characters that can be accessed by the indexing operation:\ns[I] A string can be iterated over with a for loop: for (c in str){ prinln(c) }  Defining packages Package specification should be at the top of the source file:\npackage my.demo import java.util.* // ...  It is not required to match directories and packages: source files can be placed arbitrarily in the file system.\nDefining functions Function having two Int parameters with Int return type:\n//sampleStart fun sum(a: Int, b: Int): Int { return a + b } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { print(\u0026quot;sum of 3 and 5 is \u0026quot;) println(sum(3, 5)) }  Function with an expression body and inferred return type:\n//sampleStart fun sum(a: Int, b: Int) = a + b //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026quot;sum of 19 and 23 is ${sum(19, 23)}\u0026quot;) }  Function returning no meaningful value:\n//sampleStart fun printSum(a: Int, b: Int): Unit { println(\u0026quot;sum of $a and $b is ${a + b}\u0026quot;) } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { printSum(-1, 8) }  Unit return type can be omitted:\n//sampleStart fun printSum(a: Int, b: Int) { println(\u0026quot;sum of $a and $b is ${a + b}\u0026quot;) } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { printSum(-1, 8) }  Defining local variables Assign-once (read-only) local variable:\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val a: Int = 1 // immediate assignment val b = 2 // `Int` type is inferred val c: Int // Type required when no initializer is provided c = 3 // deferred assignment //sampleEnd println(\u0026quot;a = $a, b = $b, c = $c\u0026quot;) }  Mutable variable:\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart var x = 5 // `Int` type is inferred x += 1 //sampleEnd println(\u0026quot;x = $x\u0026quot;) }  Comments Just like Java and JavaScript, Kotlin supports end-of-line and block comments.\n// This is an end-of-line comment /* This is a block comment on multiple lines. */  Unlike Java, block comments in Kotlin can be nested.\nUsing string templates fun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart var a = 1 // simple name in template: val s1 = \u0026quot;a is $a\u0026quot; a = 2 // arbitrary expression in template: val s2 = \u0026quot;${s1.replace(\u0026quot;is\u0026quot;, \u0026quot;was\u0026quot;)}, but now is $a\u0026quot; //sampleEnd println(s2) }  Using conditional expressions //sampleStart fun maxOf(a: Int, b: Int): Int { if (a \u0026gt; b) { return a } else { return b } } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026quot;max of 0 and 42 is ${maxOf(0, 42)}\u0026quot;) }  Using if as an expression:\n//sampleStart fun maxOf(a: Int, b: Int) = if (a \u0026gt; b) a else b //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026quot;max of 0 and 42 is ${maxOf(0, 42)}\u0026quot;) }  Using nullable values and checking for null A reference must be explicitly marked as nullable when null value is possible.\nReturn null if str does not hold an integer:\nfun parseInt(str: String): Int? { // ... } Use a function returning nullable value: fun parseInt(str: String): Int? { return str.toIntOrNull() } //sampleStart fun printProduct(arg1: String, arg2: String) { val x = parseInt(arg1) val y = parseInt(arg2) // Using `x * y` yields error because they may hold nulls. if (x != null \u0026amp;\u0026amp; y != null) { // x and y are automatically cast to non-nullable after null check println(x * y) } else { println(\u0026quot;either '$arg1' or '$arg2' is not a number\u0026quot;) } } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { printProduct(\u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;) printProduct(\u0026quot;a\u0026quot;, \u0026quot;7\u0026quot;) printProduct(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;) }  or\nfun parseInt(str: String): Int? { return str.toIntOrNull() } fun printProduct(arg1: String, arg2: String) { val x = parseInt(arg1) val y = parseInt(arg2) //sampleStart // ... if (x == null) { println(\u0026quot;Wrong number format in arg1: '${arg1}'\u0026quot;) return } if (y == null) { println(\u0026quot;Wrong number format in arg2: '${arg2}'\u0026quot;) return } // x and y are automatically cast to non-nullable after null check println(x * y) //sampleEnd } fun main(args: Array\u0026lt;String\u0026gt;) { printProduct(\u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;) printProduct(\u0026quot;a\u0026quot;, \u0026quot;7\u0026quot;) printProduct(\u0026quot;99\u0026quot;, \u0026quot;b\u0026quot;) }  Using type checks and automatic casts The is operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there\u0026rsquo;s no need to cast it explicitly:\n//sampleStart fun getStringLength(obj: Any): Int? { if (obj is String) { // `obj` is automatically cast to `String` in this branch return obj.length } // `obj` is still of type `Any` outside of the type-checked branch return null } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { fun printLength(obj: Any) { println(\u0026quot;'$obj' string length is ${getStringLength(obj) ?: \u0026quot;... err, not a string\u0026quot;} \u0026quot;) } printLength(\u0026quot;Incomprehensibilities\u0026quot;) printLength(1000) printLength(listOf(Any())) }  or\n//sampleStart fun getStringLength(obj: Any): Int? { if (obj !is String) return null // `obj` is automatically cast to `String` in this branch return obj.length } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { fun printLength(obj: Any) { println(\u0026quot;'$obj' string length is ${getStringLength(obj) ?: \u0026quot;... err, not a string\u0026quot;} \u0026quot;) } printLength(\u0026quot;Incomprehensibilities\u0026quot;) printLength(1000) printLength(listOf(Any())) }  or even\n//sampleStart fun getStringLength(obj: Any): Int? { // `obj` is automatically cast to `String` on the right-hand side of `\u0026amp;\u0026amp;` if (obj is String \u0026amp;\u0026amp; obj.length \u0026gt; 0) { return obj.length } return null } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { fun printLength(obj: Any) { println(\u0026quot;'$obj' string length is ${getStringLength(obj) ?: \u0026quot;... err, is empty or not a string at all\u0026quot;} \u0026quot;) } printLength(\u0026quot;Incomprehensibilities\u0026quot;) printLength(\u0026quot;\u0026quot;) printLength(1000) }  Using a for loop fun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val items = listOf(\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;kiwi\u0026quot;) for (item in items) { println(item) } //sampleEnd }  or\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val items = listOf(\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;kiwi\u0026quot;) for (index in items.indices) { println(\u0026quot;item at $index is ${items[index]}\u0026quot;) } //sampleEnd }  Using a while loop fun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val items = listOf(\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;kiwi\u0026quot;) var index = 0 while (index \u0026lt; items.size) { println(\u0026quot;item at $index is ${items[index]}\u0026quot;) index++ } //sampleEnd }  Using when expression //sampleStart fun describe(obj: Any): String = when (obj) { 1 -\u0026gt; \u0026quot;One\u0026quot; \u0026quot;Hello\u0026quot; -\u0026gt; \u0026quot;Greeting\u0026quot; is Long -\u0026gt; \u0026quot;Long\u0026quot; !is String -\u0026gt; \u0026quot;Not a string\u0026quot; else -\u0026gt; \u0026quot;Unknown\u0026quot; } //sampleEnd fun main(args: Array\u0026lt;String\u0026gt;) { println(describe(1)) println(describe(\u0026quot;Hello\u0026quot;)) println(describe(1000L)) println(describe(2)) println(describe(\u0026quot;other\u0026quot;)) }  Using ranges Check if a number is within a range using in operator:\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val x = 10 val y = 9 if (x in 1..y+1) { println(\u0026quot;fits in range\u0026quot;) } //sampleEnd }  Check if a number is out of range:\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart val list = listOf(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;) if (-1 !in 0..list.lastIndex) { println(\u0026quot;-1 is out of range\u0026quot;) } if (list.size !in list.indices) { println(\u0026quot;list size is out of valid list indices range too\u0026quot;) } //sampleEnd }  Iterating over a range:\nfun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart for (x in 1..5) { print(x) } //sampleEnd } or over a progression: fun main(args: Array\u0026lt;String\u0026gt;) { //sampleStart for (x in 1..10 step 2) { print(x) } for (x in 9 downTo 0 step 3) { print(x) } //sampleEnd }  Using collections Iterating over a collection:\nfun main(args: Array\u0026lt;String\u0026gt;) { val items = listOf(\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;kiwi\u0026quot;) //sampleStart for (item in items) { println(item) } //sampleEnd }  Checking if a collection contains an object using in operator:\nfun main(args: Array\u0026lt;String\u0026gt;) { val items = setOf(\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;kiwi\u0026quot;) //sampleStart when { \u0026quot;orange\u0026quot; in items -\u0026gt; println(\u0026quot;juicy\u0026quot;) \u0026quot;apple\u0026quot; in items -\u0026gt; println(\u0026quot;apple is fine too\u0026quot;) } //sampleEnd }  Using lambda expressions to filter and map collections:\nfun main(args: Array\u0026lt;String\u0026gt;) { val fruits = listOf(\u0026quot;banana\u0026quot;, \u0026quot;avocado\u0026quot;, \u0026quot;apple\u0026quot;, \u0026quot;kiwi\u0026quot;) //sampleStart fruits .filter { it.startsWith(\u0026quot;a\u0026quot;) } .sortedBy { it } .map { it.toUpperCase() } .forEach { println(it) } //sampleEnd }  "
},
{
	"uri": "/tech-department/workshops/java-specific/basic-intro-to-oop/",
	"title": "Basic intro to oop with IntelliJ",
	"tags": [],
	"description": "",
	"content": "This is a live coding workshop. To pull it off you need a computer with intelliJ installed. Ideally you should have already started a gradle project before the workshop begins because it takes a little bit of time.\nThe following class hierarchy is useful for explaining this stuff:\n base class Car  constructor takes a colour position starts at 0 drive function increments position  Bakkie inherits from Car RaceCar inherits from Car  these are faster thn bakkies default colour   Cover the following topics:\n Java requires all executable code to be wtrapped in a class Difference between classes and objects How to instantite different objects, make 2 cars with different colours, chow that their attributes are independent Inheritance and overrides  Also be sure to cover clean coding best practices, there is a lot of kak on the internet\n Flat is better than nested readability counts reusability counts dont put your main method inside a class that you intend to instantiate dont put Bakkie inside the Car or RaceCar class. It gets its own file use sensible names. names matter  "
},
{
	"uri": "/tech-department/workshops/redux_intro/",
	"title": "Basic introduction to Redux",
	"tags": [],
	"description": "",
	"content": " Redux is  marketed as a state managment tool. It can be used to manage state an a whole lot more usually used with React or other frontend web framework concepts are similar to the Command Pattern. This is an OOP design pattern that unlocks a lot of stuff beyond simple state managment  Resources The basics:\n This tutorial is really good: https://redux.js.org/basics/basic-tutorial This logger middleware helps: https://github.com/LogRocket/redux-logger  If you want to start using redux with asyncronous code (eg ajax requests) then you\u0026rsquo;ll need to use another tool:\n for simple stuff: https://github.com/reduxjs/redux-thunk for complicated side-effect models something like this is probably better: https://github.com/redux-saga/redux-saga  Concepts There are a few concepts that are super important\nStore Lets say you are making a TODO application. This application has a beautiful frontend that automatically renders your todo items from a datastructure. Something like this:\nconst store = { todos : [ {title: \u0026quot;get groceries\u0026quot;, done: false}, {title: \u0026quot;call mom\u0026quot;, done: true}, {title: \u0026quot;learn Redux\u0026quot;, done: false}, {title: \u0026quot;walk dog\u0026quot;, done: false}, ] }  In redux, the store is immutable. We\u0026rsquo;ll see what that implies when we talk about reducers a little later.\nTools like React make it easy to take an application state and turn it into widgets but we wont get into that just yet. You can do this with pure vanilla JavaScript by looping over our todos and simply appending DOM elements.\nAction An action is also a JSON object. Here are some examples:\n{type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;} {type: \u0026quot;DELETE_TODO\u0026quot;, index: 2} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: true} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: false}  Given the example \u0026ldquo;store\u0026rdquo; we set up above can you see what effects these actions should have? What does it look like we are trying to do here?\nNow there is some weird language around this. If you want Redux to execute an action then you dispatch the action. Then Redux should update the store through use of a reducer (we\u0026rsquo;ll get to those soon).\nSo if we wanted Redux to actually add a thing to our todo list we would do something like:\ndispatch({type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;})  This is kinda a pain to write out so usually instead of doing thigs like this we make use of action creators. Eg:\nconst ADD_TODO = \u0026quot;ADD_TODO\u0026quot; function addTodo(title){ //action creator // validation maybe return {type: ADD_TODO, title: title} } dispatch(addTodo(\u0026quot;learn redux\u0026quot;))  Reducer Reducers are the things that execute actions on the state. Here is an example following from the above:\nconst initialState = { // note the use of const. This is immutable todos : [1,2,3], stuff : \u0026quot;things\u0026quot; } function theReducer(state = initialState, action){ // {type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;} switch(action.type){ case ADD_TODO: return { ...state, // we copy all the things using some ES6 syntax todos: [...state.todos, {title: action.title, done:false }] } // { // todos : [1,2,3,{type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;}], // stuff : \u0026quot;things\u0026quot; //} case DELETE_TODO: return { stuff } case SET_DONE: return { otherStuff } default: // nothing changes return state } }  A helloworld example We are using ES6 syntax\nBut what about KISS? KISS == Keep It Simple, Stupid\nThis does seem like a complicated way to do a simple thing\u0026hellip; Think about this:\n actions are objects. That means we can store them and track them in different ways. actions are executed in specific ways and have predictable results the hard \u0026ldquo;thinking\u0026rdquo; of your application is all held in reducers so that makes testing easy and consistent we have a history of every hange made to the state of an application  Look up the \u0026ldquo;Command Pattern\u0026rdquo; . Redux isn\u0026rsquo;t exactly the same but very similar. Therefore there are similar applications.\n Frontend development: different buttons, inputsand widgets dispatch different actions in a predictable way Actions can be grouped. Meaning we can dispatch one action that dispatches a whole lot of different actions Macro recording. We can record the actions a user takes so that we can replay them later Reducers can be in a seperate code-base. we can send actions over a network and dispatch them elsewhere, we can send the same action to multiple computers to allow parallel processing undo/redo functionality becomes trivial feedback: if a number of actions need to be completed in order to complete a large task then we can track the completion of those actions and update a progress bar Actions can be added to a task queue instead of being dispatched immediately transactional behavior: you can have an action like {type: TRANSACTION_BEGIN} and then at some later stage {type: TRANSACTION_ROLLBACK} can be used to undo all the changes that happened in the transaction  Industry Redux is mostly used in the context of React. It is used for frontend development. But there is so much more it could do.\n"
},
{
	"uri": "/tech-department/projects/linux/beginner/",
	"title": "Beginner Linux challenges",
	"tags": ["bash"],
	"description": "",
	"content": " Submission guidelines While you work through this project you will save your script commands in a number of files called shell scripts, name them by task and sub task number i.e. 1-2, they have the extension .sh. You\u0026rsquo;ll be handing those in later. In general we use a tool called Git and a platform called Github for project submissions but this will be covered later in the course.\nTask 1 : Basic Task Open a linux terminal. Now do the following from the command line.\n type in ls and press enter. What do you see? What does this mean? type in pwd and press enter. What do you see? What does this mean? Make a new directory called workspace then cd into your new directory type in ls and press enter. What do you see? What does this mean? Make a new file called README.md (you can use the touch command to do this) Make a copy of README.md, name your copy CHANGELOG.md  Resources  Linux basic commands  Task 2 : Absolute and Relative Paths Create an empty file named exercise.md and move this file to the /tmp directory, using a relative pathname. Then, delete this file using an absolute pathname.\nResources  Paths in linux Absolute and Relative Paths (video)  Task 3 : cat commands  Create 3 files namely umuzi.md, recruits.md and cohort.md. Fill all 3 files with contents of your choice. Maybe some nice poems about you MUB experience. Write a script that concatenates the content of umuzi.md, recruit.md, cohort.md and displays the result on the screen. Write a script that takes the content of umuzi.md, cohort.md and recruits.md to print/store the output into a new file named summary.md. use the command line to append the words \u0026ldquo;The End\u0026rdquo; to summary.md. Be careful not to overwrite the exiting contend  Resources  Standard File Streams (video) The cat commands  Task 7 Text editor  Using nano text editor create a file named my_bio.md Save the file and close the editor Create a folder named my_files and move my_bio.md within.  Resources  https://www.lifewire.com/beginners-guide-to-nano-editor-3859002  Task 8 Update and Upgrade  Update your system with sudo apt update. Use the sudo apt upgrade to apply the updates downloaded and select Y for Yes. When installing a package you use sudo apt install package_name. Install a specific package called tree; using sudo apt install tree. You might ask what is sudo? Sudo allows you to run programs with the security privileges of another user, it is also referred to as a superuser. It is often used to install, start and stop applications that require root priviledges. dpkg is a tool to install, build remove and manage Debian Packages. This is how you use dpkg, we will install VS Code in this example. Firstly download VS Code VS Code Download then open your terminal in the current folder of the item you just downloaded, type in sudo dpkg -i filename.deb, you will then enter your password and the package will install.  Resources  https://www.youtube.com/watch?v=o2JyzCH8tlM  "
},
{
	"uri": "/tech-department/workshops/big-picture-web-dev/",
	"title": "Big Picture of Web Dev",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/bootcamp-writing-assignment/",
	"title": "Bootcamp Writing Assignment",
	"tags": [],
	"description": "",
	"content": " We would like to get to know you better. In this assignment you are going to create a text file with essays on the below questions, please keep each essay between 150 and 200 words.\n Your personal history, where you come from, feel free to include some interesting facts about yourself.\n Why you would like to become a coder.\n Why you decided on this particular department at Umuzi.\n Your past extracurricular activities or work experiences.\n Why do you think you will succeed at Umuzi?\n The courses offered by Umuzi are hard - a lot of people struggle for lots of different reasons. It\u0026rsquo;s our job to help you succeed so it\u0026rsquo;s good for us to know what to expect so we can do a good job. What weaknesses do you have that might stand in the way of your success? And what strategies do you have for overcoming these challenges?\n If you succeed at Umuzi and get a high value career in your chosen field, what do you think your life will look like? Do you have personal goals? How will this effect your family and your community? Anything else?\n  Remember to pay attention to your sentence structure, spelling and grammar.\n"
},
{
	"uri": "/tech-department/topics/bootcamp/",
	"title": "Bootcamps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/first-personal-website/",
	"title": "Build your first personal website",
	"tags": ["html", "css"],
	"description": "",
	"content": " For the learnership you will create a website with your CV and a portfolio of your work. Create the website and host it on Github. You will be expected to keep your portfolio up to date throughout the learnership.\nThis portfolio is important because the Umuzi Plug team will make use of it when finding you work-experience gigs and/or full time employment. Please take your professional image seriously now.\nInstructions Create a personal website to showcase your talents and ambitions.\nThe content and information you choose to display is up to you. There should be some information about your skills, interests, and previous experience, as well as information on how to get in touch with you. Think about the user experience when designing your layout and navigation.\nThe HTML and CSS should be developed in a logical way with good naming conventions that would allow another developer to easily understand and build upon your code.\nYour web page files and folders should be organised and named in a logical manner.\nOnce you have finished your design and are satisfied with the style and content, upload the website to be hosted on GitHub Pages.\nRequirements:\n Website can be a single page or have multiple pages (the structure is up to you), but it must contain the following information:  About me Skills (Your tech stack: the languages and tools you use) Projects/Portfolio Contact (social media, email, phone, etc)  Website must be responsive to different screen sizes - use a mobile-first approach!  Use CSS Grid (see tutorials below) to design your site and make it responsive  Website must be developed using HTML and CSS Grid with a logical structure and naming conventions in your code Some basic JavaScript/Jquery should be integrated into the site in some way to make it more interactive and user-friendly Feel free to use icons, colours, pictures or organograms if you need to Create a board and make use of Trello which will assist you in breaking down your tasks  Links  How to make a GitHub Page : https://pages.github.com/ CSS Grid: https://scrimba.com/g/gR8PTE (Screencast tutorials) https://css-tricks.com/snippets/css/complete-guide-grid/ (more info) Building a Data Science Portfolio (https://www.dataquest.io/blog/build-a-data-science-portfolio/) Web Developer Portfolios to inspire you (https://medium.freecodecamp.org/15-web-developer-portfolios-to-inspire-you-137fb1743cae)  "
},
{
	"uri": "/tech-department/topics/ncit/115385/",
	"title": "Building an online business",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/114050/",
	"title": "Business and Technology",
	"tags": [],
	"description": "",
	"content": " 1. Fundamental business concepts Business Types To make the most of your business goals and for legal purposes it is important to understand the different types of businesses you can be registered as. Depending on the nature of your software company and the game you will be designing you might consider the following 5:\n Sole Proprietorship\n Partnerships\n Corporation\n Nonprofit\n Cooperative\n  1. Sole Proprietorship A sole proprietorship is the simplest of business types and therefore also the most popular. It is a business that\u0026rsquo;s owned by just one person where there isn\u0026rsquo;t any legal or financial distinction between the business and the business owner.\nThe Positives\n Minimal forms and legal procedures to declare this type of business\n Low start-up costs\n Greatest freedom from regulation\n Owner in direct control of decision making\n Tax advantages to owner\n All profits to owner\n  The Negatives\n Unlimited liability: owner is fully accountable for all of the profits, liabilities and legal issues that the business may encounter\n Limited access to specific licenses and other documents\n Difficult to raise capital\n No continuity if anything happens to the owner\n  2. Partnerships (General and Limited) A partnership is appropriate if your business is owned by two or more people. In a general partnership all members share the management of the business and each is personally liable for all the debts and obligations of the business. A limited partnership, or LP, is an off-shoot version of a general partnership, and is the most common for those looking for investment.\nWith an LP, there are two sets of partners:\n 3 General partners: usually involved in the everyday business decisions, and have personal liability.\n Limited partners: typically investors. Not liable for debts and don\u0026rsquo;t partake in regular business management.\n  In either type of partnership, you will be required to:\n register your business with your state and establish an official business name.\n obtain a business license, along with any other documentation that your state office can help you with\n register your business for tax\n  The Positives\n Additional sources of investment capital\n Low start-up costs\n Possible tax advantages\n Limited regulation\n Broader management base\n  The Negatives\n More legal documentation required\n Unlimited liability: general partners are fully accountable\n Lack of continuity because business is attached to owners\n Divided authority\n Hard to find suitable partners\n Possibility for conflict between partners\n  3. Corporation A corporation, is a fully independent business (when public) that\u0026rsquo;s made up of multiple shareholders who are provided with stock in a new business. The corporation is a legal entity that is separate from its owners, the shareholders. Most common is what\u0026rsquo;s known as a \u0026ldquo;C Corporation,\u0026rdquo; and if you currently work for a company with multiple employees, that\u0026rsquo;s likely the business structure they\u0026rsquo;re using. Most likely, if you\u0026rsquo;re starting off as a smaller business, particularly one that only operates online, declaring yourself as a corporation wouldn\u0026rsquo;t be appropriate. But if you truly are a corporation, you\u0026rsquo;ll need to file very specific documents with the state, followed by obtaining the appropriate business licenses and permits.\nThe Positives\n Limited liability: owners are not accountable for the business, it a separate legal entity\n Ownership is transferable and therefore the business has continuity\n Possible tax advantages\n Easier to raise capital\n  The Negatives\n Closely regulated\n Most expensive to set up\n Extensive record keeping necessary\n Double taxation of profits (eg. corporate tax and personal income tax)\n Potential conflict between shareholders and executives\n  4. Nonprofit As the name suggests, this is an organization that\u0026rsquo;s not seeking a financial profit, but promotes educational or charitable purposes. Money earned must be kept by the organization to pay for its expenses. There are several types of nonprofits available, many of which can receive \u0026ldquo;tax exempt\u0026rdquo; status. This process requires filing paperwork, including an application, with the government for them to recognize you as a nonprofit organization.\n5. Cooperative This is a business that\u0026rsquo;s fully owned and operated for the benefit of the members of the organization that use its services. Cooperatives sell shares to cooperative \u0026ldquo;members,\u0026rdquo; who then have a say in the operations and direction of the cooperative itself and whatever is earned by the cooperative is then distributed among the members themselves. The main difference in the process of becoming a cooperative, as opposed to the other types of businesses listed, is that your organization must create bylaws, have a membership application and have a board of directors with a charter member meeting.\nSome basic questions to help you define your business type:\n How many people are in your software company?\n Do you plan to hire people in the future?\n Is your game for profit or does it a have a purely social objective?\n Do you feel comfortable accepting full responsibility for the success or failure of the game?\n  Business Aims \u0026amp; Objectives All businesses have aims or objectives. It can be useful to be clear about what these are from the beginning. They will help determine the type of business you create and structure its growth and development. In a real life situation knowing these aims and objectives will help you do the following: find partners, create a budget, apply for funding and outside investment.\nCommon Business Objectives Survival A short term objective, probably for small business just starting out, or when a new firm enters the market or at a time of crisis\nExample: Pay yourself a salary\nIncrease Profitability This could be for the owners and shareholders or it could also be to increase the financial resources of your company for future expansion\nExample: Save profits to invest in future game improvements\nCustomer Satisfaction Ensure that the users of your product or service are happy with what you are providing. This can create loyalty and lead to a more successful product in the future\nExample: Increase user membership\nIncrease Market Share This is often done in order to allow a company to grow and therefore increase profits and influence in the market. Increasing market share can be achieved through advertising, researching target markets, analysing competition, then strategically placing, pricing and promoting the company’s product or service.\nOptimising Productivity This could be for future expansion or to improve your product and services. This might be achieved by: expanding and improving resources eg. office space, computer equipment; or making sure staff are happy; or employing more skilled staff.\nExample: Add a new feature every 6 months\nPro-Social Objectives Since the company you are creating will have a positive social impact it is worth also thinking about objectives that are not only concerned with profit and growth:\nInnovation Placing resources into research and development to create a new product, or into offering a better service. Innovation also helps a business stay ahead of the competition.\nExample: Conduct a customer survey and respond to results\nEthical Values You might choose objectives which are based on how one should treat the environment or animals.\nExample: Source your materials locally to reduce carbon footprint\nPublic Services This could be about ensuring the well being of less fortunate people or groups without access to a particular service.\nExample: Develop initiatives to create a broad and diverse user base\nTODO: Provide a real world example\nEffective Business Objectives The most effective business objectives meet the following criteria:\nS - Specific - objectives are aimed at what the business does, e.g. a hotel might have an objective of filling 60% of its beds a night during October, an objective specific to that business.\nM - Measurable - the business can put a value to the objective, e.g. €10,000 in sales in the next half year of trading.\nA - Agreed - by all those concerned in trying to achieve the objective.\nR - Realistic - the objective should be challenging, but it should also be able to be achieved by the resources available.\nT- Time - specific They have a time limit of when the objective should be achieved, e.g. by the end of the year.\nRemember business objectives can change over time. For example:\n Survival in the first year may lead to an objective of increasing profit in the second year.\n The competitive environment might change, with the launch of new products from competitors.\n Technology might change product designs, so sales and production targets might need to change.\n  Creating Your Aims \u0026amp; Objectives: What is your aim?\nWhere will this business go in the future, what are its goals. It is a statement of purpose.\nWhat are your objectives?\nThese are stated, measurable targets of how to achieve business aims.\nWhat is your mission statement?\nThis sets out the business vision and values that enables employees, managers, customers and even suppliers to understand the underlying basis for the actions of the business.\nBusiness Environments A business environment is the combination of internal and external factors that influence a company\u0026rsquo;s operating situation. The business environment can include factors such as: clients and suppliers; its competition and owners; improvements in technology; laws and government activities; and market, social and economic trends.\nInternal vs External Environment While the internal environment is usually under the control of the business and will include: objectives, policies, production methods, organisational structure etc. The external environment includes all those factors which exist outside and aren’t in direct control of the business. These include: customers, suppliers, competitors, the public, and trends.\nOnline Gaming Industry You will need to research the online gaming industry in order to understand the external environment you are working in and design your business accordingly so it will succeed. You might consider some of the following factors which were taken from market research done in 2017:\nMobile Gaming\n“Mobile games currently hold the largest segment of the industry’s revenue. By the end of 2017, they are expected to have generated $46B, which makes up 42% of the global market for game products. For comparison, console games will make up 31%, and PC/Desktop games only 27%.”\nVirtual Reality\n“Virtual Reality is another promising stream of revenue, with analysts predicting a growth of 104% from 2016 to 2017. In fact, by the year 2020, the annual worldwide revenue for VR is expected to reach $28B, which is 6 times more than what it’s expected to be this year. Granted, only about $4.5B will come from actual VR games, but that’s still more than 20 times what gamers spent by the end of 2016.”\nIf you’re interested, read more here: https://plarium.com/en/mmo-games/trends-online-gaming-2017/\nSome starter questions to help you understand your business environment:\n Who is your target audience? What kind of games are they playing? What devices do they have access to?\n What kind of games are successful software companies making?\n What resources do you have to create your game and will they limit you?\n How will you distribute your game, will there be limitations?\n  2. Systems theory and information systems Systems Theory Systems theory is a broad and abstract way of understanding how interrelated and interdependent parts work together as a whole. It can be applied to a wide range of disciplines including business studies. In particular, we will be focusing on information systems and how we can most effectively organise information to ensure the smooth running of a business.\nConcept and Theoretical Components The two videos below will introduce you to the systems theory and how it can be applied to organisations:\nIntroduction to systems theory:\n  Systems theory in organisations:\n  Information Systems Businesses tend to have several information systems. For most businesses, there are a variety of requirements for information for successful running:\n Senior managers need information to help with their business planning\n Middle management need more detailed information to help them monitor and control business activities\n Employees with operational roles need information to help them carry out their duties\n  It may be that as a sole proprietor that you take on all these roles but you will still need to think about how you record and monitor the different areas of your business.\n1. Transaction processing systems (TPS) TPS serve people in the operational level of an organization. These might be: billing systems to send invoices to customers, systems to calculate the weekly and monthly payroll and tax payments or task management systems.\nThe development of a game or piece of software, especially a large one, can require the work of multiple departments and multiple projects over a long period of time. For a lot of software companies a core part of the day-to-day operation will be an Agile Project Management system to manage tasks and keep on top of projects. This approach to task management can be useful also to small businesses. Many other systems that manage day-to-day administration (for example of human resources or financial accounting) will be managed by digital web apps that work together. These are especially useful to small businesses that don’t have many resources or capital.\n2. Knowledge management systems (KMS) KMS exist to help businesses create and share information. They are typically used in businesses where employees create new knowledge and expertise, which can then be shared by other people in the organisation to create further commercial opportunities. KMS are built around systems which allow efficient categorisation and distribution of knowledge.\nIn the process of creating a game, you might have ideas that need to be maintained and shared. These might be contained in word processing documents, spreadsheets, PowerPoint presentations, internet pages, etc and shared using group collaboration software like Google Drive. More specifically, code development can be a messy business, especially if you’re collaborating. In order to make sure everyone has the latest versions and file structure you will use a version control system (GitHub).\n3. Management information systems (MIS) These are primarily concerned with internal sources of information and serve the management level of the organization. MIS usually take data from the transaction processing systems (see above) and summarise it into a series of management reports. MIS reports tend to be used by middle management and operational supervisors.\n*For example, budget and project (programming/design) reports might be created to keep track of the development of your game. *\n4. Executive support systems (ESS) Designed to help senior management make strategic decisions. An ESS gathers, analyses and summarises the key internal and external information to get the overview of the entire organization’s performance.\nFor a small startup software company, this might involve pinpointing key measurable areas of your business, analysing them every 3-6 months, and adapting your business objectives accordingly.\nSome questions to make you think about how you will organise your business:\n How will you organise and share your ideas?\n What tools will you use to develop your game?\n What combination of webapps will you use to manage your projects? Do they work well together?\n How will you manage your time and keep to deadlines?\n Where will you keep track of your finances?\n  3. Using IT in business Information Technology in Business Information technology (IT) is all about storing, manipulating, distributing and processing information. Over the past 15 years it has transformed businesses with innovative technological tools and replaced conventional modes of business. In addition to the increased output and efficiency, IT has introduced new concepts such as e-commerce.\nOnline gaming would not be as sophisticated or as popular without the constant advancements taking place in IT. The following are some key ways in which IT has transformed business:\nProductivity/Data Management Online and offline technological applications (eg. word processing, spreadsheets, cloud computing) have increased the productivity of businesses and eliminated the time consuming process of manual document management.\nMonitoring IT can be used for monitoring areas of the company that are not utilizing resources efficiently. For instance, automated digital reports on employee time management, task completion and customer engagement analytics can quickly inform and support strategic decision making.\nCommunication For many companies, email is the principal means of communication. Over the years, a number of other communications tools have also evolved, allowing staff to communicate using live chat systems, online meeting tools and video-conferencing systems (Slack, Skype, etc).\nMarketing and Customer Relationship Management Businesses can maximize their commercial advantage by making the right use of IT channels and tools. Social media, digital distribution methods and personal computing devices have changed the way that customers engage with products and services. Customer Relationship Management (CRM) systems capture every interaction a company has with a customer, so that a more enriching experience is possible.\nE-commerce E-commerce is the is buying and selling services and goods over the Internet. With the worldwide rise of personal computing devices, it has grown exponentially. Online operations reduce the time and personnel required for business processes and many services are now distributed and used exclusively online.\nE-commerce and Online Gaming E-commerce is especially relevant to the online gaming industry which could be described as an e-commerce platform. Online games are sold, distributed and used by customers online. The internet already offers many different models for this kind of business and as it keeps developing there will inevitably be more. Here are a couple to think about:\n Membership (monthly payment) based games\n Unlimited access games (one-off payment)\n In-app purchase games\n Free games (financed by advertising)\n  4. Information needs for a business Data \u0026amp; Information Data\nData is raw, unorganized facts that need to be processed. Data can be something simple and seemingly random and useless until it is organized.\nInformation\nWhen data is processed, organized, structured or presented in a given context so as to make it useful, it is called Information.\nInformation in Decision Making Decision-making is the most important task of managers in an organization. Therefore, to enable managers to make good quality decisions, it is very important to provide them with the right kind of information. Information management systems are therefore very important. In the context of a new business it is especially important as it helps in responding to your business environment and making sure your business survives and develops.\nSystems and tools to help decision making We looked at systems that inform decision making in the Information Systems section. As we saw in the previous section, most modern organizations use IT systems for information management. Many of these computer based information management systems will be called Management Information Systems (MIS) and help managers take informed decisions. Though computer based technology is not necessary, it helps to provide timely and accurate information in a competitive environment.\nStages of decision making Using the information provided by the above systems, decisions can be divided into the following stages:\n Identification and structuring of problem/opportunity (Empathise)\n Putting the problem opportunity in context (Define)\n Generation of alternatives (Ideation)\n Choice of best alternatives (Prototyping)\n  Each of these steps will involve analyzing information and might even involve gathering more.\nData Integrity \u0026amp; Security As personal computing becomes more accessible, popular and even necessary for day-to-day living and working, the amount of personal and sensitive information we store online is increasing. As a result, it is also vulnerable to the flaws of our information technology systems.\nData integrity: Data integrity can be compromised in a number of ways:\n Human errors when data is entered\n Errors that occur when data is transmitted from one computer to another\n Software bugs or viruses\n Hardware malfunctions, such as disk crashes\n Natural disasters, such as fires and floods\n  Security:  Physical theft\n Internal/employee sabotage\n Industrial/Political espionage\n Malicious code/hacking\n  Governments and international organisation are increasingly recognising the importance of data protection and are developing legal frameworks. You too must make the protection of your users’ data (especially passwords and payment information) a priority.\nInformation Subsystems Systems Theory, as applied to organizational management, puts forth the premise that all organizations are systems, and all systems are part of larger systems. How a subsystem fits the needs of the larger system ultimately determines if that subsystem prospers or is left to wither on the vine.\nIt’s this concept that the adept leader can use to get a more “holistic” view of his organization. Understanding how the company relates to the larger system in which it exists and operates, and then how the company’s internal systems contribute or detract from that larger relationship can provide a more relevant analysis.\nRevisit the following two videos from the Systems theory section for more information on this subject:\nIntroduction to systems theory:\n  Systems theory in organisations:\n  5. Data Science for Business All coders should have a limited understanding of data science as even if you are not a data scientist you may be involved in gathering and storing the data.\nPlease visit the site below and read through the content.\nhttps://data36.com/data-science-for-business/\n"
},
{
	"uri": "/tech-department/workshops/business-intelligence-tools/",
	"title": "Business intelligence tools",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/css-flexbox/",
	"title": "CSS Flexbox",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;CSS Flexbox\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/css-grid/",
	"title": "CSS Grid",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;CSS Grid\u0026rdquo;\n"
},
{
	"uri": "/tech-department/projects/capstone-projects/",
	"title": "Capstone project",
	"tags": [],
	"description": "",
	"content": " The projects in this section are designed to really test your skills. You need to talk to your manager before moving forward with this project.\nYou get to choose which project you want to do, but your manager has to be ok with your choice. If you choose a project that is inappropriate for whatever reason then your manager will be allowed to tell you to do a different one. Your manager might even insist that you do two projects. Consider yourself warned ;)\nPlease look over all the available projects and see what looks most interesting, then set up a discussion with your manager.\nBefore you begin coding Write out a markdown file that will explain your architectural decisions and your plan of action for how you will achieve this task.\nFor example if you need to write a full stack app then maybe you need to design a database, develop some apis, design a cool looking button for your frontend. What specific tasks do you think you\u0026rsquo;ll need to do?\nCommit your markown file to your repo and get it reviewed and merged in the normal way.\nIf everyone is efficient with their code review then this will go quickly.\nYour manager will also need to review your plan of action once it is merged. Please poke them if needed. It\u0026rsquo;s very important that a senior person looks at your plan. Because good planning is a superpower.\nProjects   PROJECTS: build a Chrome Extension that measures time spent in meetings   PROJECTS: Spaced Repitition machine to help you remember what you read   PROJECTS: The Quizmaster   PROJECTS: Pair Stairs   PROJECTS: Gmail Text Scraper   "
},
{
	"uri": "/tech-department/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/classes/",
	"title": "Classes",
	"tags": [],
	"description": "",
	"content": " Classes in Kotlin are declared using the keyword class:\nclass Invoice { }  Constructors A class in Kotlin can have a primary constructor and one or more secondary constructors.\nclass Person constructor(firstName: String) { }  Secondary Constructors The class can also declare secondary constructors, which are prefixed with constructor:\nclass Person { constructor(parent: Person) { parent.children.add(this) } }  Creating instances of classes To create an instance of a class, we call the constructor as if it were a regular function:\n val invoice = Invoice() val customer = Customer(\u0026quot;Joe Smith\u0026quot;)  Note: that Kotlin does not have a new keyword.\nInheritance All classes in Kotlin have a common superclass Any, that is a default super for a class with no supertypes declared:\n class Example // Implicitly inherits from Any Any is not java.lang.Object; in particular, it does not have any members other than equals(), hashCode() and toString().  To declare an explicit supertype, we place the type after a colon in the class header:\nopen class Base(p: Int) class Derived(p: Int) : Base(p)  Overriding Methods Kotlin requires explicit annotations for overridable members (we call them open) and for overrides:\nopen class Base { open fun v() {} fun nv() {} } class Derived() : Base() { override fun v() {} }  The override annotation is required for Derived.v(). If it were missing, the compiler would complain.\nAbstract Classes A class and some of its members may be declared abstract. An abstract member does not have an implementation in its class.\nWe can override a non-abstract open member with an abstract one\nopen class Base { open fun f() {} } abstract class Derived : Base() { override abstract fun f() }  "
},
{
	"uri": "/tech-department/topics/clean-code/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": "Watch this: Clean Code: Fundamentals, Episode 1. Clean Code by Uncle Bob (Robert C. Martin) . He literally wrote the book on clean code (and it\u0026rsquo;s a very good book). The guy is a legend.\n  TOPICS: General Clean Code Guidelines   TOPICS: Clean Code for Data Science   TOPICS: Clean Code For JavaScript   TOPICS: Clean Code for Java   "
},
{
	"uri": "/tech-department/workshops/clean-code/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": " “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~ Martin Fowler\n "
},
{
	"uri": "/tech-department/workshops/general-coding-best-practices/",
	"title": "Clean Code (language agnostic)",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/clean-code/java-script/",
	"title": "Clean Code For JavaScript",
	"tags": [],
	"description": "",
	"content": " Maintaining someone else’s code is not a smooth process. It takes time to observe the project ( such as the folder structure, naming, dependencies, scripts etc.), to find the pattern and develop the new feature in harmony and consistency with the existing code. Different developers use different styles which are derived from their different tastes. They may work on a project together or pick up someone else’s work. Which in both cases, having a common ground is essential.\nJavaScript Naming Conventions There is an introduction about JavaScript Naming Conventions here with examples, which gives you the common sense when it comes to naming variables, functions, classes or components in JavaScript. No one is enforcing these naming convention rules, however, they are widely accepted as a standard in the JS community.\nUse ESLint ESLint is a quality tool that inspects code and warns a developer about potential problems. It is available online and can also be integrated into several development environments, so errors will be highlighted when writing code. It also has rules that relate to better ways of doing things to help you avoid problems.\n"
},
{
	"uri": "/tech-department/topics/clean-code/data-science/",
	"title": "Clean Code for Data Science",
	"tags": [],
	"description": "",
	"content": " Code is read more often than it is written. Notebooks, especially, are made to be looked at. Assist yourself and others by keeping your code and notebooks neat!\nNaming conventions Naming conventions and other good python practices are listed in the PEP 8 Style Guide.\nAlso see these code quality best practices.\nThe Data Science Workflow For Data Science workflow best practices, please familiarise yourself with the cookiecutter data science project and read this description of how to organise your projects using atom and Jupyter on Medium\nAdvanced git for teams Here\u0026rsquo;s a good conceptualisation of how git works in a development team. There are different ways for team to work, but this TOPICS: [MISSING title or page]gives you a great introduction.\nYou can thank me later ;)\n"
},
{
	"uri": "/tech-department/topics/clean-code/java/",
	"title": "Clean Code for Java",
	"tags": [],
	"description": "",
	"content": " Code is read more often than it is written. Notebooks, especially, are made to be looked at. Assist yourself and others by keeping your code and notebooks neat!\nNaming conventions Naming conventions and other good Java practices are listed in the Java Documentation.\nAlso see these naming conventions. Although the information on this document has not been updated in ages, the content is still relevant to the conventions that are still used today.\nWriting good Java code Look at this section of this Java tutorial to acquaint yourself with best coding practices for Java.\nAdvanced git for teams Here\u0026rsquo;s a good conceptualisation of how git works in a development team. There are different ways for team to work, but this Atlassian Git Workflow article gives you a great introduction.\nYou can thank me later ;)\n"
},
{
	"uri": "/tech-department/topics/clean-code/kotlin/",
	"title": "Clean Code for Kotlin",
	"tags": [],
	"description": "",
	"content": "Read through this documentation on the Android developers website regarding Kotlin best practices.\n"
},
{
	"uri": "/tech-department/topics/clean-code/python/",
	"title": "Clean Code for Python",
	"tags": [],
	"description": "",
	"content": " Tabs or Spaces 4 spaces == 1 tab\nSpaces are the preferred indentation method. There are not many serious open source project uses tabs in Python code, so it is recommended that use spaces. Python 3 DISALLOWS mixing the use of tabs and spaces for indentation. Using a code formatter will make your life way easier. We recommend using Black.\nImports  Imports should usually be on separate lines:   Yes: import os import sys No: import sys, os  It\u0026rsquo;s okay to say this though:\nfrom subprocess import Popen, PIPE   Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys.path):\nimport mypkg.sibling from mypkg import sibling from mypkg.sibling import example   However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:\n from . import sibling from .sibling import example  Standard library code should avoid complex package layouts and always use absolute imports. Implicit relative imports should never be used and have been removed in Python 3.\nWhen importing a class from a class-containing module, it\u0026rsquo;s usually okay to spell this:\nfrom myclass import MyClass from foo.bar.yourclass import YourClass  If this spelling causes local name clashes, then spell them explicitly:\nimport myclass import foo.bar.yourclass  and use myclass.MyClass and foo.bar.yourclass.YourClass.\n Wildcard imports (from  import *) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn\u0026rsquo;t known in advance).  When republishing names this way, the guidelines below regarding public and internal interfaces still apply.\nStrings In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. The recommended way of writing strings is by using f strings. They allow you to add variables into a string without using + to concatenate. That improves readability.\nNormal Strings:\n\u0026quot;Hi my name is \u0026quot; + name + \u0026quot; \u0026quot; + surname + \u0026quot; and I am part of \u0026quot; + company  F strings:\nf\u0026quot;Hi my name is {name} {surname} and I am part of {company}\u0026quot;  PEP 257 describes good docstring conventions. Note that most importantly, the \u0026ldquo;\u0026rdquo;\u0026rdquo; that ends a multiline docstring should be on a line by itself:\nNaming Conventions The naming conventions of Python\u0026rsquo;s library are a bit of a mess, so we\u0026rsquo;ll never get this completely consistent \u0026ndash; nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred.\nClass Names Class names should normally use the CapitalizedWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapitalizedWords convention used only for exception names and builtin constants.\nPackage and Module Names Python packages should have short, all-lowercase names, although the use of _underscores_ is discouraged. When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. _socket).\nFunction and Variable Names Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that\u0026rsquo;s already the prevailing style (e.g. threading.py), to retain backwards compatibility.\nConstants Constants are usually defined on a module level and written in UPPERCASE with underscores separating words. Examples include MAX_OVERFLOW and TOTAL.\nNames to Avoid Never use the characters \u0026lsquo;l\u0026rsquo; (lowercase letter el), \u0026lsquo;O\u0026rsquo; (uppercase letter oh), or \u0026lsquo;I\u0026rsquo; (uppercase letter eye) as single character variable names. In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use \u0026lsquo;l\u0026rsquo;, use \u0026lsquo;L\u0026rsquo; instead.\nComments Block Comments Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment). Paragraphs inside a block comment are separated by a line containing a single #.\nInline Comments Use inline comments sparingly.\nAn inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space. Inline comments are unnecessary and in fact distracting if they state the obvious. Don\u0026rsquo;t do this:\nx = x + 1 # Increment x  But sometimes, this is useful:\nx = x + 1 # Compensate for border  Documentation Strings Conventions for writing good documentation strings (a.k.a. \u0026ldquo;docstrings\u0026rdquo;) are immortalized in PEP 257.\n Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the def line. PEP 257 describes good docstring conventions. Note that most importantly, the \u0026ldquo;\u0026rdquo;\u0026rdquo; that ends a multiline docstring should be on a line by itself:   \u0026quot;\u0026quot;\u0026quot; this is the docstring for the module\u0026quot;\u0026quot;\u0026quot; module.py \u0026quot;\u0026quot;\u0026quot; this is not a docstring, this is a mistake\u0026quot;\u0026quot;\u0026quot; class Whatever: \u0026quot;\u0026quot;\u0026quot; classes can have docstrings too\u0026quot;\u0026quot;\u0026quot; def stuff( ...): \u0026quot;\u0026quot;\u0026quot;fnctions can have docstrings\u0026quot;\u0026quot;\u0026quot; def moar_Stuff(): \u0026quot;\u0026quot;\u0026quot;module level functions too\u0026quot;\u0026quot;\u0026quot;  "
},
{
	"uri": "/tech-department/topics/clean-code/xml/",
	"title": "Clean Code for XML",
	"tags": [],
	"description": "",
	"content": " A XML user interface can get quite nested and complicated, which is why it is very important to write clean and easy to read code.\nAdding an element or a layout Typically in XML you mark the end of an element in the following way:\n\u0026lt;Element\u0026gt;\u0026lt;/Element\u0026gt;  this is however only necessary in a situation in which you want to place another element inside this element. Usually used for layout elements.\nexample:\n``` \u0026lt;LayoutElement\u0026gt; \u0026lt;ViewElement /\u0026gt; //This now resides within the LayoutElement. \u0026lt;/LayoutElement\u0026gt; //This is then the closing tag. ```  When you want to add an element that does not contain any View Elements or Layout Elements it is best practise to close it in the following manner:\nexample:\n``` \u0026lt;ViewElement /\u0026gt; //Note how it does not require a closing tag. ```  Adding properties to a element When adding properties to an XML element, it is important to line up each property vertically and on a new line.\nexample:\n``` \u0026lt;ViewElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; Property3=\u0026quot;Value3\u0026quot; /\u0026gt; ```  Nesting elements To assist with readability, indentations are used to indicate that an element is within another element. Each element is indented once when inside a parent element.\nexample:\n``` \u0026lt;LayoutElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; \u0026gt; \u0026lt;ViewElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; /\u0026gt; \u0026lt;/LayoutElement\u0026gt; ```  Note: Leave one new line between elements to assist with differentating elements.\nFor more information regarding XML best practices, you can read through this documentation.\n"
},
{
	"uri": "/tech-department/workshops/clean-code-for-web/",
	"title": "Clean Code for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/ios-mobile/codable-file-manager-url/",
	"title": "Codable, File Manager, URL",
	"tags": [],
	"description": "",
	"content": " Project Persistent Image Gallery "
},
{
	"uri": "/tech-department/code-review/",
	"title": "Code Review Feedback Notes",
	"tags": [],
	"description": "",
	"content": "Information documented in this section can be used for a few different things:\n helping junior recruits and staff members learn what to look out for certain topics will come up here that should be turned into structured topics and workshops for future recruits we will be able to take learnings from here to refine the instructions given when giving assignments out  "
},
{
	"uri": "/tech-department/department-processes/cohort_standups/",
	"title": "Cohort morning standups",
	"tags": [],
	"description": "",
	"content": " Standups happen first thing in the morning. These will usually be run by junior facilitators\nBefore standup, the facilitator will  check the calenders and make sure they are familiar with upcoming events and deadlines check slack in case there are any important messages that should be conveyed to their groups. Eg: \u0026ldquo;only half the C23Zs have submitted their rocket-surgery assignments\u0026rdquo;  During standup, the facilitator will  attendance will be checked if anyone has missed a deadline then they will be verbally warned  "
},
{
	"uri": "/tech-department/topics/ncit/114076-and-115358/",
	"title": "Conducting Research and User Interviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/kotlin/constraint-layout-using-layout-editor/",
	"title": "Constraint Layout Using Layout Editor",
	"tags": [],
	"description": "",
	"content": " App overview The ColorMyViews app is inspired by the Dutch artist, Piet Mondrian. He invented a style of painting style called neoplasticism, which uses only vertical and horizontal lines and rectangular shapes in black, white, gray, and primary colors.\nAlthough paintings are static, your app will be interactive! The app consists of clickable text views that change color when tapped, and button views in a constraintLayout.\nConstraintLayout A ConstraintLayoutt is a ViewGroup that allows you to position and size child views in a flexible way. A constraint layout allows you to create large, complex layouts with flat view hierarchies (no nested view groups). To build a constraint layout, you can use the Layout Editor to add constraints, and to drag-and-drop views. You don\u0026rsquo;t need to edit the XML.\nNote: ConstraintLayout is available as a support library, which is available in API level 9 and higher.\nConstraints A constraint is a connection or alignment between two UI elements. Each constraint connects or aligns one view to another view, to the parent layout, or to an invisible guideline. In a constraint layout, you position a view by defining at least one horizontal and one vertical constraint.\n1 - Horizontal constraint: B is constrained to stay to the right of A. (In a finished app, B would need at least one vertical constraint in addition to this horizontal constraint.)\n2 - Vertical constraint: C is constrained to stay below A. (In a finished app, C would need at least one horizontal constraint in addition to this vertical constraint.)\nTask: Create the ColorMyViews project 1 - Open Android Studio, if it\u0026rsquo;s not already open, and create a new project with the following parameters:\n   Attribute Value     Template Empty Activity in the Phone and Tablet tab   Application Name ColorMyViews   Company Name android com.android.example.colormyviews (or your own domain)   Language Kotlin   Minimum API level API 19: Android 4.4 (KitKat)   This project will support instant apps (Leave this box cleared)   Use AndroidX artifacts Select this box.    The Empty Activity template creates a single empty activity in the Mainactivity.kt file.\nThe template also creates a layout file called activity_main.xml. The layout uses ConstraintLayout as its root view group, with a single TextView as the layout\u0026rsquo;s content.\n1 - Wait for Android Studio to finish the Gradle build. If you see any errors, select Build \u0026gt; Rebuild Project.\n2 - Run the app and wait for a few seconds for the build to complete. You should see a screen with \u0026ldquo;Hello World!\u0026rdquo; in the middle of it.\nTask: Use Layout Editor to build a constraint layout In this task, you use the Android Studio Layout Editor to build a constraint layout for your app.\nStep 1: Set up your Android Studio work area 1 - Open the activity_main.xml file and click the Design tab.\n2 - You\u0026rsquo;ll add constraints manually, so you want autoconnect turned off. In the toolbar, locate the Turn Off/On Autoconnect toggle button, which is shown below. (If you can\u0026rsquo;t see the toolbar, click inside the design editor area of the Layout Editor.) Make sure autoconnect is off.\nAutoconnect is on.\nAutoconnect is off—this is what you want for this project.\n3 - Use the toolbar to set the default margins to 16dp. (The default is 8dp.)\nWhen you set the default margin to 16dp, new constraints are created with this margin, so you don\u0026rsquo;t have to add the margin each time you add a constraint.\n4 - Zoom in using the + icon on the right side of the toolbar, until the Hello World text is visible inside its text view.\n5 - Double-click on the Hello World text view to open the Attributes pane.\nThe view inspector The view inspector, shown in the screenshot below, is a part of the Attributes pane. The view inspector includes controls for layout attributes such as constraints, constraint types, constraint bias, and view margins.\nTip: The view inspector is available only for views that are inside a ConstraintLayout.\nConstraint bias Constraint bias positions the view element along the horizontal and vertical axes. By default, the view is centered between the two constraints with a bias of 50%.\nTo adjust the bias, you can drag the bias sliders in the view inspector. Dragging a bias slider changes the view\u0026rsquo;s position along the axis.\nStep 2: Add margins for the Hello World text view 1 - Notice that in the view inspector, the left, right, top, and bottom margins for the text view are 0. The default margin was not automatically added, because this view was created before you changed the default margin.\n2 - For the left, right, and top margins, select 16dp from the drop-down menu in the view inspector. For example, in the following screenshot you are adding layout_marginEnd (layout_marginRight).\nStep 3: Adjust constraints and margins for the text view 1 - In the view inspector, the arrows inside the square represents the type of the constraint:\n Wrap Content: The view expands only as much as needed to contain its contents.\n Fixed: You can specify a dimension as the view margin in the text box next to the fixed-constraint arrows.\n Match Constraints: The view expands as much as possible to meet the constraints on each side, after accounting for the view\u0026rsquo;s own margins. This constraint is very flexible, because it allows the layout to adapt to different screen sizes and orientations. By letting the view match the constraints, you need fewer layouts for the app you\u0026rsquo;re building.\n  1 - In the view inspector, change the left and right constraints to Match Constraints (Click the arrow symbol to toggle between the constraint types.)\n2 - In the view inspector, click the Delete Bottom Constraint dot on the square to delete the bottom constraint.\n3 - Switch to the Text tab. Extract the dimension resource for layout_marginStart, and set the Resource name to margin_wide.\n4 - Set the same dimension resource, @dimen/margin_wide, for the top and end margins.\nandroid:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginTop=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginEnd=\u0026quot;@dimen/margin_wide\u0026quot;  Task: Style the TextView Step 1: Add a font 1 - In the Attributes pane, search for fontFamily and select the drop-down arrow next to it. Scroll down to More Fonts and select it. The Resources dialog opens.\n2 - In the Resources dialog, search for roboto.\n3 - Click Roboto and select Regular in the Preview list.\n4 - Select the Add font to project radio button.\n5 - Click OK.\nThis adds a res/font folder that contains a roboto.ttf font file. Also, the @font/roboto attribute is set for your text view.\nStep 2: Add a style 1 - Open res/values/dimens.xml, and add the following dimension resource for the font size.\n\u0026lt;dimen name=\u0026quot;box_text_size\u0026quot;\u0026gt;24sp\u0026lt;/dimen\u0026gt;  2 - Open res/values/styles.xml and add the following style, which you will use for the text view.\n\u0026lt;style name=\u0026quot;whiteBox\u0026quot;\u0026gt; \u0026lt;item name=\u0026quot;android:background\u0026quot;\u0026gt;@android:color/holo_green_light\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textAlignment\u0026quot;\u0026gt;center\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textSize\u0026quot;\u0026gt;@dimen/box_text_size\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textStyle\u0026quot;\u0026gt;bold\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textColor\u0026quot;\u0026gt;@android:color/white\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:fontFamily\u0026quot;\u0026gt;@font/roboto\u0026lt;/item\u0026gt; \u0026lt;/style\u0026gt;  In this style, the background color and the text color are set to default Android color resources. The font is set to Roboto. The text is center aligned and bolded, and the text size is set to box_text_size.\nStep 3: Add a string resource for the text view 1 - In the Attributes pane, find the text attribute. (You want the one without the wrench icon.)\n2 - Click the \u0026hellip; (three dots) next to the text attribute to open the Resources dialog.\n3 - In the Resources dialog, select Add new resource \u0026gt; New string Value. Set the resource name to box_one, and set the value to Box One.\n4 - Click OK.\nStep 4: Finish setting attributes for the text view 1 - In the Attributes pane, set the id of the text view to box_one_text.\n2 - Set the style to @style/whiteBox.\n3 - To clean up the code, switch to the Text tab and remove the android:fontFamily=\u0026quot;@font/roboto\u0026quot; attribute, because this font is present in the whiteBox style.\n4 - Switch back to the Design tab. At the top of the design editor, click the Device for preview (D) button. A list of device types with different screen configurations is displayed. The default device is Pixel.\n5 - Select different devices from the list and see how the TextView adapts to the different screen configurations.\n6 - Run your app. You see a styled green text view with the text \u0026ldquo;Box One\u0026rdquo;.\nTask: Add a second TextView and add constraints In this task, you add another text view below the box_one_text. You constrain the new text view to box_one_text and the layout\u0026rsquo;s parent element.\nStep 1: Add a new text view 1 - Open the activity_main.xml file and switch to the Design tab.\n2 - Drag a TextView from the Palette pane directly into the design editor preview, as shown below. Place the text view below the box_one_text, aligned with the left margin.\n3 - In the design editor, click the new text view, then hold the pointer over the dot on the top side of the text view. This dot, shown below, is called a constraint handle.\nNotice that when you hold the pointer over the constraint handle, the handle turns green and blinks.\nStep 2: Add constraints to the new text view Create a constraint that connects the top of the new text view to the bottom of the Box One text view:\n1 - Hold the pointer over the top constraint handle on the new text view.\n2 - Click the top constraint handle of the view and drag it up. A constraint line appears. Connect the constraint line to the bottom of the Box One textview, as shown below.\nAs you release the click, the constraint is created, and the new text view jumps to within 16dp of the bottom of the Box One. (The new text view has a top margin of 16dp because that\u0026rsquo;s the default you set earlier.)\nNow create a left constraint: 1 - Click the constraint handle on the left side of the new view.\n2 - Drag the constraint line to the left edge of the layout.\nTip: You can also create constraints using the view inspector. For example, to create a left constraint on the new text box:\n1 - In the preview, click the new text box to select it. 2 - In the view inspector, click the + icon on the left side of the box, as shown below.\nWhen you create a constraint this way, the constraint is attached to the parent or to a view closer to it.\nStep 3: Set attributes for the new text view 1 - Open res/values/strings.xml. Add a new string resource with the following code:\n\u0026lt;string name=\u0026quot;box_two\u0026quot;\u0026gt;Box Two\u0026lt;/string\u0026gt;\n2 - Open activity_main.xml and click the Design tab. Use the Attributes pane to set the following attributes on the new text view:\n   Attribute value     id box_two_text   layout_height 130dp   layout_width 130dp   style @style/whiteBox   text @string/box_two    In this case, you\u0026rsquo;re assigning fixed sizes for the height and width of the text view. Assign fixed sizes for height and width only if your view should always have a fixed size on all devices and layouts.\nImportant: When developing real-world apps, use flexible constraints for the height and width of your UI elements, whenever possible. For example, use match_constraint or wrap_content. The more fixed-size UI elements you have in your app, the less adaptive your layout is for different screen configurations.\n3 - Run your app. You should see two green TextView views, one above the other, similar to the following screenshot:\nTask: Create a chain of TextView views In this task, you add three TextView views. The text views are vertically aligned with each other, and horizontally aligned with the Box Two text view. The views will be in a chain.\nChains A chain is a group of views that are linked to each other with bidirectional constraints. The views within a chain can be distributed either vertically or horizontally. For example, the following diagram shows two views that are constrained to each other, which creates a horizontal chain.\nHead of the chain The first view in a chain is called the head of the chain. The attributes that are set on the head of the chain control, position, and distribute all the views in the chain. For horizontal chains, the head is the left-most view. For vertical chains, the head is the top-most view. In each of the two diagrams below, \u0026ldquo;A\u0026rdquo; is the head of the chain.\nChain styles Chain styles define the way the chained views are spread out and aligned. You style a chain by assigning a chain style attribute, adding weight, or setting bias on the views.\nThere are three chains styles:\n Spread: This is the default style. Views are evenly spread in the available space, after margins are accounted for.   Spread inside: The first and the last views are attached to the parent on each end of the chain. The rest of the views are evenly spread in the available space.   Packed: The views are packed together, after margins are accounted for. You can then adjust the position of the whole chain by changing the bias of the chain\u0026rsquo;s head view.  Packed Chain.\nPacked chain with bias.\n Weighted: The views are resized to fill up all the space, based on the values set in the layout_constraintHorizontal_weight or layout_constraintVertical_weight attributes. For example, imagine a chain containing three views, A, B, and C. View A uses a weight of 1. Views B and C each use a weight of 2. The space occupied by views B and C is twice that of view A, as shown below.  To add a chain style to a chain, set the layout_constraintHorizontal_chainStyle or the layout_constraintVertical_chainStyle attribute for the head of the chain. You can add chain styles in the Layout Editor, which you learn in this task.\nAlternatively, you can add chain styles in the XML code. For example:\n// Horizontal spread chain app:layout_constraintHorizontal_chainStyle=\u0026quot;spread\u0026quot; // Vertical spread inside chain app:layout_constraintVertical_chainStyle=\u0026quot;spread_inside\u0026quot; // Horizontal packed chain app:layout_constraintHorizontal_chainStyle=\u0026quot;packed\u0026quot;  Step 1: Add three text views and create a vertical chain 1 - Open the activity_main.xml file in the Design tab. Drag three TextView views from the Palette pane into the design editor. Put all three new text views to the right of the Box Two text view, as shown below.\n2 - In the strings.xml file, add the following string resources for the names of the new text views:\n\u0026lt;string name=\u0026quot;box_three\u0026quot;\u0026gt;Box Three\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026quot;box_four\u0026quot;\u0026gt;Box Four\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026quot;box_five\u0026quot;\u0026gt;Box Five\u0026lt;/string\u0026gt;  3 - Set the following attributes for the new text views:\n   Attribute Top text view Middle text view Bottom text view     ID box_three_text box_four_text box_five_text   text @string/box_three @string/box_four\\@string/box_five    style @style/whiteBox @style/whiteBox @style/whiteBox    In the Component Tree, you see errors about missing constraints. You fix these errors later.\nStep 2: Create a chain and constrain it to the height of Box Two 1 - Select all three new text views, right-click, and select Chains \u0026gt; Create Vertical Chain.\nThis creates a vertical chain that extends from Box One to the end of the layout.\n2 - Add a constraint that extends from the top of Box Three to the top of Box Two. This removes the existing top constraint and replaces it with the new constraint. You don\u0026rsquo;t have to delete the constraint explicitly.\n3 - Add a constraint from the bottom of Box Five to the bottom of Box Two.\nObserve that the three text views are now constrained to the top and bottom of Box Two.\nStep 3: Add left and right constraints 1 - Constrain the left side of Box Three to the right side of Box Two. Repeat for Box Four and Box Five, constraining the left side of each to the right side of Box Two.\n2 - Constrain the right side of each of the three text views to the right side of the layout.\n3 - For each of the three text views, change the layout_width attribute 0dp, which is equivalent to changing the constraint type to Match Constraints.\nStep 4: Add margin Use the Attributes pane to set Layout_margin attributes on the three text views to add spacing between them.\n1 - For Box Three, use @dimen/margin_wide for the start and end margins. Remove the other margins.\n2 - For Box Four, use @dimen/margin_wide for the start, end, top, and bottom margins. Remove the other margins.\n3 - For Box Five, use @dimen/margin_wide for the start and end margins. Remove the other margins.\n4 - To see how the text views in your app adapt to device-configuration changes, change the orientation of the preview. To do this, click the Orientation for Preview (O) icon in the toolbar and select Landscape.\n5 - Run the app. You should see five styled TextView views. To see how the constraints behave on a wider screen, try running the app on a larger device or emulator, such as a Nexus 10.\nTask: Add clickHandlers to the text views In this task, you make the ColorMyViews app a little more colorful. First you change the color of all the text views to white. Then you add a click handler that changes the view\u0026rsquo;s color and the layout background color when the user taps it.\n1 - In styles.xml, inside the whiteBox style, change the background color to white. The text views will start out white with white font, then change colors when the user taps them.\n\u0026lt;item name=\u0026quot;android:background\u0026quot;\u0026gt;@android:color/white\u0026lt;/item\u0026gt;\n2 - In MainActivity.kt, after the onCreate() function, add a function called makeColored(). Use View as the function\u0026rsquo;s parameter. This view is the one whose color will change.\nprivate fun makeColored(view: View) { }  Every view has a resource ID. The resource ID is the value assigned to the view\u0026rsquo;s id attribute in the layout file, activity_main.xml. To set a color, the code will switch using a when statement on the view\u0026rsquo;s resource ID. It\u0026rsquo;s a common pattern to use one click-handler function for many views when the click action is the same.\n3 - Implement the makeColored() function: Add a when block to check the view\u0026rsquo;s resource ID. Call the setBackgroundColor() function on each view\u0026rsquo;s id to change the view\u0026rsquo;s background color using the Color class constants.\nTo fix the code indentation, choose Code \u0026gt; Reformat code.\nprivate fun makeColored(view: View) { when (view.id) { // Boxes using Color class colors for the background R.id.box_one_text -\u0026gt; view.setBackgroundColor(Color.DKGRAY) R.id.box_two_text -\u0026gt; view.setBackgroundColor(Color.GRAY) R.id.box_three_text -\u0026gt; view.setBackgroundColor(Color.BLUE) R.id.box_four_text -\u0026gt; view.setBackgroundColor(Color.MAGENTA) R.id.box_five_text -\u0026gt; view.setBackgroundColor(Color.BLUE) } }  4 - To run, the code that you just added needs the android.graphics.Color library. If Android Studio hasn\u0026rsquo;t imported this library automatically, use an import statement to add the library before the MainActivity class definition.\n5 - If the user taps the background, you want the background color to change to light gray. A light background will reveal the outlines of the views and give the user a hint about where to tap next.\nIf the id doesn\u0026rsquo;t match any of the views, you know that the user has tapped the background. At the end of the when statement, add an else statement. Inside the else, set the background color to light gray.\nelse -\u0026gt; view.setBackgroundColor(Color.LTGRAY)\n6 - In activity_main.xml, add an id to the root constraint layout. The Android system needs an identifier in order to change its color.\nandroid:id=\u0026quot;@+id/constraint_layout\u0026quot;\n7 - In MainActivity.kt, add a function called setListeners() to set the click-listener function, makeColored(), on each view. Use findViewByID to get a reference for each text view, and for the root layout. Assign each reference to a variable.\nprivate fun setListeners() { val boxOneText = findViewById\u0026lt;TextView\u0026gt;(R.id.box_one_text) val boxTwoText = findViewById\u0026lt;TextView\u0026gt;(R.id.box_two_text) val boxThreeText = findViewById\u0026lt;TextView\u0026gt;(R.id.box_three_text) val boxFourText = findViewById\u0026lt;TextView\u0026gt;(R.id.box_four_text) val boxFiveText = findViewById\u0026lt;TextView\u0026gt;(R.id.box_five_text) val rootConstraintLayout = findViewById\u0026lt;View\u0026gt;(R.id.constraint_layout) }  For this code to run, it needs the android.widget.TextView library. If Android Studio doesn\u0026rsquo;t import this library automatically, use an import statement to add the library before the MainActivity class definition.\n8 - At the end of setListeners() function, define a List of views. Name the list clickableViews and add all the view instances to the list.\nfun setListeners() { ... val clickableViews: List\u0026lt;View\u0026gt; = listOf(boxOneText, boxTwoText, boxThreeText, boxFourText, boxFiveText, rootConstraintLayout) }  At the end of the setListeners() function, set the listener for each view. Use a for loop and the setOnClickListener() function.\n for (item in clickableViews) { item.setOnClickListener { makeColored(it) }  10 - In MainActivity.kt, at the end of the onCreate() function, make a call to setListeners().\noverride fun onCreate(savedInstanceState: Bundle?) { ... setListeners() }  Run your app. At first you see a blank screen. Tap the screen to reveal the boxes and the background. Go ahead and experiment more with more views and colors on your own.\nCoding challenge (this is important) Use images instead of colors and text as backgrounds for all the views. The app should reveal the images when the user taps the text views.\nHint: Add images to the app as drawable resources. Use the setBackgroundResource() function to set an image as a view\u0026rsquo;s background.\nExample:\nR.id.box_two_text -\u0026gt; view.setBackgroundResource(R.drawable.image_two)\nTask: Add a baseline constraint Baseline constraint The baseline constraint aligns the baseline of a view\u0026rsquo;s text with the baseline of another view\u0026rsquo;s text. Aligning views that contain text can be a challenge, especially if the fonts are differently sized. Baseline constraint does the alignment work for you.\nYou can create baseline constraints in the Layout Editor by using the Edit Baseline icon, which is displayed below the view when you hold the pointer over it. The equivalent XML code for the baseline constraint has the constraint layout attribute, layout_constraintBaseline_toBaselineOf.\nSample XML code for the baseline constraint:\n\u0026lt;Button android:id=\u0026quot;@+id/buttonB\u0026quot; ... android:text=\u0026quot;B\u0026quot; app:layout_constraintBaseline_toBaselineOf=\u0026quot;@+id/buttonA\u0026quot; /\u0026gt;  In this task, you add instructions that tell the user how to use the app. You create two TextView views, one for a label and one for the instructions information. The text views have different font sizes, and you align their baselines.\nStep 1: Add a text view for the label 1 - Open activity_main.xml in Design tab and drag a text view from the Palette pane into the design editor. Put the text view below Box Two. This text view will hold the text that labels the instructions.\n2 - In strings.xml, create a string resource for the label TextView view.\n\u0026lt;string name=\u0026quot;how_to_play\u0026quot;\u0026gt;How to play:\u0026lt;/string\u0026gt;\n3 - Use the Attributes pane to set the following attributes to the newly added label TextView:\n   Attribute Value     ID label_text   fontFamily roboto   text @string/how_to_play   textSize 24sp   textStyle B (bold)    Use the Default Margins icon in the toolbar to set the default margins to 16dp.\n5 - Constrain the label_text view\u0026rsquo;s left side to the layout\u0026rsquo;s parent element.\n6 - In the activity_main.xml file, the Layout Editor adds the layout_marginStart attribute with a hard-coded value of 16dp. Replace 16dp with @dimen/margin_wide. The XML code now looks similar to this:\n\u0026lt;TextView android:id=\u0026quot;@+id/label_text\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:fontFamily=\u0026quot;@font/roboto\u0026quot; android:text=\u0026quot;@string/how_to_play\u0026quot; android:textSize=\u0026quot;24sp\u0026quot; android:textStyle=\u0026quot;bold\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; tools:layout_editor_absoluteY=\u0026quot;287dp\u0026quot;/\u0026gt; \u0026lt;!--Designtime attribute--\u0026gt;  Design-time attributes Design-time attributes are used and applied only during the layout design, not at runtime. When you run the app, the design-time attributes are ignored.\nDesign-time attributes are prefixed with the tools namespace, for example, tools:layout_editor_absoluteY in the generated code snippet shown above. This line of code is added because you haven\u0026rsquo;t yet added a vertical constraint.\nAll views in a ConstraintLayout need to be constrained horizontally and vertically, or else the views jump to an edge of the parent when you run the app. This is why the Layout Editor adds tools:layout_editor_absoluteX if the view is not horizontally constrained. Layout Editor gives the design-time attribute the value of the view\u0026rsquo;s current position in the layout, to keep the views in place during design. You can safely ignore these tools attributes, because Android Studio removes them after you create the constraints.\nUsing design-time attributes, you can also add sample preview data to a text view or image view from within the Layout Editor.\nTry experimenting with sample data:\n1 - Add a new text view to your layout.\n2 - In the design editor, hold the pointer over the new view. The constraint_layout icon appears below the view. Click the icon to display the Design-time View Attributes drop-down menu, as shown below:\n3 - Select a type of the sample data from the drop-down list. For example, if you set text sample data to date/mmddyy, today\u0026rsquo;s date is displayed in the design.\n4 - Delete the text view that you just created.\nStep 2: Add a text view for the info text 1 - Drag another text view from the Palette pane into the design editor. Place the view next to and below the label_text text view, as shown below. This new text view is for the help info that the user will see. Make sure that the new view is vertically offset from the label_text view, so that you can see what happens when you create the baseline constraint.\n2 - In strings.xml, create a string resource for the new text view.\n\u0026lt;string name=\u0026quot;tap_the_boxes_and_buttons\u0026quot;\u0026gt;Tap the screen and buttons.\u0026lt;/string\u0026gt;\nUse the Attributes pane to set the following attributes to the new text view:\n   Attribute Value     ID info_text   layout_width 0dp (which is equivalent to match_constraint)   fontFamily roboto   text @string/tap_the_boxes_and_button    4 - Constrain the right side of the info_text to the right edge of the parent element. Constrain the left side of the info_text to the right (end) of the label_text.\nStep 3: Align the baselines of the two text views 1 - Click the label_text. The Edit Baseline icon appears below the view. Click the icon. (The view might jump to a new location in your layout.)\n2 - Hold the pointer over the label text view until the green baseline blinks, as shown below.\n3 - Click the green baseline and drag it. Connect the baseline to the bottom of the green blinking baseline on the info text view.\nTip\nTo delete all the constraints that are set on a view:\n1 - In the Design tab, click on the view.\n2 - Click the Delete Constraints icon that appears below the view.\nTo delete a particular constraint:\n1 - Hold the pointer over the constraint handle for the constraint you want to delete. The constraint handle (the dot) turns red.\n2 - Click the red constraint handle.\nStep 4: Add vertical constraints to the two text views Without vertical constraints, views go to the top of the screen (vertical 0) at runtime. Adding vertical constraints will keep the two text views in place when you run the app.\n1 - Constrain the bottom of the info_text to the bottom of the layout.\n2 - Attach the top of the info_text to the bottom of the box_two_text.\nTry moving the info_text view up or down. Notice that the label_text view follows, and stays aligned at the baseline.\n3 - In the view inspector, change the vertical bias of the info_text view to 0. This keeps the text views closer to the top constrained view, Box Two. (If the view inspector isn\u0026rsquo;t visible in the Attributes pane when you click on the view in the design editor, close and reopen Android Studio.)\n4 - The generated XML code should look similar to this:\n\u0026lt;TextView android:id=\u0026quot;@+id/label_text\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:text=\u0026quot;@string/how_to_play\u0026quot; android:textSize=\u0026quot;24sp\u0026quot; android:textStyle=\u0026quot;bold\u0026quot; app:layout_constraintBaseline_toBaselineOf=\u0026quot;@+id/info_text\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; /\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/info_text\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginTop=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginEnd=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginBottom=\u0026quot;@dimen/margin_wide\u0026quot; android:text=\u0026quot;@string/tap_the_boxes_and_buttons\u0026quot; app:layout_constraintBottom_toBottomOf=\u0026quot;parent\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintHorizontal_bias=\u0026quot;0.0\u0026quot; app:layout_constraintStart_toEndOf=\u0026quot;@+id/label_text\u0026quot; app:layout_constraintTop_toBottomOf=\u0026quot;@+id/box_two_text\u0026quot; app:layout_constraintVertical_bias=\u0026quot;0.0\u0026quot; /\u0026gt;  5 - Run your app. Your screen should look similar to the screenshot below.\nTask: Add a chain of buttons In this task, you add three Button views and chain them together.\nStep 1: Add three buttons 1 - Open the activity_main.xml file in the Design tab. Drag three buttons from the Palette pane onto the bottom of the layout.\n2 - In the strings.xml file, add the following string resources for the Button views:\n\u0026lt;string name=\u0026quot;button_red\u0026quot;\u0026gt;RED\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026quot;button_yellow\u0026quot;\u0026gt;YELLOW\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026quot;button_green\u0026quot;\u0026gt;GREEN\u0026lt;/string\u0026gt;  3 - Set the following attributes to the button views:\n   Attribute Left button Middle button Right button     ID red_button yellow_button green_button   text @string/button_red @string/button_yellow @string/button_green    4 - Align the button labels vertically with each other. To do this, constrain the baselines of red_button and green_button to the baseline of the yellow_button. (To add a baseline constraint to a view, click on the view and use the Edit Baseline icon that appears below the view.)\nTip: Baseline constraint and the bottom constraint are mutually exclusive, so you can't create both for the same view. If you add a bottom constraint and then a baseline constraint, the Layout Editor removes the bottom constraint.\nStep 2: Create a horizontal chain and constrain it 1 - In the design editor or in the Component Tree pane select all three button views and right-click. Select Chains \u0026gt; Create Horizontal chain.\n2 - Use the view inspector to set right and left margins of 16dp for the yellow_button, if these margins aren\u0026rsquo;t already set.\n3 - Using the view inspector, set the left margin of the red_button to 16dp. Set the right margin of the green_button to 16dp.\n4 - Constrain the top of the yellow_button to the bottom of the info_text.\n5 - Constrain the bottom of the yellow_button to the bottom of the layout.\n6 - Change the vertical bias of the yellow_button to 100 (1.0 in the XML), to drop down the buttons to the bottom of the layout.\n7 - Test your layout for different devices and orientations. The layout may not work for all devices and orientations, but should work for most of them.\nThe generated XML code for the Button views will be similar to the following:\n\u0026lt;Button android:id=\u0026quot;@+id/red_button\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:text=\u0026quot;@string/button_red\u0026quot; android:visibility=\u0026quot;visible\u0026quot; app:layout_constraintBaseline_toBaselineOf=\u0026quot;@+id/yellow_button\u0026quot; app:layout_constraintEnd_toStartOf=\u0026quot;@+id/yellow_button\u0026quot; app:layout_constraintHorizontal_bias=\u0026quot;0.5\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; /\u0026gt; \u0026lt;Button android:id=\u0026quot;@+id/yellow_button\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginTop=\u0026quot;@dimen/margin_wide\u0026quot; android:layout_marginBottom=\u0026quot;@dimen/margin_wide\u0026quot; android:text=\u0026quot;@string/button_yellow\u0026quot; android:visibility=\u0026quot;visible\u0026quot; app:layout_constraintBottom_toBottomOf=\u0026quot;parent\u0026quot; app:layout_constraintEnd_toStartOf=\u0026quot;@+id/green_button\u0026quot; app:layout_constraintHorizontal_bias=\u0026quot;0.5\u0026quot; app:layout_constraintStart_toEndOf=\u0026quot;@+id/red_button\u0026quot; app:layout_constraintTop_toBottomOf=\u0026quot;@+id/info_text\u0026quot; app:layout_constraintVertical_bias=\u0026quot;1.0\u0026quot; /\u0026gt; \u0026lt;Button android:id=\u0026quot;@+id/green_button\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; android:text=\u0026quot;@string/button_green\u0026quot; app:layout_constraintBaseline_toBaselineOf=\u0026quot;@+id/yellow_button\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintHorizontal_bias=\u0026quot;0.5\u0026quot; app:layout_constraintStart_toEndOf=\u0026quot;@+id/yellow_button\u0026quot; /\u0026gt;  Task: Add click handlers to the buttons In this task, you add a click handler to each Button view. The click handler changes the color of the TextView views.\n1 - Add the following colors to the res/values/colors.xml file:\n\u0026lt;color name=\u0026quot;my_green\u0026quot;\u0026gt;#12C700\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026quot;my_red\u0026quot;\u0026gt;#E54304\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026quot;my_yellow\u0026quot;\u0026gt;#FFC107\u0026lt;/color\u0026gt;  2 - In MainActivity.kt, use findViewById to get references for the button views. To do this, put the following code inside the setListeners() click-handler function, above the clickableViews declaration:\nval redButton = findViewById\u0026lt;TextView\u0026gt;(R.id.red_button) val greenButton = findViewById\u0026lt;TextView\u0026gt;(R.id.green_button) val yellowButton = findViewById\u0026lt;TextView\u0026gt;(R.id.yellow_button)  3 - Inside setListeners(), add the references of the Button views to the list of clickable views.\nprivate fun setListeners() { ... val clickableViews: List\u0026lt;View\u0026gt; = listOf(boxOneText, boxTwoText, boxThreeText, boxFourText, boxFiveText, rootConstraintLayout, redButton, greenButton, yellowButton ) ... }  4 - Inside the makeColored() function, add code to change the text views\u0026rsquo; colors when the user taps the buttons. Add the new code above the else statement, as shown:\nprivate fun makeColored(view: View) { when (view.id) { ... // Boxes using custom colors for background R.id.red_button -\u0026gt; box_three_text.setBackgroundResource(R.color.my_red) R.id.yellow_button -\u0026gt; box_four_text.setBackgroundResource(R.color.my_yellow) R.id.green_button -\u0026gt; box_five_text.setBackgroundResource(R.color.my_green) else -\u0026gt; view.setBackgroundColor(Color.LTGRAY) } }  5 - Run your final app. Click on the text views and the buttons. Your screen will look something like this.\nCoding challenge (Important) Create a new View and then do what you did with text and buttons from your app and fill the entire layout with color boxes (TextView views).\nYour app should toggle or change the colors when the user taps on the screen.\n"
},
{
	"uri": "/tech-department/topics/ncit/115431/",
	"title": "Constructive Feedback",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/constructor-default-values/",
	"title": "Constructor Default Values",
	"tags": [],
	"description": "",
	"content": " Kotlin has two nice features that you’ll also find in Scala: You can supply default values for constructor parameters You can use named arguments when calling a constructor\nDefault values for constructor parameters A convenient Kotlin feature is that you can supply default values for constructor parameters. For example, you could define a Socket class like this:\nclass Socket(var timeout: Int, var linger: Int) { override def toString = s\u0026quot;timeout: $timeout, linger: $linger\u0026quot; }  That’s nice, but you can make this class even better by supplying default values for the timeout and linger parameters:\nclass Socket(var timeout: Int = 2000, var linger: Int = 3000) { override fun toString(): String = \u0026quot;timeout: ${timeout}, linger: ${linger}\u0026quot; }  By supplying default values for the parameters, you can now create a new Socket in a variety of different ways:\nSocket() Socket(1000) Socket(4000, 6000) This is what those examples look like in the REPL: \u0026gt;\u0026gt;\u0026gt; Socket() timeout: 2000, linger: 3000 \u0026gt;\u0026gt;\u0026gt; Socket(1000) timeout: 1000, linger: 3000 \u0026gt;\u0026gt;\u0026gt; Socket(4000, 6000) timeout: 4000, linger: 6000  As those examples shows:\nWhen all parameters have default values, you don’t have to provide any values when creating a new instance If you supply one value, it’s used for the first named parameter You can override the default values with your own values An important implication of this is that default values have the effect of letting consumers consumers create instances of your class in a variety of ways — in a sense they work just as though you had created multiple, different constructors for your class.\nWhen you don’t provide defaults for all parameters As a word of caution, it generally doesn’t make any sense to provide a default value for an early parameter without providing a default for subsequent parameters.\n// don't do this class Socket(var timeout: Int = 5000, var linger: Int) { override fun toString(): String = \u0026quot;timeout: ${timeout}, linger: ${linger}\u0026quot; }  If you do that, you’ll get errors when trying to construct an instance with zero or one parameters:\n\u0026gt;\u0026gt;\u0026gt; val s = Socket() error: no value passed for parameter 'linger' val s = Socket() ^ \u0026gt;\u0026gt;\u0026gt; val s = Socket(2) error: no value passed for parameter 'linger' val s = Socket(2) ^  If you’re not going to provide default values for all parameters, you should only provide default values for the last parameters in the constructor:\n// this is a little better class Socket(var timeout: Int, var linger: Int = 5000) { override fun toString(): String = \u0026quot;timeout: ${timeout}, linger: ${linger}\u0026quot; }  With this approach the zero-argument constructor still fails, but you can use the one-argument constructor:\n\u0026gt;\u0026gt;\u0026gt; val s = Socket() error: no value passed for parameter 'timeout' val s = Socket() ^ \u0026gt;\u0026gt;\u0026gt; val s = Socket(10) \u0026gt;\u0026gt;\u0026gt; s timeout: 10, linger: 5000 Named arguments You can use named arguments when creating new class instances. For example, given this class: class Socket(var timeout: Int, var linger: Int) { override fun toString(): String = \u0026quot;timeout: ${timeout}, linger: ${linger}\u0026quot; }  you can create a new Socket like this:\nval s = Socket(timeout=2000, linger=3000)  This feature is not used too often, but it comes in handy in certain situations, such as when all of the class constructor parameters have the same type (such as Int in this example). For example, some people find that this code:\nval s = new Socket(timeout=2000, linger=3000)  is more readable than this code:\nval s = new Socket(2000, 3000)  "
},
{
	"uri": "/tech-department/projects/github-api-consume/",
	"title": "Consume Github API",
	"tags": [],
	"description": "",
	"content": " In this project you\u0026rsquo;ll make use of Github\u0026rsquo;s awesome API. We chose Github for this project because:\n you are already familiar with Github The api is really well documented the api is solidly built and a lot of people use it  Instructions First, get familar with consuming apis from the command line. Play with this. Getting started with the Github API V3.\nRemember, curl is your friend. And do is man. (try tying in man curl at the command line)\nNow in your language of choice (not bash, use Java, Python or Js) write a function with the input arguments:\n reporitory name start date end date  The function should output a list or array of pull requests on the repo such that the PRs were created, updated, merged or closed between the given two dates.\nPlease be sure to follow the standard naming conventions for your language.\nResources  An introduction to curl using GitHub\u0026rsquo;s API.  "
},
{
	"uri": "/tech-department/projects/java-specific/consume-own-api-using-curl/",
	"title": "Consume own api using curl",
	"tags": [],
	"description": "",
	"content": "This project is based on a Spring project that exposes a REAST api\n"
},
{
	"uri": "/tech-department/contact-us/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/topics/ios-mobile/core-motion-and-camera/",
	"title": "Core Motion and Camera",
	"tags": [],
	"description": "",
	"content": " Slides Core Motion and Camera (Lecture 17) Video Lectures: Lecture 17: Core Motion and Camera Additional Content: Friday Session 3: Instruments Reading Assignment 3: Finish off Swift "
},
{
	"uri": "/tech-department/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for making Open Source Software a better place !\nTODO: fix shortcode so that it doesn\u0026rsquo;t break if no internet access\nghcontributors \u0026ldquo;https://api.github.com/repos/Umuzi-org/tech-department/contributors?per_page=100\u0026quot; %}}\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/cross-validation-and-simple-linear-regression/",
	"title": "Cross-validation &amp; Simple Linear Regression",
	"tags": ["simple-linear-regression"],
	"description": "",
	"content": " Key topics  Simple linear regression Residuals Overfitting and underfitting Cross-validation Root Mean Square Error  Background materials Regression  Introduction to Linear Regression Simple and Multiple Linear Regression in Python Crash Course Statistics: Regression Khan Academy Engageny Algebra Topic D, Lessons 14 – 18 (Modelling relationships with a line \u0026amp; Residuals)  Overfitting and underfitting  Coursera Video  Test/ training splits and cross-validation  Test/Train Splits and Crossvalidation in Python Tutorial Google ML Training and Test Sets Video  Assignment We will predict employee salaries from different employee characteristics (or features). We are going to use a simple supervised learning technique: linear regression. We want to build a simple model to determine how well Years Worked predicts an employee’s salary. Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary Metadata. You will need the packages matplotlib, pandas and statsmodels.\nSteps and questions  Split your data into a training and test set. Leave the test set for now. Examine the training data for missing and extreme values. Create histograms to show the distribution of the variables and a scatterplot showing the relationship between Years Worked and Salary. Are the data appropriate for linear regression? Is there anything that needs to be transformed or edited first?\n Using the statsmodels package and the training data, run a simple linear regression for Salary with one predictor variable: Years Worked.\n Does the model significantly predict the dependent variable? Report the amount of variance explained (R^2) and significance value (p) to support your answer. What percentage of the variance in employees’ salaries is accounted for by the number of years they have worked?  What does the unstandardized coefficient (B or \u0026lsquo;coef\u0026rsquo; in statsmodels) tell you about the relationship between Years Worked and Salary?\n What do the 95% confidence intervals [0.025, 0.975] mean?\n Calculate the expected salary for someone with 12 years’ work experience.\n Calculate the expected salary for someone with 80 years’ work experience. Are there any problems with this prediction? If so, what are they?\n We have only looked at the number of years an employee has worked. What other employee characteristics might influence their salary?\n  Now fit your model to your test set. DO NOT BUILD A NEW MODEL ON THE TEST SET! Simply use your existing, model, to predict salaries in the test set.\n How does your model compare when running it on the test set - what is the difference in the Root Mean Square Error (RMSE) between the training and test sets? Is there any evidence of overfitting?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/tags/css/",
	"title": "Css",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/curious-learning-and-research/",
	"title": "Curious learning and research strategy",
	"tags": [],
	"description": "",
	"content": "   Presentation Slides\n"
},
{
	"uri": "/tech-department/projects/dags-with-airflow/",
	"title": "DAGs with Airflow",
	"tags": ["apache-airflow"],
	"description": "",
	"content": " Create a dag that does the following:\n Grab all the open pull requests that exist on all the github repos you have access to and store them in a database. This should be a single task in your DAG For each pull request, get the timestamp of the latest review and store that in the database. This should be a single task in your DAG Send an email to yourself that shows the top 5 PRs that need attention in order of priority. If there are less than 5 PRs then just show those.  How do you know if a PR needs attention? Basically the quicker a PR is merged the better. If a PR just sits and gets ignored then the code inside it is completelly useless. And the longer it waits the harder it will be to merge. In general, you should always put effort towards finishing things instead of starting new things.\nAnd how do you send an email? Sendinblue is pretty easy to work with. So is MailChimp\nAlso please note, Airflow has a database of its own. This uses sqlite by default. You need to store your PRs in a different database.\nUp for a challenge? Try using RabbitMQ to get Step 2 to run as a bunch of parallel tasks by making a few worker processes do api calls to Github.\nSome success crieria  Be careful about your .gitignore. Airflow creates a few files that you really shouldn\u0026rsquo;t be sharing Create a README that explains how to set up your project. Getting your stuff to run should be easy  "
},
{
	"uri": "/tech-department/topics/data-infrastructure/dags-with-airflow/",
	"title": "DAGs with Airflow",
	"tags": [],
	"description": "",
	"content": " Apache airflow is what Airbnb use to manage their data pipelines. They built it and then gave it to the Apache foundation. It is now an Apache top level project. Read a little bit about Apache if you don\u0026rsquo;t know the significance of that. TLDR; it\u0026rsquo;s a solid piece of tech.\nWhat does it do? Basically, large scale data processing generally requires:\n multiple processing steps with specific interdependencies that need to happen on a specific schedule  This on it\u0026rsquo;s own isn\u0026rsquo;t too hard. But let\u0026rsquo;s say you are working for a big company. Like a bank. What else might a data pipeline need?\n logging and error detection distributed workloads performance monitoring and SLAs secret managment visability to business stakeholders authentication And a lot more  This is why Airflow exists.\nAnother cool thing about airflow is that the concepts at its core can help you understand many other tools.\nWhat you need to know Airflow\u0026rsquo;s docs are great. Use the official tutorial, and make sure you understand the core concepts.\n https://airflow.apache.org/docs/stable/tutorial.html https://airflow.apache.org/docs/stable/concepts.html  And this guide has some good pictures\n https://www.polidea.com/blog/apache-airflow-tutorial-and-beginners-guide/  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dom-events-with-vanilla-js/",
	"title": "DOM events with vanilla JavaScript",
	"tags": [],
	"description": "",
	"content": "To see a basic demo of various event handlers take a look here. This demo has three different index.html pages. Each of them attach event handlers to the different DOM elements in different ways.\n https://gomakethings.com/listening-for-click-events-with-vanilla-javascript/ https://gomakethings.com/why-event-delegation-is-a-better-way-to-listen-for-events-in-vanilla-js/ https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events https://www.khanacademy.org/computing/computer-programming/html-css-js/html-js-dom-events/v/making-webpages-interactive-with-events https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dom-manipulation-with-vanilla-js/",
	"title": "DOM manipulation with vanilla JavaScript",
	"tags": [],
	"description": "",
	"content": "Here are a few (maybe too many) good resources o DOM manipulation in vanilla JS. Learn enough to complete your excercises and please give us feedback (or pull requests) on this page if you think any improvements can be made.\n https://www.w3schools.com/js/js_htmldom.asp https://www.sitepoint.com/dom-manipulation-vanilla-javascript-no-jquery/ https://www.khanacademy.org/computing/computer-programming/html-css-js#html-css-js-intro https://javascript.info/dom-navigation You\u0026rsquo;ll notice a few tasks at the end of this. Please make sure you understand them. Actually do the exercises then take a look at the solutions. https://javascript.info/dom-navigation  "
},
{
	"uri": "/tech-department/tags/dashboard/",
	"title": "Dashboard",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/",
	"title": "Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": " Assignments There are four assignments for you to try.\nTwo of them create dashboards using Plotly, one uses static data, while the other one uses dynamic real time data.\nThe third one is a Google Data Studio project which also uses static data. This assignment has a slightly sharp learning curve on setting up, uploading data and structuring the data, but once that is done, it is relatively easy.\nFor the fourth project, you need to apply regex and webscraping to extract data from a municipal website, which you will then display on a dashboard to show real-time updates. You are free to choose between plotly and Google Data Studio to display your dashboard.\nCompulsory EASY PROJECTS: Plotly Dashboard Assignment .\nOptional You will need the tutorial in Google Datastudio TOPICS: Google Data Studio EASY PROJECTS: Google Data Studio Assignment HARD: PROJECTS: Live Dashboard Assignment HARD: PROJECTS: Webscraping and Live Dashboard Assignment "
},
{
	"uri": "/tech-department/topics/free-code-camp/data-analysis-with-python/",
	"title": "Data Analysis with Python",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Data Analysis with Python\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/kotlin/data-binding/",
	"title": "Data Binding",
	"tags": [],
	"description": "",
	"content": " First of all, after having a created Android project in Android Studio, we need to add the Data Binding dependency and the ones of Kotlin to the build.gradle file of our app.\napply plugin: 'kotlin-android' apply plugin: 'kotlin-kapt' android { .... dataBinding { enabled = true } } dependencies { ... // notice that the compiler version must be the same than our gradle version kapt 'com.android.databinding:compiler:2.3.1' }  That’s all the configuration we need to start using Data Binding with Kotlin. Thank you very much for reading me… Now lets continue with the fun starting to see the code.\nFirst we need to create a model. In this case a basic one like User.kt data class User(val name: String, val age: Int)\nIn our activity_main.xml we can do something like this:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;layout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; \u0026gt; \u0026lt;!-- Inside the layout tag it is possible to set the data tag in order to set one or many variables. For this example we are having an User property--\u0026gt; \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026quot;user\u0026quot; type=\u0026quot;com.kuma.sample.User\u0026quot; /\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;LinearLayout android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; tools:context=\u0026quot;com.kuma.sample.MainActivity\u0026quot; \u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/user_name_text_view\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:padding=\u0026quot;16dp\u0026quot; android:text=\u0026quot;@{user.name}\u0026quot; tools:text=\u0026quot;Name\u0026quot; /\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/user_age_text_view\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:padding=\u0026quot;16dp\u0026quot; android:text=\u0026quot;@{Integer.toString(user.age)}\u0026quot; tools:text=\u0026quot;XX\u0026quot; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/layout\u0026gt;  Remember to always set your usual xml view inside the  tag and attach all the “xmlns:” properties to it. Otherwise it will throw a compilation error, since the generated files will have duplicated properties.\nAnd here comes the Binding: package com.kuma.sample import android.databinding.DataBindingUtil import android.os.Bundle import android.support.v7.app.AppCompatActivity import com.kuma.kotlinsteps.databinding.ActivityMainBinding class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val binding: ActivityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main) val user = User(\u0026quot;Kuma\u0026quot;, 23) binding.setVariable(BR.user, user) binding.executePendingBindings() } }  In that code snippet there are somethings to be noticed: - Now exists a class called ActivityMainBinding, which is autogenerated from the activity_main.xml and this contains all the references to use the views that the xml contains. - The way of making an instance of ActivityMainBinding is a little variation of the way of setting the xml layout to an activity. - There is also a new BR class which is some kind of secondary R class used to store the variables declared on the data tag of the xml. - After setting the variable to the binding object, it is necessary to call the executePendingBindings() in order to set the user variable attributes to the marked views.\nAfter compiling this you’ll be able to see that the Data has been set to your view without the necessity of writing any\ntextView.text = user.name  Two-way data binding Using one-way data binding, you can set a value on an attribute and set a listener that reacts to a change in that attribute:\n\u0026lt;CheckBox android:id=\u0026quot;@+id/rememberMeCheckBox\u0026quot; android:checked=\u0026quot;@{viewmodel.rememberMe}\u0026quot; android:onCheckedChanged=\u0026quot;@{viewmodel.rememberMeChanged}\u0026quot; /\u0026gt;  Two-way data binding provides a shortcut to this process:\n\u0026lt;CheckBox android:id=\u0026quot;@+id/rememberMeCheckBox\u0026quot; android:checked=\u0026quot;@={viewmodel.rememberMe}\u0026quot; /\u0026gt;  The @={} notation, which importantly includes the \u0026ldquo;=\u0026rdquo; sign, receives data changes to the property and listen to user updates at the same time.\nIn order to react to changes in the backing data, you can make your layout variable an implementation of Observable, usually BaseObservable, and use a @Bindable annotation, as shown in the following code snippet:\nclass LoginViewModel : BaseObservable { // val data = ... @Bindable fun getRememberMe(): Boolean { return data.rememberMe } fun setRememberMe(value: Boolean) { // Avoids infinite loops. if (data.rememberMe != value) { data.rememberMe = value // React to the change. saveData() // Notify observers of a new value. notifyPropertyChanged(BR.remember_me) } } }  Because the bindable property\u0026rsquo;s getter method is called getRememberMe(), the property\u0026rsquo;s corresponding setter method automatically uses the name setRememberMe().\nTwo-way data binding using custom attributes The platform provides two-way data binding implementations for the most common two-way attributes and change listeners, which you can use as part of your app. If you want to use two-way data binding with custom attributes, you need to work with the @InverseBindingAdapter and @InverseBindingMethod annotations.\nFor example, if you want to enable two-way data binding on a \u0026ldquo;time\u0026rdquo; attribute in a custom view called MyView, complete the following steps:\n1.Annotate the method that sets the initial value and updates when the value changes using @BindingAdapter:\n@BindingAdapter(\u0026quot;time\u0026quot;) @JvmStatic fun setTime(view: MyView, newValue: Time) { // Important to break potential infinite loops. if (view.time != newValue) { view.time = newValue } }  2.Annotate the method that reads the value from the view using @InverseBindingAdapter:\n@InverseBindingAdapter(\u0026quot;time\u0026quot;) @JvmStatic fun getTime(view: MyView) : Time { return view.getTime() }  At this point, data binding knows what to do when the data changes (it calls the method annotated with @BindingAdapter) and what to call when the view attribute changes (it calls the InverseBindingListener). However, it doesn\u0026rsquo;t know when or how the attribute changes.\nFor that, you need to set a listener on the view. It can be a custom listener associated with your custom view, or it can be a generic event, such as a loss of focus or a text change. Add the @BindingAdapter annotation to the method that sets the listener for changes on the property:\n@BindingAdapter(\u0026quot;app:timeAttrChanged\u0026quot;) @JvmStatic fun setListeners( view: MyView, attrChange: InverseBindingListener ) { // Set a listener for click, focus, touch, etc. }  The listener includes an InverseBindingListener as a parameter. You use the InverseBindingListener to tell the data binding system that the attribute has changed. The system can then start calling the method annotated using @InverseBindingAdapter, and so on.\nNote: Every two-way binding generates a synthetic event attribute. This attribute has the same name as the base attribute, but it includes the suffix \u0026ldquo;AttrChanged\u0026rdquo;. The synthetic event attribute allows the library to create a method annotated using @BindingAdapter to associate the event listener to the appropriate instance of View. In practice, this listener includes some non-trivial logic, including listeners for one-way data binding. For an example, see the adapter for the text attribute change, TextViewBindingAdapter.\nConverters If the variable that\u0026rsquo;s bound to a View object needs to be formatted, translated, or changed somehow before being displayed, it\u0026rsquo;s possible to use a Converter object.\nFor example, take an EditText object that shows a date:\n\u0026lt;EditText android:id=\u0026quot;@+id/birth_date\u0026quot; android:text=\u0026quot;@={Converter.dateToString(viewmodel.birthDate)}\u0026quot; /\u0026gt;  The viewmodel.birthDate attribute contains a value of type Long, so it needs to be formatted by using a converter.\nBecause a two-way expression is being used, there also needs to be an inverse converter to let the library know how to convert the user-provided string back to the backing data type, in this case Long. This process is done by adding the @InverseMethod annotation to one of the converters and have this annotation reference the inverse converter. An example of this configuration appears in the following code snippet:\nobject Converter { @InverseMethod(\u0026quot;stringToDate\u0026quot;) @JvmStatic fun dateToString( view: EditText, oldValue: Long, value: Long ): String { // Converts long to String. } @JvmStatic fun stringToDate( view: EditText, oldValue: String, value: String ): Long { // Converts String to long. } }  Infinite loops using two-way data binding Be careful not to introduce infinite loops when using two-way data binding. When the user changes an attribute, the method annotated using @InverseBindingAdapter is called, and the value is assigned to the backing property. This, in turn, would call the method annotated using @BindingAdapter, which would trigger another call to the method annotated using @InverseBindingAdapter, and so on.\nFor this reason, it\u0026rsquo;s important to break possible infinite loops by comparing new and old values in the methods annotated using @BindingAdapter.\nTwo-way attributes The platform provides built-in support for two-way data binding when you use the attributes in the following table. For details on how the platform provides this support, see the implementations for the corresponding binding adapters:\n https://developer.android.com/topic/libraries/data-binding/two-way  Bind layout views to Architecture Components The AndroidX library includes the Architecture Components, which you can use to design robust, testable, and maintainable apps. The Data Binding Library works seamlessly with the Architecture Components to further simplify the development of your UI. The layouts in your app can bind to the data in the Architecture Components, which already help you manage the UI controllers lifecycle and notify about changes in the data.\nThis page shows how to incorporate the Architecture Components to your app to further enhance the benefits of using the Data Binding Library.\nUse LiveData to notify the UI about data changes You can use LiveData objects as the data binding source to automatically notify the UI about changes in the data. For more information about this Architecture Component, see LiveData Overview.\nUnlike objects that implement Observable—such as observable fields—LiveData objects know about the lifecycle of the observers subscribed to the data changes. This knowledge enables many benefits, which are explained in The advantages of using LiveData. In Android Studio version 3.1 and higher, you can replace observable fields with LiveData objects in your data binding code.\nTo use a LiveData object with your binding class, you need to specify a lifecycle owner to define the scope of the LiveData object. The following example specifies the activity as the lifecycle owner after the binding class has been instantiated:\nclass ViewModelActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { // Inflate view and obtain an instance of the binding class. val binding: UserBinding = DataBindingUtil.setContentView(this, R.layout.user) // Specify the current activity as the lifecycle owner. binding.setLifecycleOwner(this) } }  You can use a ViewModel component, as explained in Use ViewModel to manage UI-related data, to bind the data to the layout. In the ViewModel component, you can use the LiveData object to transform the data or merge multiple data sources. The following example shows how to transform the data in the ViewModel:\nclass ScheduleViewModel : ViewModel() { val userName: LiveData init { val result = Repository.userName userName = Transformations.map(result) { result -\u0026gt; result.value } } }  Use ViewModel to manage UI-related data The Data Binding Library works seamlessly with ViewModel components, which expose the data that the layout observes and reacts to its changes. Using ViewModel components with the Data Binding Library allows you to move UI logic out of the layouts and into the components, which are easier to test. The Data Binding Library ensures that the views are bound and unbound from the data source when needed. Most of the remaining work consists in making sure that you\u0026rsquo;re exposing the correct data. For more information about this Architecture Component, see ViewModel Overview.\nTo use the ViewModel component with the Data Binding Library, you must instantiate your component, which inherits from the ViewModel class, obtain an instance of your binding class, and assign your ViewModel component to a property in the binding class. The following example shows how to use the component with the library:\nclass ViewModelActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { // Obtain the ViewModel component. val userModel: UserModel by viewModels() // Inflate view and obtain an instance of the binding class. val binding: UserBinding = DataBindingUtil.setContentView(this, R.layout.user) // Assign the component to a property in the binding class. binding.viewmodel = userModel } }  In your layout, assign the properties and methods of your ViewModel component to the corresponding views using binding expressions, as shown in the following example:\n\u0026lt;CheckBox android:id=\u0026quot;@+id/rememberMeCheckBox\u0026quot; android:checked=\u0026quot;@{viewmodel.rememberMe}\u0026quot; android:onCheckedChanged=\u0026quot;@{() -\u0026gt; viewmodel.rememberMeChanged()}\u0026quot; /\u0026gt;  Use an Observable ViewModel for more control over binding adapters You can use a ViewModel component that implements the Observable to notify other app components about changes in the data, similar to how you would use a LiveData object.\nThere are situations where you might prefer to use a ViewModel component that implements the Observable interface over using LiveData objects, even if you lose the lifecycle management capabilities of LiveData. Using a ViewModel component that implements Observable gives you more control over the binding adapters in your app. For example, this pattern gives you more control over the notifications when data changes, it also allows you to specify a custom method to set the value of an attribute in two-way data binding.\nTo implement an observable ViewModel component, you must create a class that inherits from the ViewModel class and implements the Observable interface. You can provide your custom logic when an observer subscribes or unsubscribes to notifications using the addOnPropertyChangedCallback() and removeOnPropertyChangedCallback() methods. You can also provide custom logic that runs when properties change in the notifyPropertyChanged() method. The following code example shows how to implement an observable ViewModel:\n/** * A ViewModel that is also an Observable, * to be used with the Data Binding Library. */ open class ObservableViewModel : ViewModel(), Observable { private val callbacks: PropertyChangeRegistry = PropertyChangeRegistry() override fun addOnPropertyChangedCallback( callback: Observable.OnPropertyChangedCallback) { callbacks.add(callback) } override fun removeOnPropertyChangedCallback( callback: Observable.OnPropertyChangedCallback) { callbacks.remove(callback) } /** * Notifies observers that all properties of this instance have changed. */ fun notifyChange() { callbacks.notifyCallbacks(this, 0, null) } /** * Notifies observers that a specific property has changed. The getter for the * property that changes should be marked with the @Bindable annotation to * generate a field in the BR class to be used as the fieldId parameter. * * @param fieldId The generated BR id for the Bindable field. */ fun notifyPropertyChanged(fieldId: Int) { callbacks.notifyCallbacks(this, fieldId, null) } }  "
},
{
	"uri": "/tech-department/projects/kotlin/data-binding-basics/",
	"title": "Data Binding Basics",
	"tags": [],
	"description": "",
	"content": " App overview In this project, you start with the AboutMe app and change the app to use data binding. The app will look exactly the same when you are done!\nHere\u0026rsquo;s what the AboutMe app does:  When the user opens the app, the app shows a name, a field to enter a nickname, a Done button, a star image, and scrollable text.\n The user can enter a nickname and tap the Done button. The editable field and button are replaced by a text view that shows the entered nickname.\n  Please use a clone of your app, submit it under this project repo and do not alter the code of the AboutMe project.\nTask: Use data binding to eliminate findViewById() The code you wrote in previous project uses the findViewById() function to obtain references to views.\nEvery time you use findViewById() to search for a view after the view is created or recreated, the Android system traverses the view hierarchy at runtime to find it. When your app has only a handful of views, this is not a problem. However, production apps may have dozens of views in a layout, and even with the best design, there will be nested views.\nThink of a linear layout that contains a scroll view that contains a text view. For a large or deep view hierarchy, finding a view can take enough time that it can noticeably slow down the app for the user. Caching views in variables can help, but you still have to initialize a variable for each view, in each namespace. With lots of views and multiple activities, this adds up, too.\nOne solution is to create an object that contains a reference to each view. This object, called a Binding object, can be used by your whole app. This technique is called data binding. Once a binding object has been created for your app, you can access the views, and other data, through the binding object, without having to traverse the view hierarchy or search for the data.\nData binding has the following benefits:\n Code is shorter, easier to read, and easier to maintain than code that uses findByView().\n Data and views are clearly separated. This benefit of data binding becomes increasingly important later in this course.\n The Android system only traverses the view hierarchy once to get each view, and it happens during app startup, not at runtime when the user is interacting with the app.\n You get type safety for accessing views. (Type safety means that the compiler validates types while compiling, and it throws an error if you try to assign the wrong type to a variable.)\n  In this task, you set up data binding, and you use data binding to replace calls to findViewById() with calls to the binding object.\n1 - Clone / Fork (copy) your previous about me project and opened it in Android Studio.\n2 - Open the build.gradle (Module: app) file.\n3 - Inside the android section, before the closing brace, add a dataBinding section and set enabled to true.\ndataBinding { enabled = true }  4 - When prompted, Sync the project. If you\u0026rsquo;re not prompted, select File \u0026gt; Sync Project with Gradle Files.\n5 - You can run the app, but you won\u0026rsquo;t see any changes.\nStep 2: Change layout file to be usable with data binding To work with data binding, you need to wrap your XML layout with a \u0026lt;layout\u0026gt; tag. This is so that the root class is no longer a view group, but is instead a layout that contains view groups and views. The binding object can then know about the layout and the views in it.\n1 - Open the activity_main.xml file.\n2 - Switch to the Text tab.\n3 - Add \u0026lt;layout\u0026gt;\u0026lt;/layout\u0026gt; as the outermost tag around the \u0026lt;LinearLayout\u0026gt;.\n\u0026lt;layout\u0026gt; \u0026lt;LinearLayout ... \u0026gt; ... \u0026lt;/LinearLayout\u0026gt; \u0026lt;/layout\u0026gt;  4 - Choose Code \u0026gt; Reformat code to fix the code indentation.\nThe namespace declarations for a layout must be in the outermost tag.\n5 - Cut the namespace declarations from the \u0026lt;LinearLayout\u0026gt; and paste them into the \u0026lt;layout\u0026gt; tag. Your opening \u0026lt;layout\u0026gt; tag should look as shown below, and the \u0026lt;LinearLayout\u0026gt; tag should only contain view properties.\n\u0026lt;layout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot;\u0026gt;  6 - Build and run your app to verify that you did this correctly.\nStep 3: Create a binding object in the main activity Add a reference to the binding object to the main activity, so that you can use it to access views:\n1 - Open the MainActivity.kt file.\n2 - Before onCreate(), at the top level, create a variable for the binding object. This variable is customarily called binding.\nThe type of binding, the ActivityMainBinding class, is created by the compiler specifically for this main activity. The name is derived from the name of the layout file, that is, activity_main + Binding.\nprivate lateinit var binding: ActivityMainBinding\n3 - If prompted by Android Studio, import ActivityMainBinding. If you aren\u0026rsquo;t prompted, click on ActivityMainBinding and press Alt+Enter (Option+Enter on a Mac) to import this missing class.\nThe import statement should look similar to the one shown below.\nimport com.example.android.aboutme.databinding.ActivityMainBinding\nNext, you replace the current setContentView() function with an instruction that does the following:\n Creates the binding object.\n Uses the setContentView() function from the DataBindingUtil class to associate the activity_main layout with the MainActivity. This setContentView() function also takes care of some data binding setup for the views.\n  4 - In onCreate(), replace the setContentView() call with the following line of code.\nbinding = DataBindingUtil.setContentView(this, R.layout.activity_main)\n5 - Import DataBindingUtil.\nimport androidx.databinding.DataBindingUtil\nStep 4: Use the binding object to replace all calls to findViewById() You can now replace all calls to findViewById() with references to the views that are in the binding object. When the binding object is created, the compiler generates the names of the views in the binding object from the IDs of the views in the layout, converting them to camel case. So, for example,done_button is doneButton in the binding object, nickname_edit becomes becomes nicknameEdit, and nickname_text becomes nicknameText.\n1 - In onCreate(), replace the code that uses findViewById() to find the done_button with code that references the button in the binding object.\nReplace this code: findViewById\u0026lt;Button\u0026gt;(R.id.done_button) with: binding.doneButton\nYour finished code to set the click listener in onCreate() should look like this.\nbinding.doneButton.setOnClickListener { addNickname(it) }  2 - Do the same for all calls to findViewById() in the addNickname() function.\nReplace all occurrences of findViewById\u0026lt;View\u0026gt;(R.id.id_view) with binding.idView. Do this in the following way:\n Delete the definitions for the editText and nicknameTextView variables along with their calls to findViewById(). This will give you errors.\n Fix the errors by getting the nicknameText, nicknameEdit, and doneButton views from the binding object instead of the (deleted) variables.\n Replace view.visibility with binding.doneButton.visibility. Using binding.doneButton instead of the passed-in view makes the code more consistent.\n  The result is the following code:\nbinding.nicknameText.text = binding.nicknameEdit.text binding.nicknameEdit.visibility = View.GONE binding.doneButton.visibility = View.GONE binding.nicknameText.visibility = View.VISIBLE   here is no change in functionality. Optionally, you can now eliminate the view parameter and update all uses of view to use binding.doneButton inside this function.  3 - The nicknameText requires a String, and nicknameEdit.text is an Editable. When using data binding, it is necessary to explicitly convert the Editable to a String.\nbinding.nicknameText.text = binding.nicknameEdit.text.toString()\n4 - You can delete the grayed out imports.\n5 - Kotlinize (;-) the function by using apply{}.\nbinding.apply { nicknameText.text = nicknameEdit.text.toString() nicknameEdit.visibility = View.GONE doneButton.visibility = View.GONE nicknameText.visibility = View.VISIBLE }  6 - Build and run your app\u0026hellip;and it should look and work exactly the same as before.\nTip: If you see compiler errors after you make changes, select Build \u0026gt; Clean Project followed by Build \u0026gt; Rebuild Project. Doing this usually updates the generated files. Otherwise, select File \u0026gt; Invalidate Caches/Restart to do a more thorough cleanup.\nTip: You previously learned about the Resources object that holds references to all resources in the app. You can think of the Binding object in a similar fashion when referencing views; however, the Binding object is a lot more sophisticated.\nTask: Use data binding to display data You can take advantage of data binding to make a data class directly available to a view. This technique simplifies the code, and is extremely valuable for handling more complex cases.\nFor this example, instead of setting the name and nickname using string resources, you create a data class for the name and nickname. You make the data class available to the view using data binding.\nStep 1: Create the MyName data class 1 - In Android Studio in the java directory, open the MyName.kt file. If you don\u0026rsquo;t have this file, create a new Kotlin file and call it MyName.kt.\n2 - Define a data class for the name and nickname. Use empty strings as the default values.\ndata class MyName(var name: String = \u0026quot;\u0026quot;, var nickname: String = \u0026quot;\u0026quot;)\nStep 2: Add data to the layout In the activity_main.xml file, the name is currently set in a TextView from a string resource. You need to replace the reference to the name with a reference to data in the data class.\n1 - Open activity_main.xml in the Text tab.\n2 - At the top of the layout, between the \u0026lt;layout\u0026gt; and \u0026lt;LinearLayout\u0026gt; tags, insert a \u0026lt;data\u0026gt;\u0026lt;/data\u0026gt; tag. This is where you will connect the view with the data.\n\u0026lt;data\u0026gt; \u0026lt;/data\u0026gt;  Inside the data tags, you can declare named variables that hold a reference to a class.\n3 - Inside the \u0026lt;data\u0026gt; tag, add a \u0026lt;variable\u0026gt; tag.\n4 - Add a name parameter to give the variable a name of \u0026quot;myName\u0026quot;. Add a type parameter and set the type to a fully qualified name of the MyName data class (package name + variable name).\n\u0026lt;variable name=\u0026quot;myName\u0026quot; type=\u0026quot;com.example.android.aboutme.MyName\u0026quot; /\u0026gt;  Now, instead of using the string resource for the name, you can reference the myName variable.\n5 - Replace android:text=\u0026quot;@string/name\u0026quot; with the code below.\n@={} is a directive to get the data that is referenced inside the curly braces.\nmyName references the myName variable that you previously defined, which points to the myName data class and fetches the name property from the class.\nandroid:text=\u0026quot;@={myName.name}\u0026quot;\nStep 3: Create the data You now have a reference to the data in your layout file. Next, you create the actual data.\n3 - Open the MainActivity.kt file.\n2 - Above onCreate(), create a private variable, also called myName by convention. Assign the variable an instance of the MyName data class, passing in the name.\nprivate val myName: MyName = MyName(\u0026quot;Aleks Haecky\u0026quot;)\n3 - In onCreate(), set the value of the myName variable in the layout file to the value of the myName variable that you just declared. You can\u0026rsquo;t access the variable in the XML directly. You need to access it through the binding object.\nbinding.myName = myName\n4 - This may show an error, because you need to refresh the binding object after making changes. Build your app, and the error should go away.\nStep 4: Use the data class for the nickname in the TextView The final step is to also use the data class for the nickname in the TextView.\n1 - Open activity_main.xml.\n2 - In the nickname_text text view, add a text property. Reference the nickname in the data class, as shown below.\nandroid:text=\u0026quot;@={myName.nickname}\u0026quot;\nIn ActivityMain, replace\nnicknameText.text = nicknameEdit.text.toString()\nwith code to set the nickname in the myName variable.\nmyName?.nickname = nicknameEdit.text.toString()\nAfter the nickname is set, you want your code to refresh the UI with the new data. To do this, you must invalidate all binding expressions so that they are recreated with the correct data.\n4 - Add invalidateAll() after setting the nickname so that the UI is refreshed with the value in the updated binding object.\nbinding.apply { myName?.nickname = nicknameEdit.text.toString() invalidateAll() ... }  5 - Build and run your app, and it should work exactly the same as before.\n"
},
{
	"uri": "/tech-department/topics/kotlin/data-classes/",
	"title": "Data Classes",
	"tags": [],
	"description": "",
	"content": " Data Classes We frequently create a class to do nothing but hold data. In such a class some standard functionality is often mechanically derivable from the data. In Kotlin, this is called a data class and is marked as data:\ndata class User(val name: String, val age: Int)  The compiler automatically derives the following members from all properties declared in the primary constructor:\n equals()/hashCode() pair, toString() of the form \u0026ldquo;User(name=John, age=42)\u0026rdquo;, componentN() functions corresponding to the properties in their order of declaration, copy() function (see below).  If any of these functions is explicitly defined in the class body or inherited from the base types, it will not be generated.\nTo ensure consistency and meaningful behavior of the generated code, data classes have to fulfil the following requirements:\n The primary constructor needs to have at least one parameter; All primary constructor parameters need to be marked as val or var; Data classes cannot be abstract, open, sealed or inner; (before 1.1) Data classes may only implement interfaces. Since 1.1, data classes may extend other classes .  On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified.\ndata class User(val name: String = \u0026quot;\u0026quot;, val age: Int = 0)  Copying It\u0026rsquo;s often the case that we need to copy an object altering some of its properties, but keeping the rest unchanged. This is what copy() function is generated for. For the User class above, its implementation would be as follows:\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)  This allows us to write\nval jack = User(name = \u0026quot;Jack\u0026quot;, age = 1) val olderJack = jack.copy(age = 2)  Data Classes and Destructuring Declarations Component functions generated for data classes enable their use in destructuring declarations:\nval jane = User(\u0026quot;Jane\u0026quot;, 35) val (name, age) = jane println(\u0026quot;$name, $age years of age\u0026quot;) // prints \u0026quot;Jane, 35 years of age\u0026quot;  Standard Data Classes The standard library provides Pair and Triple. In most cases, though, named data classes are a better design choice, because they make the code more readable by providing meaningful names for properties.\n"
},
{
	"uri": "/tech-department/syllabuses/data-eng/",
	"title": "Data Engineering",
	"tags": [],
	"description": "",
	"content": " Introduction to NCIT curriculum NCIT 01: Conducting research and user interviews NCIT 02: Reporting NCIT 03: Research presentation  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum  NCIT 18: Agile project management NCIT 19: Agile meetings  WORKSHOPS: How to be a professional   PROJECTS: [TODO] Beginner Linux challenges   TOPICS: Python self-learning   TOPICS: Clean Code for Python   PROJECTS: Git Basic Exercises  NCIT 04: Version control (GIT) for teamwork  TOPICS: Automate the boring stuff: Chapter 0 – Introduction   TOPICS: Automate the boring stuff: Chapter 1 – Python Basics   TOPICS: Automate the boring stuff: Chapter 2 – Flow Control   TOPICS: Automate the boring stuff: Chapter 3 – Functions   PROJECTS: Level 1 programming katas   PROJECTS: Build your first personal website   TOPICS: How to ask for help with your code   WORKSHOPS: [TODO] Big Picture of Web Dev  NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 06: Web design for business NCIT 07: Building an online business NCIT 12: Business and technology NCIT 09: Ethics and Professionalism in IT  WORKSHOPS: Clean Code (language agnostic)   TOPICS: Automate the boring stuff: Chapter 4 – Lists   TOPICS: Python Lists in depth   TOPICS: Automate the boring stuff: Chapter 5 – Dictionaries and Structuring Data   TOPICS: Automate the boring stuff: Chapter 6 – Manipulating Strings   TOPICS: Automate the boring stuff: Chapter 7 – Pattern Matching with Regular Expressions   TOPICS: [TODO] Python OOP basics   TOPICS: Automated Testing in Python   TOPICS: [TODO] Virtual Environments   PROJECTS: Animals Part 2. Adding Tests  NCIT 13: Object-oriented programming\n  TOPICS: How the internet works   TOPICS: Data Ethics and Privacy  NCIT 05: History of the Internet\n NCIT 08: Pseudocode and documentation\n  TOPICS: Automate the boring stuff: Chapter 8 – Input Validation   TOPICS: Automate the boring stuff: Chapter 9 – Reading and Writing Files   TOPICS: Automate the boring stuff: Chapter 10 – Organizing Files   TOPICS: Automate the boring stuff: Chapter 11 – Debugging   PROJECTS: Add logging to password checker  NCIT 11: Test-driven development\n  TOPICS: Intro to Docker and Docker-compose   PROJECTS: string-calculator   TOPICS: Python Exception handling   TOPICS: Python writing custom exceptions   TOPICS: Automate the boring stuff: Chapter 13 – Working with Excel Spreadsheets   TOPICS: Automate the boring stuff: Chapter 14 – Working with Google Spreadsheets   TOPICS: Automate the boring stuff: Chapter 16 – Working with CSV Files and JSON Data   TOPICS: Automate the boring stuff: Chapter 17 – Keeping Time, Scheduling Tasks, and Launching Programs   TOPICS: Automate the boring stuff: Chapter 18 – Sending Email and Text Messages   TOPICS: Python Decorators   TOPICS: Python Decorators - Intro   PROJECTS: Email random inspirational quote   PROJECTS: Consume Github API   TOPICS: Python Recursion by example   TOPICS: Python Iterators and Generators   TOPICS: Automate the boring stuff: Chapter 12 – Web Scraping   PROJECTS: SQL  NCIT 14: Database Development\n  TOPICS: The Tech Landscape Terminology   TOPICS: Database Comparison   PROJECTS: Database migrations with SQLAlchemy   PROJECTS: create a REST api to interact with actual database   PROJECTS: Python and MongoDB   PROJECTS: RabbitMQ   PROJECTS: DAGs with Airflow   PROJECTS: Python and Kafka  NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output\n  PROJECTS: [TODO] Python and Spark   TOPICS: [TODO] ZeroMQ versus RabbitMQ versus Kafka   TOPICS: optimizations and big-O   PROJECTS: Data Wrangling  NCIT 16: Thinking like a machine / Boolean algebra, logic\n NCIT 17: Search and sort techniques\n  WORKSHOPS: Git for Teamwork   WORKSHOPS: [TODO] Agile Recap  NCIT 20: Managing the Software Development Process\n DATA_ENG:\n postgres stored procedures sql index optimisations Entity Relationship Diagrams (ERD) Data warehousing with Hive Overview of the Hadoop ecosystem Linear regressions   "
},
{
	"uri": "/tech-department/tags/data-ethics/",
	"title": "Data Ethics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/intro-to-data-ethics/",
	"title": "Data Ethics",
	"tags": ["data-ethics"],
	"description": "",
	"content": " The slides to the workshop on Data Ethics  "
},
{
	"uri": "/tech-department/topics/data-ethics-and-privacy/",
	"title": "Data Ethics and Privacy",
	"tags": [],
	"description": "",
	"content": " Software development and data science can be really powerful. And with great power come great responsibility, Uncle Ben was right.\nHere are some basic rules worth following:\n don\u0026rsquo;t ship bad code. Bugs can be pricey. Test test test read this  Law There are a few laws in place around the storage of sensitive information. Notably:\n PCI DSS if you are storing credit card information POPI if you are storing personal information  There is no need to memorize these laws. Just know what they exist. In general, if information in your care can be used by bad characters then:\n keep it safe check if there is a law or standard that applies to your situation don\u0026rsquo;t be evil. Don\u0026rsquo;t use the \u0026ldquo;I\u0026rsquo;m just doing my job\u0026rdquo; excuse if your employer insists that you do dodgy things.  Required reading  Ethical checklist for data science Five Principles of Ethical Data Science Data Science Association Code of Conduct  Podcast (Optional) Of ethics, checklists and data\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/challenges/",
	"title": "Data Modelling Challenges",
	"tags": [],
	"description": "",
	"content": " Here are some harder, open-ended modelling challenges. The goal is stated, but you have to decide for yourself what techniques would be best to use.\nDetermine whether a computer network has been breached Complete and submit PROJECTS: Network Intrusion "
},
{
	"uri": "/tech-department/syllabuses/data-sci/",
	"title": "Data Science",
	"tags": [],
	"description": "",
	"content": " Introduction to NCIT curriculum NCIT 01: Conducting research and user interviews NCIT 02: Reporting NCIT 03: Research presentation  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum  NCIT 18: Agile project management NCIT 19: Agile meetings  WORKSHOPS: How to be a professional   PROJECTS: [TODO] Beginner Linux challenges   TOPICS: Python self-learning   TOPICS: Clean Code for Python   PROJECTS: Git Basic Exercises  NCIT 04: Version control (GIT) for teamwork  PROJECTS: Level 1 programming katas   PROJECTS: Build your first personal website   TOPICS: How to ask for help with your code  NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 06: Web design for business NCIT 07: Building an online business NCIT 12: Business and technology NCIT 09: Ethics and Professionalism in IT  WORKSHOPS: Clean Code (language agnostic)   TOPICS: [TODO] Python OOP basics   TOPICS: Automated Testing in Python   TOPICS: [TODO] Virtual Environments   WORKSHOPS: Survey design   WORKSHOPS: Google forms like a boss   PROJECTS: Assertive programming kata   PROJECTS: Data Visualisation Projects   WORKSHOPS: Data Ethics  NCIT 11: Test-driven development  PROJECTS: string-calculator   PROJECTS: Statistical Thinking   TOPICS: The Tech Landscape Terminology  NCIT 12: Business and technology  PROJECTS: Data Wrangling   PROJECTS: Cross-validation \u0026amp; Simple Linear Regression   PROJECTS: Multivariate Linear Regression  NCIT 13: Object-oriented programming  TOPICS: How the internet works   TOPICS: Data Ethics and Privacy  NCIT 05: History of the Internet NCIT 08: Pseudocode and documentation  PROJECTS: OOP for data science   PROJECTS: Plotly Dashboard Assignment  NCIT 14: Database Development  PROJECTS: SQL  NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output  PROJECTS: Logistic regression   WORKSHOPS: Agile and Scrum   PROJECTS: Decision Trees  NCIT 16: Thinking like a machine / Boolean algebra, logic NCIT 17: Search and sort techniques NCIT 18: Agile project management NCIT 19: Agile meetings NCIT 20: Managing the Software Development Process  TOPICS: optimizations and big-O  NCIT Summative assessment  WORKSHOPS: Git for Teamwork   WORKSHOPS: [TODO] Agile Recap   TOPICS: Database Comparison   PROJECTS: K-Means Clustering Assignment   PROJECTS: Natural language processing   "
},
{
	"uri": "/tech-department/topics/data-science-specific/data-science-methodology/",
	"title": "Data Science Methodology",
	"tags": [],
	"description": "",
	"content": "Despite the recent increase in computing power and access to data over the last couple of decades, our ability to use the data within the decision making process is either lost or not maximized at all too often. We don\u0026rsquo;t have a solid understanding of the questions being asked and how to apply the data correctly to the problem at hand.\nThis course has one purpose, and that is to share a methodology that can be used within data science, to ensure that the data used in problem solving is relevant and properly manipulated to address the question at hand.\nThe course content can be found here\n"
},
{
	"uri": "/tech-department/syllabuses/data-sci-prebootcamp/",
	"title": "Data Science boot camp pre-learning",
	"tags": [],
	"description": "",
	"content": "  TOPICS: Introduction to Bootcamp Preparation phase   TOPICS: The journey of an Umuzi recruit   TOPICS: Extra bootcamp preparation instructions for data science   TOPICS: Statistics and Probability - Quantitative data analysis   TOPICS: Data Science bootcamp setup   TOPICS: Bash for bootcamp   PROJECTS: Git Basic Exercises   TOPICS: Useful Git commands   TOPICS: Scientific Computing with Python   TOPICS: Data Analysis with Python   PROJECTS: Pre bootcamp challenges   "
},
{
	"uri": "/tech-department/topics/bootcamp/data-sci-environment-setup/",
	"title": "Data Science bootcamp setup",
	"tags": [],
	"description": "",
	"content": " You\u0026rsquo;ll need to be set up so that you can write and run code on your own device.\nIf you have a computer You\u0026rsquo;ll need a couple of things:\n https://code.visualstudio.com/ This is a really wonderful code editer, it works on any operating system and has a few features we like a lot https://git-scm.com/downloads Optional: You can also start practising to use Anaconda and use its Integrated Development Environment, but all the the pre-bootcamp learning resources can be done on any Python-friendly IDE like Visual studio above! Follow latest installation instruction from the official Anaconda website - https://www.anaconda.com/download/  If you have an Android device If you don\u0026rsquo;t have a computer you can use then you can use your phone. Here\u0026rsquo;s how to get set up on an Android.\nYou\u0026rsquo;ll need to install 2 things:\n Acode: This is where you will edit your code: https://play.google.com/store/apps/details?id=com.foxdebug.acodefree\u0026amp;hl=en_ZA Termux: https://play.google.com/store/apps/details?id=com.termux\u0026amp;hl=en_ZA  Have some videos:\n Using ACode: https://www.youtube.com/watch?v=XZAc-imlq88 Setting up Git on Termux: https://www.youtube.com/watch?v=DG3l9sxFVnY  Termux takes a little bit of setup before you can use it for all the stuff we need. Also, it might seem really weird and confusing at first. If this stuff kicks your a\\$\\$ then rather come back to this page when you feel ready. But you do need to get comfortable with this stuff before bootcamp.\nWhen you open termux up for the first time please do the following:\npkg update pkg upgrade pkg install git git config --global user.email \u0026quot;your@email.whatevs\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; termux-setup-storage cd storage/shared # now you can cd into your folders and interact with git  Note:\n If any of these commands ask you if you want to continue, then type in Y then enter. At some point Termux will ask you for a github password. When you type in a password then it looks like nothing is being typed. This is normal. Just type out your password like you normally would and press enter.  If you have an iPhone Eish, we haven\u0026rsquo;t managed to find anything good here. If you have any suggestions please bring them up.\nIf you don\u0026rsquo;t have the gear you need Do your best to find a solution on your own\n ask your friends and family if you can borrow something see if you can find an internet cafe and try make a deal see if there are any co-working spaces near you that have computers available see if you can make a plan with someone who refurbishes computers for a living, sometimes you can pick up gear very cheaply  Equipment after bootcamp If you get through our bootcamp, we\u0026rsquo;ll hook you up with gear. But for now it\u0026rsquo;s on you.\nGood luck!\n"
},
{
	"uri": "/tech-department/topics/data_validation_and_verification/",
	"title": "Data Validation",
	"tags": [],
	"description": "",
	"content": " Data validation Data validation means exactly what it sounds like, your program checks the data to make sure it meets some rules or restrictions. Validation and verification are two ways to check that the data entered into a computer is correct, because data entered incorrectly is of little use. There are many different data validation checks that can be done.\nWhy is data validation sooo important? Data validation is a vital part of any application, as it guarantees that a system works on clean, perfect and helpful data. for instance, you might need to ensure that passwords are no less than eight characters in length, or guarantee that usernames are unique. Characterizing acceptance rules makes structure taking care of much, much less demanding. Take Umuzi for instance, when people apply to Umuzi they sometimes provide invalid data. i.e, invalid ID numbers and cellphone numbers. Often we just need to make sure that whatever information is provided is in the right shape.\nValidation is important for a lot of reasons. One big reason is that a lot of data comes from people. People make mistakes, and not everyone is data literate or even computer literate enough to consistently create good data. Data capturers make mistakes, people mess up when filling in forms, people do strange things when interacting with websites and apps.\nSometimes computers make invalid data. This could be due to software errors or even hardware faults.\nTypes of validation There are a number of validation types that can be used to check the data that is being entered.\n   Validation type How it works Example usage       Check digit The last one or two digits in a code are used to check the other digits are correct Bar code readers in supermarkets use check digits     Format check Checks the data is in the right format A National Insurance number is in the form LL 99 99 99 L where L is any letter and 9 is any number.     Length check Checks the data isn\u0026rsquo;t too short or too long A password which needs to be six letters long     Lookup table Looks up acceptable values in a table There are only seven possible days of the week     Range check Checks that a value falls within the specified range Number of hours worked must be less than 50 and more than 0     Spell check Looks up words in a dictionary When word processing     Presence check Checks that data has been entered into a field In most databases a key field cannot be left blank      We check the data to make sure that the user did not make a mistake, accidentally or intentionally, which can prevent our program from functioning correctly or corrupt the data as this has security and data integrity implications.\nData verification Data Verification is a process that is performed to check data for accuracy and inconsistencies after the process of selecting, preparing, extracting, and transforming data either from a direct user or another process.\nMethods of verification There might be more methods of data verification in the world, these are the two most common methods of data verification:\n Double entry - entering the data twice and comparing the two copies. This effectively doubles the workload, and as most people are paid by the hour, it costs more too.\n Proofreading data - this method involves someone checking the data entered against the original document. This is also time-consuming and costly.\n  If you are familiar with any other methods of data verification, Feel free to contribute.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/data-visualisation/",
	"title": "Data Visualisation",
	"tags": [],
	"description": "",
	"content": " Data visualisation is a great way to quickly see what is going on in the data. There are many different ways to visualise data, but some basic principles that always apply are: - Is the graph easily readable? - Is this the appropriate graph for the type of data / information that I am trying to display? - Is the graph accurately representing the data? - What story am I trying to tell? Is the story clear from the graph? - Have I given the reader all the information they need to interpret this graph at a glance? Are the axes labeled, and if relevant, is there a legend and title?\nThis webiste shows some of the most frequently used types of graphs, and what data they are most suitable for. Below, we give a quick summary:\n Show the distribution of a single continuous variable: histograms Show the number of observations in a category: donut plots, tree plots, bar graphs Show averages or counts by category: bar graph Show average and distribution by category: box plot Show the relationship between two variables: scatterplots, line graphs Show changes over time: line graph (or a bubble chart if you have several variables)  Tutorials To get you introduced to data visualisation, complete the following tutorial(s):\nCompulsory: Go through the DataCamp course Introduction to Data Visualisation with Python.\nOptional: Complete Kaggle\u0026rsquo;s Data Visualisation: From Non-Coder to Coder.\nAdvanced: Making interactive graphs with Plotly Here is a great walk-through of different types of plots in Plotly with Cufflinks.\n"
},
{
	"uri": "/tech-department/tags/data-visualisation-datacamp/",
	"title": "Data Visualisation Datacamp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/data-visualisation-mobile-money/",
	"title": "Data Visualisation Mobile Money",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/",
	"title": "Data Visualisation Projects",
	"tags": [],
	"description": "",
	"content": " Background Make sure you have gone through at least one of the basic tutorials listed in TOPICS: Data Visualisation Assignment 1 Complete and submit PROJECTS: Evolution of Linux Visualisation .\nAssignment 2 Complete and submit PROJECTS: Financial Services Use in Tanzania . For your submission, create an html report to accompany your notebook in your repo.\n"
},
{
	"uri": "/tech-department/tags/data-wrangling/",
	"title": "Data Wrangling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/data-wrangling/",
	"title": "Data Wrangling",
	"tags": ["data-wrangling"],
	"description": "",
	"content": " Key concepts  merging data frames filtering data frames manipulating rows and columns  Tutorials  Intro to pandas and data manipulation here If you\u0026rsquo;d like more, complete the DataCamp skills track Data Manipulation with Python  Assignment Prerequisites You should be able to write basic functions and for loops for this assignment. You should also be familiar with merging, filtering and creating new columns in pandas.\nOptional: As far as possible, use functional programming techniques (map, reduce, apply) instead of loops when writing the functions below.\nFor example, to modify every column in a data frame (to get a percentage in this case), instead of writing:\nfor column in df: column = column/10*100 #get percentage  use:\ndef get_percentage(score): score/10*100 df.apply(get_percentage, axis = 1) #axis=1 applies the function to all columns  Instructions This data contains personality scores for recruits, plus the department they applied for.\n Import the dataset personality_scores.csv. Examine the data frame for duplicates (based on ID), and drop any duplicates that exist. Use an assert statement to check that the new data frame is the length of the unique entries of the original data frame.  Tip: An example assert statement is assert 2*20=40 and it\u0026rsquo;s a great way to check that your modification of the data was successful.\n Create new columns containing the total score of each of the personality test subscales. To do this, write a function (or functions) that will calculate the total score for each of the subscales (conscientiousness, emotional stability, openness to new experience, agreeableness, extraversion), as set out in scoring. In other words, for the conscientiousness total score, all items marked as belonging to \u0026lsquo;conscientiousness\u0026rsquo; should be summed.  The new data frame will look something like this:\n   I am always prepared I am easily disturbed I am exacting (demanding) in my work \u0026hellip; Conscientiousness Emotional Stability     (3, 5) (4, 5) (3, 5) \u0026hellip; 10 5   (3, 5) (4, 1) (3, 1) \u0026hellip; 6 1   (3, 5) (4, 3) (3, 3) \u0026hellip; 8 3     Import the data in departments.csv. Merge this data frame with the personality score data frame, keeping all applicants within the department data frame. Use an assert statement to check that the newly created merged data frame has the same amount of rows as the department data frame, and the expected number of columns.\n Filter the merged data frame so that you get only the applicants who scored less than 30 on emotional stability, conscientiousness AND agreeableness. Print the ID numbers and departments of these applicants to the screen, and also assign these applicants the tag \u0026ldquo;high_risk\u0026rdquo; in a new column. All other applicants get the tag \u0026ldquo;low_risk\u0026rdquo;\n Create a new data frame with a count of the number of low and high risk applicants within each department. Let each department be a separate column. In other words, the data frame should look something like this:\n     Risk Multimedia Coding Data     Low risk 150 123 239   High risk 40 15 22    "
},
{
	"uri": "/tech-department/topics/data-validation-and-quality-control/",
	"title": "Data validation and quality control",
	"tags": [],
	"description": "",
	"content": " Prevention first!  Design surveys and tools in such a way that minimises user error and measurement error  Inspect the data  Completeness:\n How complete is the data? It\u0026rsquo;s very important to differentiate between data that is missing and data that has a zero value! These mean very different things! QC: get count of missing observations QC: Are all important variables measured?  Measurement accuracy:\n Do the data represent the true value of what is being measured? Could be incorrect because of incorrect entry, unreliable measurement, incorrectly functioning/ broken machines, etc. QC: check that data are within allowable bounds (e.g. no percentages higher than 100%) QC: check measure reliability QC: check measure validity (e.g., compare measures that should be similar - the measure should not be biased or contaminated) QC: Visually inspect the data to see whether it looks as it should - i.e. is the mean, range and distribution what we would expect? Are there outliers? Documentation: Measurement imprecision should be noted in the documentation (e.g. the distance measure gives distance to the closest 100km)  Calculation accuracy: Are the calculation functions performing the correct calculations and are they working as they should?\n QC: unit tests to check that functions are working as they should QC: Visually inspect to see that the output matches what you would expect  Integrity:\n On storage, data values are standardized according to a data model and/or data type. All characteristics of the data must be correct – e.g. dates, integers. Data must stay secure and correct over its lifespan: data cannot be modified in an unauthorized or undetected manner. Minimise duplication of data Store the original, raw data separately from processed data   Know the data content and pipeline Individuals who know the data best are very important to successfully validating the data! Alternatively, get out on the ground and get to know the data process and content yourself!\nDocumentation An audit trail should always be available, i.e. how the data is collected, transformed and stored should be documented so that it is clear at which step of the process problems may have crept in.\nReferences Data quality assurance in data warehousing\nThe Challenges of Data Quality and Data Quality Assessment in the Big Data Era\n"
},
{
	"uri": "/tech-department/topics/data-infrastructure/",
	"title": "Data-infrastructures",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/",
	"title": "Data-science-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/",
	"title": "Data-science-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/database-comparison/",
	"title": "Database Comparison",
	"tags": [],
	"description": "",
	"content": " SQL is great and all, and even though a lot of people think it\u0026rsquo;s a lil old-school, it\u0026rsquo;s here to stay. It is a robust and mature technology, the query language it defines can be used for all sorts of big data and analytic workloads, and it\u0026rsquo;s easy to reason about.\nBut when it comes to data storage and access there isn\u0026rsquo;t a once-size-fits-all technology.\nThere are a lot of databases out there. You can think of them in a few different categories.\nIn memory databases are FAST, they store everythig in RAM and so the data that they store is not durable. If the computer shuts down then the data is gone. Redis is an example of this.\nMost databases store data to disk. Eg Postgres is not an in-memory database. The data it stores is durable.\nThen you get NoSQL databases. The No in NoSQL could maybe stand for \u0026ldquo;Not only\u0026rdquo; SQL. But it depends on who you talk to and their agenda. Basically when it comes to SQL, the database structure is pretty strict and rigid and if the shape of your data changes you need to jump through hoops to make it work. In many sitations this just isn\u0026rsquo;t ideal. So there is a whole class of shemaless or low-schema databases that address this. MongoDB is a commonly used durable NoSQL database.\nAnother set of categories that databases fall into is to do with how they scale. The options are vertical and horizontal.\nImagine you have a database running on a server and it runs out of disk space or some other respource. Vertical scaling implies simply upgrading that server - by giving it a bigger hard-drive, more ram, or a bigger cpu you allow bigger workloads. There is an upper limit to how big you can vertically scale.\nHorisontal scaling is all about introducing more computing nodes (computers, VMs or containers) to the mix, and then coordinating those nodes to do the job of one big database. This allows for much bigger data and database requests and writes can also be shared between the nodes. This is awesome but of course has its own complexities and limitations, for example data on different nodes tends to become out of sync and you have to be aware of that.\nMongoDB is horizontally scalable by default. Postrgres isn\u0026rsquo;t really but there are a few workarounds depending on what you want to do with it.\nResources  https://realpython.com/data-engineer-interview-questions-python/ This covers a ot of ground around comparing different databases Python and MongoDB: https://realpython.com/introduction-to-mongodb-and-python/ Python and Redis: https://realpython.com/python-redis/  "
},
{
	"uri": "/tech-department/topics/ncit/114048-and-114049/",
	"title": "Database Development",
	"tags": ["sql"],
	"description": "",
	"content": " 1. Database management systems \nWatch this video for an intro to relationship databases (databases that use SQL)\n   \nFor a second introduction to RDMS watch this video\n   \nPlease visit this link to find the reading material for this section. \n2. Introduction to SQL For a basic intro to SQL commands, watch this video:    Please find here the reading material for this section\n3. NoSql Databases Please find here the reading material for this section\n4. MongoDB Introduction to MongoDB For a basic introduction to MongoDB please check out the video below.   Installation\nPlease follow the link below depending on your platform:\n Window Ubuntu Mac  Applying CRUD operations with the low-level MongoDB driver\nPlease follow along with the lecture using the provided reading material. Please click here to download the material.\n"
},
{
	"uri": "/tech-department/projects/python-specific/sqlalchemy-migrations/",
	"title": "Database migrations with SQLAlchemy",
	"tags": [],
	"description": "",
	"content": " In this project you will practice the basics of alembic based migrations. A lot of this stuff might seem quite straight-forward now, but focus! When mygrations go wrong in production then life gets way too hard, and real user data can be put at serious risk!\nThis excercise will also teach you a bit more about why git is important. Make sure you commit often! Seriously! Git will save your bacon!\nInstructions In this project you\u0026rsquo;ll need 2 databases, I\u0026rsquo;ll refer to them as \u0026ldquo;development\u0026rdquo; and \u0026ldquo;prod\u0026rdquo;. How you set these up is up to you. You could have one docker composition that sets them both up, or (easier) you can have 2 docker compositions that are well named.\nThis is similar to how you would work with real databases later in life. You\u0026rsquo;ll have a database on your computer that you can experiment on. If you destroy the data there then it\u0026rsquo;s not a big deal at all. Your job is to keep your prod database safe.\nUsing your dev database:  write some sql alchemy models to describe a Recruit. A recruit has the following attributes:   first name surname chatname github name id number   create some migrations and run them against your dev database. Take a look inside the migration files - you wont necessarily ever need to write these things yourself, but it\u0026rsquo;s good to be able to look at them and see what they mean. write a small script called \u0026ldquo;create_recruits.py\u0026rdquo; that adds some new recruits to the database and run it against your dev database. Jst invent this information add a new column to your sqlalchemy model for personal_email_address. Set it to be a required field, and must be unique make your migrartions again and run them. This step wont go smoothly - you\u0026rsquo;ll need to do it in a few steps. Look at your migration files. They should make sense  using your prodution database  run all your migrations update your create_recruits script to add personal_email_address values, then run it against the prod database  This should have been quite smooth\nback to the dev db Now a lot can go wrong with databases and migrations. Ideally the db, your models and your migrations will all be in sync. If they fall out of sync life gets kinda hard sometimes.\nGenerally the models should be considered the truth of things. That truth should then be propogated to the migration files, and then to the database. If the database is updated independantly then weird things start to happen.\nIn this secrtion we\u0026rsquo;ll be updating the database independantly. In real life you wouldn\u0026rsquo; do this intentionally.\nSo why are we even doing this weird thing?\nBasically if you are working on a team the one of your team mates migration files might disagree with yours. And you might end up in a mess. Or your migration files that work totally fine against your dev db might not work against prod because the last person to update the prod db wasn\u0026rsquo;t you. This can lead to all sortf of chaos - that chaos is avoidable. But it\u0026rsquo;s realy worth appreciating.\nWe\u0026rsquo;re going to go through 3 situations. They are all nice and simple on their own. In real applications the database structure generally has many interlinking tables. Eg our Umuzi recruitment portal has 26 tables, and they\u0026rsquo;re all connected to each other.\nSituation 1: A new column using your dev db:\n open up a psql shell and add a new column to your database called \u0026ldquo;chort\u0026rdquo;. manualy update the data - everyone is in \u0026ldquo;C25 Data Eng\u0026rdquo; open a python shell and use your models to query the data. What happened? now create your migrations and look at the changes. Are there any changes? What will happen if you run your migrations? now go to your models and add a required cohort column create your migrations and look at the changes. Did anything happen? Now make a new script called \u0026ldquo;create_c26_recruits.py\u0026rdquo;. USe it to add 5 random c26 recruits to your database. run your script on your development database Now run your migrations against your prod database. What happened? run create_c26_recruits against your prod database. What happened?  Do whatever it takes to get it to work\u0026hellip; you might need to checkout an earlier commit. By the end you\u0026rsquo;ll have the C26 recruits in the prod database.\nRules: Dont delete any data in your production database! But you can completely delete your dev database if you wanted to.\nSituation 2: A renamed column using your dev db:\n open up a psql shell and rename the \u0026ldquo;chatname\u0026rdquo; column to \u0026ldquo;rocketchat_user\u0026rdquo; open up a python shell and try to query your db. what happened? now create your migrations and look at the changes. Are there any changes? What will happen if you run your migrations? now go to your models and rename the cohort column create your migrations and look at the changes. Did anything happen? create a new script to create some c27s and run it against your dev db run your script on your development database Now run your migrations against your prod database. What happened? run create_c26_recruits against your prod database. What happened?  Do whatever it takes to get it to work\u0026hellip; you might need to checkout an earlier commit. By the end you\u0026rsquo;ll have the C27 recruits in the prod database.\nRules: Dont delete any data in your production database! But you can completely delete your dev database if you wanted to.\nSituation 2: A deleted column using your dev db:\n open up a psql shell and delete the id number column open up a python shell and try to query your db. what happened? now create your migrations and look at the changes. Are there any changes? What will happen if you run your migrations? now go to your models and remote the column create your migrations and look at the changes. Did anything happen? create a new script to create some c28s and run it against your dev db run your script on your development database Now run your migrations against your prod database. What happened? run create_c26_recruits against your prod database. What happened?  Do whatever it takes to get it to work\u0026hellip; you might need to checkout an earlier commit. By the end you\u0026rsquo;ll have the C28 recruits in the prod database.\nRules: Dont delete any data in your production database! But you can completely delete your dev database if you wanted to.\nThe End Earlier I hinted that there are ways to prevent migration chaos. Basically what we do at Umuzi is work with a couple of rules.\n We follow a version of the git feature branching workflow We make a rule that no feature branch can include any migration files (devs add the migrations to their gitignore file) The devs can then mess around with their local migrations and dev databases as much as they need to without corrupting the master branch. PRs that include any references to migrations are rejected with a snotty message When it comes time to deploy the master branch migrations are generated off a real database and those migrations are pushed into the master branch  "
},
{
	"uri": "/tech-department/tags/datacamp-logistic-regression/",
	"title": "Datacamp Logistic Regression",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/deadlines/",
	"title": "Deadlines",
	"tags": [],
	"description": "",
	"content": " If there is a deadline for any cohort then that deadline should be shared in the \u0026ldquo;tech deadlines\u0026rdquo; calender. To do this:\n create an event in your own calendar. name it in an informative way (name the assignment, name the part of the assignment, who is the deadline for? eg: C13 web) in the description of the event add any links, descriptions or requirements that might be useful invite the deadline calender to the event  Note: For the event to be accepted by the deadlines calender it has to have a duration. If your event is eg from 8:00 to 8:00 then it will be automatically rejected.\nClear instructions on how to submit the event should be included on the event. For example if it is a gnomio assignment then that should be stated. If the assignment makes use of the code submission form then a link to the form should be included.\nLate submissions The person who sets a deadline will check who submitted and who is outstanding.\nIf a recruit is then:\n send a slack message to each recruit who is late share a list of all late people with the rest of the tech team on slack? Or email? (should we have a specific channel?)  In the next cohort standup meeting:\n the recruits who submitted late will be verbally warned. They will need to submit their work by the next morning  If the recruit does not submit their work after being verbally warned then a senior tech manager will personally:\n email all the recruits who have missed their deadline (other managers should be CC\u0026rsquo;d). This counts as a WRITTEN WARNING have a meeting with the offending recruits. This can be a short meeting, and it can be a group meeting.  repeat offenders If a recruit gets 3 written warnings or 9 verbal warnings (or a combination, eg 1 written warning and 6 verbal warnings) then there will be a formal disciplinary hearing held by an HR representative. A senior tech manager will provide HR with all evidence.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/debugging/",
	"title": "Debugging",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Debugging\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/tags/decision-trees/",
	"title": "Decision Trees",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/decision-trees/",
	"title": "Decision Trees",
	"tags": ["decision-trees"],
	"description": "",
	"content": " Background material  Walk through the machine learning Kaggle tutorial Complete the DataCamp tutorial on Tree-Based Models  Assignment Use a decision tree model to predict whether mushrooms are poisonous or edible.\n Split your data into train and test sets. Get basic descriptive statistics for the training data and check for missing and incorrect or extreme values. Get scatterplots or heatmaps showing the relationship between the variables. What are the factors that predict whether a mushroom is poisonous? Report the accuracy of your model on the training set and on the test set. How successful is the model - what is its precision and recall? What is the prevalence of poisonous mushrooms in the dataset? How might prevalence affect the positive and negative predictive values of a test/model?  Find the data here.\nMore information on decision trees Coursera: Decision Trees\nDescription of the dataset This dataset includes descriptions of 23 species of gilled mushrooms in the Agaricus and Lepiota Family. Each species is identified as either edible or poisonous.\n   Variable Description     classes edible=e, poisonous=p   cap-shape bell=b, conical=c, convex=x, flat=f, knobbed=k, sunken=s   cap-surface fibrous=f, grooves=g, scaly=y, smooth=s   cap-color brown=n, buff=b, cinnamon=c, gray=g, green=r, pink=p, purple=u, red=e, white=w, yellow=y   bruises? bruises=t, no=f   odor almond=a, anise=l, creosote=c, fishy=y, foul=f, musty=m, none=n, pungent=p, spicy=s   gill-attachment attached=a, descending=d, free=f, notched=n   gill-spacing close=c, crowded=w, distant=d   gill-size broad=b, narrow=n   gill-color black=k, brown=n, buff=b, chocolate=h, gray=g, green=r, orange=o, pink=p, purple=u, red=e, white=w, yellow=y   stalk-shape enlarging=e, tapering=t   stalk-root bulbous=b, club=c, cup=u, equal=e, rhizomorphs=z, rooted=r, missing=?   stalk-surface-above-ring fibrous=f, scaly=y, silky=k, smooth=s   stalk-surface-below-ring fibrous=f, scaly=y, silky=k, smooth=s   stalk-color-above-ring brown=n, buff=b, cinnamon=c, gray=g, orange=o, pink=p, red=e, white=w, yellow=y   stalk-color-below-ring brown=n, buff=b, cinnamon=c, gray=g, orange=o, ink=p, red=e, white=w, yellow=y   veil-type partial=p, universal=u   veil-color brown=n, orange=o, white=w, yellow=y   ring-number none=n, one=o, two=t   ring-type cobwebby=c, evanescent=e, flaring=f, large=l, none=n, pendant=p, sheathing=s, zone=z   spore-print-color black=k, brown=n, buff=b, chocolate=h, green=r, orange=o, purple=u, white=w, yellow=y   population abundant=a, clustered=c, numerous=n, scattered=s, several=v, solitary=y   habitat grasses=g, leaves=l, meadows=m, paths=p, urban=u, waste=w, woods=d    "
},
{
	"uri": "/tech-department/tags/decorators/",
	"title": "Decorators",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/delegated-properties/",
	"title": "Delegated Properties",
	"tags": [],
	"description": "",
	"content": " There are certain common kinds of properties, that, though we can implement them manually every time we need them, would be very nice to implement once and for all, and put into a library. Examples include\n lazy properties: the value gets computed only upon first access, observable properties: listeners get notified about changes to this property, storing properties in a map, instead of a separate field for each property.  To cover these (and other) cases, Kotlin supports delegated properties:\nclass Example { var p: String by Delegate() }  The syntax is: val/var :  by . The expression after by is the delegate, because get() (and set()) corresponding to the property will be delegated to its getValue() and setValue() methods. Property delegates don’t have to implement any interface, but they have to provide a getValue() function (and setValue() — for var\u0026rsquo;s). For example:\nclass Delegate { operator fun getValue(thisRef: Any?, property: KProperty\u0026lt;*\u0026gt;): String { return \u0026quot;$thisRef, thank you for delegating '${property.name}' to me!\u0026quot; } operator fun setValue(thisRef: Any?, property: KProperty\u0026lt;*\u0026gt;, value: String) { println(\u0026quot;$value has been assigned to '${property.name} in $thisRef.'\u0026quot;) } }  When we read from p that delegates to an instance of Delegate, the getValue() function from Delegate is called, so that its first parameter is the object we read p from and the second parameter holds a description of p itself (e.g. you can take its name). For example:\nval e = Example() println(e.p)  This prints\nExample@33a17727, thank you for delegating ‘p’ to me!  Similarly, when we assign to p, the setValue() function is called. The first two parameters are the same, and the third holds the value being assigned:\ne.p = \u0026quot;NEW\u0026quot; This prints  NEW has been assigned to ‘p’ in Example@33a17727. Note that since Kotlin 1.1 you can declare a delegated property inside a function or code block, it shouldn\u0026rsquo;t necessarily be a member of a class.\nStandard Delegates The Kotlin standard library provides factory methods for several useful kinds of delegates.\nLazy lazy() is a function that takes a lambda and returns an instance of Lazy which can serve as a delegate for implementing a lazy property: the first call to get() executes the lambda passed to lazy() and remembers the result, subsequent calls to get() simply return the remembered result.\nval lazyValue: String by lazy { println(\u0026quot;computed!\u0026quot;) \u0026quot;Hello\u0026quot; } fun main(args: Array\u0026lt;String\u0026gt;) { println(lazyValue) println(lazyValue) }  This example prints:\ncomputed! Hello Hello  By default, the evaluation of lazy properties is synchronized: the value is computed only in one thread, and all threads will see the same value.\nIf the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass LazyThreadSafetyMode.PUBLICATION as a parameter to the lazy() function.\nAnd if you\u0026rsquo;re sure that the initialization will always happen on a single thread, you can use LazyThreadSafetyMode.NONE mode, which doesn\u0026rsquo;t incur any thread-safety guarantees and the related overhead.\nObservable Delegates.observable() takes two arguments: the initial value and a handler for modifications. The handler gets called every time we assign to the property (after the assignment has been performed). It has three parameters: a property being assigned to, the old value and the new one:\nimport kotlin.properties.Delegates class User { var name: String by Delegates.observable(\u0026quot;\u0026lt;no name\u0026gt;\u0026quot;) { prop, old, new -\u0026gt; println(\u0026quot;$old -\u0026gt; $new\u0026quot;) } } fun main(args: Array\u0026lt;String\u0026gt;) { val user = User() user.name = \u0026quot;first\u0026quot; user.name = \u0026quot;second\u0026quot; }  This example prints:\n\u0026lt;no name\u0026gt; -\u0026gt; first first -\u0026gt; second  If you want to be able to intercept an assignment and \u0026ldquo;veto\u0026rdquo; it, use vetoable() instead of observable(). The handler passed to the vetoable is called before the assignment of a new property value has been performed.\nStoring Properties in a Map One common use case is storing the values of properties in a map. This comes up often in applications like parsing JSON or doing other “dynamic” things. In this case, you can use the map instance itself as the delegate for a delegated property.\nclass User(val map: Map\u0026lt;String, Any?\u0026gt;) { val name: String by map val age: Int by map } In this example, the constructor takes a map: val user = User(mapOf( \u0026quot;name\u0026quot; to \u0026quot;John Doe\u0026quot;, \u0026quot;age\u0026quot; to 25 ))  Delegated properties take values from this map (by the string keys –– names of properties):\nprintln(user.name) // Prints \u0026quot;John Doe\u0026quot; println(user.age) // Prints 25  This works also for var’s properties if you use a MutableMap instead of read-only Map:\nclass MutableUser(val map: MutableMap\u0026lt;String, Any?\u0026gt;) { var name: String by map var age: Int by map }  Local Delegated Properties (since 1.1) You can declare local variables as delegated properties. For instance, you can make a local variable lazy:\nfun example(computeFoo: () -\u0026gt; Foo) { val memoizedFoo by lazy(computeFoo) if (someCondition \u0026amp;\u0026amp; memoizedFoo.isValid()) { memoizedFoo.doSomething() } }  The memoizedFoo variable will be computed on the first access only. If someCondition fails, the variable won\u0026rsquo;t be computed at all.\nProperty Delegate Requirements Here we summarize requirements to delegate objects.\nFor a read-only property (i.e. a val), a delegate has to provide a function named getValue that takes the following parameters:\n thisRef — must be the same or a supertype of the property owner (for extension properties — the type being extended), property — must be of type KProperty\u0026lt;*\u0026gt; or its supertype, this function must return the same type as property (or its subtype).  For a mutable property (a var), a delegate has to additionally provide a function named setValue that takes the following parameters:\n thisRef — same as for getValue(), property — same as for getValue(), new value — must be of the same type as a property or its supertype.  getValue() and/or setValue() functions may be provided either as member functions of the delegate class or extension functions. The latter is handy when you need to delegate property to an object which doesn\u0026rsquo;t originally provide these functions. Both of the functions need to be marked with the operator keyword.\nThe delegate class may implement one of the interfaces ReadOnlyProperty and ReadWriteProperty containing the required operator methods. These interfaces are declared in the Kotlin standard library:\ninterface ReadOnlyProperty\u0026lt;in R, out T\u0026gt; { operator fun getValue(thisRef: R, property: KProperty\u0026lt;*\u0026gt;): T } interface ReadWriteProperty\u0026lt;in R, T\u0026gt; { operator fun getValue(thisRef: R, property: KProperty\u0026lt;*\u0026gt;): T operator fun setValue(thisRef: R, property: KProperty\u0026lt;*\u0026gt;, value: T) }  Translation Rules Under the hood for every delegated property the Kotlin compiler generates an auxiliary property and delegates to it. For instance, for the property prop the hidden property prop$delegate is generated, and the code of the accessors simply delegates to this additional property:\nclass C { var prop: Type by MyDelegate() } // this code is generated by the compiler instead: class C { private val prop$delegate = MyDelegate() var prop: Type get() = prop$delegate.getValue(this, this::prop) set(value: Type) = prop$delegate.setValue(this, this::prop, value) }  The Kotlin compiler provides all the necessary information about prop in the arguments: the first argument this refers to an instance of the outer class C and this::prop is a reflection object of the KProperty type describing prop itself.\nNote that the syntax this::prop to refer a bound callable reference in the code directly is available only since Kotlin 1.1.\nProviding a delegate (since 1.1) By defining the provideDelegate operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right hand side of by defines provideDelegate as a member or extension function, that function will be called to create the property delegate instance.\nOne of the possible use cases of provideDelegate is to check property consistency when the property is created, not only in its getter or setter.\nFor example, if you want to check the property name before binding, you can write something like this:\nclass ResourceLoader\u0026lt;T\u0026gt;(id: ResourceID\u0026lt;T\u0026gt;) { operator fun provideDelegate( thisRef: MyUI, prop: KProperty\u0026lt;*\u0026gt; ): ReadOnlyProperty\u0026lt;MyUI, T\u0026gt; { checkProperty(thisRef, prop.name) // create delegate } private fun checkProperty(thisRef: MyUI, name: String) { ... } } fun \u0026lt;T\u0026gt; bindResource(id: ResourceID\u0026lt;T\u0026gt;): ResourceLoader\u0026lt;T\u0026gt; { ... } class MyUI { val image by bindResource(ResourceID.image_id) val text by bindResource(ResourceID.text_id) }  The parameters of provideDelegate are the same as for getValue:\n thisRef — must be the same or a supertype of the property owner (for extension properties — the type being extended), property — must be of type KProperty\u0026lt;*\u0026gt; or its supertype.  The provideDelegate method is called for each property during the creation of the MyUI instance, and it performs the necessary validation right away.\nWithout this ability to intercept the binding between the property and its delegate, to achieve the same functionality you\u0026rsquo;d have to pass the property name explicitly, which isn\u0026rsquo;t very convenient:\n// Checking the property name without \u0026quot;provideDelegate\u0026quot; functionality class MyUI { val image by bindResource(ResourceID.image_id, \u0026quot;image\u0026quot;) val text by bindResource(ResourceID.text_id, \u0026quot;text\u0026quot;) } fun \u0026lt;T\u0026gt; MyUI.bindResource( id: ResourceID\u0026lt;T\u0026gt;, propertyName: String ): ReadOnlyProperty\u0026lt;MyUI, T\u0026gt; { checkProperty(this, propertyName) // create delegate }  In the generated code, the provideDelegate method is called to initialize the auxiliary prop$delegate property. Compare the generated code for the property declaration val prop: Type by MyDelegate() with the generated code above (when the provideDelegate method is not present):\nclass C { var prop: Type by MyDelegate() } // this code is generated by the compiler // when the 'provideDelegate' function is available: class C { // calling \u0026quot;provideDelegate\u0026quot; to create the additional \u0026quot;delegate\u0026quot; property private val prop$delegate = MyDelegate().provideDelegate(this, this::prop) val prop: Type get() = prop$delegate.getValue(this, this::prop) }  Note that the provideDelegate method affects only the creation of the auxiliary property and doesn\u0026rsquo;t affect the code generated for getter or setter.\n"
},
{
	"uri": "/tech-department/topics/kotlin/delegation/",
	"title": "Delegation",
	"tags": [],
	"description": "",
	"content": " Class Delegation The Delegation pattern has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. A class Derived can inherit from an interface Base and delegate all of its public methods to a specified object:\ninterface Base { fun print() } class BaseImpl(val x: Int) : Base { override fun print() { print(x) } } class Derived(b: Base) : Base by b fun main(args: Array\u0026lt;String\u0026gt;) { val b = BaseImpl(10) Derived(b).print() // prints 10 }  The by-clause in the supertype list for Derived indicates that b will be stored internally in objects of Derived and the compiler will generate all the methods of Base that forward to b.\nOverriding a member of an interface implemented by delegation Overrides work as you might expect: the compiler will use your override implementations instead of those in the delegate object. If we were to add override fun printMessage() { print(\u0026ldquo;abc\u0026rdquo;) } to Derived, the program would print \u0026ldquo;abc\u0026rdquo; instead of \u0026ldquo;10\u0026rdquo; when printMessage is called:\ninterface Base { fun printMessage() fun printMessageLine() } ​ class BaseImpl(val x: Int) : Base { override fun printMessage() { print(x) } override fun printMessageLine() { println(x) } } ​ class Derived(b: Base) : Base by b { override fun printMessage() { print(\u0026quot;abc\u0026quot;) } } ​ fun main() { val b = BaseImpl(10) Derived(b).printMessage() Derived(b).printMessageLine() }  Target platform: JVMRunning on kotlin v. 1.3.72 Note, however, that members overridden in this way do not get called from the members of the delegate object, which can only access its own implementations of the interface members:\ninterface Base { val message: String fun print() } ​ class BaseImpl(val x: Int) : Base { override val message = \u0026quot;BaseImpl: x = $x\u0026quot; override fun print() { println(message) } } ​ class Derived(b: Base) : Base by b { // This property is not accessed from b's implementation of `print` override val message = \u0026quot;Message of Derived\u0026quot; } ​ fun main() { val b = BaseImpl(10) val derived = Derived(b) derived.print() println(derived.message) }  On the JVM: when an interface with default methods is used for delegation (including Kotlin interfaces with @JvmDefault), the default implementations are called even if the actual delegate type provides its own implementations. For details.\n"
},
{
	"uri": "/tech-department/projects/oop/dice/",
	"title": "Dice",
	"tags": [],
	"description": "",
	"content": " Please follow TDD when implementing this code.\nPlease note: this code requires no frontend, there is no html, no gui. Make sure you can visualise the classes and objects in your head.\nPerfectly normal dice You’ve all seen dice before. A die (singular for dice) usually has 6 sides. Sometimes a Die can have a different number of sides. Eg you can get an 8 sided die, or a 20 sided die. Dice can be rolled, if you roll a 6 sided die then you will get an integer result between 1 and 6 inclusive (1,2,3,4,5 or 6). If you roll an 8 sided die then you will get an integer result between 1 and 8 inclusive ((1,2,3,4,5,6,7 or 8)\nA die has a value (eg if 1 dot is showing then the value is 1). When a die is rolled then it’s value randomly changes. A six sided die has a 1\u0026frasl;6 chance of landing on any of the sides.\nCreate a class called Die. It should have an attribute named sides. sides has to be an integer that is greater than 1. Give your class a function called roll. Roll should update an attribute named value.\neg:\n// JavaScript let die6 = new Die(6) die6.roll() let die20 = new Die(20) die20.roll() console.log(die6.value) // this would print a number between 1 and 6 inclusive console.log(die20.value) // this would print a number between 1 and 20 inclusive  # Python die6 = Die(6) die6.roll() die20 = new Die(20) die20.roll() print(die6.value) // this would print a number between 1 and 6 inclusive print(die20.value) // this would print a number between 1 and 20 inclusive  // Java Die die6 = new Die(6) die6.roll() Die die20 = new Die(20) die20.roll() System.out.print(die6.value) // this would print a number between 1 and 6 inclusive System.out.print(die20.value) // this would print a number between 1 and 20 inclusive  Weighted Dice Please extend your program with the following functionality.\nSometimes when dice are manufactured or altered so they are less than perfectly fair. These are called weighted or loaded dice.\nFor example we might have a weighted 6 sided die with the following probabilities of hitting various values:\n   Value Chance of landing on value     1 1\u0026frasl;7   2 1\u0026frasl;7   3 1\u0026frasl;7   4 1\u0026frasl;7   5 1\u0026frasl;7   6 2\u0026frasl;7    If we roll this die 700 times then chances are we\u0026rsquo;ll get 200 6s, and 100 of each of the other values.\nExtend the constructor of your class so that it has an optional parameter called probabilities. This would be an array of integers. The length of the array should be equal to the number of sides. If probabilities is left blank then the constructed Die instance should be fair.\n// JavaScript // looking at the data from the table above. this is how we would construct the weighted die let dieDodgy6 = new Die(6,[1,1,1,1,1,2]) // we can create a perfectly fair die like this let die6 = new Die(6,[1,1,1,1,1,1]) // this is equivalent to let die6 = new Die(6)  # Python # looking at the data from the table above. this is how we would construct the weighted die dieDodgy6 = Die(6,[1,1,1,1,1,2]) # we can create a perfectly fair die like this die6 = Die(6,[1,1,1,1,1,1]) # this is equivalent to die6 = Die(6)  // Java // looking at the data from the table above. this is how we would construct the weighted die Die dieDodgy6 = new Die(6,new int[]{1,1,1,1,1,2}) // we can create a perfectly fair die like this Die dieFair6 = new Die(6,new int[]{1,1,1,1,1,1}) // this is equivalent to Die die6 = new Die(6);   If there are any negative numbers in the probabilities array then raise the error negative probabilities not allowed. If the sum of the numbers in the probabilities array is less than 1 then raise the error probability sum must be greater than 0 If the values passed in are not integers then raise the error only integer values allowed  Create a function on your Die class called setProbabilities. This should take in an array and update the Die instance accordingly.\nAdd a function to your Die class called setProbabilities. This function should take in an array of integers.\nDice Factory Dice are made in a factory. A factory can only make one kind of die. Eg there could be a factory that only makes 6 sided dice, and another factory that only makes 20 sided dice.\nCreate a DiceFactory class. It should have a method called makeDie(js) or make_die(python) that outputs a single fair die instance\neg:\n// JavaScript let factory20 = new DiceFactory(20) let die20 = new factory20.makeDie() let anotherDie20 = new factory20.makeDie()  # Python factory20 = DiceFactory(20) die20 = factory20.make_die() anotherDie20 = factory20.make_die()  // Java SuperClass die20 = DiceFactory.makeDie(20); SuperClass anotherDie20 = DiceFactory.makeDie(20);  This is a very simplified version of the factory design pattern. Design patterns are cool you guys. Basically the idea behind this one is that some classes are hard to construct:\n sometimes it\u0026rsquo;s hard to decide what to construct sometimes the constructor has a lot of parameters sometimes the constructor parameters themselves are complicated to construct  A factory can be initialised to know how to construct a specific thing. Interacting with factory should be very simple.\n"
},
{
	"uri": "/tech-department/projects/distributed-workloads-with-zeromq/",
	"title": "Distributed workloads with ZeroMQ",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/django-migrations/",
	"title": "Django - exposing a REST api with a real database",
	"tags": [],
	"description": "",
	"content": "Expose a simple TODO list api using Django. Take a look at this first:\n https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/ https://realpython.com/django-migrations-a-primer/  This is about apis. Please don\u0026rsquo;t make a pretty frontend. Or even an ugly frontend. Just expose an api.\nHere is what you need to do:\n create a Django project (in a python3.7 venv) create some models and use them to set up a database. Make one model called TodoItem. Is should have a title and a description only turn the \u0026ldquo;admin\u0026rdquo; interface on and take a look around create some REST endpoints that allow a person to:  add a TODO item delete a TODO item edit a todo item list all TODO items   Next I want you to be able to update the models and see how that effects your database migrations.\nHint: If you find yourself deleting migration files: You are doing it wrong.\n Add a \u0026lsquo;done\u0026rsquo; boolean column to the TodoItem see how that effects your migrations update your REST endpoints accordingly  "
},
{
	"uri": "/tech-department/tags/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/dom-manipulation/",
	"title": "Dom Manipulation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/ios-mobile/drag-and-drop-multithreading-delegation/",
	"title": "Drag and Drop, Multithreading and Delegation",
	"tags": [],
	"description": "",
	"content": " Project Image Gallery "
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/es6/",
	"title": "ES6",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;ES6\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/elastic-search/",
	"title": "ElasticSearch",
	"tags": [],
	"description": "",
	"content": " What is ElasticSearch?  ElasticSearch (ES) is a distributed and highly available open-source search engine that is built on top of Apache Lucene. It’s an open-source which is built in Java thus available for many platforms. You store unstructured data in JSON format which also makes it a NoSQL database. So, unlike other NoSQL databases ES also provides search engine capabilities and other related features. source: Towards Data Science\nElasticsearch is a distributed, open source search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. Elasticsearch is built on Apache Lucene and was first released in 2010 by Elasticsearch N.V. (now known as Elastic). Known for its simple REST APIs, distributed nature, speed, and scalability, Elasticsearch is the central component of the Elastic Stack, a set of open source tools for data ingestion, enrichment, storage, analysis, and visualization. Commonly referred to as the ELK Stack (after Elasticsearch, Logstash, and Kibana), the Elastic Stack now includes a rich collection of lightweight shipping agents known as Beats for sending data to Elasticsearch. source: official docs\n Getting it running Of course docker is a great way to get started:\nIf you follow this document you will end up with a 3 node cluster running on your computer. This will eat all your ram. Rather use a one node cluster. Also there is no need to use TLS on your local development machine:\nhttps://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-docker.html\ntutorials and fun stuff  Twitter sentiment analysis: https://realpython.com/twitter-sentiment-python-docker-elasticsearch-kibana/ This tutorial is written in legacy python. See if you can make it work with modern tools.\n https://www.freecodecamp.org/news/how-to-use-elasticsearch-logstash-and-kibana-to-visualise-logs-in-python-in-realtime-acaab281c9de/ this one is more relevent to data engineers but also goes into kibana a bit\n python-elasticsearch docs: https://elasticsearch-py.readthedocs.io/en/master/ . Elasticsearch exposes a really wonderful API. You can jusut interact with t using http requests instead of a different library if you wanted to. But this package makes life a lot easier\n  "
},
{
	"uri": "/tech-department/projects/basic-unit-test-mocks-kata/",
	"title": "Email random inspirational quote",
	"tags": ["tdd", "mocks", "environmental variables", "smtp"],
	"description": "",
	"content": " This basic project should demonstrate your understanding of mocks/spies.\nWe\u0026rsquo;ll be making an application that ends emails.\nSet up Step 1 is to sign up for SendinBlue. You can sign up for the free plan. Once you are logged in click on the \u0026ldquo;Transactional\u0026rdquo; tab at the top of the page. You\u0026rsquo;ll see some SMTP settings. It\u0026rsquo;ll look something like this:\nSMTP server: smtp-relay.sendinblue.com Port: 587 Login: ??? Password: ?????  Note, SMTP isn\u0026rsquo;t the most super secure way to authenticate with the email servers. But it\u0026rsquo;s the simplest way. For now let\u0026rsquo;s keep it simple. We\u0026rsquo;re really here to practice unit testing.\nTake these settings and save them in a shell script called smtp_secrets.sh. It should look like this.\n#!/bin/sh export SMTP_SERVER=smtp-relay.sendinblue.com export SMTP_PORT=587 export SMTP_LOGIN=??? export SMTP_PASSWORD=?????  Why? Because we don\u0026rsquo;t mix code and configuration. Your code should be able to access configuration when it needs to.\nNow add the following line to your .gitignore file:\nsmtp_secrets.sh  Why? Because these credentials should be kept secret. If you commit them to your git repo and push it to github then anyone who has access to your repo can read your secrets and start sending emails from your account.\nThis remains true even if you make a commit that removes the secrets from the repo.\nSo far so good.\nNow try this out in the terminal\nsource smtp_secrets.sh ############################# # if you are running Python # ############################# python3 # now you are in a python shell import os SMTP_SERVER = os.getenv('SMTP_SERVER') print(SMTP_SERVER) ########################### # if you are running Node # ########################### node # now you are in a node shell const SMTP_SERVER = process.env.SMTP_SERVER; console.log(SMTP_SERVER)  Ok, what just happened?\nBasically when you open up a new terminal you are running bash (or some variation thereof). Bash is a programming language and has variables too. When you define bash variables you can choose to export them. Exporting a bash variable makes it accessable to other programs running in the same terminal.\nSo when we call source smtp_secrets.sh, bash makes a few variables and makes sure that if you launch another application then those secrets are available.\nCool eh?\nIf you want some further reading check this out: TOPICS: Environmental Variables The actual project Write a program that sends a random inspirational quote to an email address. The email address should be a command-line parameter passed to the program.\nYou should have a list of quotes in a file by itself. Your program should grab one and send the email.\nYour final email quotes should be formatted like this:\n\u0026quot;The only true measure of success if the number of people you have helped\u0026quot; — Ray Dalio  Node After npm init you should add your own script to package.json. Look for scripts inside the file.\nyou should be able to do the following:\nnpm run send_inspiration ...  The command needs to allow you to pass in an email address from the command line. Take a look at this\nPython you should be able to run your code using\npython send_inspiration.py ...  The command needs to allow you to pass in an email address from the command line. Take a look at this\nGo with the simplest option you can find initially - because KISS\nTesting your project Your unit tests should make sure that when the application runs then it sends one email with one quote to one person.\nIf your tests\n send actual emails require your smtp secret values  then they are wrong.\nBonus fun stuff  Set up a cron job so that your program sends you a bit of inspiration every week day at the same time. You can start your day with inspiration. Or you can recieve you email just before you go to lunch or go home so that you have something to ponder. You can also add extra functionality. Eg: send an inspirational quote and a funny quote. You can make the emails that get sent look good as well. it doesn\u0026rsquo;t just need to be plain text You can look into sending sms instead of email link to the quote author\u0026rsquo;s wikipedia page straight from the email/sms add extra information such as a weather report  "
},
{
	"uri": "/tech-department/topics/kotlin/enum-classes/",
	"title": "Enum Classes",
	"tags": [],
	"description": "",
	"content": " The most basic usage of enum classes is implementing type-safe enums\nenum class Direction { NORTH, SOUTH, WEST, EAST }  Each enum constant is an object. Enum constants are separated with commas.\nInitialization Since each enum is an instance of the enum class, they can be initialized\n enum class Color(val rgb: Int) { RED(0xFF0000), GREEN(0x00FF00), BLUE(0x0000FF) }  Anonymous Classes Enum constants can also declare their own anonymous classes\nenum class ProtocolState { WAITING { override fun signal() = TALKING }, TALKING { override fun signal() = WAITING }; abstract fun signal(): ProtocolState }  with their corresponding methods, as well as overriding base methods. Note that if the enum class defines any members, you need to separate the enum constant definitions from the member definitions with a semicolon, just like in Java.\n"
},
{
	"uri": "/tech-department/tags/environmental-variables/",
	"title": "Environmental Variables",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/linux/os-environmental-variables/",
	"title": "Environmental Variables",
	"tags": [],
	"description": "",
	"content": " This tutorial assumes that you are using some kind of bash derived shell. Open up your linux command prompt :)\nShell variables You have dealt with variables in your programming language of choice many times. Bash also has variables. You can declare them like this:\nFOO=BAR  To print your variable you can do this kind of thing:\necho $FOO  You can also use bash variables within other bash operations. Eg:\nROOT_DIR=/path/to/some/important/directory mkdir $ROOT_DIR nano $ROOT_DIR/something.yaml  Bash has a problem with whitespace. These wont work:\nFOO = BAR BAZ=The quick brown fox  But these work:\nFOO=BAR BAZ=\u0026quot;The quick brown fox\u0026quot; MEH='The quick brown fox'  try this out Open two terminals.\nIn terminal 1:\necho $HELLO # when HELLO is not defined, this doesn't print anything HELLO=BAR # we define the variable and give it a value echo $HELLO # prints BAR  In termainal 2:\necho $HELLO # what does this do?  Scope Consider the following Python code.\na = 1 # at this point in the code: only `a` is available def foo(): b = 2 # at this point in the code: `a` and `b` are available, but not `c` def bar(): c = 3 # at this point in the code: `a`,`b` and `c` are all available # at this point in the code: only `a` is available  Or similarly, this is the JavaScript version:\na = 1 // at this point in the code: only `a` is available function foo(): b = 2 // at this point in the code: `a` and `b` are available, but not `c` function bar(): c = 3 // at this point in the code: `a`,`b` and `c` are all available // at this point in the code: only `a` is available  Look at where the different variables are allowed to be used. If a variable can be used then it is in scope. Otherwise it is out of scope.\nEnvironmental variables Environmental variables are shell variables that have a larger scope.\nDo this out in yout terminal:\n# first we are going to make a new shell script: echo \u0026quot;#\\!/bin/sh\\n\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo '--- start of my script ---'\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo FOO=\\$FOO\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo BAR=\\$BAR\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo '--- end of my script ---'\u0026quot; \u0026gt;\u0026gt; my_script.sh # you can look at the new file you just created. ls -l | grep my_script # take note of the output. That -rw-rw-r-- part tells the operating system what actions are allowed. This file can be read and written cat my_script.sh # make the script executable chmod +x my_script.sh ls -l | grep my_script # the output is a little bit different now. x means executable  Great, now you can run the script like this:\n./my_script.sh  Expected output:\n--- start of my script --- FOO= BAR= --- end of my script ---  Ok, now paste these lines into your terminal one by one. Make sure you understand the output of my_script.sh at each point:\nFOO=1 ./my_script.sh # FOO is out of scope! export FOO ./my_script.sh # FOO is IN scope! export BAR=winning ./my_script.sh FOO=hello ./my_script.sh  Takeaway You can define variables in your shell (command prompt) and make those variables accessable from within programs that you run from that shell. Those programs could be bash scripts (like my_script.sh), or those programs can be written in Node or Python.\nstoring your environmental variables somewhere nice Open up a new shell. Make a new script called my_config.sh. Give it the following content:\n#!/bin/sh echo '--- setting up configurtion ---' export FOO=\u0026quot;/path/to/local/database/file.sqlite\u0026quot; BAR=\u0026quot;some other important configuration\u0026quot; echo '--- finished setting up configurtion ---'  Make it executable and try this out:\nexport FOO=xxxxxxxxx ./my_config.sh ./my_script.sh echo $FOO  Aaaand\u0026hellip; my_config.sh seems to have had no effect on FOO.\nNow try it this way:\nexport FOO=xxxxxxxxx source my_config.sh ### ./my_script.sh echo $FOO  When we use the source command then any variables exported by my_config.sh become environmental variables.\n.bashrc The default linux shell is called bash. Every time you open up a new bash shell the bash automatically sources a file in your home directory called .bashrc.\nDo the following in a terminal:\nls ~ -a | grep bashrc cp ~/.bashrc ~/.bashrc.backup ls ~ -a | grep bashrc  Now open .bashrc for editing however you want. You can just use nano if you dont want to leave the terminal.\nnano ~/.bashrc  Now paste the following at the top of the file:\necho \u0026quot;--- start of custom bashrc content ---\u0026quot; export FOO=\u0026quot;/path/to/local/database/file.sqlite\u0026quot; BAR=\u0026quot;some other important configuration\u0026quot; echo \u0026quot;--- end of custom bashrc content ---\u0026quot;  Save and exit. If you are using nano thenpress Ctrl + X, then y then enter\nNow open a new terminal. And make sure you unserstand the output of each of these lines:\necho FOO=$FOO echo BAR=$BAR ./my_script.sh  You can even put source commands within your .bashrc. Eg:\nsource /path/to/some/system/wide/configuration  Some of the more advanced python people might recognise this line:\nsource /usr/local/bin/virtualenvwrapper.sh  "
},
{
	"uri": "/tech-department/topics/java-specific/gradle-env-config/",
	"title": "Environmental variables and secrets with gradle",
	"tags": [],
	"description": "",
	"content": " Environment variables are global variables that are accessible from every system running in the OS (Operating System).\nThere are multiple forms of environmental variables that can be used in a java application.\nThose accessible to any project in the operating system and those accessible to a specific java application\nOperating System Environment variables The 2 links below describe what environment variables are and how to update them.\nLink 1.\nLink 2.\nResources You can read through the following example to see how you can access the environment variables from a Java application.\nNote A typical use case for environment variables is to store the paths to certain directories, such as paths to folders holding SDKs.\nProgram specific environmental variables using java-dotenv java-dotenv is a package that can be imported into a java project to assist with simplyfying using environment variables in applications.\nDocumentation for its use can be found here.\nJava deployment configurations with Gradle deployment configurations refers to different build environments, each with their own set of variables that can be used when the java application is built using those environments.\nFor example: If you have an Api for your development environment and an Api for Production, you can make use of gradle build types to inform your application which Api it should communicate with in a specific build environment.\nThis automates the process of changing environments. So instead of having to manually change the Url of your Api to toggle between development and production, you can create a debug and release build type. So changing the build environment will automatically point to the correct version of the Api you are using.\nThis documentation describles how to create different gradle files for different situations in an Android project.\nAndroid Apps can however be created using Java, so implementing gradle rules in a java application will follow the same format as the documentation above describes.\n"
},
{
	"uri": "/tech-department/tags/error-checking/",
	"title": "Error Checking",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/114055/",
	"title": "Ethics and Professionalism in Online Gaming",
	"tags": [],
	"description": "",
	"content": " 1. Professionalism in the IT industry in South Africa Professional Ethics concerns one\u0026rsquo;s conduct of behaviour and practice when carrying out professional work. Such work may include consulting, researching, teaching and writing. The institutionalisation of Codes of Conduct and Codes of Practice is common with many professional bodies for their members to observe.\nA code of conduct governs the behaviour of professionals. In other words, it deals with issues such as integrity, loyalty, impartiality, responsibility, and discrimination.\nA code of practice deals with the ways in which a professional is expected to exercise their responsibilities, or how they carry out their duties. This includes keeping up-to-date with new technologies and legal requirements, being aware of security or privacy issues, and applying sound management practices.\nAny code may be considered to be a formalisation of experience into a set of rules. A code is adopted by a community because its members accept the adherence to these rules, including the restrictions that apply.\nExamples Not Acceptable\n Saving Personal and Confidential information (PCi) on a personal device.\n Using unauthorised copies of software.\n Convincing a client to buy a computer system or IT equipment that far exceeds their needs.\n  Acceptable\n Saving PCi on official and authorised devices\n Researching and using alternative open source software that provides similar functionality\n Identifying customer needs before offering solutions .\n  Professional Bodies in South Africa Institute of Information Technology Professionals South Africa (IITPSA)\nhttps://www.iitpsa.org.za/\nITPSA, established in 1957, is a professional body serving and representing South Africa’s Information and Communications Technology (ICT) professionals and practitioners. They engage with Industry and Government on ICT policy as well as the wider community with the aim to :\n further the study, science and application of ICT\n maintain and promote Codes of Conduct and Ethics for our members\n define and promote standards of ICT knowledge\n promote the formulation of effective policies on ICT and related matters\n extend the knowledge and understanding and usage of ICTs in the community.\n  Institute of Chartered IT Professionals\nhttp://www.icitp.org.za/\nThe Institute of Chartered IT Professionals is the only ICT professional body that awards the Certified \u0026amp; Chartered Professional Status to IT Practitioners in South Africa. The objective of ICITP is to promote Continuing Professional Development (CPD), leading to employability, economic development/sector development \u0026amp; preparing citizens in every sector towards the 4th Industrial Revolution.\nISACA\nhttp://www.isaca.org/\nISACA works in the areas of Information Technology (IT), IT Risk, IT Governance and IT Security in South Africa. Their vision is to be the leading sponsor of local educational seminars and workshops, through conducting regular networking events and supporting professional and academic community with research material and to elevate the visibility and effectiveness of the profession as a whole locally and globally.\nInteractive Entertainment South Africa (IESA)\nhttp://www.iesa.org.za/\nIESA supports interactive entertainment companies and affiliate organisations through research grants, bursary programmes, trade missions and lobbying of government for better legislation and support around video games.\n2. Codes of practice in the IT industry 1. Act at all times with professionalism and integrity  Present your skills and yourself accurately\n Honour intellectual property and credit work and contributions when due\n Comply with legislation and legal agreements\n Respect your colleagues, your workplace and the equipment you use\n  2. Act with complete loyalty towards a client when entrusted with confidential information  Don’t disclose or authorise to be disclosed confidential information to a third party except with the permission of your relevant authority or as required by legislation\n Don’t misrepresent or withhold information or take advantage of the lack of relevant knowledge or inexperience of others\n Recommend appropriate levels of security when necessary; apply, monitor and report on these\n  3. Act with impartiality when purporting to give independent advice and must disclose any relevant interests  Be accurate and honest about your competence\n Make stakeholders aware of any conflicts of interest\n Involve colleagues or relevant organisations in order to make informed decisions\n  4. Accept full responsibility for any work undertaken and deliver accordingly  Be realistic and honour agreements\n Communicate honestly and effectively\n Accept additional expertise from qualified individuals if necessary\n Ascertain and evaluate all potential risks in a particular project with regard to the cost, and effectiveness.\n  5. Don’t engage in discriminatory practices on any basis whatsoever  Be equal in your professional conduct and in employment agreements\n Undergo regular and relevant training for you and your staff in this area where possible and when necessary\n Ensure that effective standard procedures and documentation are available and used\n  6. Don’t seek personal advantage to the detriment of your work, and actively seek to enhance the image of your industry  Make conflicts of interest known\n Strive to promote public knowledge of technology and art\n Strive to share knowledge for the growth of peers as professional craftspeople and the industry\n Ensure a positive workplace environment\n  Protection of Personal Information In 2014, the South African Parliament passed the Protection of Personal Information Act (PoPIA) to protect the data and privacy of consumers. As you develop your game it is important that you remain in compliance with this act. Respecting your users’ data and keeping it secure is especially important to maintain trust with your users.\nYou can view the act here or download a copy here\nhttp://www.banking.org.za/what-we-do/market-conduct/regulatory-framework/popia\n3. Codes of ethics and piracy Equality of Opportunity Equal opportunity broadly speaking describes fair and equal treatment of colleagues and employees. It has come to mean much more in recent decades and now includes the promotion of historically oppressed and discriminated groups eg. women, people with disabilities etc. In South Africa it also includes Black Economic Empowerment.\nThe computer industry in South Africa supports the Equality of Opportunity. The IITPSA’s (see previous sections) Code of Conduct clearly states:\nDo not engage in discriminatory practices in professional activities on any basis whatsoever.\nMoreover there are specific organisations working towards creating more diversity in the industry:\nThe Black Information Technology Forum\nWomen in IT\nDigital Piracy Digital piracy is an ongoing worldwide issue preventing the IT industry from reaching its full potential. Digital piracy includes computer software but also extends to digital entertainment, particularly music and movies. Many local and international organisations are trying to control and stop this phenomenon.\nSouth Africa is no exception to this problem; a survey by MyBroadband revealed that 53% of respondents pirated content online and another report showed South Africa in a top 10 list of nations which illegally downloaded the first episode of the latest season of Game of Thrones via BitTorrent, the most popular tool to do this.\nThere are two organisations in South Africa backed by the government that committed to stopping piracy and can report on it:\n1. The Business Software Alliance (BSA) is an international association founded by software producers to help combat software piracy. They aim to:\n Bring South Africa’s copyright laws in line with the standards set by the World Intellectual Property Organisation.\n Create a government-backed enforcement policy and to lobby for tougher anti-piracy laws.\n Encourage government to dedicate more resources to combating piracy through training for law enforcement.\n Improve public education and awareness.\n Lead by example by encouraging government departments to use only legitimate software, whether it is open-source or purchased from private suppliers.\n  2. The Southern African Federation Against Copyright Theft (SAFACT) is a local organisation which works not only against software piracy but also music and film copyright infringements. SAFACT in particular is trying to tackle the problem through:\n Engaging and collaborating with local Internet service providers.\n A mandate granted by the Motion Picture Association to act against local copyright-infringing parties and sites; penalties include jail for up to five years and can result in a fine of up to R10,000.\n  "
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/linux-evolution/",
	"title": "Evolution of Linux Visualisation",
	"tags": ["data-visualisation-datacamp"],
	"description": "",
	"content": "Complete the DataCamp project Exploring the Evolution of Linux.\nOnce you have completed it, you can download your notebook file. Save this to a github repository and submit the link to your repo.\n"
},
{
	"uri": "/tech-department/topics/java-specific/exception-handling/",
	"title": "Exception Handling",
	"tags": [],
	"description": "",
	"content": " There are a number of things that can go wrong while a program is executing. Java enables you to handle exceptions so that you may recover from these problems. This is known as exception handling.\nExceptions in Java  What are Exceptions?\n Errors vs Exceptions in Java.\n Types of Exceptions  with examples.\n Best practices to handle Exceptions in Java.\n Worst pratices to handle Exceptions and more\u0026hellip;\n Advantages of using Exceptions.\n  "
},
{
	"uri": "/tech-department/projects/expose-a-simple-rest-api-for-game/",
	"title": "Expose a simple REST api for your game",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/express/",
	"title": "Express",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/express-js/",
	"title": "Express JS",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/projects/express-js/",
	"title": "ExpressJS",
	"tags": [],
	"description": "",
	"content": " Instructions You are required to create an API which will allow you to create a Playlist of your favorite musicians and their songs This should run on a node server at PORT 3090\nSection 1 This API should do the following\n Add A new musician to the list Edit an existing musician Delete an existing musician from the list List all the musicians on the Playlist Sort the musicians alphabetically using query parameters(this will require a middleware in express) You have two choices as to where you can store these details option1: Use a JSON file to store the data option2: Use a database to store the data  Section 2 In the same project folder you should:\n Create a front-end(html page only - you will automatically fail if you use frameworks like Angular/React/Vue) the front-end should consume this API and it should look like the image attached Test the API using jasmine and Request see examples here https://www.thepolyglotdeveloper.com/2017/08/unit-testing-node-js-application-jasmine-testing-framework/  If this is TOO fun (Optional)  Add an ability to Add/delete/list songs associated to each musician Add that to a new page, a route in the frontend which goes to localhost:3090/songs/:id  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/expressjs/",
	"title": "ExpressJs",
	"tags": [],
	"description": "",
	"content": " Introductory materials  Basic node server Express documentation Node.js \u0026amp; Express From Scratch [Part 1] - Intro \u0026amp; Environment Express, node overview Basic routing Static files  Middleware  Express Middleware More about middleware About bodyParser  "
},
{
	"uri": "/tech-department/topics/messaging/pre-bootcamp-intro-data-sci/",
	"title": "Extra bootcamp preparation instructions for data science",
	"tags": [],
	"description": "",
	"content": "Data science is a profession that requires three basic skills encompassing Statistics, Programming and Communication. Some of these skills such as Programming and Communication can only be developed through practice, while Statistics requires the ability to conduct well-structured scientific research, analytical and critical thinking, in addition to practice. The pre-bootcamp care package will help you develop some of these foundational skills like programming, data analysis, analytical thinking and statistics.\nThe main programming languages used in data science are Python and R. While Python is fairly new compared to R, and not only used in data science, but also in web development.\nR: - created to handle statistical computing and popular for academic research and professionals in statistics-based industries - great for data manipulation - great for publication-quality graphs very easily - powerful statistical modeling - not great for beginner programmers - ease of interaction with Github\nPython: - very easy and intuitive to learn for beginners - large and diverse community in more disciplines - increased communication between open-source languages (including Github) - forces users to learn to write better code - faster at processing large datasets - easier to load files and can handle Big Data\nFor our Data Science bootcamp, we will use Python and require you to have some Git skills (a life-long skill in the data science and software development industry). A basic understanding of applying statistical principles to data analysis and inference to generate basic insights will be enough to help you through the bootcamp.\nWish you all the best!\n"
},
{
	"uri": "/tech-department/topics/messaging/pre-bootcamp-intro-web-dev/",
	"title": "Extra bootcamp preparation instructions for web devs",
	"tags": [],
	"description": "",
	"content": "Web technologies are increadibly powerful and we want to plug you into the best parts of it.\nThe three main technologies in web development are:\n HTML: this is used to define the layout of web pages CSS: This is used to add some style, eg: you can turn certain parts of your layout green and put borders around other parts JavaScript: This is the smarts - this adds cool and clever interativity to your site  We\u0026rsquo;ll be starting with JavaScript. And Git.\nGit is a tool that most professional software teams use every day. If you get into Umuzi you\u0026rsquo;ll use it every day (like a professional). And you\u0026rsquo;ll need it for the bootcamp. It\u0026rsquo;s not a web dev thing, Git is a life skill.\nA lot of people start with HTML when they learn to do web dev. We are starting with the hard stuff because we want to see how you deal with hard stuff.\nDo your best!\n"
},
{
	"uri": "/tech-department/projects/java-specific/java-fileio-logging-errors/",
	"title": "File IO + Logging + Errors",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi. In this project you\u0026rsquo;ll just be storing and retrieving information from plain old txt files.\nInstructions Create the following functionality in a TDD way. And make sure that everything has the correct Exception handling and those exceptional cases should have tests as well. In an error occured it through\n Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a Text file. The file name should be named like this visitor_{their_full_name}.txt.  On a successful save, a log to the console should be made using log4j and the same when an error occurs;\nalice.save() # results in visitor_alice_cooper.txt bob.save() # results in visitor_bob_marley.txt charlie.save() # results in visitor_charley_sheen.txt  Notice that the full name used in the file is all lower-case and spaces are replaced by underscores.\n Create a function called load that takes in a name and then grabs a Visitor object from file. It should simply System.out.println the visitor.  On a successful read, a log to the console should be made using log4j and the same when an error occurs;\neg:\nalice.load(\u0026quot;Alice Cooper\u0026quot;) // prints out all of Alice's information bob.load(\u0026quot;Bob Marley\u0026quot;) // Same deal for good ol Bob  Resources https://www.w3schools.com/java/java_files_create.asp\nhttps://www.loggly.com/ultimate-guide/java-logging-basics/\n"
},
{
	"uri": "/tech-department/tags/fileio/",
	"title": "Fileio",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/mobile-money-viz/",
	"title": "Financial Services Use in Tanzania",
	"tags": ["data-visualisation-mobile-money"],
	"description": "",
	"content": " Background The training dataset contains demographic information and what financial services are used by approximately 10,000 individuals across Tanzania. This data was extracted from the FSDT Finscope 2017 survey and prepared specifically for this challenge.\nEach individual is classified into four mutually exclusive categories:\n No_financial_services: Individuals who do not use mobile money, do not save, do not have credit, and do not have insurance Other_only: Individuals who do not use mobile money, but do use at least one of the other financial services (savings, credit, insurance) Mm_only: Individuals who use mobile money only Mm_plus: Individuals who use mobile money and also use at least one of the other financial services (savings, credit, insurance)  This dataset is the geospatial mapping of all cash outlets in Tanzania in 2012. Cash outlets in this case included commercial banks, community banks, ATMs, microfinance institutions, mobile money agents, bus stations and post offices. This data was collected by FSDT.\nInstructions:  Examine the dataset. Are there any missing observations or columns where the data do not seem valid?\n Get basic descriptive statistics for the dataset.\n Create appropriate graphs to visually represent the relationship between financial services accessed (non-mobile, mobile, both) and age, gender, marital status, land ownership and type of income.\n Create appropriate graphs to visually represent the relationship between how often mobile services are used and age, gender, marital status, land ownership and type of income.\n Create a map to visually explore geographic distribution of mobile services coverage with respect to type of income.\n What can you conclude about use of financial services in Tanzania? Which demographic and geographic factors are associated with mobile money use?\n  Variables The table below gives the variable names in the mobile money data file, with a description of the questions and a key to the answer values.\n   Variable ID Question Values     ID Unique respondent ID String   Q1 Age Number   Q2 Gender 1 Male     2 Female   Q3 Marital status 1 Married     2 Divorced     3 Widowed     4 Single/never married   Q4 Highest level of education completed? 1 No formal education     2 Some primary     3 Primary completed     4 Post primary technical training     5 Some secondary     6 University or other higher education     7 Don’t know   Q5 Which of the following applies to you? Read out; Single response 1 You personally own the land/plot where you live     2 You own the land/plot together with someone else     3 A household member owns the land/plot     4 The land/plot is rented     5 You don’t own or rent the land     6 Don’t know   Q6 Do you personally own land (other than the land you live on) that you have land certificates of ownership for? 1 Yes     2 No   Q7 Do you personally own a mobile phone? 1 Yes     2 No   Q8_1 through Q8_11 Different people have different ways of getting money, please tell me how you get the money you spend?    Multiple mention possible     Q8_1 Salaries/wages 1 Yes     0 No   Q8_2 Money from trading/selling Anything you produce/grow/raise/make/collect with the intention of selling 1 Yes     0 No   Q8_3 Money from providing a service – i.e. such as transport, hairdressing, processing, hospitality services (food \u0026amp; accommodation) 1 Yes     0 No   Q8_4 Piece work/Casual labor/Occasional jobs 1 Yes     0 No   Q8_5 Rental income 1 Yes     0 No   Q8_6 Interest from savings, investments, stocks, unit trusts etc. 1 Yes     0 No   Q8_7 Pension 1 Yes     0 No   Q8_8 Social welfare money/grant from Government 1 Yes     0 No   Q8_9 Rely on someone else/others to give/send me money 1 Yes     0 No   Q8_10 Don’t get money – someone else pays my expenses 1 Yes     0 No   Q8_11 Other 1 Yes     0 No   Q9 Only for those who said they get a salary/wages. Who do you work for? -1 not applicable     1 Government     2 Private company/business     3 Individual who owns his own business     4 Small scale farmer     5 Commercial farmer     6 Work for individual/household e.g. security guard, maid etc.     7 Other   Q10 Only for those who said they get money from selling things – what kind of things do you MAINLY sell (get most money from)? -1 not applicable     1 Crops/produce I grow     2 Products I get from livestock     3 Livestock     4 Fish you catch yourself/aquaculture     5 Things you buy from others – agricultural products     6 Things you buy from others – non-agricultural products     7 Things you make (clothes, art, crafts)     8 Things you collect from nature (stones, sand, thatch, herbs)     9 Things you process (honey, dairy products, flour)     10 Other   Q11 Only for those who said they get money from providing a service – what kind of services do you MAINLY provide (get most money from)? -1 not applicable     1 Personal services (hairdressers, massage, etc.)     2 Telecommunications/IT     3 Financial services     4 Transport     5 Hospitality – Accommodation, restaurants, etc.     6 Information/research     7 Technical – mechanic, etc.     8 Educational/child care     9 Health services – traditional healer etc.     10 Legal services     11 Security     12 Other, specify   Q12 In the past 12 months, have you sent money to someone in a different place within the country or outside of Tanzania? 1 Yes     2 No   Q13 When did you last send money? -1 not applicable     1 Yesterday/today     2 In the past 7 days     3 In the past 30 days     4 In the past 90 days     5 More than 90 days ago but less than 6 months ago     6 6 months or longer ago   Q14 In the past 12 months, have you received money from someone in a different place within the country or from outside the country? 1 Yes     2 No   Q15 When did you last receive money? -1 not applicable     1 Yesterday/today     2 In the past 7 days     3 In the past 30 days     4 In the past 90 days     5 More than 90 days ago but less than 6 months ago     6 6 months or longer ago   Q16 In the past 12 months, how often did you use mobile money for purchases of goods and/or services? -1 not applicable     1 Never     2 Daily     3 Weekly     4 Monthly     5 Less often than monthly   Q17 In the past 12 months, how often did you use mobile money for paying your bills? -1 not applicable     1 Never     2 Daily     3 Weekly     4 Monthly     5 Less often than monthly   Q18 Literacy in Kiswhahili 1 Can read and write     2 Can read only     3 Can write only     4 Can neither read nor write     5 Refused to read   Q19 Literacy in English 1 Can read and write     2 Can read only     3 Can write only     4 Can neither read nor write     5 Refused to read   Latitude Approximate latitude Number   Longitude Approximate longitude Number   Mobile_money Do you use mobile money? 1 Yes     0 No   Savings Do you save? 1 Yes     0 No   Borrowing Do you borrow? 1 Yes     0 No   Insurance Do you have insurance? 1 Yes     0 No   Mobile_money_classification  0 no mobile money and no other financial service (saving, borrowing, insurance)     1 no mobile money, but at least one other financial service     2 mobile money only     3 mobile money and at least one other financial service    "
},
{
	"uri": "/tech-department/topics/free-code-camp/",
	"title": "Free Code Camp",
	"tags": [],
	"description": "",
	"content": "This wonderful resource will teach you a lot about programming principles. There are a few pieces that will be especially helpful to you during your stay at Umuzi. Please go through all this stuff.\nTry not to ask for any hints ;)\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/functional-programming/",
	"title": "Functional Programming",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Functional Programming \u0026ldquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/kotlin/functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": " Function Declarations Functions in Kotlin are declared using the fun keyword\nfun double(x: Int): Int { }  Function Usage Calling functions uses the traditional approach\nval result = double(2)  Calling member functions uses the dot notation\nSample().foo() // create instance of class Sample and calls foo  Infix notation Functions can also be called using infix notations when\n They are member functions or extension functions They have a single parameter They are marked with the infix keyword  // Define extension to Int infix fun Int.shl(x: Int): Int { ... } // call extension function using infix notation 1 shl 2 // is the same as 1.shl(2)  Parameters Function parameters are defined using Pascal notation, i.e. name: type. Parameters are separated using commas. Each parameter must be explicitly typed.\nfun powerOf(number: Int, exponent: Int) { ... }  Default Arguments Function parameters can have default values, which are used when a corresponding argument is omitted. This allows for a reduced number of overloads compared to other languages.\nfun read(b: Array\u0026lt;Byte\u0026gt;, off: Int = 0, len: Int = b.size()) { ... }  Default values are defined using the = after type along with the value.\nOverriding methods always use the same default parameter values as the base method. When overriding a method with default parameters values, the default parameter values must be omitted from the signature:\nopen class A { open fun foo(i: Int = 10) { ... } } class B : A() { override fun foo(i: Int) { ... } // no default value allowed }  Named Arguments Function parameters can be named when calling functions. This is very convenient when a function has a high number of parameters or default ones.\nGiven the following function\nfun reformat(str: String, normalizeCase: Boolean = true, upperCaseFirstLetter: Boolean = true, divideByCamelHumps: Boolean = false, wordSeparator: Char = ' ') { ... }  we could call this using default arguments\nreformat(str)  However, when calling it with non-default, the call would look something like\nreformat(str, true, true, false, '_')  With named arguments we can make the code much more readable\nreformat(str, normalizeCase = true, upperCaseFirstLetter = true, divideByCamelHumps = false, wordSeparator = '_' )  and if we do not need all arguments\nreformat(str, wordSeparator = '_')  Note that the named argument syntax cannot be used when calling Java functions, because Java bytecode does not always preserve names of function parameters.\nUnit-returning functions If a function does not return any useful value, its return type is Unit. Unit is a type with only one value - Unit. This value does not have to be returned explicitly\nfun printHello(name: String?): Unit { if (name != null) println(\u0026quot;Hello ${name}\u0026quot;) else println(\u0026quot;Hi there!\u0026quot;) // `return Unit` or `return` is optional }  The Unit return type declaration is also optional. The above code is equivalent to\nfun printHello(name: String?) { ... }  Single-Expression functions(a.k.a Compact Functions) When a function returns a single expression, the curly braces can be omitted and the body is specified after a = symbol\nfun double(x: Int): Int = x * 2  Explicitly declaring the return type is optional when this can be inferred by the compiler\nfun double(x: Int) = x * 2  Explicit return types Functions with block body must always specify return types explicitly, unless it\u0026rsquo;s intended for them to return Unit, in which case it is optional. Kotlin does not infer return types for functions with block bodies because such functions may have complex control flow in the body, and the return type will be non-obvious to the reader (and sometimes even for the compiler).\nVariable number of arguments (Varargs) A parameter of a function (normally the last one) may be marked with vararg modifier:\nfun \u0026lt;T\u0026gt; asList(vararg ts: T): List\u0026lt;T\u0026gt; { val result = ArrayList\u0026lt;T\u0026gt;() for (t in ts) // ts is an Array result.add(t) return result }  allowing a variable number of arguments to be passed to the function:\nval list = asList(1, 2, 3)  Inside a function a vararg-parameter of type T is visible as an array of T, i.e. the ts variable in the example above has type Array.\nOnly one parameter may be marked as vararg. If a vararg parameter is not the last one in the list, values for the following parameters can be passed using the named argument syntax, or, if the parameter has a function type, by passing a lambda outside parentheses.\nWhen we call a vararg-function, we can pass arguments one-by-one, e.g. asList(1, 2, 3), or, if we already have an array and want to pass its contents to the function, we use the spread operator (prefix the array with *):\nval a = arrayOf(1, 2, 3) val list = asList(-1, 0, *a, 4)  Function Scope In Kotlin functions can be declared at top level in a file, meaning you do not need to create a class to hold a function, like languages such as Java, C# or Scala. In addition to top level functions, Kotlin functions can also be declared local, as member functions and extension functions.\nLocal Functions Kotlin supports local functions, i.e. a function inside another function\nfun dfs(graph: Graph) { fun dfs(current: Vertex, visited: Set) { if (!visited.add(current)) return for (v in current.neighbors) dfs(v, visited) }\ndfs(graph.vertices[0], HashSet())  } Local function can access local variables of outer functions (i.e. the closure), so in the case above, the visited can be a local variable\nfun dfs(graph: Graph) { val visited = HashSet\u0026lt;Vertex\u0026gt;() fun dfs(current: Vertex) { if (!visited.add(current)) return for (v in current.neighbors) dfs(v) } dfs(graph.vertices[0]) }  Member Functions A member function is a function that is defined inside a class or object\nclass Sample() { fun foo() { print(\u0026quot;Foo\u0026quot;) } }  Member functions are called with dot notation\nSample().foo() // creates instance of class Sample and calls foo  Generic Functions Functions can have generic parameters which are specified using angle brackets before the function name\nfun \u0026lt;T\u0026gt; singletonList(item: T): List\u0026lt;T\u0026gt; { // ... }  Tail recursive functions Kotlin supports a style of functional programming known as tail recursion. This allows some algorithms that would normally be written using loops to instead be written using a recursive function, but without the risk of stack overflow. When a function is marked with the tailrec modifier and meets the required form, the compiler optimises out the recursion, leaving behind a fast and efficient loop based version instead.\ntailrec fun findFixPoint(x: Double = 1.0): Double = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))  This code calculates the fixpoint of cosine, which is a mathematical constant. It simply calls Math.cos repeatedly starting at 1.0 until the result doesn\u0026rsquo;t change any more, yielding a result of 0.7390851332151607. The resulting code is equivalent to this more traditional style:\nprivate fun findFixPoint(): Double { var x = 1.0 while (true) { val y = Math.cos(x) if (x == y) return y x = y } }  To be eligible for the tailrec modifier, a function must call itself as the last operation it performs. You cannot use tail recursion when there is more code after the recursive call, and you cannot use it within try/catch/finally blocks. Currently tail recursion is only supported in the JVM backend.\n"
},
{
	"uri": "/tech-department/projects/game-of-life-angular-elements/",
	"title": "Game of life: Angular elements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/clean-code/general/",
	"title": "General Clean Code Guidelines",
	"tags": [],
	"description": "",
	"content": " “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ― Martin Fowler\nObvious Function and Variable Names When you declare a variable, give it a name that describes what values or data it holds. When you declare a function, give it a name that describes what it does.\nExample of a bad function name:\nrun_process()  Example of a good function name:\nsort_files()  Bad variable name:\ndivs  Good variable name:\ncards  These names should be obvious and specific. Try to look at your code from the perspective of someone who has never seen it. They should be able to tell what it does just by reading it. Consider the next developer who will work on the code as your client. Name things according to exactly what they are and what they do. If you are struggling to name a function, it may be because your function does too many different things to give it a one simple descriptive name. Which brings us to the next point\u0026hellip;\nFunctions Should do One Thing The moment you find yourself struggling to describe what your function does in a simple sentence, your function may be too long or too busy. Describing your function should be easy. This is when you need to take the pieces of logic that do specific things in your and move them into another function. Try to keep your functions under 25 lines long.\nLet\u0026rsquo;s say you wrote a function that sorts files. Below is some pseudocode illustrating what a bad vs good functions structure would look like.\nBad File Sorting Function() some code that opens the folder some code that looks through the files attempts at finding the file some code that filters the results some code that sorts results some code that prints the result after the sorting some logic that closes the folder  Sort Files(folder) open the folder sort files in the folder return the sorted files Print Files(sorted folder) open the sorted folder print the files in the folder Good File Sorting Function() Sort Files(folder) Print Files(sorted folder)  As you can see, there is a lot going on in the Bad file sorting function, so it would be difficult to describe what it does in one sentence or to give it a name.\nDRY - Don\u0026rsquo;t Repeat Yourself Ideally functionality should be represented in a code-base exactly once. If you find yourself repeating certain values such as strings or numbers for example, rather save those values to variables. This also means that if the values change, you won\u0026rsquo;t have to change them update them again on every line where you\u0026rsquo;ve used them. You\u0026rsquo;ll only need to change them where you originally created and assigned them.\nThe same applies to functions.\nFlat is Better Than Nested If you are ever tempted to put a loop inside a loop\u0026hellip; etc. Don\u0026rsquo;t.\nFunctions are:\n* More explicit and specific about what they actually do than a loop inside a loop.\n* Easier to test than the inner-most loop of a 5 loop stack of spaghetti-code.\n* Easier to reuse.\n* Easier to document.\nIndentation, Alignment and Consistency Indent and align your code so that you can clearly see what code runs inside a particular loop or function. Indented code is easier to read and maitain.\nExample of Good Indentation\nGood File Sorting Function() Sort Files(folder) Print Files(sorted folder)  Example of Bad Indentation\nGood File Sorting Function() Sort Files(folder) Print Files(sorted folder)  In the above pseudo-code the \u0026ldquo;Sort Files\u0026rdquo; and \u0026ldquo;Print Files\u0026rdquo; function are actually called inside of the \u0026ldquo;Good File Sorting\u0026rdquo; function. They are a part of the \u0026ldquo;Good File Sorting\u0026rdquo; function. But without the indentation they all look like separate functions.\nBesides alignment your code needs to be consistent. If you use spaces for indentation use them on every line. Don\u0026rsquo;t use tabs in one line and spaces in another line. Rather just use spaces. You can set your IDE to indent using spaces as the default. There also plenty of code formatting and linting tools such as ESLint, Prettier, Black etc\u0026hellip; Do make use of them.\nCohesion and Loose Coupling Cohesion can be sort of summarized as: \u0026ldquo;Things that belong together should be together\u0026rdquo;. Your code (files or modules) should be organised in such a way that they do one thing. They should have a single responsibility. If you want to understand a piece of code then you shouldn\u0026rsquo;t have to travel to the far reaches of the code base, scrolling up and down forever in a single file to figure out how it works. So avoid writing code that contains a lot of random functions that don\u0026rsquo;t have an obvious effect and don\u0026rsquo;t be that person who writes files that have 200 lines of code.\nCoupling is about how much each component in your code base depends on other components. Loose coupling is making sure that if you change some code it doesn\u0026rsquo;t have any weird side effects that break other parts of your code base. Your code should be loosely coupled.\nDefensive Programming Defensive programming means anticipating things that could probably go wrong and coding to handle such situations or edge cases. The goal is to write code that can handle real life situations: e.g. invalid input from the user - the user inputs a number where your program requires a text string.\nIf you don\u0026rsquo;t code defensively your code might for example fail to complete its work but still run with no errors and act as if there is no problem. This leads to bugs that are difficult to find and fix after you\u0026rsquo;ve pushed your code. You can make use of exception or error messages for example to prevent your code from running if the input was invalid. So think about the edge cases. Assume that your user isn\u0026rsquo;t always going to follow the instructions or use your program as they were supposed. Then write your code in a way that anticipates and handles such misuse.\n"
},
{
	"uri": "/tech-department/topics/kotlin/generics/",
	"title": "Generics",
	"tags": [],
	"description": "",
	"content": " As in Java, classes in Kotlin may have type parameters:\nclass Box\u0026lt;T\u0026gt;(t: T) { var value = t }  In general, to create an instance of such a class, we need to provide the type arguments:\nval box: Box\u0026lt;Int\u0026gt; = Box\u0026lt;Int\u0026gt;(1)  But if the parameters may be inferred, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:\nval box = Box(1) // 1 has type Int, so the compiler figures out that we are talking about Box\u0026lt;Int\u0026gt;  Variance One of the most tricky parts of Java\u0026rsquo;s type system is wildcard types (see Java Generics FAQ). And Kotlin doesn\u0026rsquo;t have any. Instead, it has two other things: declaration-site variance and type projections.\nFirst, let\u0026rsquo;s think about why Java needs those mysterious wildcards. The problem is explained in Effective Java, 3rd Edition, Item 31: Use bounded wildcards to increase API flexibility. First, generic types in Java are invariant, meaning that List\u0026lt;String\u0026gt; is not a subtype of List\u0026lt;Object\u0026gt;\nWhy so? If List was not invariant, it would have been no better than Java\u0026rsquo;s arrays, since the following code would have compiled and caused an exception at runtime:\n// Java List \u0026lt; String \u0026gt; strs = new ArrayList \u0026lt; String \u0026gt;(); List \u0026lt; Object \u0026gt; objs = strs; // !!! The cause of the upcoming problem sits here. Java prohibits this! objs.add(1); // Here we put an Integer into a list of Strings String s = strs.get(0); // !!! ClassCastException: Cannot cast Integer to String  So, Java prohibits such things in order to guarantee run-time safety. But this has some implications. For example, consider the addAll() method from Collection interface. What\u0026rsquo;s the signature of this method? Intuitively, we\u0026rsquo;d put it this way:\n// Java interface Collection\u0026lt;E\u0026gt; ... { void addAll(Collection\u0026lt;E\u0026gt; items); }  But then, we can\u0026rsquo;t do the following simple thing (which is perfectly safe):\n// Java void copyAll(Collection\u0026lt;Object\u0026gt; to, Collection\u0026lt;String\u0026gt; from) { to.addAll(from); // !!! Would not compile with the naive declaration of addAll: // Collection\u0026lt;String\u0026gt; is not a subtype of Collection\u0026lt;Object\u0026gt; }  (In Java, we learned this lesson the hard way, see Effective Java, 3rd Edition, Item 28: Prefer lists to arrays)\nThat\u0026rsquo;s why the actual signature of addAll() is the following:\n// Java interface Collection\u0026lt;E\u0026gt; ... { void addAll(Collection\u0026lt;? extends E\u0026gt; items); }  The **wildcard type argument** ? extends E--- indicates that this method accepts a collection of objects of E or some subtype of E, not just E itself. This means that we can safely read E\u0026rsquo;s from items (elements of this collection are instances of a subclass of E), but cannot write to it since we do not know what objects comply to that unknown subtype of E. In return for this limitation, we have the desired behaviour: Collection is a subtype of Collection\u0026lt;? extends Object\u0026gt;. In \u0026ldquo;clever words\u0026rdquo;, the wildcard with an extends-bound (upper bound) makes the type covariant.\nThe key to understanding why this trick works is rather simple: if you can only take items from a collection, then using a collection of Strings and reading Objects from it is fine. Conversely, if you can only put items into the collection, it\u0026rsquo;s OK to take a collection of Objects and put Strings into it: in Java we have\nList\u0026lt;? super String\u0026gt; a supertype of List\u0026lt;Object\u0026gt;.  The latter is called contravariance, and you can only call methods that take String as an argument on\nList\u0026lt;? super String\u0026gt;  (e.g., you can call add(String) or set(int, String)), while if you call something that returns T in List, you don\u0026rsquo;t get a String, but an Object.\nJoshua Bloch calls those objects you only read from Producers, and those you only write to Consumers. He recommends: \u0026ldquo;For maximum flexibility, use wildcard types on input parameters that represent producers or consumers\u0026rdquo;, and proposes the following mnemonic:\nPECS stands for Producer-Extends, Consumer-Super.\nNOTE: if you use a producer-object, say,\nList\u0026lt;? extends Foo\u0026gt;  -you are not allowed to call add() or set() on this object, but this does not mean that this object is immutable: for example, nothing prevents you from calling clear() to remove all items from the list, since clear() does not take any parameters at all. The only thing guaranteed by wildcards (or other types of variance) is type safety. Immutability is a completely different story.\nDeclaration-site variance Suppose we have a generic interface Source that does not have any methods that take T as a parameter, only methods that return T:\n// Java interface Source\u0026lt;T\u0026gt; { T nextT(); }  Then, it would be perfectly safe to store a reference to an instance of Source in a variable of type Source – there are no consumer-methods to call. But Java does not know this, and still prohibits it:\n// Java void demo(Source\u0026lt;String\u0026gt; strs) { Source\u0026lt;Object\u0026gt; objects = strs; // !!! Not allowed in Java // ... }  To fix this, we have to declare objects of type\nSource\u0026lt;? extends Object\u0026gt;  which is sort of meaningless, because we can call all the same methods on such a variable as before, so there\u0026rsquo;s no value added by the more complex type. But the compiler does not know that.\nIn Kotlin, there is a way to explain this sort of thing to the compiler. This is called declaration-site variance: we can annotate the type parameter T of Source to make sure that it is only returned (produced) from members of Source, and never consumed. To do this we provide the out modifier:\ninterface Source\u0026lt;out T\u0026gt; { fun nextT(): T } ​ fun demo(strs: Source\u0026lt;String\u0026gt;) { val objects: Source\u0026lt;Any\u0026gt; = strs // This is OK, since T is an out-parameter // ... }  The general rule is: when a type parameter T of a class C is declared out, it may occur only in out-position in the members of C, but in return C can safely be a supertype of C.\nIn \u0026ldquo;clever words\u0026rdquo; they say that the class C is covariant in the parameter T, or that T is a covariant type parameter. You can think of C as being a producer of T\u0026rsquo;s, and NOT a consumer of T\u0026rsquo;s.\nThe out modifier is called a variance annotation, and since it is provided at the type parameter declaration site, we talk about declaration-site variance. This is in contrast with Java\u0026rsquo;s use-site variance where wildcards in the type usages make the types covariant.\nIn addition to out, Kotlin provides a complementary variance annotation: in. It makes a type parameter contravariant: it can only be consumed and never produced. A good example of a contravariant type is Comparable:\ninterface Comparable\u0026lt;in T\u0026gt; { operator fun compareTo(other: T): Int } ​ fun demo(x: Comparable\u0026lt;Number\u0026gt;) { x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number // Thus, we can assign x to a variable of type Comparable\u0026lt;Double\u0026gt; val y: Comparable\u0026lt;Double\u0026gt; = x // OK! }  We believe that the words in and out are self-explaining (as they were successfully used in C# for quite some time already), thus the mnemonic mentioned above is not really needed, and one can rephrase it for a higher purpose:\nThe Existential Transformation: Consumer in, Producer out! :-)\nType projections Use-site variance: Type projections It is very convenient to declare a type parameter T as out and avoid trouble with subtyping on the use site, but some classes can\u0026rsquo;t actually be restricted to only return T\u0026rsquo;s! A good example of this is Array:\nclass Array\u0026lt;T\u0026gt;(val size: Int) { fun get(index: Int): T { ... } fun set(index: Int, value: T) { ... } }  This class cannot be either co- or contravariant in T. And this imposes certain inflexibilities. Consider the following function:\nfun copy(from: Array\u0026lt;Any\u0026gt;, to: Array\u0026lt;Any\u0026gt;) { assert(from.size == to.size) for (i in from.indices) to[i] = from[i] }  This function is supposed to copy items from one array to another. Let\u0026rsquo;s try to apply it in practice:\nval ints: Array\u0026lt;Int\u0026gt; = arrayOf(1, 2, 3) val any = Array\u0026lt;Any\u0026gt;(3) { \u0026quot;\u0026quot; } copy(ints, any) // ^ type is Array\u0026lt;Int\u0026gt; but Array\u0026lt;Any\u0026gt; was expected  Here we run into the same familiar problem: Array is invariant in T, thus neither of Array and Array is a subtype of the other. Why? Again, because copy might be doing bad things, i.e. it might attempt to write, say, a String to from, and if we actually passed an array of Int there, a ClassCastException would have been thrown sometime later.\nThen, the only thing we want to ensure is that copy() does not do any bad things. We want to prohibit it from writing to from, and we can:\nfun copy(from: Array\u0026lt;out Any\u0026gt;, to: Array\u0026lt;Any\u0026gt;) { ... }  What has happened here is called type projection: we said that from is not simply an array, but a restricted (projected) one: we can only call those methods that return the type parameter T, in this case it means that we can only call get(). This is our approach to use-site variance, and corresponds to Java\u0026rsquo;s Array\u0026lt;? extends Object\u0026gt; but in a slightly simpler way.\nYou can project a type with in as well:\nfun fill(dest: Array\u0026lt;in String\u0026gt;, value: String) { ... }  Arraycorresponds to Java\u0026rsquo;s Array\u0026lt;? super String\u0026gt;, i.e. you can pass an array of CharSequence or an array of Object to the fill() function.\nStar-projections Sometimes you want to say that you know nothing about the type argument, but still want to use it in a safe way. The safe way here is to define such a projection of the generic type, that every concrete instantiation of that generic type would be a subtype of that projection.\nKotlin provides so called star-projection syntax for this:\n For Foo\u0026lt;out T : TUpper\u0026gt; where T is a covariant type parameter with the upper bound TUpper, Foo\u0026lt;*\u0026gt; is equivalent to Foo. It means that when the T is unknown you can safely read values of TUpper from Foo\u0026lt;*\u0026gt;.\n For Foo\u0026lt;in T\u0026gt; where T is a contravariant type parameter, Foo\u0026lt;*\u0026gt; is equivalent to Foo\u0026lt;in Nothing\u0026gt; It means there is nothing you can write to Foo\u0026lt;*\u0026gt; //in a safe way when T is unknown.\n For Foo\u0026lt;T : TUpper\u0026gt;where T is an invariant type parameter with the upper bound TUpper, Foo\u0026lt;*\u0026gt; is equivalent to Foofor reading values and to Foofor writing values.\n  If a generic type has several type parameters each of them can be projected independently. For example, if the type is declared as\ninterface Function\u0026lt;in T, out U\u0026gt;  we can imagine the following star-projections:\n- Function\u0026lt;*, String\u0026gt; means Function\u0026lt;in Nothing, String\u0026gt;; - Function\u0026lt;Int, *\u0026gt; means Function\u0026lt;Int, out Any?\u0026gt;; - Function\u0026lt;*, *\u0026gt; means Function\u0026lt;in Nothing, out Any?\u0026gt;.  Note: star-projections are very much like Java\u0026rsquo;s raw types, but safe.\nGeneric functions Not only classes can have type parameters. Functions can, too. Type parameters are placed before the name of the function:\nfun \u0026lt;T\u0026gt; singletonList(item: T): List\u0026lt;T\u0026gt; { // ... } ​ fun \u0026lt;T\u0026gt; T.basicToString(): String { // extension function // ... }  To call a generic function, specify the type arguments at the call site after the name of the function:\nval l = singletonList\u0026lt;Int\u0026gt;(1)  Type arguments can be omitted if they can be inferred from the context, so the following example works as well:\nval l = singletonList(1)  Generic constraints The set of all possible types that can be substituted for a given type parameter may be restricted by generic constraints.\nUpper bounds The most common type of constraint is an upper bound that corresponds to Java\u0026rsquo;s extends keyword:\nfun \u0026lt;T : Comparable\u0026lt;T\u0026gt;\u0026gt; sort(list: List\u0026lt;T\u0026gt;) { ... }  The type specified after a colon is the upper bound: only a subtype of Comparable may be substituted for T. For example:\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable\u0026lt;Int\u0026gt; sort(listOf(HashMap\u0026lt;Int, String\u0026gt;())) // Error: HashMap\u0026lt;Int, String\u0026gt; is not a subtype of Comparable\u0026lt;HashMap\u0026lt;Int, String\u0026gt;\u0026gt;  The default upper bound (if none specified) is Any?. Only one upper bound can be specified inside the angle brackets. If the same type parameter needs more than one upper bound, we need a separate where-clause:\nfun \u0026lt;T\u0026gt; copyWhenGreater(list: List\u0026lt;T\u0026gt;, threshold: T): List\u0026lt;String\u0026gt; where T : CharSequence, T : Comparable\u0026lt;T\u0026gt; { return list.filter { it \u0026gt; threshold }.map { it.toString() } }  The passed type must satisfy all conditions of the where clause simultaneously. In the above example, the T type must implement both CharSequence and Comparable.\nType erasure The type safety checks that Kotlin performs for generic declaration usages are only done at compile time. At runtime, the instances of generic types do not hold any information about their actual type arguments. The type information is said to be erased. For example, the instances of Foo and Foo are erased to just Foo\u0026lt;*\u0026gt;.\nTherefore, there is no general way to check whether an instance of a generic type was created with certain type arguments at runtime, and the compiler prohibits such is-checks.\nType casts to generic types with concrete type arguments, e.g. foo as List\u0026lt;\u0026lt;*String\u0026gt;\u0026gt;, cannot be checked at runtime. These unchecked casts can be used when type safety is implied by the high-level program logic but cannot be inferred directly by the compiler. The compiler issues a warning on unchecked casts, and at runtime, only the non-generic part is checked (equivalent to foo as List\u0026lt;*\u0026gt;).\nThe type arguments of generic function calls are also only checked at compile time. Inside the function bodies, the type parameters cannot be used for type checks, and type casts to type parameters (foo as T) are unchecked. However, reified type parameters of inline functions are substituted by the actual type arguments in the inlined function body at the call sites and thus can be used for type checks and casts, with the same restrictions for instances of generic types as described above.\nReification Reification allows you to preserve the generic type in runtime. Kotlin supports reification of parameter types in a function under a certain condition, that being the function is an inline function. Let’s see why.\ninline fun \u0026lt;reified T\u0026gt; doSomethingWithType(obj: T) { val typeName = T::class.java println(typeName) } fun main(args: Array\u0026lt;String\u0026gt;) { doSomethingWithType(String()) }  For us to access the type of the object from the above example, we have to declare the type parameter as reified and inline the function. Let’s see the decompiled code.\nprivate static final void doSomethingWithType(Object obj) { Intrinsics.reifiedOperationMarker(4, \u0026quot;T\u0026quot;); Class typeName = Object.class; System.out.println(typeName); } public static final void main(@NotNull String[] args) { Intrinsics.checkParameterIsNotNull(args, \u0026quot;args\u0026quot;); new String(); Class typeName$iv = String.class; System.out.println(typeName$iv); }  The doSomethingWithType had the type erased as we expected. So we cannot use it in Java to preserve the type. The magic happened in the calling function. The function was inlined (as expected) and had the correct type substituted instead of an Object type. This is possible because at the call-site, the compiler can infer the type of the object that is passed to the inline function.\n"
},
{
	"uri": "/tech-department/projects/python-specific/file_io_kata/",
	"title": "Getting to know Python",
	"tags": [],
	"description": "",
	"content": " This little project aims to introduce you to some of the most important aspects of Python.\nFirst make sure that you have Python3.7 installed. There is a nice guide here\nNote You\u0026rsquo;ll need to submit your work as a git repo. Make sure your latest submission is in the master branch. And make sure your repo is public.\nYou will be expected to unit test your code. You can choose whichever test framework you like best. Pytest is quite nice and clean.\nIf you feel that you need extra resources or instruction to pull this off please just ask :)\nPlease do one step at a time, resist the temptation to read ahead.\nStep 1 Make this function work:\ndef list_all_js_function_names(path_to_js_file): \u0026quot;\u0026quot;\u0026quot; path_to_js_file is a path to a file on your hard drive This function will read the entire input file and then return a list of js function names as strings \u0026quot;\u0026quot;\u0026quot;  Here is an example of a javascript file: https://github.com/MihlaliNelana/CardGame/blob/master/CardGame/script/script.js\nExample:\nGiven\n// script.js function promptUser() { // line 2 var num = prompt(\u0026quot;Please enter number of squares...\u0026quot;); if (num != null) { document.getElementById(\u0026quot;demo\u0026quot;).innerHTML = \u0026quot;You want \u0026quot; + num + \u0026quot; number of squares...\u0026quot;; } } // line 8 Array.prototype.memory_card_shuffle = function(){ // line 9 var i = this.length, j, temp; while(--i \u0026gt; 0){ j = Math.floor(Math.random() * (i+1)); temp = this[j]; this[j] = this[i]; this[i] = temp; } } // line 17  Then:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return ['promptUser','Array.prototype.memory_card_shuffle']  What you should get out of this  practice unit testing get familiar with how functions work get familiar with file inputs practice (very) basic looping  Hints :) There is a lot to this function. It should be broken down a bit instead of doing everything in one go. Remember that we are doing TDD here, that\u0026rsquo;s test driven development. In TDD you try to write the most trivial test possible, then you make that test pass, then you refactor. Then repeat. Try to make sure that each test you write is as small and self-contained as possible while still being useful.\nHere are some ideas for some tests:\n test that given a one-line string, your function can detect whether or not it contains a function definition. eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; is a function definition \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; is not a function definition \u0026ldquo;foo.bar = function something(){\u0026rdquo; is a function definition  test that you can return the correct function name. Eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; the function name is fooo \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; there is no function defined here \u0026ldquo;foo.bar = function something(){\u0026rdquo; the function name is foo.bar   Then you\u0026rsquo;ll need to extend your code so that it can take a javascript file as input.\nResources  https://docs.python.org/3/howto/regex.html#using-regular-expressions https://www.w3schools.com/python/python_regex.asp  You\u0026rsquo;ll need to understand re.search to get this right\nAnd here is some file input/output (file io) documentation:\n https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files  Step 2 Upgrade the list_all_js_function_names function so that it also returns the start line number and end line number for the functions. Functions in Js are defined with the use of curly brackets.\nInstead of returning a list of strings, return a list of dicts.\nNow the function should work more like this:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return [ {'name':'promptUser', 'start_row':2, 'end_row':8}, {'name':'Array.prototype.memory_card_shuffle', 'start_row':9, 'end_row':17} ]  Note that functions can be defined inside functions.\nWhat you should get out of this  more advanced algorithmic thinking a little bit of practice with dictionaries  Step 3 TBA TODO\n"
},
{
	"uri": "/tech-department/tags/git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/git-exercises/",
	"title": "Git Basic Exercises",
	"tags": ["git"],
	"description": "",
	"content": " Introduction This little exercise will take you through the basic git mechanisms you need to know about in order to be productive. By the end of this exercise you\u0026rsquo;ll be able to create and manage your own git repos\nCreating and managing your own repo Note: you can do all of this stuff from the command line! You should be using linux. Open up a terminal and do the following:\nYour initial commit  Create a directory named git-basic-exercises cd into your new directory look at what\u0026rsquo;s inside using ls -a. It should be empty initialize your git repo using git init. Then check ls -a again. Can you spot the difference? check the status of your repo by typing git status type in touch README.md. This creates a new blank file. Then check ls -a and git status again. type in git log. The output should make sense to you Now add your readme file to your git staging area. Hint: use the git add command Then check your git status again. Can you see the difference? Try to unstage your file and check your git status again Ok, now for your first commit: Make sure your readme file is staged then type in git commit -m \u0026quot;initial commit\u0026quot; Your output should be something like this:   [master (root-commit) 2103b64] initial commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md   type in git log isn\u0026rsquo;t that nice? press q to exit  more commits!  type in nano README.md. This will open up a text editor. Type in some stuff and then press ctrl x to exit. Then y then enter. This will save your changes type in cat README.md. This will print your file to the console take a look at the git stats again and make sure you understand it commit your changes to your repo. Your commit should have the message \u0026quot;second commit\u0026quot; make some more changes to your readme and make a \u0026quot;third commit\u0026quot;  check this out  type in git log. You should see all your commits there. It should look something like this:  commit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Each commit has a \u0026ldquo;hash\u0026rdquo;. That\u0026rsquo;s the weird alphanumeric string thingy.\n Copy the commit hash for your second commit. You can just select it with your mouse and right click and choose \u0026lsquo;copy\u0026rsquo; press q to exit the log view. You should now be back at the terminal type in git checkout and then paste in the commit hash and press enter cat README.md It\u0026rsquo;s like going back in time git checkout master cat README.md Now we are up to date  You can jump to any commit using git checkout. You can checkout a branch, a commit hash, or a tag. We didn\u0026rsquo;t explore tags here.\nWhen you checkout a branch, you checkout the latest commit on that branch.\nbranching The real power of git is in branching. Branching is what allows big teams of developers to work on the same code base. Let\u0026rsquo;s explore branching a little bit.\n git branch This lists all your branches. Git makes a branch named master by default Now create a new branch called milkshake-flavours. git is not too restrictive when it comes to naming our branches. It\u0026rsquo;s generally best to choose a name that has something to do with what the branch is for. Our branch is about milkshakes type in git branch. Notice the little *. check out your new branch. type in git branch again and look at the *. Can you see what it means? Try switching between the different branches and see how hings change. Make sure you are on the milkshake-flavours branch then type in nano milkshakes.md and write fill in a few flavours. Mmmm. save and exit what does git status tell you? commit your new file with the message \u0026quot;added initial flavours\u0026quot; take a look at your git log again. It should make sense checkout your master branch. It\u0026rsquo;ll look a little different. Can you see why? from your master branch, create a new branch called history and check it out. If you say git log it should only have three commits type in history \u0026gt; history.txt. Can you guess what it does? commit your changes with the message \u0026quot;added history\u0026quot;. Take a look at the git log now checkout your milkshake branch and look at the git log. it should have your three master commits and your one milkshake commit make some arbitrary changes to the readme file and make a new commit with the message \u0026quot;random readme changes\u0026quot; checkout history again and cat README.md now on your history branch do the following:  rm README.md echo \u0026quot;booya\u0026quot; \u0026gt; README.md  You should know what these lines do.\n commit your changes. Use the commit message \u0026quot;rewrote readme\u0026quot; checkout master again  Just make sure we are still on track If you have followed along up until this point then your branches should look like this:\nType in:\ngit checkout master ls  this outputs:\nREADME.md  Check the log:\ngit log  this outputs something like:\ncommit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Now lets look at milkshake-flavours:\ngit checkout milkshake-flavours ls  You will see two files:\nmilkshakes.md README.md  And git log will look like:\ncommit d2559d9758f3ec0f7928f6cbef705c6fa9679edf (HEAD -\u0026gt; milkshake-flavours) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:25:07 2019 +0200 added initial flavours commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Finally history:\ngit checkout history ls  there should be two files:\nhistory.txt README.md  and git log outputs\ncommit 34025ac2b26accb7c5c18ec048a4982d3bae8909 (HEAD -\u0026gt; history) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:38:05 2019 +0200 rewrote readme commit b9e3c50fb65c7b2df0f09b921a15a7fc146e0bfb Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:36:04 2019 +0200 added history commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  merging Now we want to get the master up to date with all out changes. Let\u0026rsquo;s start with the milkshake branch\n merge milkshake-flavours into master  git checkout master git merge milkshake-flavours   Use ls and git log to see what this did merge history into master Use ls and git log to see what this did As you can see a whole lot of changes have been made to the master branch Now lets take a look at the other branches  git checkout history git log ... git checkout milkshake-flavours git log  These branches were not effected by the merge!\nIn general if we want to merge branch X into branch Y:\ngit checkout Y git merge X  This adds a commit to branch Y and doesn\u0026rsquo;t change branch X\n merge the master branch into history. Use git log to see whats up. checkout master again. git log again. Can you spot any differences?  GitHub  Go to Github.com (using your browser of choice) and create a new public repository using the user interface. Name it git-basic-exercises\n You will see a bunch of weird looking things. There is a section entitled \u0026ldquo;…or push an existing repository from the command line\u0026rdquo;. We have an existing repository and a command line. So this seems appropriate. Copy the commands from there and paste them into your terminal. this will push your changes to github.\n Refresh your browser. Cool eh?\n  Now you should see a little dropdown box on github that says \u0026ldquo;Branch: master\u0026rdquo;. Click there. your other branches aren\u0026rsquo;t available.\n Push your other branches to github. We want all branches to be listed  Pulling and remotes  You should still be inside the git-basic-exercises directory. Let\u0026rsquo;s get out of there. cd ../ Now let\u0026rsquo;s clone a repo. point your browser here: https://github.com/Umuzi-org/tech-department Now there is a friendly green button that says \u0026ldquo;Clone or download\u0026rdquo;. Click on it. You will see a url come up. Copy it. You will need to paste it into the terminal in a moment In your terminal type in git clone $THE_URL_YOU_JUST_COPIED. It should look something like this: git clone https://github.com/Umuzi-org/tech-department cd into the tech-department directory that was just created explore a little using git branch and git log type in git branch -a. This shows the remote branches try to checkout the branch called project/git-basic-exercises on your local computer. You can do it, you\u0026rsquo;ll need to figure out how type in git remote -v  Multiple Repos  While still in your newly created branch project/git-basic-exercises use git log to see the history. From your new branch called project/git-basic-exercisesnavigate back to your git-basic-exercises repo, use git log again to see the difference. Let\u0026rsquo;s go back to our home directory cd and make a new folder mkdir this-will-be-another-repo cd into this folder now use git init to initilise a new git repo here, you should get a message in terminal that says \u0026lsquo;Initialized empty Git repository in /home/\\$specific-path/this-will-be-another-repo/.git/\u0026rsquo; Type in touch README.md. This creates a new blank file. Stage then commit. Go back to your git-basic-exercises repo and use git log to check that you are in the right place and repo.  gitignore  Create a new file touch ignore-me.db Now use git status to see what is going on in your repo, you will see ignore-me.bd as an unstaged file. Now lets create a .gitignore file type nano .gitignore In this file type ignore-me.db save and exit your .gitignore file Now use git status you will notice that ignore-me.db is no longer an unstaged file and is no longer being tracked by github and .gitignore is being tracked. Create a new directory mkdir large-directory-that-should-be-local-only cd into this directory and create a readme.md file with some random text in Use cd .. to go back to your main directory and git status to see what is going on, you should now see your new folder as an unstaged change. Lets add this folder to .gitignore nano .gitignore and add /large-directory-that-should-be-local-only on a new line, save and close .gitignore Check git status again, .gitignore is going to be super useful later when you are submitting projects and need to keep your repos small and free from junk and irrelevant files.  gitignore best practices You should always gitignore the items in the below list:\n secrets like passwords and keys databases pycache/ node_modules/ temporary files and editor settings files eg .vscode/  Repo Best Practices Your repo should be all of the following:\n Files and folders in your repo should be named appropriately. Use names that make sense and relate to your projects i.e. simple-calculator Each project should be in its own repo There should be no junk/unnecessary file in your repos Your repos should be small (remember the use of .gitignore)  Going forward We just covered the basics here. Please make sure you understand this stuff. It\u0026rsquo;s super important. Git might seem like a weird theoretical thing to a lot of you. It might seem completely unrelated to the actual job of writing code. But it\u0026rsquo;s not. Git makes teamwork on dev teams possible. Without it we\u0026rsquo;d spend more time shouting at each other than writing useful code. So learn it. Be comfortable with it. When we start working in teams later on all will be made clear.\nIf you are curious now, spend some time googling git branching strategies. We use the feature branching strategy here. We\u0026rsquo;ll cover it in depth later on in the course.\n"
},
{
	"uri": "/tech-department/topics/git/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " What\u0026rsquo;s git all about? Git is an industry standard tool used for collaboration within teams. We teach it quite early on in our course because without it you will be fairly useless as a professional. Yes, it\u0026rsquo;s that important. The git book (below) has a better introduction.\nThe Git Book You don\u0026rsquo;t need to know absolutely everything about Git in order to start using it. We keep our git repos on Github so don\u0026rsquo;t worry about the server setup stuff.\nThe first three chapters will serve you well initially:\nhttps://git-scm.com/book/en/v2\nWhat we expect from you As you progress through this course you will have to write a lot of code. All your code will be submitted to us for review in the form of a git repo. You will be expected to be comfortable using git from the command line.\nGeneral best practices  make a separate repo for every project (we don\u0026rsquo;t want to have to sift through unrelated code when marking your work) make sure that you push your latest work before leaving the office every day if you are working on a team, make sure you pull the master branch often give your git branches meaningful and specific names give your commits meaningful messages always make use of .gitignore, you can find out more about it here  Github We use Github for keeping our code safe. Here is a little intro and here is the official cheat sheet.\nAlso checkout TOPICS: Useful Git commands For our data recruits https://www.datacamp.com/courses/introduction-to-git-for-data-science\nFun fact about our syllabus This site that you are looking at is a repo stored on git. This is cool because it means that you can fork it and make changes to our content. For example:\n if you find a video that was really useful in understanding a topic, then you can add a link to that video to our course material if you see a typo you can fix it If you think one of our projects can be explained better then you can add more explanation  Here is the repo, and this guide tells you a bit about what we ae looking for.\nContributing to our syllabus is not compulsory, but it would be appreciated :)\n"
},
{
	"uri": "/tech-department/workshops/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/workshops/git-for-teamwork/",
	"title": "Git for Teamwork",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/projects/capstone-projects/gmail-text-scraper/",
	"title": "Gmail Text Scraper",
	"tags": [],
	"description": "",
	"content": " Who should do this? Anyone interested in backend logic and scripting, and accessing external apis. This isn’t specific to one of our product teams, but the skills you prove here will be useful for the rest of your life.\nSpec Write a script in Python or Node (or whatever really) that:\n Uses the gmail api to access all emails tagged with a specific tag for a specific person Reads the text inside each email and used regular expressions to extract useful data Takes all the data and saves it to a csv file  The data we are interested in seeing in the csv:\n Podcast title Episode title Duration Email data/time Link to episode  Lindelani/Sheena will send you a few emails that you can use\nResources https://developers.google.com/gmail/api/guides\nFirst get the “quickstart” to run using your chosen language. Then make it work for your problem.\nEmail sample Text Far Away \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; this is a link Episode: \u0026quot;Mjolnir\u0026quot; | Podcast: Star Wars Minute | 24m31s \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; these are episode details Daily conversational podcast that analyses the Star Wars films minute by minute. This episode is devoted to minute 114 of Revenge of the Sith, in which Yoda is mid battle with the Sith Lord. Although it's supposed to be a climactic point of the film, the quartet of reviewers here actually consider this dialogue-less sliver of a fight scene to be one of the most boring minutes of footage they have talked about. The discussion, though, is good natured and well structured, easily transcending the sub par material and adding intriguing tangents (24m31s) True Crime Episode: \u0026quot;The Murder Ballad Of Spade Cooley\u0026quot; | Podcast: Cocaine \u0026amp; Rhinestones | 60m16s Country music history podcast hosted by the son of well known singer David Allan Coe. This episode comes with warnings for violent content, because it describes how musician Spade Cooley violently murdered his wife in 1961. But although this piece has that horrifying destination in mind throughout, the journey there through Cooley's musical career is worth the time. His role in popularising the country-jazz fusion known as \u0026quot;western swing\u0026quot; and the hustling he did to build a Hollywood profile in the 1940s is well covered (60m16s) Hang Up Episode: \u0026quot;Not A Phone Person\u0026quot; | Podcast: Anxious Machine | 24m56s Moving, funny interview with a women who hated talking on the phone, yet has managed to maintain a long distance relationship over several decades. Andrea and Dave met in high school and then attended separate colleges. They are now married with three children but are still regularly parted for months at a time when Dave is deployed overseas as a naval officer. To avoid phone calls they have written thousands of letters, sent photographs, recorded cassettes and now have moved into video chats (24m56s) This post is only for paying subscribers of The Listener, but it’s ok to forward every once in a while. Caroline Crampton, Editor Lindelani Mbatha, International Editor Uri Bram, CEO [uri@thelistener.co] Get The Listener's recommendations straight into your podcast app. Just copy this RSS feed and add it manually to your app: https://www.listennotes.com/listen/the-listener-members-feed--oO1FZKwx6e/rss/ Further instructions here. The Listener © 2020 – Unsubscribe  "
},
{
	"uri": "/tech-department/topics/data-science-specific/google-data-studio/",
	"title": "Google Data Studio",
	"tags": [],
	"description": "",
	"content": " Introduction Dashboarding is easy with Google Data Studio. Google Data Studio helps you import, manipulate and display your data in an easy to understand way. If you know Google Data Studio, you\u0026rsquo;ll also find other popular data analytics tools such as Power BI (Microsoft), Tableau and Qlikview easy to learn.\nThe slides for the data visualisation / business intelligence workshop can be found in: WORKSHOPS: Business intelligence tools What to consider when doing BI A part of data analysis that must not be taken for granted is how to convey the content correctly. This is where BI tools become extremely powerful. They focus on creating interactive dashboards to convey the data in a report-type fashion. The use of various elements helps you not just show the data but gives focus to the report and ‘tell a story’. Making it interactive allows you to generate insight and allows the audience to interrogate the data easily.\nThese a few things you should consider when making a dashboard:\n Does the report have a page title and graph titles? This allows the audience to understand what the dashboard is focused on rather than questioning you about every element. Are the graphs visible? Make sure the graphs not only contain the correct information but are also easy to read. This includes titles, colours, and the type of graph for the information. How many graphs are on the dashboard? Too many graphs can lose focus - too little may not tell the whole story. Ensure you know what you are building and what you want to show on the dashboard. Is there any interactivity that the dashboard can benefit from? Do you need filters that can help navigate the story? Can you use a graph to filter out another graph? These are aspects that usually come into question while you are building your report. Your ‘story’ may be spanned over multiple dashboards. Some dashboards have a single focus while others could continue a story from a previous dashboard especially if there is a lot to show. Make sure you can navigate easily to them and the audience knows this. Titles can really help how these two dashboards are linked. Look and feel is important. Make sure the colours are correct, background images, graph types, graph colours, labels etc. all work together to create a visually compelling report. Know your data. Use the tool to understand the data you have and how you can create new fields to enhance the information. This takes practice and experience and will come through design - sessions with peers and others. Future proofing is an underlying goal. Make sure your work isn’t temporary, it can be updated and enhanced to meet the needs of the future. This includes the processing mechanism of your data. It may not always come in the form you need. You must ensure you process your data correctly before you visualize it in order to convey the most value as easily as possible. This may also be easier if the data provided to you can include some other fields before your import, so that the ‘raw’ data file has the information in a more useable format. Understand your audience. It is important to make sure you design the report correctly for the users – so multiple design sessions and continuous testing is key to ensuring usability and a higher utilization rate.  These are just a few considerations when building a report and this list will grow as you gain more experience.\nGoogle Data Studio Documentation Documentation for using Google Data Studio can be found here. Thank you Darshik for providing this documentation!\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/google_data_studio/",
	"title": "Google Data Studio Assignment",
	"tags": ["google-datastudio"],
	"description": "",
	"content": " South African Open Cities The South African Cities Open Data Almanac has great data, but it is mostly sitting within pdfs and spreadsheets. We can visualise it!\n Choose at least 4 datasets to download from the State of Cities Report page. You can choose what information you would like to focus on (employment, energy, etc.). Import the data to Google Data Studio and create a 2-page dashboard showing the state of our cities. Open Data for Africa has a nice example of what such a dashboard could look like Remember to use graphs, tables and filters Include a heading on each page describing what is shown Styling and theme is important - keep it consistent Present your dashboard to the team. You will have to interpret the data - what trends do you see? Any areas for concern or optimism?  "
},
{
	"uri": "/tech-department/tags/google-datastudio/",
	"title": "Google Datastudio",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/google-forms-like-a-boss/",
	"title": "Google forms like a boss",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/kotlin/gradle/",
	"title": "Gradle",
	"tags": [],
	"description": "",
	"content": " Using Gradle In order to build a Kotlin project with Gradle, you should set up the kotlin-gradle plugin, apply it to your project and add kotlin-stdlib dependencies. Those actions may also be performed automatically in IntelliJ IDEA by invoking Tools | Kotlin | Configure Kotlin in Project action.\nVisit the below link to see detailed usage of gradle for Kotlin. Gradle use with Kotlin\n"
},
{
	"uri": "/tech-department/topics/java-specific/gradle-and-intellij-project-structure/",
	"title": "Gradle and IntelliJ project submission structure",
	"tags": [],
	"description": "",
	"content": " When pushing your work to git it\u0026rsquo;s important to be intentional about what you are pushing. When you build your java project and/or run your tests then certain files get created automatically. We don\u0026rsquo;t want those files. We should be able to generate them ourselves whenever we want to.\nWhen you commit your code to git, you can tell git which files to ignore. You can do this though use of a .gitignore file. We\u0026rsquo;ve included a seriosly verbose gitignore file at the bottom of this document. Please just copy it and save it as a file named.gitignore in the root of your project.\nNow if you did this right from the start you should be able to do something like this:\ngit add . git commit -m \u0026quot;a useful and informative message\u0026quot; git push  Now let\u0026rsquo;s see if it all worked out. Try cloning your code yourself and see what git knows about:\ncd somewhere_nice git clone \u0026lt;your github repo\u0026gt; temporary_copy cd temporary_copy tree # you might need to: `sudo apt install tree`  This should output something neat and tidy. Eg from one of our many calculator projects you would see something that looks like this:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main │ └── java │ └── Calculator.java └── test └── java └── CalculatorTest.java  Now you can run these commands and they should work:\n ./gradlew build ./gradlew test  Troubleshooting If the directory structure that githb is tracking is huge and crazy looking then that\u0026rsquo;s because you committed things before adding .gitignore to your project. That\u0026rsquo;s totally ok! We can fix it like so:\ngit rm -r -cached . git add . git status # this should tell yu about a whole big pile of deleted files. This is expected git commit -m \u0026quot;cleaned up junk files\u0026quot; git push  Now take a look at what github knows about. Everything should be looking clean and tidy and if you clone your code it should just work.\nMassive and very thorough gitignore file Please copy this into your projects and save it as .gitignore:\n # Created by https://www.gitignore.io/api/java,gradle,intellij # Edit at https://www.gitignore.io/?templates=java,gradle,intellij ### Intellij ### # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839 # User-specific stuff .idea/ .idea/**/workspace.xml .idea/**/tasks.xml .idea/**/usage.statistics.xml .idea/**/dictionaries .idea/**/shelf # Generated files .idea/**/contentModel.xml # Sensitive or high-churn files .idea/**/dataSources/ .idea/**/dataSources.ids .idea/**/dataSources.local.xml .idea/**/sqlDataSources.xml .idea/**/dynamic.xml .idea/**/uiDesigner.xml .idea/**/dbnavigator.xml # Gradle .idea/**/gradle.xml .idea/**/libraries # Gradle and Maven with auto-import # When using Gradle or Maven with auto-import, you should exclude module files, # since they will be recreated, and may cause churn. Uncomment if using # auto-import. # .idea/modules.xml # .idea/*.iml # .idea/modules # *.iml # *.ipr # CMake cmake-build-*/ # Mongo Explorer plugin .idea/**/mongoSettings.xml # File-based project format *.iws # IntelliJ out/ # mpeltonen/sbt-idea plugin .idea_modules/ # JIRA plugin atlassian-ide-plugin.xml # Cursive Clojure plugin .idea/replstate.xml # Crashlytics plugin (for Android Studio and IntelliJ) com_crashlytics_export_strings.xml crashlytics.properties crashlytics-build.properties fabric.properties # Editor-based Rest Client .idea/httpRequests # Android studio 3.1\u0026#43; serialized cache file .idea/caches/build_file_checksums.ser ### Intellij Patch ### # Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721 # *.iml # modules.xml # .idea/misc.xml # *.ipr # Sonarlint plugin .idea/**/sonarlint/ # SonarQube Plugin .idea/**/sonarIssues.xml # Markdown Navigator plugin .idea/**/markdown-navigator.xml .idea/**/markdown-navigator/ ### Java ### # Compiled class file *.class # Log file *.log # BlueJ files *.ctxt # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package Files # *.jar *.war *.nar *.ear *.zip *.tar.gz *.rar # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml hs_err_pid* ### Gradle ### .gradle build/ # Ignore Gradle GUI config gradle-app.setting # Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored) !gradle-wrapper.jar # Cache of project .gradletasknamecache # # Work around https://youtrack.jetbrains.com/issue/IDEA-116898 # gradle/wrapper/gradle-wrapper.properties ### Gradle Patch ### **/build/ # End of https://www.gitignore.io/api/java,gradle,intellij  "
},
{
	"uri": "/tech-department/topics/kotlin/grid-layout/",
	"title": "Grid Layout",
	"tags": [],
	"description": "",
	"content": " Ice Cream Sandwich (ICS) sports two new widgets that have been designed to support the richer user interfaces made possible by larger displays: Space and GridLayout.\nThe most commonly used class for layout in Android is LinearLayout, which allows its children to be aligned in the usual ways: along either the horizontal or vertical axes. It’s often possible to take a complicated layout and break it down into a set of nested linear layouts and, provided this nesting doesn’t get too deep, this is still a good choice for many simple layouts.\nA number of posts and articles (e.g. Android Layout Tricks #1, Flattening The Stack) have highlighted drawbacks of nested layouts; which fall into three basic categories:\n Inability to control alignment along both axes simultaneously\n Performance problems in hierarchies that are too deep\n Unsuitability for design tools that support free-form editing\n  A simple example of the first problem is the following form:\nAs the font and the text of the “Email address” label change, we want the label to remain aligned with the baseline of the component to its right, and aligned with the right edge of the label below it. It’s not possible to do this with nested LinearLayouts because the label needs to be aligned with other components both horizontally and vertically.\nThese problems aren’t new to Android, or UI toolkits in general, but we’ve used them to drive our work in enriching platform support for flatter hierarchies.\nGridLayout To provide better support for layouts like these we have added a new layout to the Android framework: GridLayout, which can be used to solve the above problems by dividing the container’s real estate into rows and columns:\nNow the “Email address” label can belong both to a row that is baseline-aligned, and a column that is right-aligned.\nGridLayout uses a grid of infinitely-thin lines to separate its drawing area into: rows, columns, and cells. It supports both row and column spanning, which together allow a widget to occupy a rectangular range of cells that are next to each other. We’ll use the words row, column, and cell in the text below as shorthand for row group, column group and cell group respectively, where groups have one or more contiguous elements.\nSimilarities with LinearLayout Wherever possible, GridLayout uses the same conventions as LinearLayout for all its XML API — so it should be easy to start using GridLayout if you’ve already used LinearLayout. In fact, the APIs are so similar that changing a tag name from LinearLayout to GridLayout in an XML file that uses LinearLayout will often produce a similar UI without requiring any other changes. When it doesn’t, you’ll still generally end up with a good starting point for a two-dimensional layout.\nGetting Started Two examples in the samples area of the Android 4.0 SDK show typical use of the programmatic and XML APIs respectively:\n https://samples/ApiDemos/src/com/example/android/apis/view/GridLayout0.java\n https://samples/ApiDemos/res/layout/grid_layout_1.xml\n  [Both examples produce the same UI.]\nHere’s a slightly simpler version of the above XML layout.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;GridLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; android:useDefaultMargins=\u0026quot;true\u0026quot; android:alignmentMode=\u0026quot;alignBounds\u0026quot; android:columnOrderPreserved=\u0026quot;false\u0026quot; android:columnCount=\u0026quot;4\u0026quot; \u0026gt; \u0026lt;TextView android:text=\u0026quot;Email setup\u0026quot; android:textSize=\u0026quot;32dip\u0026quot; android:layout_columnSpan=\u0026quot;4\u0026quot; android:layout_gravity=\u0026quot;center_horizontal\u0026quot; /\u0026gt; \u0026lt;TextView android:text=\u0026quot;You can configure email in just a few steps:\u0026quot; android:textSize=\u0026quot;16dip\u0026quot; android:layout_columnSpan=\u0026quot;4\u0026quot; android:layout_gravity=\u0026quot;left\u0026quot; /\u0026gt; \u0026lt;TextView android:text=\u0026quot;Email address:\u0026quot; android:layout_gravity=\u0026quot;right\u0026quot; /\u0026gt; \u0026lt;EditText android:ems=\u0026quot;10\u0026quot; /\u0026gt; \u0026lt;TextView android:text=\u0026quot;Password:\u0026quot; android:layout_column=\u0026quot;0\u0026quot; android:layout_gravity=\u0026quot;right\u0026quot; /\u0026gt; \u0026lt;EditText android:ems=\u0026quot;8\u0026quot; /\u0026gt; \u0026lt;Space android:layout_row=\u0026quot;4\u0026quot; android:layout_column=\u0026quot;0\u0026quot; android:layout_columnSpan=\u0026quot;3\u0026quot; android:layout_gravity=\u0026quot;fill\u0026quot; /\u0026gt; \u0026lt;Button android:text=\u0026quot;Next\u0026quot; android:layout_row=\u0026quot;5\u0026quot; android:layout_column=\u0026quot;3\u0026quot; /\u0026gt; \u0026lt;/GridLayout\u0026gt;  The first difference you’ll notice in these examples is the absence of the WRAP_CONTENT and MATCH_PARENT constants that normally adorn Android layout resources. You don’t normally need to use these with GridLayout, for reasons that are described in the API doc for GridLayout.LayoutParams.\nRow and Column Indices The second thing you may notice in the XML resources is that widgets don’t always explicitly define which cells they are to be placed in. Each widget’s layout parameters have row and column indices that together define where the widget should be placed but when either or both of these values are not specified, GridLayout supplies default values rather than throwing an exception.\nAutomatic Index Allocation As children are added to a GridLayout, it maintains a cursor position and a “high-water mark” that it uses to place widgets in cells that don’t yet have anything in them.\nWhen GridLayout’s orientation property is horizontal and a columnCount has been set (to 8 in this example) the high-water mark (shown above in red) is maintained as a separate height value for each column. When indices need to be created, GridLayout first determines the size of the cell group (by looking at the rowSpan and columnSpan parameters of the new widget) and then, starting at the cursor, goes through the available locations from: left to right, top to bottom, so as to find the row and column indices of the first location that’s free.\nWhen GridLayout’s orientation is vertical, all of the same principles apply, except that the roles of the horizontal and vertical axes are exchanged.\nIf you want multiple views to be placed in the same cell, you have to define the indices explicitly, as the default allocation procedure above is designed to place widgets in separate cells.\nSizes, Margins and Alignment/Gravity In GridLayout, specifying sizes and margins is done just as with a LinearLayout. Alignment/gravity also works just like gravity in LinearLayout and uses the same constants: left, top, right, bottom, center_horizontal, center_vertical, center, fill_horizontal, fill_vertical and fill.\nFlexibility Unlike most grids in other toolkits, GridLayout does not associate data with rows or columns. Instead, everything to do with alignment and flexibility is associated with the components themselves. GridLayout departs from the norm here to provide a more general system that allows subtle relationships between ancestors in deeply nested layouts to be accommodated in a single layout configuration.\nThe flexibility of columns is inferred from the gravity of the components inside the column. If every component defines a gravity, the column is taken as flexible, otherwise the column is considered inflexible. Full details are in GridLayout’s API docs.\nEmulating Features from other Layouts GridLayout does not incorporate all of the features of every layout in the Android platform but it has a rich enough feature set that idiomatic use of other layouts can normally be emulated from inside a single GridLayout.\nAlthough LinearLayout can be considered a special case of a GridLayout, for the degenerate case when a set of views are aligned in a single row or column, LinearLayout is the better choice when this is all that is required as it clarifies the purpose of the container and may have some (relatively small) performance advantages.\nTableLayout configurations are normally straightforward to accommodate, as GridLayout supports both row and column spanning. TableRows can be removed, as they are not required by GridLayout. For the same UI, a GridLayout will generally be faster and take less memory than than a TableLayout.\nSimple RelativeLayout configurations can be written as grids simply by grouping the views that are related to each other into rows and columns. Unlike conventional grids, GridLayout uses a constraints solver to do the heavy lifting of the layout operation. By using GridLayout’s rowOrderPreserved and columnOrderPreserved properties it’s possible to free GridLayout from the confines of traditional grid systems and support the majority of RelativeLayout configurations — even ones that require grid lines to pass over each other as children change size.\nSimple FrameLayout configurations can be accommodated within the cells of a GridLayout because a single cell can contain multiple views. To switch between two views, place them both in the same cell and use the visibility constant GONE to switch from one to the other from code. As with the LinearLayout case above, if all you need is the functionality described above, FrameLayout is the better choice and may have some small performance advantages.\nOne key feature that GridLayout lacks is the ability to distribute excess space between rows or columns in specified proportions — a feature that LinearLayout provides by supporting the principle of weight. This omission and possible ways around it are discussed in GridLayout’s API docs.\nThe Phases of the Layout Operation It’s useful to distinguish the allocation phase for cell indices discussed above from the layout operation itself. Normally the phase that allocates indices happens once, if at all, when a UI is initialized. The index-allocation phase only applies when indices have been left unspecified, and is responsible for ensuring that all views have a defined set of cells in which they are to be placed at layout time.\nThe layout operation happens after this and is recalculated each time a view changes size. GridLayout measures the size of each child during the layout operation so it can calcuate the heights and widths of the rows and columns in the grid. The layout phase completes by using gravity to place each of the components in its cell.\nAlthough index allocation normally only happens once, GridLayout is technically a dynamic layout, meaning that if you change its orientation property or add or remove children after components have been laid out, GridLayout will repeat the above procedure to reallocate indices in a way that is right for the new configuration.\nFrom a performance standpoint, it is worth knowing that the GridLayout implementation has been optimized for the common case, when initialization happens once and layout happens frequently. As a result, the initialization step sets up internal data structures so that the layout operation can complete quickly and without allocating memory. Put another way, changes either to GridLayout’s orientation or the number of children it has are much more expensive than an ordinary layout operation.\nConclusion GridLayout’s feature set incorporates much of the functionality of the Android framework’s existing general-purpose layouts: LinearLayout, FrameLayout, TableLayout and RelativeLayout. As such, it provides a way to replace many deeply nested view hierarchies with a single highly optimized layout implementation.\nIf you are starting a UI from scratch and are not familiar with Android layouts, use a GridLayout — it supports most of the features of the other layouts and has a simpler and more general API than either TableLayout or RelativeLayout.\nWe anticipate that the combination of FrameLayout, LinearLayout and GridLayout together will provide a feature set that’s rich enough to allow most layout problems to be solved without writing layout code by hand. It’s worth spending some time deciding which of these layouts is right for the top of your tree; a good choice will minimize the need for intermediate containers and result in a user interface that is faster and uses less memory.\n"
},
{
	"uri": "/tech-department/tags/hcd/",
	"title": "Hcd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/how-to-be-a-great-mentor/",
	"title": "How To Be A Great Mentor",
	"tags": [],
	"description": "",
	"content": "This is a run down of what it means to be a mentor and what we expect from you as a mentor.\n "
},
{
	"uri": "/tech-department/remote-work/tech-recruits/",
	"title": "How recruits work remotely",
	"tags": [],
	"description": "",
	"content": " Here\u0026rsquo;s the plan, the technologies and the processes you need to be aware of:\nAttendance While at Umuzi we would usually just have a human being take attendance. That doesn\u0026rsquo;t work so well in a remote working environment.\nWe are going to put the power into your hands, you need to take your own attendance! Here are some google forms:\n Morning form To be completed by 8:30 every day Afternoon form To be completed between 12:00 and 13:00 every day End of day form To be completed from 16:30 onwards  You need to fill these in every single working day or you will be marked absent!\nThere are a few things that can go wrong:\n Loadshedding: In the case of loadshedding we still expect you to fill in the form as early as possible Personal illness or emergency. You can apply for leave using this form. And if something crazy comes up just communicate with your cohort leader via Rocketchat.  Good professional behaviour When people arrive at Umuzi they aren\u0026rsquo;t professionals yet. But when they leave they are.\nHere are a few professional behaviors you should start practicing today:\n Always be on time for workshops and meetings Always be respectful and helpful to your peers Ask the dumb questions! Some people are too shy to ask so ask for them Always submit high quality work Always submit your work on time When you get feedback about your work, implement it  Talking about submissint work\u0026hellip; PROJECTS: How to submit your project Workshops We run a bunch of workshops for a bunch of reasons. Sometimes the workshops are about demonstrating some code things, sometimes they are about you demonstrating your understanding of concepts.\nYour cohort leader will tell you which workshops are compulsory. You will be expected to join from your computer, not from your phone. You might be asked to share your computer screen.\nWe will try to record all our workshops and share them on Youtube so if you miss out (maybe there are internet issues or the dreaded loadshedding) you should be able to go and watch things later. Or even refer back to the workshop videos when you need them. Feel free to use the comments section on Youtube to discuss the content.\nDeadlines and projects We will be giving you assignments to work through. If we give you a deadline and you finish early then that\u0026rsquo;s great! You can either get started with the next syllabus item, work on a product team, or just learn and build cool stuff. We don\u0026rsquo;t want to slow anyone down!\nProject teams and presentations We\u0026rsquo;ve found that people work better when they are supporting each other. Whenever you are given an assignment you will also be given a team. Maybe you\u0026rsquo;ll keep the same team, maybe not.\nHere\u0026rsquo;s the procedure: When you are given as assignment you will be put into a group. The day BEFORE your assignment is due your group will need to present your assignment.\nThe presentation will go like this. There will be a video call including your whole team and at least one facilitator. The facilitator will pick one person from the team to do all the talking. That person\u0026rsquo;s code will be on display and that person wil need to be explain their work well - it has to be obvious that they know what\u0026rsquo;s up.\nThe facilitator will give some feedback and possibly look at some of the code from the other team members. Any feedback given in this session needs to be implemented by the handin date (the next day).\nPlease help each other to understand. The best tech professionals know how to work in a team.\nGetting help You\u0026rsquo;ll notice that those forms we ask you to fill in are supposed to show us who needs help and who doesn\u0026rsquo;t. There sure are a lot of you so we\u0026rsquo;ll try our best to keep track of what everyone needs. But we are all only human. If you feel like you are not being noticed please feel free to contact:\n your cohort your mentor your team mates your cohort leadership managment  Seriously, we\u0026rsquo;re all dedicated to helping you grow as much as possible. Help us to do that by asking for help when you need it.\nNCIT/Gnomio As you will be doing assessments for your National Certificate in Information Technology - Systems Development The material and assessments are found on Gnomio. This is where you will also submit these assessments\nHow to learn extra quickly If you want to turbocharge your education there are a few things you can do. Here are just a few suggestions:\nBuild something useful in your spare time! We\u0026rsquo;ve seen all sorts of cool stuff come from our recruits. There\u0026rsquo;s been a chatbot, a chess tournament system, a library managment system, games\u0026hellip; what can you build in your free time?\nIf you have some ideas and need a little bit of help knowing where to start just ask :)\nAnother thing you can do is just practice. If you practice your problem solving skills you\u0026rsquo;ll be more hirable. The bigger the problems you can solve the further you\u0026rsquo;ll go in your career. These are all wonderful resources.\n https://codewars.com https://www.hackerrank.com/ https://projecteuler.net/archives  And of course, you can work on your \u0026ldquo;soft skills\u0026rdquo;. Spoiler alert, soft skills are actually pretty hard to master.\nYou can start by working on the top 8 developer habits. Try watch this until the end:\n Top 8 developer habits - Part 1 Top 8 developer habits - Part 2 Top 8 developer habits - Part 3  Important Spreadsheets, Forms and Calendars (I suggest you bookmark these)  Coding \u0026amp; Data Programme Outline This spreadsheet is the source of truth, make sure to check it regularly. The tech staff updates the spreadsheet once per week, usually on Monday afternoon.\n Tech Events Calendar That all tech events are scheduled on. This is where yu will find dates for Workshops, Talks and Meetups. Check this everyday.\n Leave Request Form This is to be completed for any leave requested or taken.\n Disciplinary Policy | Code Of Conduct | Sexual Harassment Policy These are the Umuzi policies please read through them and familiarise yourseld with them.\n  Editor of choice Visual Studio Code - https://code.visualstudio.com/download\nThis is also known as vscode. It has some really nice features for remote pair programming. Other than that it\u0026rsquo;s just a seriously powerful editor.\nUmuzi Handbook The recruit user journey, the processes and protocols and the culture of Umuzi are all found here\n"
},
{
	"uri": "/tech-department/topics/how-the-internet-works/",
	"title": "How the internet works",
	"tags": [],
	"description": "",
	"content": " What is The Internet? The Internet is a massive network of networks, a networking infrastructure. It connects billions of computers and internet-enabled devices together globally, forming a network in which any device can communicate with any other device as long as they are both connected to the Internet. Information that travels over the Internet does so via a variety of languages known as protocols.\n The Internet and The Web (World Wide Web)? The World Wide Web, or simply Web, is a way of accessing information over the medium of the Internet and it is the most major application of internet technology today. It is an information-sharing model that is built on top of the Internet.\nThese days, we often just say \u0026ldquo;The Internet\u0026rdquo; when we refer to anything we access via a web browser or smartphone. However, the World Wide Web and the Internet aren\u0026rsquo;t the same thing. The Web uses a specific protocol called HTTP (hypertext transfer protocol), which is just one of the protocols used to transmit information over the Internet. For example, the Internet, not the Web, is also used for e-mail (which uses IMAP, POP and SMTP), instant messaging, peer-to-peer networks, and FTP (file transfer protocol). So the Web is just a portion of the Internet, albeit a large portion, but the two terms are not synonymous and should not be confused.\nHow does the Internet work?  https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work\n https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name\n https://dev.opera.com/articles/http-basic-introduction/\n https://dev.opera.com/articles/http-lets-get-it-on/\n https://dev.opera.com/articles/http-response-codes/\n  To learn more about how the Internet works, including SMTP, TCP, FTP, and DNS protocols, you are encouraged to read this document:\nhttps://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm\nWhat does the web look like?  The Web is a distributed information system It is made up of web pages (files/documents) These pages contain multimedia (text, images, video, etc) They are linked together via hyperlinks A website is a collection of web pages Websites are stored on computers called web servers A web browser is a piece of software that uses HTTP (hypertext transfer protocol) to retrieve and view web pages It’s able to do this by using a website’s uniform resource locator (URL) - which can be found in the address bar of a current page Secure web pages use encryption like HTTPS to protect themselves from eavesdroppers  Intranet vs. Extranet What is an intranet? An intranet is a private computer network based on the communication standards of the Internet. It is a smaller, private version of the internet that only members of an organization can access. Companies can create this kind of secure and manageable version of the Web to disseminate and share only the information relevant to their business. This can increase productivity as corporate knowledge becomes more accessible and the data is specific, monitored and accurate.\nWhat is an extranet? An extranet is a computer network that allows controlled access from the outside, for specific business or educational purposes. In a business-to-business context, an extranet can be viewed as an extension of an organization\u0026rsquo;s intranet that is extended to users outside the organization; usually partners, vendors, and suppliers, in isolation from all other Internet users. It provides access to needed services for channel partners, without granting access to an organization\u0026rsquo;s entire network.\nWhat can you do with an intranet or an extranet? Here are a few examples:\nDocument distribution  Reducing cost and improving timeliness of distributed information Exchange large volumes of data using Electronic Data Interchange (EDI) Provide a secure medium for the distribution of confidential information  Inter-company communication  Share product catalogs exclusively with trade partners Database access  Provide interactive services  Conduct company wide surveys Develop and use training programs Manage customer support portal  Collaborate with other companies Provide or access services provided by one company to a group of other companies, eg. training, online banking application managed by one company on behalf of affiliated banks\nIntranet and extranets have a wide variety of advantages but like with anything they have their downsides too. For example extranets can be expensive to implement and maintain, especially if hosted internally rather than by an application service provider (e.g. hardware, software, employee training costs), and their security can be a concern when hosting valuable or proprietary information. Keep this in mind when considering using them.\nWeb applications The internet has expanded since its inception and nowadays we use it in a wide variety of ways. You should be familiar with communication methods it has provided like email, instant messaging and voice/video calling. There is also a huge selection of interactive interfaces that operate entirely on the internet and make use of cloud technologies and handheld devices. These web applications range from online shopping to business accounting, health monitoring, gaming, and everything in between.\nWebmail The term Webmail (or Web-based email) is an email service offered by a company or Internet service provider through a website. Common examples are Gmail or Yahoo! Mail.\nWebmail is more often than not accessed through an email client rather than a web browser. For example iOS and Android devices both have native Mail applications that use the IMAP, POP and SMTP protocols to receive and send mail. You can also find other applications that will do the same. This is not a new technology and has existed almost since the advent of the Internet but it has become more commonly used with mobile phones. Its main advantage is that you can manage multiple webmails through one application and you can access your mail even when you’re offline.\nInstant messaging (IM) This is a form of communication over the web that offers quick transmission of text-based messages from sender to receiver. More advanced instant messaging allows enhanced modes of communication, such as live voice or video calling, video chat and inclusion of hyperlinks to media. Telegram, Whatsapp, iMessage and Facebook Messenger are examples of instant messaging.\nVoIP VoIP (Voice over Internet Protocol) is a set of technologies that enable voice calls to be carried over the Internet. Skype and Whatsapp Audio calls are examples of this.\nHow VoIP works The basic process involved in a VoIP call is as follows:\n Conversion of the caller’s analogue voice signal into a digital format Compression and translation of the digital signal into discrete Internet Protocol packets Transmission of the packets over the Internet or other IP-based network Reverse translation of packets into an analogue voice signal for the call recipient  What you need to make a VoIP call To make a VoIP call, the consumer user requires VoIP software and a connection to the Internet. The software will handle the call routing to make sure the call reaches the intended destination. The software can be installed on a variety of hardware devices including traditional telephone handsets (using an adaptor that plugs into the telephone), or on your computer or smartphone.\n"
},
{
	"uri": "/tech-department/how-to-contribute/",
	"title": "How to Contribute",
	"tags": [],
	"description": "",
	"content": " If you want to contribute content to this repo there are a few things you need to know.\nFirstly, this is a Hugo based web site. If you are contributing to the content of this site you will be editing markdown files. So you wont need to know too much about how Hugo works in order to be effective. If you need to figure out the mechanics of this thing, best read the Hugo docs.\nRoad-map So this repo is very much a work in progress. There are a few major tasks that need doing:\n the syllabus page needs to be completed  all the links need to point to actual content all that content needs to be marked as ready (more on this later)  many individual topics, workshops, projects etc can be refined and upgraded. Eg: if a recruit finds a tutorial on the internet that was really helpful in the completion of a project then they might want to add a link to that tutorial into the project description look, feel and functionality. We have the basics down, but it would be very nice to make this site look better and there are likely a few widgets that can be better.  First you need to get yourself set up You\u0026rsquo;ll notice a link to our GitHub repo in the menu on the left. See it? Cool. You\u0026rsquo;ll need to fork that.\nThere are installation instructions in the README.\nOnce you have made your changes then:\n Run the application on your local computer and look at the changes and make sure they are nice looking. Make a pull request. Your pull request should have a nice description of what you are trying to do If it looks like nobody has noticed your pull request then slack one of the tech team members. Feel free to remind us of your contribution  Don\u0026rsquo;t make any changes to the public/ directory This is really important. It might be tempting to you to write some HTML, js or css in there. Resist that temptation. This is a Hugo based website. This means that the public directory is generated auto-magically. Any changes you make within the public directory will be overwritten.\nIf you want to make changes to look and feel or basic site functionality This gets interesting. Basically, Hugo allows the use of themes. The theme we are using is called Hugo-theme-learn and you can find it inside the themes directory in this repo. So most of the visual elements you see when looking at this website is generated through use of that theme.\nIf you want to override anything about how the theme behaves (maybe changing a colour or layout, or adding a functionality) then DO NOT directly edit the theme files.\nIf you want to change how a theme behaves then you need to override that behaviour WITHOUT directly editing the theme.\nTake a look at this directory structure:\n. ├── archetypes ├── config.toml ├── content ├── install_Hugo.sh ├── layouts ├── LICENSE.md ├── public ├── README.md ├── resources ├── static └── themes └── Hugo-theme-learn ├── archetypes ├── CHANGELOG.md ├── exampleSite ├── i18n ├── images ├── layouts ├── LICENSE.md ├── netlify.toml ├── README.md ├── static ├── theme.toml └── wercker.yml  This is a summary of the directory structure of this application. You\u0026rsquo;ll notice that the structure of the theme is very similar to the structure of the repo as a whole. If you want to override a piece of the theme\u0026rsquo;s functionality then you need to find the file in the theme that defines that functionality, then make a file with an equivalent path in the main repo. This might sound weird but it\u0026rsquo;s pretty easy to get the hang of.\nHave an example:\nLet\u0026rsquo;s say we want to change what the menu looks like. You would do something like this:\ncp themes/Hugo-theme-learn/layouts/partials/menu.html layouts/partials/menu.html  Cool, so now we have two copies of menu.html. Make your changes to the new one.\n... ├── config.toml ├── layouts | └── partials | └── menu.html ### EDIT THIS ONE ... └── themes └── Hugo-theme-learn ├── layouts └── partials └── menu.html ### NOT THIS ONE ...  Nice eh?\nThe other thing to know is that Hugo is written in go. So these html files are actually go templates. So that\u0026rsquo;s a topic you can read about on your own. Go templates are used in lots of interesting places.\nThe syllabus index page When you are running the development server (Hugo serve) then you can see this page here. This is where each supported curriculum is outlined, week by week.\nTake a look at the contents of week 1.\nYou will notice that the links there have a pretty consistent format. Eg:\nWORKSHOPS: How to be a professional TOPICS: [TODO] Introduction to Linux PROJECTS: [TODO] Linux INTRO  If you look at the markdown file (\u0026lsquo;content/syllabuses/_index.md\u0026rsquo;) you can see that these links are generated by using the contentlink shortcode.\nEg: WORKSHOPS: How to be a professional (take a look at this page\u0026rsquo;s markdown and take a look at what happened above)\nThis shortcode does a few things:\n it makes the link work it checks the type of the linked to content and writes it down (eg: WORKSHOPS) it checks the title of the linked to content and writes it down (eg: How to be a professional) it (sometimes) adds a [TODO]. If the markdown file is marked as \u0026ldquo;ready\u0026rdquo; then the TODO wont show up.  Eg looking at workshops/how-to-be-a-professional. If the frontmatter looks like this:\n--- title: How to be a professional ready: true ---  Then the TODO wont show up.\nThis functionality is here just so that we can explicitly mark which content we are happy with so we can properly direct our efforts. Once the syllabus is ready as a whole then the TODO functionality will be removed.\nIf you want to make changes to the course content All of the content displayed on the website comes from the content directory. You\u0026rsquo;ll notice a bunch of different directories inside content, each of these directories has a purpose. Try to put your stuff in the right place.\nHere are a few major kinds of content:\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == deliverable  Let\u0026rsquo;s say you want to make a new TOPIC entitled \u0026ldquo;Intro to BeautifulSoup\u0026rdquo;. What you will need to do is this:\nCreate a new file here: content/topics/python-specific/intro-to-beautifulsoup.md. Then add come content and make sure to include a title in your frontmatter/metadata:\n--- title: Intro to Beautifulsoup --- Your content goes here. ## some heading blah blah blah  Once you have saved your file then you should be able to see it in the it in the menu panel on the left hand side of the website.\nAnd you can make a content link to your new file like this:\nUse content-link will look like this: TOPICS: [MISSING title or page]Advanced frontmatter So you know how to specify a title in your frontmatter, there are a few more things to know about.\n weight: this effects the order of things as they show up in the menu on the left-hand side of the screen. Menu items are sorted in ascending weight order pre: This is stuff that shows up before the title in the menu on the left ready: we spoke about this earlier  The only really compulsory thing is the title.\nHere is the frontmatter of the content/syllabuses/_index.md\n--- title: Syllabus pre: \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; weight: 1 ---   since the weight is 1 this item shows up as the first item in the menu on the left the menu item is rendered with HTML something like this: \u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt; Syllabus  Advanced folder structure If you wanted to create a new section with subsections then you would be able to do that too. Experiment a little bit if you need to. Basically do something like this:\n└── content/ └── topics/ ├── beautifulsoup/ ├── _index.md ├── intro.md ├── advanced.md ├── something_else/ ├── _index.md  You can also use this kind of folder structure if you want to include other resources in your markdown. For example a diagram or witty gif.\nWhat not to include Please don\u0026rsquo;t include large binary files in the repo. Just link to that sort of thing. This includes PDFs, presentations, videos and other documents.\n"
},
{
	"uri": "/tech-department/topics/how-to-ask-for-help-with-your-code/",
	"title": "How to ask for help with your code",
	"tags": [],
	"description": "",
	"content": " A big part of learning to be a programmer of any kind is knowing how to get help. This means knowing how to ask questions. Your questions should be short and clear. Your question should include all the information that is needed to answer the question. Practice asking good questions. It\u0026rsquo;s like a superpower. If you are easy to help then people will help you.\nThese also include: Where to ask good questions  Stackoverflow - How to ask for help == TRUELY AMAZING Google RocketChat - All RocketChat questions should be addressed on the RocketChat #tech-assist channel. If your issues are not addressed on the #tech-assist Channel, then run your issue with your specific department channel, then if it doesn\u0026rsquo;t help then run to your cohort mentors.  Characteristics of a good question: As a general rule of thumb: If you really want help then make it as easy as possible for people to help you. Empathise with the person who will help you. If they are left guessing or they have to ask a million follow up questions then that means you asked a bad-quality question.\n Ask on a bigger audience platform. (e.g Asking on the #tech-assist channel helps you get to a much bigger audience and possibly quick responses from your fellow Recruits, Managers and Alumni.) Be clear and not ambiguous. Your \u0026ldquo;helpers\u0026rdquo; should be able to understand the problem while reading an error message. Please don\u0026rsquo;t send screenshots, what you can do is use backtick symbols to represent in code form. Write full error messages. Be short and meaningful. Error messages should contain necessary information. Most of the time your helper is not willing to read a long story.  NB. IT IS YOUR RESPONSIBILITY TO HELP OTHERS WHEN AND IF YOU HAVE THE ANSWERS (Basically help and be helped).\nThings to note  In general, if your question text contains code or error message those things need to be formatted properly. It needs to not look like a jumbled mess of words and symbols. Different platforms have different ways of pulling this off. RocketChat uses the backtick symbol. And Stackoverflow does it it\u0026rsquo;s own way. Be aware of the tools and conventions of the platform you are using, then follow those conventions. A similar good way to use Google is when searching for something specific, try using quotes to minimize the guesswork for Google search. When you put your search parameters in quotes, it tells the search engine to search for the whole phrase.  "
},
{
	"uri": "/tech-department/workshops/how-to-be-a-professional/",
	"title": "How to be a professional",
	"tags": [],
	"description": "",
	"content": "This is a run down of what it means to be a professional and how we expect you to behave within the tech department.\n "
},
{
	"uri": "/tech-department/topics/how-to-download-youtube-videos-from-the-terminal/",
	"title": "How to download youtube videos from the terminal",
	"tags": [],
	"description": "",
	"content": " If you have night-time data to use up, and you want to conserve your day-time data then it would be wise to download all your youtube videos at night.\nYou have 2 options here:\nOption 1: Use the download_all_youtube.py script in this repo  Install python3.7 or later. install python development headers. Eg: sudo apt-get install -y python3.7-dev If you installed Python3.8 then sudo apt-get install -y python3.8-dev If you know your way around virtualenvs, make one. Otherwise don\u0026rsquo;t worry Clone this repo if you haven\u0026rsquo;t yet and cd in pip3 install -r requirements.txt python download_all_youtube.py  This script will then look for all the youtube links in our syllabus and download the lot. If a video file is already present it wont download it again.\nIMPORTANT by default this script will terminate after 1 hour. If you want to allow your downloads to run while you are sleeping you might want to increase this number. You can set the number of hours from the command line like so:\npython download_all_youtube.py --cutoff_after_n_hours=5\nThe above command will download as much as it can for the next 5 hours.\nOption 2: Just use python your way :)  follow the steps from the above section in order to install all the goodies. Open a python shell and type in the following (or save this to a script and run it):  import youtube_dl with youtube_dl.YoutubeDL({}) as ydl: ydl.download([\u0026quot;https://www.youtube.com/watch?v=RleN-6uMF04\u0026quot;])  The url there is any youtube video or playlist url. Nice eh?\n"
},
{
	"uri": "/tech-department/projects/how-to-submit-your-project/",
	"title": "How to submit your project",
	"tags": [],
	"description": "",
	"content": "Create a repo on github. The repo name should be: \u0026ldquo;umuzi-project-[the project description filename without the extension]\u0026ldquo;. Eg: if you are completing the project described in \u0026ldquo;basic-website-frontend-events.md\u0026rdquo; then you should name your github repo: \u0026ldquo;umuzi-project-basic-website-frontend-events\u0026rdquo;\nAll coding projects will be submitted as git repos. You are expected to use git properly, you will be penalised if you only have one gigantic commit or if your commit messages are not clear and descriptive.\nThere should be a clear README that describes how to launch your program. Maybe a script needs to be run, maybe an index.html needs to be opened in a browser. Tell us what we need to do.\nOnce your code is all neat and tidy in git then post a link to the #project-submissions channel on slack.\nWant to see how to use the form to submit your project? Here\u0026rsquo;s a video to show you how.\n"
},
{
	"uri": "/tech-department/tags/html/",
	"title": "Html",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/human-centered-design/",
	"title": "Human Centered Design",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/syllabuses/hybrid-mobile-short/",
	"title": "Hybrid mobile dev short course",
	"tags": [],
	"description": "",
	"content": " Part 1   TOPICS: Intro to hybrid mobile   TOPICS: Introduction to Typescript   TOPICS: Introduction to web design   PROJECTS: Level 1 programming katas   Part 2   TOPICS: Jasmine Unit testing   PROJECTS: Animals Part 2. Adding Tests   PROJECTS: Add logging to password checker   Part 3   TOPICS: Intro to Angular   PROJECTS: Angular Tutorial   PROJECTS: Add Redux to your semitone game   Part 4   TOPICS: Angular Elements   PROJECTS: Memory game using Angular Material   PROJECTS: [TODO] Game of life: Angular elements   TODO: Wiremock Connecting to mock services Connecting to Java backend services Unit testing. Karma, Protractor, Cucumber\n"
},
{
	"uri": "/tech-department/topics/kotlin/in-line-functions/",
	"title": "In Line Functions",
	"tags": [],
	"description": "",
	"content": " Using higher-order functions imposes certain runtime penalties: each function is an object, and it captures a closure, i.e. those variables that are accessed in the body of the function. Memory allocations (both for function objects and classes) and virtual calls introduce runtime overhead.\nBut it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions. The functions shown below are good examples of this situation. I.e., the lock() function could be easily inlined at call-sites. Consider the following case:\nlock(l) { foo() }  Instead of creating a function object for the parameter and generating a call, the compiler could emit the following code\nl.lock() try { foo() } finally { l.unlock() }  Isn\u0026rsquo;t it what we wanted from the very beginning?\nTo make the compiler do this, we need to mark the lock() function with the inline modifier:\ninline fun lock\u0026lt;T\u0026gt;(lock: Lock, body: () -\u0026gt; T): T { // ... }  The inline modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.\nInlining may cause the generated code to grow, but if we do it in a reasonable way (do not inline big functions) it will pay off in performance, especially at \u0026ldquo;megamorphic\u0026rdquo; call-sites inside loops.\nnoinline In case you want only some of the lambdas passed to an inline function to be inlined, you can mark some of your function parameters with the noinline modifier:\ninline fun foo(inlined: () -\u0026gt; Unit, noinline notInlined: () -\u0026gt; Unit) { // ... }  Inlinable lambdas can only be called inside the inline functions or passed as inlinable arguments, but noinline ones can be manipulated in any way we like: stored in fields, passed around etc.\nNote that if an inline function has no inlinable function parameters and no reified type parameters, the compiler will issue a warning, since inlining such functions is very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed).\nNon-local returns In Kotlin, we can only use a normal, unqualified return to exit a named function or an anonymous function. This means that to exit a lambda, we have to use a label, and a bare return is forbidden inside a lambda, because a lambda can not make the enclosing function return:\nfun foo() { ordinaryFunction { return // ERROR: can not make `foo` return here } }  But if the function the lambda is passed to is inlined, the return can be inlined as well, so it is allowed:\nfun foo() { inlineFunction { return // OK: the lambda is inlined } }  Such returns (located in a lambda, but exiting the enclosing function) are called non-local returns. We are used to this sort of constructs in loops, which inline functions often enclose:\nfun hasZeros(ints: List\u0026lt;Int\u0026gt;): Boolean { ints.forEach { if (it == 0) return true // returns from hasZeros } return false }  Note that some inline functions may call the lambdas passed to them as parameters not directly from the function body, but from another execution context, such as a local object or a nested function. In such cases, non-local control flow is also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with the crossinline modifier:\ninline fun f(crossinline body: () -\u0026gt; Unit) { val f = object: Runnable { override fun run() = body() } // ... }  break and continue are not yet available in inlined lambdas, but we are planning to support them too\nReified type parameters Sometimes we need to access a type passed to us as a parameter:\nfun \u0026lt;T\u0026gt; TreeNode.findParentOfType(clazz: Class\u0026lt;T\u0026gt;): T? { var p = parent while (p != null \u0026amp;\u0026amp; !clazz.isInstance(p)) { p = p.parent } @Suppress(\u0026quot;UNCHECKED_CAST\u0026quot;) return p as T? }  Here, we walk up a tree and use reflection to check if a node has a certain type. It’s all fine, but the call site is not very pretty:\ntreeNode.findParentOfType(MyTreeNode::class.java) What we actually want is simply pass a type to this function, i.e. call it like this:  treeNode.findParentOfType\u0026lt;MyTreeNode\u0026gt;()  To enable this, inline functions support reified type parameters, so we can write something like this:\ninline fun \u0026lt;reified T\u0026gt; TreeNode.findParentOfType(): T? { var p = parent while (p != null \u0026amp;\u0026amp; p !is T) { p = p.parent } return p as T? }  We qualified the type parameter with the reified modifier, now it’s accessible inside the function, almost as if it were a normal class. Since the function is inlined, no reflection is needed, normal operators like !is and as are working now. Also, we can call it as mentioned above: myTree.findParentOfType().\nThough reflection may not be needed in many cases, we can still use it with a reified type parameter:\ninline fun \u0026lt;reified T\u0026gt; membersOf() = T::class.members fun main(s: Array\u0026lt;String\u0026gt;) { println(membersOf\u0026lt;StringBuilder\u0026gt;().joinToString(\u0026quot;\\n\u0026quot;)) }  Normal functions (not marked as inline) can not have reified parameters. A type that does not have a run-time representation (e.g. a non-reified type parameter or a fictitious type like Nothing) can not be used as an argument for a reified type parameter.\nInline properties (since 1.1) The inline modifier can be used on accessors of properties that don\u0026rsquo;t have a backing field. You can annotate individual property accessors:\nval foo: Foo inline get() = Foo() var bar: Bar get() = ... inline set(v) { ... }  You can also annotate an entire property, which marks both of its accessors as inline:\ninline var bar: Bar get() = ... set(v) { ... }  At the call site, inline accessors are inlined as regular inline functions.\n"
},
{
	"uri": "/tech-department/projects/android/incremental-counter/",
	"title": "Incremental Counter",
	"tags": [],
	"description": "",
	"content": " This project is an introduction to how the ui of an app communicates with the code in the associated activity.\nNote  You will make use of xml to create the ui and kotlin to handle events and logic. Use git: push your code every day. Maybe even a few times every day. If you don\u0026rsquo;t back up your work and something terrible happens to your computer then you will not be granted an extension. Make sure your commit messages make sense Be careful when naming your functions, variables and ui elements. Make sure they are clear and easily understandable.  When creating an element in xml, be sure to indicate in the name what kind of element this is.\nexample: When creating a button that\u0026rsquo;s purpose is to save the data on the screen, the name of the element can either be saveButton or btnSave.\nProject Description In this project you will create a screen containing 2 Buttons, a TextView and an EditText.\n The TextView will start with a default value of \u0026ldquo;0\u0026rdquo;. The EditText should accept an integer input. 1 Button will, when pressed increment the value of the TextView by the number in the input field. 1 Button will, when pressed decrement the value of the TextView by the number in the input field.  The app should handle situations where a user inputs a non-numerical value by displaying a popup message indicating to the user that the input data was incorrect.\n"
},
{
	"uri": "/tech-department/projects/android/information-page/",
	"title": "Information Page",
	"tags": [],
	"description": "",
	"content": " The goal of this project is to create a page containing multiple forms of media that has to do with a place the student may decide on.\nNote  The app can be about a restaurant, an event or anything similar. The app must only consist of a single activity and a single layout file. All media must have something to do with the place in question.  Project description The following must be part of the application:\n A header with the name of the selected place. A text description that is longer than a single line. An image of the place or of the logo. An audio clip describing the place. A video clip of the place in question.  Bonus question If you feel up to the task, add media control functionality to the audio clip and the video.\n Allow a user to play and pause the media with a button click. Allow the user to skip to a time of their choice in the audio clip.  "
},
{
	"uri": "/tech-department/topics/kotlin/interface/",
	"title": "Interface",
	"tags": [],
	"description": "",
	"content": " Interfaces in Kotlin are very similar to Java 8. An interface is defined using the keyword interface\ninterface MyInterface { fun bar() fun foo() { // optional body } }  Implementing Interfaces A class or object can implement one or more interfaces\nclass Child : MyInterface { override fun bar() { // body } }  "
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/intermediate-algorithmic-scripting/",
	"title": "Intermediate Algorithm Scripting",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Intermediate Algorithm Scripting \u0026ldquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/kotlin/internet-data-and-images/",
	"title": "Internet Data and Images",
	"tags": [],
	"description": "",
	"content": " How to Load an Image URL to Carousel View Using Picasso in Kotlin Introduction Android is an open-source operating system based on Linux with a Java programming interface for mobile devices such as a smartphones and tablets. With over 85% market share worldwide, Android Operating System dominates the mobile platform market. Today, I will show you how to load an image URL to Carousel view, like in an e-commerce app, using Picasso In Kotlin.\nFollow these steps to load the image URL to Imageview using Glide In Kotlin. I have included the source code in the attachment.\nStep 1 Open Android Studio and start a new Android Studio Project.\nStep 2 Now, add an activity and click the \u0026ldquo;Next\u0026rdquo; button.\nStep 3 You can choose your application name and choose where your project is to be stored. Choose Kotlin language for coding the project. Now, select the version of Android and select the target Android devices, then click the \u0026ldquo;Finish\u0026rdquo; button.\nStep 4 Go to the build.grade file. Add third party dependencies for carouselview and Picasso.\nThe third party dependencies are given below:\nimplementation\u0026quot;com.synnapps:carouselview:0.1.5\u0026quot; implementation 'com.squareup.picasso:picasso:2.71828'  Please note that package versions vary depending on the latest versions available.\nStep 5 Go to the manifest file and add the dependency for an internet connection.\nThe manifest code is given below.\n\u0026lt;uses-permission android:name=\u0026quot;android.permission.ACCESS_NETWORK_STATE\u0026quot;/\u0026gt; \u0026lt;uses-permission android:name=\u0026quot;android.permission.INTERNET\u0026quot; /\u0026gt;  Step 6 Go to the activity_main.xml. This XML file contains the design code for your Android app.\nThe XML code is given below.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; tools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt; \u0026lt;com.synnapps.carouselview.CarouselView android:id=\u0026quot;@+id/carouselView\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;200dp\u0026quot; app:fillColor=\u0026quot;#FFFFFFFF\u0026quot; app:pageColor=\u0026quot;#00000000\u0026quot; app:radius=\u0026quot;6dp\u0026quot; app:slideInterval=\u0026quot;3000\u0026quot; app:strokeColor=\u0026quot;#FF777777\u0026quot; app:strokeWidth=\u0026quot;1dp\u0026quot; app:layout_constraintBottom_toBottomOf=\u0026quot;parent\u0026quot; app:layout_constraintLeft_toLeftOf=\u0026quot;parent\u0026quot; app:layout_constraintRight_toRightOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;  Step 7 Go to Main Activity.kt. This Kotlin program is the back-end language for your app.\nThe Kotlin code is given below.\npackage com.example.carouselview import androidx.appcompat.app.AppCompatActivity import android.os.Bundle import android.widget.ImageView import com.squareup.picasso.Picasso import com.synnapps.carouselview.CarouselView import com.synnapps.carouselview.ImageListener class MainActivity : AppCompatActivity() { var sampleImages = arrayOf( \u0026quot;https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg\u0026quot;, \u0026quot;https://raw.githubusercontent.com/sayyam/carouselview/master/sample/src/main/res/drawable/image_1.jpg\u0026quot;, \u0026quot;https://raw.githubusercontent.com/sayyam/carouselview/master/sample/src/main/res/drawable/image_2.jpg\u0026quot; ) override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) val carouselView = findViewById(R.id.carouselView) as CarouselView; carouselView.setPageCount(sampleImages.size); carouselView.setImageListener(imageListener); } var imageListener: ImageListener = object : ImageListener { override fun setImageForPosition(position: Int, imageView: ImageView) { // You can use Glide or Picasso here Picasso.get().load(sampleImages[position]).into(imageView) } } }  Step 8 click the \u0026ldquo;Run\u0026rdquo; button, or press Shift+F10 to finally run the project. Choose the \u0026ldquo;virtual machine\u0026rdquo; option and click OK.\nConclusion "
},
{
	"uri": "/tech-department/topics/python-specific/oop-for-python/",
	"title": "Intro OOP(Object-oriented Programming) for Python",
	"tags": [],
	"description": "",
	"content": " This is a reading presentation of Object-oriented Programming (OOP) for Python.\nNote This is an introduction, this is just to give you a clearer perspective on OOP.\nYoutube videos  Python OOP 1 - Classes and Instances Python OOP 2 - Class Variables Python OOP 3 - Classmethods and Staticmethods Python OOP 4 - Inheritance Python OOP 5 - Special (Magic/Dunder) Methods Python OOP 6 - Property Decorators  Reading Guttag. Introduction to Computation and Programming using Python. Chapter 8, Classes and Object Oriented Programming, p.90 - 110.\nSome Example Code The code below shows demonstrates composition and a little bit of inheritance. There is a lot more to be said about OOP.\n import random class Wheel: def __init__(self): self.tread = 1000 def still_ok(self): return self.tread \u0026gt; 0 def use(self, speed): self.tread -= random.random() * 10 * speed class Vehicle: # colour = \u0026#34;red\u0026#34; def __init__(self, color): self.color = color class Helicopter(Vehicle): pass class Car(Vehicle): has_fueltank = True def __init__(self, speed=1, wheels=4): print(f\u0026#34;entering constructor: {self} at address {id(self)}\u0026#34;) # super(Car,self).__init__(color=\u0026#34;red\u0026#34;) self.position = 0 self.speed = speed # self.wheels = [Wheel() for i in range(wheels)] self.wheels = [] for _ in range(wheels): self.wheels.append(Wheel()) print(\u0026#34;exiting constructor\u0026#34;) def drive_forward(self): print(\u0026#34;driving forwards\u0026#34;) self.position \u0026#43;= self.speed for wheel in self.wheels: wheel.use(self.speed) def needs_service(self): if self.position \u0026gt;= 10000: return True for wheel in self.wheels: if not wheel.still_ok(): return True return False  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-angular/",
	"title": "Intro to Angular",
	"tags": [],
	"description": "",
	"content": " Angular is an opensource Javascript Framework used to build dynamic mobile and desktop web applications using TypeScript/JavaScript and other languages.\nHistory In 2012 Google introduced a new Javascript Framework called AngularJS, the framework was written using pure Javascript and deloveloped using Model-View-Controller concept. The framework uses HTML as a templating language by extending HTML attributes with directives and linking the data to HTML with expressions, this makes possible quick development of dynamic webapps with source code that is easier to read, understand and maintain.\nAn example of creating a simple dynamic AngularJS web app :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div ng-app=\u0026#34;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;AngularJS web app\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Name: \u0026lt;input type=\u0026#34;text\u0026#34; ng-model=\u0026#34;name\u0026#34; placeholder=\u0026#34;What\u0026#39;s your name?\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p ng-bind=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   AngularJS is also known as Angular 1, in the following years after AngularJS was released google and the opensource community released a second version of AngularJS but they called it Angular 2, the suffix \u0026lsquo;JS\u0026rsquo; from AngularJS was removed and this has been so even now with the latest version of angular released being version 7. Angular 2 was a re-design of AngularJS not an increment of it, Angular 2 apps/code is not backward compartible to AngularJS apps/code, but they do share some of the concepts and philosophies except Angular has had more improvements and features added to it, while angularJS has remained at version 1.\nKnowledge of NodeJS and Typescript is necessary to develop Angular apps. Javascript can be used instead of Typescript but such a practice is not widely used and sometimes not recommended by some of Angular users/developers.\nYou can create an Angular app using this few commands below. Please ensure you have Nodjs installed on your system.\nOpen your CMD/Terminal and type :\n1  npm install -g @angular/cli    More about NPM/Node Package Manager, NPM commands.\n2  ng new my-dream-app    (a) Select (y) if you want angular to add routing and (N) if not. Introduction to angular Routing.\n(b) Select CSS or your preferred CSS preprocessor. Introduction to different types of css preprocessor.\n3  cd my-dream-app    List of commonly used CLI/Command Line Interface commands to navigate/create/modify files in an operating system.\n4  ng serve   Look for a line similar to this \u0026ldquo;Angular Live Development Server is listening on localhost:4200\u0026rdquo;, and open your browser to url localhost/27.0.0.1 include specified port, example: for me I would open the browser and type \u0026ldquo;localhost:4200\u0026rdquo; and I will see Angular app webpage. To understand files produced, structure and their purpose look here.\nTo improve the app further\nAdd new components.\nAdd Angular Material.\nAdd Angular dependancies.\nRun and watch tests.\nBuild for production.\nAngular Features and Benefits  Create desktop installable app using same code for Linux, windows, Mac.\n Build native mobile apps using Cordova, Ionic, Nativescript, etc.\n Develop high perfomance Native like Progressive web apps.\n More features and benefits here.\n  Angular introductory resources Angular home.\nAngular documentation.\nAngular tutorial.\nAngular CLI documentation.\n"
},
{
	"uri": "/tech-department/topics/intro-to-css-architecture/",
	"title": "Intro to CSS architecture",
	"tags": [],
	"description": "",
	"content": " CSS Architecture and the Three Pillars of Maintainable CSS State of the art in CSS: a closer look at CSS architecture systems How to Organize Your CSS with a Modular Architecture (OOCSS, BEM, SMACSS)  "
},
{
	"uri": "/tech-department/workshops/intro-to-css-architecture/",
	"title": "Intro to CSS architecture",
	"tags": [],
	"description": "",
	"content": " The followings are to be demonstrated and addressed during the workshop\n Why the need to organize our CSS Separation of Concerns (what is it ?) Modular Architecture  Resources   TOPICS: Intro to CSS architecture   "
},
{
	"uri": "/tech-department/topics/intro-to-docker/",
	"title": "Intro to Docker and Docker-compose",
	"tags": ["docker-compose", "postgres"],
	"description": "",
	"content": " What is Docker\nWhy is docker cool? Here\u0026rsquo;s the first part of a three part tutorial on microservices. You don\u0026rsquo;t need to read all three parts. Basically it illustrates how docker revolutionised our industry. Here you go\nSet up In this section we\u0026rsquo;ll get docker set up on your computer. Then we\u0026rsquo;ll use it to run a mysql server. This is cool because:\n you can use mysql without having to actually install mysql the same technique will work for running any other database (or many other applications) once docker is installed. This means you can play and experiement with different tools without much of a fuss  Install docker For Ubuntu:\n https://docs.docker.com/install/linux/docker-ce/ubuntu/ https://docs.docker.com/install/linux/linux-postinstall/  For Mint:\n follow these instructions https://docs.docker.com/install/linux/docker-ce/ubuntu/ then when it is time to call add-apt-repository rather do this: sudo add-apt-repository \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo \u0026quot;$UBUNTU_CODENAME\u0026quot;) stable\u0026quot; https://docs.docker.com/install/linux/linux-postinstall/  For Mac:\nhttps://docs.docker.com/docker-for-mac/install/\nSuper important For some reason most people don\u0026rsquo;t follow ALL the installation instructions.\nPlease do this:\nhttps://docs.docker.com/engine/install/linux-postinstall/\nNow install docker-compose https://docs.docker.com/compose/install/\nCreate a docker-composition file Make a file called docker-compose.yaml. This is where you specify what containers you want to run and how you want them \u0026ldquo;constructed\u0026rdquo;. Paste the following into the file:\n version: \u0026#34;3.3\u0026#34; services: postgres: image: postgres:9.6 environment: - POSTGRES_USER=user - POSTGRES_PASSWORD=pass - POSTGRES_DB=db volumes: - ./gitignore/postgresql:/var/lib/postgresql/data ports: - 5432:5432 adminer: image: adminer restart: always ports: - 8080:8080  Now open up a terminal and cd into the directory containing the docker compose file then say docker-compose up\nThis launches two containers. One for postgresql, and one for adminer. Adminer is a simple web based gui that you can use to interact with different databases. You\u0026rsquo;ll be able to see this UI at http://localhost:8080\nAlternatively: Mysql composition You can run a mysql composition like this one\n version: \u0026#34;3.1\u0026#34; services: db: image: mysql command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: rootpass MYSQL_USER: user MYSQL_PASSWORD: pass MYSQL_DATABASE: db adminer: image: adminer restart: always ports: - 8080:8080  What\u0026rsquo;s the difference? Postgresql is more of an industry standard than Mysql. But they are both great tools.\nAdvanced topics If you want to use Docker containers in production then there are a bunch of extra things you need to know about. Some of these concepts are pretty deep but you don\u0026rsquo;t need to be an expert in order to use them.\nVolumes If you are running a container that needs to store data (like a database) and you want to make sure that you don\u0026rsquo;t lose that data if the container dies (or gets explicitly killed) then you need to use volumnes. Basically a volume is like a linux \u0026ldquo;link\u0026rdquo; or windows \u0026ldquo;shortcut\u0026rdquo;. It maps a totally normal directory/folder on your computer (your computer is the host) to a directory within the container. When the container tries to store something in the directory then that data appears in the host directory.\nNow if the container completely disappears the data still exists.\nOne use case for this behavior is upgrading. Let\u0026rsquo;s say you are running mysql:8.0. Your compose file will initially contain something like this\n db: image: mysql:8.0 volumes: /my/own/datadir:/var/lib/mysql  To upgrade, you can simply do the following:\n kill the docker composition Edit the compose file to say something like this:   db: image: mysql:8.0.17 volumes: /my/own/datadir:/var/lib/mysql  Now just docker-compose up and you have upgraded your mysql version. Easy peasy. And the same thing can be done for many other applications.\nAnother use case of volumes is of course backing up your data or movving your database to a new computer. Can you figure out how?\nports I\u0026rsquo;m not going to get into the definition of a port here. We\u0026rsquo;ll just talk about how to configure them. Remember how we accessed the adminer gui on port 8080 a second ago? Adminer exposes port 8080 by default.\nTry editing your docker compose file to contain this:\n adminer: image: adminer restart: always ports: - 9090:8080 ###### see how this line changed?  Now restart your composition.\nTry out these links:\n http://localhost:8080 http://localhost:9090  Creating your own docker images Prerequisites: It would be really useful if you were comfortable with Bash.\nhttps://docs.docker.com/get-started/part2/\n"
},
{
	"uri": "/tech-department/topics/ncit/intro-to-hcd/",
	"title": "Intro to Human Centered Design",
	"tags": ["hcd", "human centered design"],
	"description": "",
	"content": "Please read through this document, it is quite extensive but essential to your ncit curriculum.\nhttps://drive.google.com/file/d/1lkatAwTazX9RX7wSZ-BK4AXq6D-ruwOu/view?usp=sharing\n"
},
{
	"uri": "/tech-department/topics/java-specific/intro-to-junit/",
	"title": "Intro to JUnit",
	"tags": [],
	"description": "",
	"content": " Unit testing is hella important. Basically if your code doesn\u0026rsquo;t have a solid suite of tests that run and pass then it won\u0026rsquo;t be accepted into a larget codebase. This becomes important if you ever want to work productively on a team. Seriously, the only people who don\u0026rsquo;t have tests on their code are dinosaurs and noobs.\nSo test your code.\nBut what does that mean? How do you do it? The first thing you\u0026rsquo;ll need to understand is unit testing.\nWe\u0026rsquo;ll be usng JUnit to write our unit tests.\nGo forth and learn.\nResources This is a great tutorial. It\u0026rsquo;ll take you from zero to hero. Please make sure you understand all of JUnit. (Except the stuff about Ant and Eclipse)\nAnd here are some videos for you:\n https://www.youtube.com/watch?v=D2SiQest2nE\u0026amp;list=PLK7KNOA7vbPN5Y3HcsdmB7GKfnpWQpv0L https://www.youtube.com/watch?v=sQ4KgrxGQSc\u0026amp;list=PLqq-6Pq4lTTa4ad5JISViSb2FVG8Vwa4o\u0026amp;index=4  "
},
{
	"uri": "/tech-department/topics/ncit/intro-to-ncit/",
	"title": "Intro to NCIT Curriculum",
	"tags": ["hcd", "human centered design"],
	"description": "",
	"content": "Please read through this document, about the basics of human centered design as well as how we are approaching your NCIT curriculum:\nhttps://drive.google.com/file/d/1lkatAwTazX9RX7wSZ-BK4AXq6D-ruwOu/view?usp=sharing\n"
},
{
	"uri": "/tech-department/workshops/intro-to-presentation/",
	"title": "Intro to Presentation",
	"tags": [],
	"description": "",
	"content": "Link to the slides: https://docs.google.com/presentation/d/1gictqI99Sn58VNwbCTB2H1X_u8osahXT_3j97ATLuAo/edit?usp=sharing\n"
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-react/",
	"title": "Intro to React",
	"tags": [],
	"description": "",
	"content": " Official Intro - This tutorial doesn’t assume any existing React knowledge. Introduction to the React by FreeCodeCamp - React, created by Facebook, is an open-source JavaScript library for building user interfaces. It is used to create components, handle state and props, utilize event listeners and certain life cycle methods to update data as it changes.   Other useful links\n  Intro to Redux - The only introduction to Redux (and React-Redux) you’ll ever need All things React - Top 50 React Articles for the Past Year (v.2019)  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-vue/",
	"title": "Intro to Vue",
	"tags": [],
	"description": "",
	"content": " What is? Vue.js is an Model View viewmodel javascript framework that has different optional tools for building user interfaces and single page applications. Vue.js allow you to extend basic HTML with html attributes called directives which adds extra functionality to the html. This directives are provided by Vue.js by default or can be defined by user.\nVue.js Directives\nIn Vue.js a directive is a type of token/indentifier that tells vue.js code to do something to the DOM/Documet Object Model.\nDirective simple syntax :\n1  \u0026lt;html-element prefix-directive=\u0026#34;expression\u0026#34;\u0026gt;\u0026lt;/html-element\u0026gt;   Usage example\n1  \u0026lt;h1 id=\u0026#39;heading1\u0026#39; v-text=\u0026#39;heading_1\u0026#39;\u0026gt;\u0026lt;/h1\u0026gt;   This can also be written using double braces as placeholders for output data like : 1 2 3  \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt; {{ heading_1 }} \u0026lt;/h1\u0026gt;   In the first example looking at [ v-text=\u0026lsquo;heading_1\u0026rsquo; ], the prefix \u0026lsquo;v\u0026rsquo; is default similar to AngularJS \u0026lsquo;ng\u0026rsquo; its purpose is to tell Vue.js library that the HTML attribute is Vue.js attribute. The \u0026lsquo;text\u0026rsquo; part of the \u0026lsquo;v-text\u0026rsquo; is the directive and its meant to tell Vue.js that it should change textContent of the HTML element, with what \u0026lsquo;heading_1\u0026rsquo; expression presents/contains. The same goes for the second example except for example 2 \u0026lsquo;heading_1\u0026rsquo; is directly defined whithin HTML heading attribute textContent area. Some of the directives are v-if, v-el, v-pre, v-on, v-ref, v-transition, etc.\nComparison Simple examples to show usage of Vue.js and normal html alternative.\n1) Add text to heading 1 :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt;{{ heading_1 }}\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#heading1\u0026#39;, data: {heading_1: \u0026#39;Vue.js\u0026#39;} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   new Vue() creates an instance of a Vue.js object. \u0026lsquo;el\u0026rsquo; object key expects its value to be an \u0026lsquo;id\u0026rsquo; of an html element and the \u0026lsquo;data\u0026rsquo; key, value should be data that will be applied to the specified vue.js expression whithin the html code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;heading1\u0026#39;).innerHTML= \u0026#39;Vue.js\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \n2) Write input box reply to the dom :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;my_name\u0026#34;\u0026gt; \u0026lt;p\u0026gt;What is your name? : {{ reply }}\u0026lt;/p\u0026gt; \u0026lt;input v-model=\u0026#34;reply\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#my_name\u0026#39;, data: {reply: \u0026#39;\u0026#39;} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   The \u0026lsquo;v-model\u0026rsquo; directive binds the value of HTML elements to application data, and updates the dom when any changes occur. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;What is your name? : \u0026lt;span id=\u0026#34;my_name\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; id=\u0026#39;reply_box\u0026#39; onkeyup=\u0026#39;show_reply()\u0026#39;\u0026gt; \u0026lt;script\u0026gt; function show_reply(){ document.getElementById(\u0026#39;my_name\u0026#39;).innerHTML=document.getElementById(\u0026#39;reply_box\u0026#39;).value; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \n3) Show items list :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;ingredients in coffee_reciepe\u0026#34;\u0026gt; {{ ingredients }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#app\u0026#39;, data: { coffee_reciepe: [\u0026#39;water\u0026#39;,\u0026#39;sugar\u0026#39;,\u0026#39;milk\u0026#39;] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   The \u0026lsquo;v-for\u0026rsquo; directive loops through array of items. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;ul id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var coffee_reciepe = [\u0026#39;water\u0026#39;,\u0026#39;sugar\u0026#39;,\u0026#39;milk\u0026#39;]; var ingredient_item_list = \u0026#39;\u0026#39;; coffee_reciepe.forEach(function(ingredient){ ingredient_item_list = ingredient_item_list + \u0026#39;\u0026lt;li\u0026gt;\u0026#39; + ingredient + \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;; }); document.getElementById(\u0026#39;app\u0026#39;).innerHTML = ingredient_item_list; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \nResorce links Vue.js Guide.\nVue.js api.\nComponents basics .\nTemplate syntax .\nVue.js cli.\nVue.js examples .\n"
},
{
	"uri": "/tech-department/topics/functional-programming-intro/",
	"title": "Intro to functional programming",
	"tags": [],
	"description": "",
	"content": " This week is all about higher-order functions: map, reduce and filter. We\u0026rsquo;ll also see what the fuss about lazy evaluation and list comprehension is.\nBackground Material  Learn Functional Python in 10 Minutes Fun Fun Functions: Functional Programming: These videos show functional programming in Javascript, but they contain great explanations. Watch all the videos in the series. Great resource on map, filter and reduce  "
},
{
	"uri": "/tech-department/topics/intro-to-hybrid-mobile/",
	"title": "Intro to hybrid mobile",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;ve been coding for some time already so I\u0026rsquo;m just going to jump stright in.\nThe ideal that hybrid mobile dev aims for is: Write once, run anywhere. Basically the idea is that you can write your app once and it will run on android and iphone, and maybe even web and desktop too. There was apoint in time when that ideal sounded childish and\u0026hellip;well\u0026hellip;idealistic. But modern tools let us achieve just that! (under certain circumstances)\nHybrid mobile dev comes in a few differant flavours. The flavour we\u0026rsquo;ll be covering here is Angular + Ionic. So the path you\u0026rsquo;ll follow is a little something like this:\nFirst get comfortable with Typescript. Typescript is a lot like Javascript and Javascript is the most versatile language in the world. So this skill on its own is pretty great.\nYou\u0026rsquo;ll need to be able to do all the good stuff in this language: flow control, scoping, oop, tdd, you know the deal.\nThen you\u0026rsquo;ll need to learn a little bit about the how and why of web design. This flavor of hybrid dev is web based and your app should have a pretty face. This will also serve as a refresher for your HTML and CSS knowledge.\nThen we get onto the good stuff: Angular and Ionic! You\u0026rsquo;ll build a bunch of small projects of increasing difficulty. Each project will introduce a new skill.\nNote a lot of the projects you\u0026rsquo;ll come across in this course are actually a part of our web dev course. It\u0026rsquo;s a nice course but it means that some of the instructions might be a little bit confusing. Here\u0026rsquo;s what you need to know:\n If it has a frontend, do it in angular if it has a frontend and you have already been introduced to ionic, do it in ionic (unless the project specifically says not to)  Have fun. Learn hard. And help each other\n"
},
{
	"uri": "/tech-department/topics/basic-architecture-concepts/",
	"title": "Intro to software architecture",
	"tags": [],
	"description": "",
	"content": " Software architecture is a pretty vast topic. This here is just scratching the surface.\nSeparate display logic from data logic If your data and your gui get all mixed up then things get very hard to test. Here\u0026rsquo;s an approach you might consider:\n Think what your data should look like. What is the shape of it? These things shouldn\u0026rsquo;t know about HTML. For example, if you were writing a game server (with no front-end at all) then these data structures should be valid. Of course you would be setting up these structures and interactions in a TDD manner Figure out how your data will change. What are the inputs? What are the effects on the data? At this point we still haven\u0026rsquo;t considered drawing any pictures. Now for some display code. Here\u0026rsquo;s a pretty good example adapted from one of your predecessors. This code comes from a project to do with a 10-pin bowling scoring system:  function drawPlayerDetails(player) { document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + player.name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + player.totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + player.pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + player.score + \u0026quot;]\u0026quot;; }  This function does one thing, and it does that thing well and intuitively.\nSome oop resources  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6 SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design  "
},
{
	"uri": "/tech-department/workshops/intro-to-ncit/",
	"title": "Introdction to NCIT curriculum",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/topics/python-specific/intro-to-apis/",
	"title": "Introduction to APIs",
	"tags": [],
	"description": "",
	"content": " https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask\n https://realpython.com/api-integration-in-python/\n  "
},
{
	"uri": "/tech-department/topics/intro-to-ajax/",
	"title": "Introduction to Ajax",
	"tags": [],
	"description": "",
	"content": "Ajax Tutorial\n"
},
{
	"uri": "/tech-department/topics/linux/intro-to-bash/",
	"title": "Introduction to Bash and the terminal",
	"tags": ["bash", "linux"],
	"description": "",
	"content": " Knowing a bit about the terminal will help you a lot in your learning journey. If you haven\u0026rsquo;t met the command line before then this is probably going to seem a little strange at first. But when you get used to it it\u0026rsquo;s really useful.\nWhy is it useful?  It will speed you up. Interacting with your computer via the keyboard can be very quick compared to using the mouse. If you ever deploy your code to production (eg: host a website, or get a data-pipeline running on a cloud provider ), then chances are that you\u0026rsquo;ll be using Linux. If you don\u0026rsquo;t have physical access to a computer you can still control it using the command line! The internet runs on this stuff!  What you need to know Conquering the command line http://conqueringthecommandline.com/book/basics\n Chapter 1 is necessary curl is useful but it might not make a tonne of sense right now grep is useful  Command-line bootcamp http://korflab.ucdavis.edu/bootcamp.html\nThis covers some of the same material as \u0026ldquo;Conquoring the command line\u0026rdquo;. If you understand all this then you are in a good place :)\nNext level Ninja stuff One of the really awesome things about Linux is that it can be customized!\nIf you want to be even faster and more awesome then there are a few extra tools you\u0026rsquo;ll need. If you install this stuff now and just get used to using it then it will save you time and impress your friends ;)\n Use Terminator instead of terminal.  You can install it using sudo apt-get install terminator\nThis just gives you a few useful extra features. This Indian dude who likes shiney cars will tell you more about it: https://www.youtube.com/watch?v=mMak2VzRbmc\n Set up your keyboard shortcuts so you can open a new terminal instantly whenever you want. See if you can figure this one out on your own.\n Install zsh.\n  This one might be challenging to those of you who are new to Linux. Feel free to skip this for now but once you know a bit more then it\u0026rsquo;s very worthwhile. Come back and get it set up when you are more confident.\nZsh is an alternative to bash and it just saves loads and loads of time! It also allows all sorts of theming and customisations.\nUse oh-my-zsh if you want to get the most out of it: https://github.com/ohmyzsh/ohmyzsh . This comes with a number of plugins.\nHere are some recommended plugins:\nplugins=(git docker docker-compose per-directory-history alias-tips)  Most of these are included in oh-my-zsh but you have to install alias-tips seperately\n"
},
{
	"uri": "/tech-department/topics/messaging/pre-bootcamp-intro/",
	"title": "Introduction to Bootcamp Preparation phase",
	"tags": [],
	"description": "",
	"content": " Hello and welcome to the next phase of your Umuzi journey :) You are reading this because we believe that you have the potential to have a high value career in tech, and we want to help you get there. Congrats for making it this far!\nIn this phase of your journey you\u0026rsquo;ll be doing a bit of learning on your own. We have a bootcamp coming up and if you aren\u0026rsquo;t well prepared you wont be able to shine, and we wont be able to get a clear picture of how good you can be.\nSo please hit this stuff hard! Drive your own learning, hold yourself accountable, and always focus on UNDERSTANDING! This isn\u0026rsquo;t like high-school, memorising stuff and getting hints isn\u0026rsquo;t the way to go, understanding is golden.\nHow much do I need to know? We\u0026rsquo;ve shared a bunch of content with you already. Get yourself comfortable with that stuff. Basically you\u0026rsquo;ll need to:\n be comfortable editing code on your own computer or mobile device get as far as possible with the content we have given you. WARNING: one thing we have asked you to do is learn git. You\u0026rsquo;re probably going to think it\u0026rsquo;s weird but it\u0026rsquo;s super important. If you want to succeed at our bootcamp you\u0026rsquo;ll need to be comfortable with the basics We\u0026rsquo;ve given you a bunch of stuff to learn, and also a couple of projects. Try your best to get the projects done, and make sure you UNDERSTAND them  BONUS! If you do our bootcamp you will get a Nationally regognised certificate! We want to make sure that our bootcamp helps you in your career. Even if you don\u0026rsquo;t get into Umuzi you\u0026rsquo;ll have a few nice things to put on your CV.\nAnything else? We at Umuzi really value professional behavior. A lot of professional behavior has to do with: communication, being on time and getting your stuff done.\nCommunication Be responsive: If someone sends you a message, make sure they know when you have read it. Don\u0026rsquo;t ignore people. If talking to you feels like talking to a brick wall then you wont fit in here.\nBe clear: Whenever you send someone a message, read over it before you press send. Think about it from the perspective of the person who is reading it. Will they understand you? Are you giving them enough information?\nExample of bad communication:\napplicant: I have a problem staff member: What is your problem? applicant: the code wont run staff member: Is there an error message? applicant: here is a shakey, blurrey video of my computer: [attatchment: suuuuucks.zip] staff member: Please send me the error text as actual text applicant: here is is: [one tiny useless part of the error message] staff member: Sometimes I wonder how we got this far as a species (quits job)  Example of good communication:\napplicant: Hi. I'm struggling to get my code to work. I'm working on this project [link to project]. When I do [X] then [Y] happens. I expected [Z]. It's giving me the following error message: [The full error message as text] staff member: Here is an explanation [explanation], and here are some resources so you can learn more [resources]. And... I love you (+2 to faith in humanity)  Be Kind Be polite. We aren\u0026rsquo;t ridgid and formal here, but we do expect you to act respectfully towards the staff and your colleagues. No form of abuse will be tolerated. We are about helping each other to grow.\nBeing on time The ideal: Don\u0026rsquo;t be late for meetings. And if you are given a deadline then make sure you meet it.\nLife is messy sometimes being perfect isn\u0026rsquo;t always possible. That\u0026rsquo;s ok, we\u0026rsquo;re all human and we can understand when thngs are hard. But it is on YOU to communicate effectively.\n if you can\u0026rsquo;t make it to an event: say something ahead of time. As soon as you see a problem, communicate about it if you think you wont hit a deadline: say something ahead of time. As soon as you see a problem, communicate about it  I\u0026rsquo;m sure you see the pattern\u0026hellip;\nGetting your stuff done Remember that you are here to learn and understand. You will be given projects to do and there will be requirements that you need to meet. Don\u0026rsquo;t give us half-finished code that doesn\u0026rsquo;t run.\nWrite good code that meets all the requirements, and make sure that you understand the code you give us!\nGetting help The first step is to try to help yourself. The resources we sent you to learn from are pretty great, but Google is also your friend. And StackOverflow is a fantastic resource. https://stackoverflow.com/\nAgain I\u0026rsquo;ll say, please focus on understanding! Copy-pasting code you find on the internet will not get you very far.\nOnce you have attempted to solve your own problems feel free to reach out. You will be connected with some staff members who will be able to support you.\nWhat\u0026rsquo;s next? Watch your inbox. You\u0026rsquo;ll get a few invites.\nWelcome session and Q\u0026amp;A: You will be divided up into groups and each group will have an online meeting. Try arrive a couple of minutes early.\nAgenda:\n Meet Umuzi A bit more info on the pay-it-forward program Your experience so far, we are always trying to get better, feedback is really appreciated. We want to know how thins are going and how we can make things better for the next group any questions you have  It would be good for you to look at this content ahead of time so you can ask good questions.\nBootcamp The bootcamp will be a 2 week process. We\u0026rsquo;ll introduce that to you seperately. Try to free up your time so that you can focus 100%. If you have a job, take some leave. During bootcamp we expect you to behave like this is your full-time gig.\nWhat happens after bootcamp? Take a look at the following link. It\u0026rsquo;ll tell you a bit more about what you are signing up for :)\nTOPICS: The journey of an Umuzi recruit "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-css/",
	"title": "Introduction to CSS",
	"tags": [],
	"description": "",
	"content": " CSS is defined by w3schools as a language that describes style of an HTML document. CSS dictates the look and feel of a web page.\nCSS foundation The followings form the foundation of CSS:\n Inline CSS Internal CSS External CSS CSS Selectors (Element,Class,ID,Fonts \u0026amp; Colors) Box model Fonts and how to integrate them.  CSS basics  Learn CSS in 5 minutes - A tutorial for beginners\n More CSS\n  "
},
{
	"uri": "/tech-department/workshops/intro-to-css/",
	"title": "Introduction to CSS",
	"tags": [],
	"description": "",
	"content": " There are two great days in a person\u0026rsquo;s life\n the day they are born and the day they discover why.   Topics to be discussed in this workshop can be found here TOPICS: Introduction to CSS "
},
{
	"uri": "/tech-department/topics/design-patterns/",
	"title": "Introduction to Design Patterns",
	"tags": [],
	"description": "",
	"content": " Design patterns are reusable solutions for various programming tasks which programmers have encounter over years. They aim to give direction based on lessons learnt so you don\u0026rsquo;t get to make the same mistakes in the future and they are also a great conversation started.😉\nFactory Pattern: Factory design pattern is used when we have a super class with multiple sub-classes and based on input, we need to return one of the sub-class. This pattern take out the responsibility of instantiation of a class from client program to the factory class\nCode Example Please review example it will make sense why this pattern if the most commonly used pattern in java.\nFactory Pattern\nMVC Pattern: MVC stands for Mode View Controller. This design pattern recommends separating the code that stores application data (Model) from the code implementing the user interface (View) and from the code that controls the data exchange and implements application logic (Controller)\nObserver Pattern: Observer design pattern is used to implement scenarios when one object, \u0026ldquo;the observer\u0026rdquo; needs to watch changes in other object(s), \u0026ldquo;the observables\u0026rdquo;. For example, if a Twitter user (the observable) posts a twit all of his followers (observers) will get notified\nGreat overview look of all different type of design patterns can be found here and you can drill in each of them but clicking on them in the table.\nDesign Principles SOLID Principles in Java\nOpen closed principle\nSingle responsibility principle\nResource https://howtodoinjava.com/gang-of-four-java-design-patterns/\nhttps://www.journaldev.com/1827/java-design-patterns-example-tutorial\nhttps://www.journaldev.com/1392/factory-design-pattern-in-java\n"
},
{
	"uri": "/tech-department/topics/dotenv-module/",
	"title": "Introduction to Dotenv module",
	"tags": [],
	"description": "",
	"content": " Description  Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env.\n  We can either set the environment through application code, or we can use a tool to set an environment for us. A common application level tool is dotenv which allows us to load environment variables from a file named .env. Configs should have a separate file of their own and not hosted within the code repository. Having a separate config file makes it easy to update the config values without touching the actual code base. Having separate file eliminates the need for re-deployment of your applications when you change certain values in your config files. In other words, configs belong in the environment as variables, not in the application, you should be able to move it to another environment without having to touch the source code.  How do I use dotenv?  Create project directory and name it whatever you want. cd into the directory you created and run ``` npm init -y npm install dotenv  - Create a .env file and add your configurations.  //.env\nBASE_URL=https://umuzi.org API_KEY=000FBAA4558FF565851A3E104017AB1A SERVER_PORT=3000 USER=umuziadmin OBJ={key1:\u0026ldquo;value1\u0026rdquo;, key2:\u0026ldquo;value2\u0026rdquo;,key3:\u0026ldquo;value3\u0026rdquo;,key4:\u0026ldquo;value4\u0026rdquo;} BOOL=true NUM=123456 STRING= Dumela Lefatshe ARRAY=[1,2,3,4,5,6]\n #### \u0026amp;nbsp; Usage - You can access your configuration from your code like this.  //index.js\nrequire(\u0026lsquo;dotenv\u0026rsquo;).config();\nconst url = process.env.BASE_URL; const apiKey = process.env.API_KEY; const port = process.env.SERVER_PORT; const user = process.env.USER; const obj = process.env.OBJ; const boolean = process.env.BOOL; const number = process.env.NUM; const string = process.env.STRING; const null1 = process.env.NULL; //be careful with reserved words const undefined1 = process.env.UNDEFINED; const array = process.env.ARRAY;\nconsole.log(url); console.log(apiKey); console.log(port); console.log(user); //lol, this one seems to return the name of pc owners. console.log(obj); console.log(number); console.log(string); console.log(boolean); console.log(null1 == null ? true : false); console.log(array);\n What if you need this environment variables in multiple places? If you do reference the variables everywhere that you need them it could make refactoring and maintenance more difficult than if they are in one place. #### \u0026amp;nbsp; You can use a Javascript config file to get around this.  //config.js\nrequire(\u0026lsquo;dotenv\u0026rsquo;).config();\nmodule.exports = { url : process.env.BASE_URL, apiKey : process.env.API_KEY, port : process.env.SERVER_PORT, user : process.env.USER, obj : process.env.OBJ, boolean : process.env.BOOL, number : process.env.NUM, string : process.env.STRING, null1 : process.env.NULL, undefined1 : process.env.UNDEFINED, array : process.env.ARRAY };\n Now you can import this configs from any place in your code.  //index.js, doSomething.js, anotherJsFile.js, etc\nconst configs = require(\u0026lsquo;/path/to/js/config/file\u0026rsquo;);\nconsole.log(configs.url); console.log(configs.apiKey); console.log(configs.user); console.log(configs.obj);\n##### What’s the value in this technique? - it is easy - clarity on how all environment variables are being mapped - you can rename variables to more readable properties - you can add other configuration properties from non-environment variables ## \u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; OR Dotenv has the option of preloading the environment variables outside your code. Preload your variables and eliminate the code that reads the .env file from your code base. Less code is fewer lines that could break or be maintained. ![alt text](https://imgflip.com/s/meme/Roll-Safe-Think-About-It.jpg) This technique removes any need for code that uses require on dotenv. This includes the ``` dotenv.config()``` or ``` require('dotenv').config() ``` code mentioned previously in this article. You can run your node app using the — require ( -r ) command line option to preload dotenv. The following command will preload all environment variables from the file .env using dotenv and make them available in your app.  node -r dotenv/config server.js\nNow you can access all environment variables in the .env without requiring dotenv in your code, use ```process.env.NAME_OF_VARAIBLE``` to access the variables. ## Best practices \u0026gt; Be careful to add .env to your .gitignore file and commit that change before you add your .env. Otherwise, you run the risk of committing an early version of your .env to source control. Your .env file contains very sensitive information (your app key at the very least). You do not want this in version control where everybody can see this information and possibly use it to attack your site. Think about database information which might be stored in there or email keys or passwords. Furthermore it is likely that the information which you use in your .env file also needs to change between environments so you will need to change values anyways.  //.gitignore\n.env\n #### Sharing your .env file The best practice on this matter is add a ```.env-example``` file in your repo to give a general outline of configuration available to developers but using dummy data as values to your variables.  //.env-example\nBASE_URL=https://dummy.url.com API_KEY=dummyApiKeyHere SERVER_PORT=dummyPort USER=dummyAdminName OBJ={dummyKey1:\u0026ldquo;dummyvalue1\u0026rdquo;, dummyKey2:\u0026ldquo;dummyValue2\u0026rdquo;,dummyKey3:\u0026ldquo;dummyValue3\u0026rdquo;,dummyKey4:\u0026ldquo;dummyValue4\u0026rdquo;} BOOL=true NUM=123456 STRING=DummyString ARRAY=[\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;]\n **Do not include this file in.gitignore```**\nResources https://www.npmjs.com/package/dotenv\nhttps://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa\nhttps://medium.com/chingu/protect-application-assets-how-to-secure-your-secrets-a4165550c5fb\nhttps://projectricochet.com/blog/importance-code-separation-and-why-we-use-git-workflow-managing-different-environments\n"
},
{
	"uri": "/tech-department/workshops/intro-to-express/",
	"title": "Introduction to Express js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/intro-to-gradle-with-intellij/",
	"title": "Introduction to Gradle",
	"tags": [],
	"description": "",
	"content": " What is gradle According to Gradle Inc, Gradle is an open-source build automation tool that is designed to be flexible enough to build almost any type of software.Here are the five things you need to know about gradle.\nGradle was chosen by Google as the official build tool for Android. Find out why.\nWhy we need a build tool Build tools are programs that automate the creation of executable applications from source code. Building incorporates compiling, linking and packaging the code into a usable or executable form. In small projects, developers will often manually invoke the build process.\nJava Build Tools  Ant Gradle Maven  Read up on the major differences between the following Java Build Tools Gradle vs Maven\nYour first Gradle application  Open Project Wizard, in the left-hand pane select Gradle. In the right-hand pane, IntelliJ IDEA automatically adds a project SDK (JDK) and a default option Java in the Additional Libraries and Frameworks area. Click next. On the next page of the wizard let\u0026rsquo;s specify ArtifactId as test.project which basically is the name of our project. We can use the default information in the version field. Unless we plan to deploy our project in some Maven repository we don\u0026rsquo;t need to specify a GroupId. Click next. In the Project tool window open the src folder. Right-click the main directory then the java subdirectory and from the list select New | Java Class. In the Create New Class dialog specify the name of your Java Class as Gradle and click OK. Add the following code in your Java Class  public class Gradle{ public static void main(String[] args){ String gradle = \u0026quot;Introduction to Gradle!\u0026quot;; System.out.println(gradle); } }   In the editor, in the left gutter, press icons toolwindows toolWindowRun svg and select Run \u0026lsquo;HelloGradle.main()\u0026rsquo;.  "
},
{
	"uri": "/tech-department/topics/apis/graphql/",
	"title": "Introduction to GraphQL",
	"tags": [],
	"description": "",
	"content": " https://www.codementor.io/@sheena/graphql-versus-rest-pp19tr6zk https://graphql.org/learn/  "
},
{
	"uri": "/tech-department/projects/data-science-specific/intro-to-jupyter-notebook/",
	"title": "Introduction to Jupyter Notebooks",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Environment Download and install miniconda on your machine. This will install python and the conda package manager for python. NB Make sure that you set the python path! Setting the path will allow you to simply type python into the terminal to open python.\nYou also want to install the following packages:\n jupyter-notebook numpy pandas matplotlib seaborn scipy scikit-learn  You can install packages by typing conda install name-of-package, e.g. conda install numpy.\nTo launch a new jupyter instance (kernel), open up a new terminal, navigate to the directory in which you want to be and type jupyter notebook(and press enter). A new jupyter kernel will open in your browser. You can now open an existing notebook (*.ipynb) or create a new notebook.\nWhen you are done, click \u0026lsquo;Close and Halt Kernel\u0026rsquo; or press Ctrl+C twice to shut down the kernel from the terminal.\nAssignment Complete the (Nobel Prize Winner assignment)[http://somewhere.nice] and upload it to Github. You will need to create a Github account if you do not already have one.\nYou may want to go through DataCamp\u0026rsquo;s Python Programming track to get the basic skills you will need to complete the assignment.\nSupporting Material  Python For Data Science Cheat Sheets Jupyter Notebook Keyboard Shortcuts Basic Python 3 Programming for Scientists  TOPICS: Jupyter notebooks best practices   "
},
{
	"uri": "/tech-department/topics/linux/intro-to-linux/",
	"title": "Introduction to Linux",
	"tags": ["linux"],
	"description": "",
	"content": "Linux is an operating system (much like windows is an operating system). Linux started of as one nerd\u0026rsquo;s hobby but quickly grew in fame. Linux is free, it\u0026rsquo;s source code is freely available, and it is created, developed and used by a large community\n Intro to linux mint: https://www.youtube.com/watch?v=HhHu-1glWps post install guide 1: https://gitlab.com/prelude-open-source/mint-post-install-guide post install guide 2: https://fossbytes.com/things-to-do-after-installing-linux-mint  If you are one of our Python cohorts you\u0026rsquo;ll need to get Python 3.7 installed alongside Python2.7.\n"
},
{
	"uri": "/tech-department/workshops/intro-to-linux/",
	"title": "Introduction to Linux: Live demo",
	"tags": [],
	"description": "",
	"content": " Linux Ubuntu or Mint will be demonstrated to the recruits. Demonstrate:\n Command line navigation versus gui based navigation basic command-line commands, man and \u0026ndash;help how to install software, and why it\u0026rsquo;s cool use of sudo (and why o be careful about that) creating a file in the command line and visually seeing it come up in the gui how to set up keyboard shortcuts launching Python and Node from the command line  Prerequisites for speaker Whoever is doing ths workshop should be familiar with th excercises given to recruits. Questions will come up, you should be able to answer them.\n  PROJECTS: Linux challenges   "
},
{
	"uri": "/tech-department/workshops/node-and-sql/",
	"title": "Introduction to Node and SQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-boot/",
	"title": "Introduction to Spring Boot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-boot/",
	"title": "Introduction to Spring Boot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-boot/part-1/",
	"title": "Introduction to Spring Boot - part 1",
	"tags": [],
	"description": "",
	"content": "We covered a very large part of the Spring Boot framework at a high level on the reading material but I hope you went through the resource as well. This project will be very simple but focusing on all the building blocks. HAVE FUN!!\nStep 1 - Create a java application and import \u0026lsquo;org.springframework.boot:spring-boot-starter-web\u0026rsquo; into your build.gradle file to convert it to a Web Spring Boot application\nStep 2 - Ensure that your Main class is configured correctly for a Spring Boot application. Hint: @SpringBootApplication\nStep 3 - Create a Model called User\nclass User { private long Id; private String name; private String surname; // add constructor, getter and setter }  Step 4 Create an interface called FakeRepoInterface with the following methods\ninsertUser(id, name, surname) findUserById(id) deleteUser(id)  Step 5 - Create a class called FakeRepo wrap it with the @Repository annotation and implement the FakeRepoInterface, in this class you will mimic an actual repository by provide implementation for the following methods\nCreate an object array of type User insertUser(id, name, surname) // should store the name, surname and id in the 'User' Object Array, return the name added findUserById(id) // returns name and surname of the specified id from the 'User' Object Array, return the name deleteUser(id) // remove the object with id from the User Object Array, return deleted user name  Step 6 - Create an Interface called (UserService) with the following methods they can be type void for now\naddUser(name, surname) removeUser(Id) getUser(Id)  Step 7 - Create a class called UserServiceImpl which implements the interface in [step 6] and must do the following\nUse (dependency injection) for including FakeRepo inside UserServiceImpl DO NOT USE THE NEW KEYWORD\naddUser(name, surname) // should call insertUser(id, name, surname), from FakeRepo and print to console '[name] entered', (generate/hardcode the id) removeUser(Id) // should call deleteUser(id) from FakeRepo and print to console '[name] removed' getUser(Id) // should call findUserById(id) from FakeRepo and print to console 'hello [name]' [name] - replaced with actual name return from the FakeRepo  Step 8 - Write tests for\n addUser(name, surname) removeUser(Id) getUser(Id)  "
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-boot/part-1/",
	"title": "Introduction to Spring Boot - part 1",
	"tags": [],
	"description": "",
	"content": " Spring Boot is a very big and complex framework and for the next few weeks we are going to spend a great deal of time focusing on the core of the framework and all its parts. There will be a lot of content to go through so please go through it diligently as it will set a solid foundation for you.\nThe Difference Between Spring and Spring boot Spring\nSpring is one of the most extensively used Java EE Frameworks for building applications. For the Java platform, the Spring framework provides a detailed programming and configuration model. It aims to simplify the Java EE development and helps developers be more productive at work. It can be used at any kind of deployment platform. It tries to cater for todays needs in business to make it quick an easy to develop applications.\nSpring Boot\nWhile the Spring framework focuses on providing flexibility to you, Spring Boot aims to shorten the code length and provide you with the easiest way to develop a web application. With annotation configuration and default codes, Spring Boot shortens the time involved in developing an application. It helps create a stand-alone application with less or almost zero-configuration. IT is a module of the spring framework and built on top of it.\nSpring Boot follows a layered architecture in which each layer communicates with the layer directly below or above it (hierarchical structure).\nPresentation Layer: The presentation layer handles the HTTP requests (your Restful api), translates the JSON parameter to object, and authenticates the request and transfer it to the business layer. In short, it consists of views i.e., frontend part.\nBusiness Layer: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.\nPersistence Layer: The persistence layer contains all the storage logic and translates business objects from and to database rows using different tools such JDBC and Repository.\nDatabase Layer: In the database layer, CRUD (create, retrieve, update, delete) operations are performed. The actual scripts which get/insert information to and from the database\nSpring boot flow architecture looks like this\nSpring Boot Annotation Spring Boot is easier to work with because it auto configures objects and resources for us using annotation, and annotations are big on Spring so its probably a good idea to look over some of the core annotations to get an application started.\n@Autowired We can use the @Autowired to mark a dependency which Spring is going to resolve and inject. We can use this annotation with a constructor, setter, or field injection.\nCheckout Spring Core Annotations Here\n@SpringBootApplication We use this annotation to mark the main class of a Spring Boot application, it encapsulates @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations with their default attributes.\nCheckout Spring Boot Annotations Here\nand many others\nDependency Injection Before we can understand dependencies inject we have to first understand what inversion of control(Ioc) is and why we care about it\nWhat Is Inversion of Control? Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. It\u0026rsquo;s most often used in the context of object-oriented programming.\nBy contrast with traditional programming, in which our custom code makes calls to a library, IoC enables a framework to take control of the flow of a program and make calls to our custom code.\nThe advantages of this architecture are:\n decoupling the execution of a task from its implementation making it easier to switch between different implementations greater modularity of a program greater ease in testing a program by isolating a component or mocking its dependencies and allowing components to communicate through contracts  What Is Dependency Injection? Dependency injection is a pattern through which to implement IoC, where the control being inverted is the setting of object\u0026rsquo;s dependencies. The act of connecting objects with other objects, or “injecting” objects into other objects, is done by an assembler rather than by the objects themselves\nSimply put, this allows for loose coupling of components and moves the responsibility of managing components onto the container.\nThere are 3 overall types of injection\n Constructor Injection  Class Animal { @Autowired public Dog dog() { return new Dog(); } }   Setter Injection  Class Animal { private Dog dog; @Autowired public void setDog(Dog dog) { this.dog = dog; } }   Field Injection  Class Animal { @Autowired private Dog dog; }  Interface - (Not officially a type)\nClass RestController { @Autowired // still field injection but this is how you can create an abstraction between your view and service private AccountService accService; } Interface AccountService { ... } Class AccountServiceImpl implements AccountService { ... }  Spring Actuator This feature provides a lot of insights of a running Spring boot application. For example, you can use Actuator to find out which beans are created in Spring\u0026rsquo;s application context and which request path are mapped to controllers.\nResources https://dzone.com/articles/understanding-the-basics-of-spring-vs-spring-boot\nhttps://www.javatpoint.com/spring-boot-architecture\nhttps://www.javatpoint.com/spring-vs-spring-boot-vs-spring-mvc\nhttps://www.javatpoint.com/spring-boot-dm\nhttps://www.baeldung.com/spring-dependency-injection\nhttps://www.baeldung.com/inversion-control-and-dependency-injection-in-spring\nhttps://www.baeldung.com/spring-core-annotations\nhttps://www.baeldung.com/spring-boot-annotations\nhttps://www.tutorialspoint.com/spring_boot/index.htm\n"
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-boot/part-2/",
	"title": "Introduction to Spring Boot - part 2",
	"tags": [],
	"description": "",
	"content": " We are going to work on Spring boot Caching and Security for this project\nCaching Continuing with PROJECTS: Introduction to Spring Boot - part 1 for the User we are going to add security and caching on the application and we will use test to see if the application does what we want it to.\nStep 1\nImport the following dependency\ndependencies { compile 'org.springframework.boot:spring-boot-starter-cache' }  Step 2\nImplement caching for the \u0026lsquo;name\u0026rsquo; in the \u0026ldquo;getUser\u0026rdquo; method, use the right annotation to invoke this 😉, in order to see if something is being served from cache or not we are going to simulate our own delay.\nAdd this code on your getUser method just before the return statement\ntry { System.out.println(\u0026quot;Going to sleep for 5 Secs.. to simulate backend call.\u0026quot;); Thread.sleep(1000*5); } catch (InterruptedException e) { e.printStackTrace(); }  because we don\u0026rsquo;t have a REST API for now (will be covered in Part3) we are going to use Tests to simulate a REST API call.\nWrite a test that will call \u0026ldquo;getUser\u0026rdquo; four times\nExpect output after running \u0026ldquo;getUser\u0026rdquo; four times\nWithout Cache:\nGoing to sleep for 5 Secs.. to simulate backend call. Going to sleep for 5 Secs.. to simulate backend call. Going to sleep for 5 Secs.. to simulate backend call. Going to sleep for 5 Secs.. to simulate backend call.  With Cache:\nGoing to sleep for 5 Secs.. to simulate backend call. ... ... ...  Security Import the following dependency\ndependencies { implementation 'org.springframework.boot:spring-boot-starter-security' }  Step 1\nAdd the following class and provide implementation for the configure function where you see // COMPLETE CODE HERE specify your password and username.\n@Configuration public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter { // TODO: Read more about this extension WebSecurityConfigurerAdapter @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // COMPLETE CODE HERE } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\u0026quot;/user\u0026quot;) .authenticated() .antMatchers(\u0026quot;/user\u0026quot;) .permitAll() .and() .httpBasic(); } }  Step 2\nAdd a test to show that your username and password actually work by using the following\n @Autowired private TestRestTemplate template; ResponseEntity\u0026lt;String\u0026gt; response = template.withBasicAuth(?).getForEntity(?)  Resource 😉 https://howtodoinjava.com/spring-boot2/spring-boot-cache-example/\nhttps://www.baeldung.com/spring-security-integration-tests\n"
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-boot/part-2/",
	"title": "Introduction to Spring Boot - part 2",
	"tags": [],
	"description": "",
	"content": " Microservices In 2005 Dr Peter Rogers introduced the term micro-web-service introducing the concept of loose-coupled services interacting with one another. It wasn\u0026rsquo;t until 2011 where people who were exploring this architecture starting sharing their ideas and thought and thus increasing the spread and popularity.\nSo what is Microservice Architecture From Wikipedia\na variant of the service-oriented architecture (SOA) structural style— that arranges an application as a collection of loosely coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight  In simple terms according to Sam Newman \u0026ldquo;Microservices are the small services that work together\u0026rdquo;\nBut there are fundamental rules that need to be noted about these service which are:\n Single Responsibility principle: focuses on a piece of functional and only that functionality\n High Cohesion Combined With Loose Coupling: able to change and deploy without affecting other services\n Presenting an API: REST is common but modern transport mechanism are also valid\n Unique Source of Identification: There need to be an id(e.g ApplicationID) which uniquely identifies a record of information\n Data Storage Segregation: Access to data should be owned by the service\n Traffic Management: Make sure service can communicate when its overloaded and can terminate calls that take long to respond\n Automating The Process: Self-deploy service without any intervention (CI/CD)\n Minimal Database Tables (Preferably Isolated Tables)\n Constant Monitoring\n  Spring Boot Security Now that we are going to create applications which can be accessed by the outside world, security becomes important because you don\u0026rsquo;t want people having access to information which they are not allowed to have.\nSpring Security has an architecture that is designed to separate authentication from authorization, and has strategies and extension points for both.\nSpring Security is a framework that provides authentication, authorization, and protection against common attacks. With first class support for both imperative and reactive applications, it is the de-facto standard for securing Spring-based applications.\nDifference Between Authorization and Authentication Features  Comprehensive and extensible support for both Authentication and Authorization\n Protection against attacks like session fixation, clickjacking, cross site request forgery, etc\n Servlet API integration\n Optional integration with Spring Web MVC\n  you will need\ndependencies { compile \u0026quot;org.springframework.boot:spring-boot-starter-security\u0026quot; } @Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter { //override configuration // override userDetailsService }  With this dependencies you get a lot out of the box and it also provides basic security with little configuration. You can override some of these behaviors by using WebSecurityConfigurerAdapter\nSpring Boot Caching We live in a word where data is not so cheat and access to wifi is currently not accessible to everyone. More so we don\u0026rsquo;t have as many people using smart devices which makes using advanced technology a bit of a struggle. It is our responsibility as software developers to know these limitation so we can create software that is thoughtful. Meaning creating applications that don\u0026rsquo;t require a lot of processing power, high speed and if possible even be able to work offline. Caching is the first, no-brainer step you can take\nWhat is Caching Caching is a mechanism to enhance the performance of a system. It is a temporary memory that lies between the application and the persistent database. Cache memory stores recently used data items in order to reduce the number of database hits as much as possible. from\nTypes of caching  In-memory caching: Most frequently used cached, stored in RAM(Random Access Memory) and thus fast to access\n Database caching: Databases have cache by default and this can be manipulated to show significant results\n Web server caching: Caching request and responses to server at API level with the help of Reverse proxies\n CDN(Content Delivery Network) caching: a CDN will reduce the load on an application origin and improve the experience of the requestor by delivering a local copy of the content from a nearby cache edge, or Point of Presence (PoP).\n  Spring boot Caching Annotation @EnableCaching: It enables Spring’s annotation-driven cache management capability.\n@Cacheable: It is used on the method level to let spring know that the response of the method are cacheable\n@CacheEvict: It is used when we need to evict (remove) the cache previously loaded of master data\norg.springframework.boot:spring-boot-starter-cache @Service public class StudentService { @Cacheable(\u0026quot;student\u0026quot;) public Student getStudentByID(String id) { try { System.out.println(\u0026quot;Going to sleep for 5 Secs.. to simulate backend call.\u0026quot;); Thread.sleep(1000*5); } catch (InterruptedException e) { e.printStackTrace(); } return new Student(id,\u0026quot;Sajal\u0026quot; ,\u0026quot;V\u0026quot;); } }  Resource https://dzone.com/articles/9-fundamentals-to-a-successful-microservice-design\nhttps://techbeacon.com/app-dev-testing/5-fundamentals-successful-microservice-design\nhttps://www.javatpoint.com/advantges-and-disadvantages-of-microservices\nhttps://www.javatpoint.com/challenges-of-microservices-architecture\nhttps://www.marcobehler.com/guides/java-microservices-a-practical-guide\nhttps://spring.io/guides/topicals/spring-security-architecture\nhttp://www.differencebetween.net/technology/difference-between-authentication-and-authorization/#:~:text=Authentication%20confirms%20your%20identity%20to,access%20is%20allowed%20or%20not.\nhttps://dzone.com/articles/secure-a-spring-boot-app-with-spring-security-and\nhttps://www.baeldung.com/spring-security-multiple-auth-providers\nhttps://docs.spring.io/spring-security/site/docs/5.3.1.BUILD-SNAPSHOT/reference/html5/\nhttps://www.javainuse.com/spring/sprboot_sec\nhttps://howtodoinjava.com/spring-boot2/spring-boot-cache-example/ - Go through this tutorial\nhttps://dzone.com/articles/introducing-amp-assimilating-caching-quick-read-fo\nhttps://aws.amazon.com/caching/cdn/\n"
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-boot/part-3/",
	"title": "Introduction to Spring Boot - part 3",
	"tags": [],
	"description": "",
	"content": " We are going to focus on creating a REST api that will serve as a end point to our sping boot java application.\nService Continuing with PROJECTS: Introduction to Spring Boot - part 1 for the User we are going to expose a REST endpoint to the application and we will use test to see if the application does what we want it to.\nStep 1\nCreate a Controller Class based on the spring MVC infrastructure. This will be used to expose the endpoint.\npackage controller; public class UserController { }  Step 2\nAdd two spring annotations to indicate: 1 - The REST Controller above the class declaration. 2 - The route URL extension to reach this controller.\npackage controller; //add here. //add your specified route as input parameter to your annotation. public class UserController { }  Step 3\nAdd the annotation to your UserServiceImpl that indicated class previously created in PROJECTS: Introduction to Spring Boot - part 1 is a service.\n//add annotation here. public class UserServiceImpl{ addUser(name, surname) // should call insert(name, surname) from FakeRepo and print to console '[name] entered' removeUser(Id) // should call delete(id) from FakeRepo and print to console '[name] removed' getUser(Id) // should call find(id) from FakeRepo and print to console 'hello [name]' [name] - replaced with actual name } }  Step 4\nSpecify all your methods inside the UserServiceInterface then implement all methods in the UserServiceImpl.\nStep 5\n1 - Do the following in the UserController.\n2 - Use the Put, Delete, Get spring annotations to map the respective services.\n3 - Do not forget to mark the input parameter as a Request Body if you are receiving data in the body of the object.\n4 - If you are receiving the data as url parameter - mark variable as a Path Variable.\n5 - If you are receiving the data as a query parameter - mark variable as a query parameter.\nExample\n\t@PutMapping public ResponseEntity\u0026lt;String\u0026gt; update(@RequestBody Customer customer) { customerService.update(customer); ResponseEntity\u0026lt;String\u0026gt; responseEntity = new ResponseEntity(\u0026quot;Success!\u0026quot;, HttpStatus.NO_CONTENT); return responseEntity; }  Step 5\nDo not forget to write integration tests for the endpoints(addUser, getUserById, removeUser) in your controller using MockMVC or TestRestTemplate.\n All CRUD operations defined in your services should be accompanied by corresponding unit test, using the relevant spring annotations as in PROJECTS: Introduction to Spring Boot - part 1 .  Side Notes 1 - Please remember to test your end points using postman. If you need help with using postman access the using postman link.\n2 - Add at least one image of a successful request using postman. 3 - The first resource link shows you everything you need to do to complete this project from start to finish if you struggle with any step. 4 - This project assumes you have set up your Postgress connection as it is an extension of part1 and part2 of the Spring Boot Series. 5 - Please create a new branch labeled part3 Happy Coding\u0026hellip;\nResources https://dzone.com/articles/expose-restful-apis-using-spring-boot-in-7-minutes https://www.google.com/search?q=using+postman\u0026amp;oq=using+postman\u0026amp;aqs=chrome..69i57j0l7.2559j0j7\u0026amp;sourceid=chrome\u0026amp;ie=UTF-8#kpvalbx=_WISeXrbFAZaY1fAPp6eFmA449 https://dzone.com/articles/creating-a-rest-api-with-java-and-spring https://github.com/nikeshpathak/customer-demo-webservice/blob/master/src/main/java/com/example/customer/demo/controller/CustomerCtrl.java\n"
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-boot/part-3/",
	"title": "Introduction to Spring Boot - part 3",
	"tags": [],
	"description": "",
	"content": " Two of the most commonly used Api architectures currently in use are REST and SOAP.\nWhat is REST (Representational State Transfer)? REST is an architecture used in web applications that make it easier for different systems to communicate with each other. They are referred to as stateless, which means that the current state of the system calling the REST api, has no influence on the functionality of the Api. REST was created to fix some of the shortcomings that the SOAP architecture has.\nThe most common REST endpoints are the following:\nGET - Used to fetch data POST - Used to create a new resource PUT - Used to update a specific resource DELETE - Used to remove a specific resource\nWhat is SOAP (Simple Object Access Protocol) ? SOAP is an architecture that makes use of XML for queries. It was created before REST to replace systems at that time that made use of binary messaging.\nWe\u0026rsquo;ll focus on REST in the context of this document. Here is a list of resources where you can find tutorials on the endpoint types. As part of the examples, let\u0026rsquo;s assume the url to be https://www.myapi.com\nGetMapping  GET Endpoint.   @GetMapping(\u0026quot;/employees\u0026quot;) List\u0026lt;Users\u0026gt; all(String item) { return listOfUsers; }  Here is a breakdown of the snippet above: - @GetMapping: Tells the API that this method is a Get Endpoint. - \u0026ldquo;/employees\u0026rdquo;: Describes what is appended to the url in order to reach the endpoint. This endpoint is reached using the following url: https://www.myapi.com/employees. - The endpoint returns a List of Users. - item: The variable being passed into the method.\nPostMapping  POST Endpoint.  @PostMapping(value = \u0026quot;/posts\u0026quot;) public UserRest createUser(@RequestBody UserDetailsRequestModel requestUserDetails) { UserRest returnValue = new UserRest(); UserDto userDto = new UserDto(); BeanUtils.copyProperties(requestUserDetails, userDto); UserDto createdUser = userService.createUser(userDto); BeanUtils.copyProperties(createdUser, returnValue); return returnValue;  Here is a breakdown of the snippet above: - @PostMapping: Tells the API that this method is a POST Endpoint. - \u0026ldquo;/posts\u0026rdquo;: Describes what is appended to the url in order to reach the endpoint. This endpoint is reached using the following url: https://www.myapi.com/posts. - The endpoint returns a List of Users. - @RequestBody: The data model that was sent through the POST request. The requestbody is usually sent to the endpoint in a JSON string format.\nPutMapping  PUT Endpoint.  @PutMapping(value = \u0026quot;/contacts/{contactId}\u0026quot;) public ResponseEntity\u0026lt;Contact\u0026gt; updateContact(@RequestBody Contact contact, @PathVariable long contactId) { ... return ... }  Here is a breakdown of the snippet above: - @PutMapping: Tells the API that this method is a PUT Endpoint. - \u0026ldquo;/contacts/{contactId}\u0026rdquo;: Describes what is appended to the url in order to reach the endpoint. This endpoint is reached using the following url: https://www.myapi.com/posts/1234-1234-23432. - {} indicates that something in the path is a variable. So it\u0026rsquo;s not a fied value. - The endpoint returns a List of Users. - @RequestBody: The data model that was sent through the POST request. The requestbody is usually sent to the endpoint in a JSON string format.\nPatchMapping  PATCH Endpoint.  @PatchMapping(\u0026quot;/patch\u0026quot;) public @ResponseBody ResponseEntity\u0026lt;String\u0026gt; patch() { return new ResponseEntity\u0026lt;String\u0026gt;(\u0026quot;PATCH Response\u0026quot;, HttpStatus.OK); }  Here is a breakdown of the snippet above: - @PatchMapping: Tells the API that this method is a PATCH Endpoint. - \u0026ldquo;/patch\u0026rdquo;: Describes what is appended to the url in order to reach the endpoint. This endpoint is reached using the following url: https://www.myapi.com/patch.\nDeleteMapping  DELETE Endpoint.  @DeleteMapping(value = \u0026quot;/posts/{id}\u0026quot;) public ResponseEntity\u0026lt;Long\u0026gt; deletePost(@PathVariable Long id) { var isRemoved = postService.delete(id); return new ResponseEntity\u0026lt;\u0026gt;(id, HttpStatus.OK); }  Here is a breakdown of the snippet above: - @DeleteMapping: Tells the API that this method is a DELETE Endpoint. - \u0026ldquo;/contacts/{contactId}\u0026rdquo;: Describes what is appended to the url in order to reach the endpoint. This endpoint is reached using the following url: https://www.myapi.com/posts/1234-1234-23432. - {} indicates that something in the path is a variable. So it\u0026rsquo;s not a fied value.\nHow can a developer test endpoints Using programs such as Postman, a developer can easily insert the details of the endpoint required and view the results the api returns. It is a widely used software in the development community.\nResources https://www.guru99.com/soap-simple-object-access-protocol.html. https://www.sitepoint.com/developers-rest-api/ https://spring.io/guides/tutorials/bookmarks/ https://www.youtube.com/watch?v=_Py89z5Reus http://www.appsdeveloperblog.com/postmapping-requestbody-spring-mvc/ http://zetcode.com/spring/postmapping/ http://www.appsdeveloperblog.com/putmapping-spring-mvc/ https://www.programcreek.com/java-api-examples/index.php?api=org.springframework.web.bind.annotation.PutMapping https://www.javaguides.net/2018/11/spring-getmapping-postmapping-putmapping-deletemapping-patchmapping.html https://www.javaguides.net/2018/09/spring-boot-2-hibernate-5-mysql-crud-rest-api-tutorial.html http://zetcode.com/spring/deletemapping/ https://www.concretepage.com/spring-boot/spring-boot-rest-example https://www.postman.com/\n"
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-boot/part-4/",
	"title": "Introduction to Spring Boot - part 4",
	"tags": [],
	"description": "",
	"content": " In this project we will consume a REST API and a SOAP web service in our User service repository.\nREST API Step 1\nFamiliarize yourself with the git api found here https://developer.github.com/v3/ learn which endpoint to get your repo, commits maybe branches etc. Try it out or postman or curl on the terminal\nStep 2\nNow we are going to consume the api in our spring boot application using restTemplates as per topic work. I would like to se\n I would like you to specifically return the v3 version of the api (Hint: Read more on how to set headers in RestTemplate) A list of all your repos - output on the console A list of commits in 1 repo of your choice - output on teh console  SOAP WEB SERVICE Step 1\nClone the repo found here https://github.com/spring-guides/gs-producing-web-service and open the complete folder not the entire repo. Review it on a high level this will be the wsdl project we are going to use to learn how to consume a wsdl application. DO NOT ADD THIS PROJECT AS PART OF YOUR SUBMISSION(this is so that you can generate the files)\nChange the application to sun on port 9090 by adding this to the properties file\nserver.port=9090  Run the application you should be able to do to the below url,\nhttp://localhost:9090/ws/countries.wsdl  and see this\n\u0026lt;wsdl:definitions xmlns:wsdl=\u0026quot;http://schemas.xmlsoap.org/wsdl/\u0026quot; xmlns:sch=\u0026quot;http://spring.io/guides/gs-producing-web-service\u0026quot; xmlns:soap=\u0026quot;http://schemas.xmlsoap.org/wsdl/soap/\u0026quot; xmlns:tns=\u0026quot;http://spring.io/guides/gs-producing-web-service\u0026quot; targetNamespace=\u0026quot;http://spring.io/guides/gs-producing-web-service\u0026quot;\u0026gt; \u0026lt;wsdl:types\u0026gt; \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; elementFormDefault=\u0026quot;qualified\u0026quot; targetNamespace=\u0026quot;http://spring.io/guides/gs-producing-web-service\u0026quot;\u0026gt; \u0026lt;xs:element name=\u0026quot;getCountryRequest\u0026quot;\u0026gt; \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; // ....  keep this project running in the background\nStep 2 In your terminal navigate to YourUserServiceRepo/src/main/java and run this command\nwsimport -keep -p com.nameOfYourPackage.wsdl http://localhost:9090/ws/countries.wsdl  Step 3\nNow we start to do the real work\n Get the currency for United Kingdom: Output  Currency: GBP   Get the capital of United Kingdom: Output  Capital: London   Get the population of United Kingdom: Output  Population: 63705000  Happy Hacking!!! "
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-boot/part-4/",
	"title": "Introduction to Spring Boot - part 4",
	"tags": [],
	"description": "",
	"content": " Consuming an API refers to the process of calling an API from an application. The methods available for an application to consume an API are mapped to the API itself. For instance, if the API does not contain a GET endpoint, then the application can\u0026rsquo;t consume the API using a Http(s) GET call.\nYou can either consume and existing SOAP service or a REST api and in this topic we are going to cover both. Lets jump into it.\nConsume a REST API As we now know in development there is always more than one way to do something and this applies to consuming apis as well. In a spring application you can use 2 of the most popular rest clients which are:\n HttpClient: Sends request to and gets response from server over HTTp protocol and takes care of the following as well\n HTTP protocol interception\n Secure HTTP connections - SSL/TLS\n HTTP proxy server handling\n Handles HTTP cookies\n Connection pooling for different hosts, keep alive strategy,\n multi-threaded request execution\n  Rest Template: is the central Spring class for client-side HTTP access. Conceptually, it is very similar to the JdbcTemplate, JmsTemplate, and the various other templates found in the Spring Framework and other portfolio projects. This means, for instance, that the RestTemplate is thread-safe once constructed, and that you can use callbacks to customize its operations. It uses HttpClient under the hood.\n  Now that we have covered those its time to look into what makes up a connection\nWhat you might need to learn first about consuming a REST api is the terminology used to describe the parts of the request\n URl: Uniform Resource Locator, is a reference to a web resource that specifies its location on a computer network. (e.g http://localhost:8080)\n Body: The body of an Http call refers to data that\u0026rsquo;s being sent to the API that is not displayed in the url. A body is usually sent using POST-, PUT-, and PATCH-methods. The body must match what is expected in the API method. In Spring Boot, it must match the @RequestBody variable.\n Headers: Headers are additional information passed along in the Http request. Usual use cases for Headers are: - Passing through Authentication tokens. - Describing the format of the request body.\n  Now Consuming an API using REST\nWe are going to use the rest template to connect to out API. Imagine the API is hosted at the following url: http://www.myapi.com\nGET call: Used to fetch data from an API If the GET endpoint is located at http://www.myapi.com/getendpoint and the endpoint is expecting a String variable called id, then the GET call would look like the following:\nRestTemplate restTemplate = new RestTemplate(); String userResourceUrl = \u0026quot;https://www.myapi.com/getendpoint\u0026quot;; ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.getForEntity(userResourceUrl + \u0026quot;/1\u0026quot;, String.class); // Check if the status code is successful, since we get the entire response object assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));  Cause we have the entire response object we can do something a bit more cleaver when serializing objects from the response for example\npublic class User implements Serializable { private long id; private String name; private String surname // standard getters and setters and constructor } // Now we can do a get by using getForObject() and map it to User DTO User user = restTemplate .getForObject(userResourceUrl + \u0026quot;/1\u0026quot;, user.class);  POST call: Used to save data If the POST endpoint is located at http://www.myapi.com/postendpoint and is expecting a model containing a name and surname String variable then the POST call would look like the following:\n RestTemplate restTemplate = new RestTemplate(); String userResourceUrl = \u0026quot;https://www.myapi.com/postendpoint\u0026quot;; HttpEntity\u0026lt;Foo\u0026gt; request = new HttpEntity\u0026lt;\u0026gt;(new User(\u0026quot;Bob\u0026quot;, \u0026quot;Khumalo\u0026quot;)); User user = restTemplate.postForObject(UserResourceUrl, request, User.class);  DELETE call: Removing a record If the DELETE endpoint is located at https://www.myapi.com/mydeleteendpoint, the DELETE endpoint would look like the following:\nThe DELETE call works similar to the GET call in the way that it passes data through to the API. The parameter is sent in the Url and not in the request body.\nRestTemplate restTemplate = new RestTemplate(); String userResourceUrl = \u0026quot;https://www.myapi.com/deleteendpoint\u0026quot;; long id = 2; String entityUrl = userResourceUrl + \u0026quot;/\u0026quot; + id; restTemplate.delete(entityUrl); // You can do a get of the same ID afterwards to see if still exist  Consuming SOAP Web Service This is the second kind of web service you mights be required to consume which is more involved that the REST API.\nFirst lets learn some terminology of all the things you will working on\n wsdl: web service description language - is an XML-based file that basically tells the client application what the web service does. The WSDL file is used to describe in a nutshell what the web service does and gives the client all the information required to connect to the web service and use all the functionality provided by the web service.\n Below is the general structure of a WSDL file\n Definition: It defines the name of the web service.\n TargetNamespace: Is a convention of XML Schema that enables the WSDL document to refer to itself\n DataTypes: Defines the types for input and output\n Messages: Defines the data elements for each operation\n Porttype: Describes the operations that can be performed and the messages involved.\n Bindings: Defines the protocol and data format for each port type.\n service: A collection of related endpoints.\n   xsd: is a file used to define what elements and attributes may appear in an XML document. It also defines the relationship of the elements and what data may be stored in them\n  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u0026lt;wsdl:definitions xmlns:wsdl=\u0026quot;http://schemas.xmlsoap.org/wsdl/\u0026quot; xmlns:sch=\u0026quot;https://medium.com/article\u0026quot; xmlns:soap=\u0026quot;http://schemas.xmlsoap.org/wsdl/soap/\u0026quot; xmlns:tns=\u0026quot;https://medium.com/article\u0026quot; targetNamespace=\u0026quot;https://medium.com/article\u0026quot;\u0026gt; \u0026lt;wsdl:types\u0026gt; \u0026lt;xsd:schema xmlns:xsd=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; elementFormDefault=\u0026quot;qualified\u0026quot; targetNamespace=\u0026quot;https://medium.com/article\u0026quot;\u0026gt; \u0026lt;xsd:element name=\u0026quot;getArticleRequest\u0026quot;\u0026gt; \u0026lt;xsd:complexType\u0026gt; \u0026lt;xsd:sequence\u0026gt; \u0026lt;xsd:element name=\u0026quot;id\u0026quot; type=\u0026quot;xsd:int\u0026quot;/\u0026gt; \u0026lt;/xsd:sequence\u0026gt; \u0026lt;/xsd:complexType\u0026gt; \u0026lt;/xsd:element\u0026gt; \u0026lt;xsd:element name=\u0026quot;getArticleResponse\u0026quot;\u0026gt; \u0026lt;xsd:complexType\u0026gt; \u0026lt;xsd:sequence\u0026gt; \u0026lt;xsd:element name=\u0026quot;article\u0026quot; type=\u0026quot;tns:article\u0026quot;/\u0026gt; \u0026lt;/xsd:sequence\u0026gt; \u0026lt;/xsd:complexType\u0026gt; \u0026lt;/xsd:element\u0026gt;  The first most important process of consuming a wsdl is generating classes from the wsdl which can be used in the project. We have multiple ways to consume wsdl but we will explore 1 which is Jax-WS if you would like you can also checkout spring-ws.\n Jax-WS: Is a technology for building web services and clients that communicate using XML e.g SOAP\n Spring-WS: Aims to facilitate contract-first SOAP service development, allowing for the creation of flexible web services using one of the many ways to manipulate XML payloads\n  Jax-WS (Java API for XML Web Services) The process of generating wsdl can be done as a build task so it execute at run time. You want to be able to do this so that your application can be deployed and function on different environments outside your local setting.\nThis process is quite complex and lengthy but you can checkout the example. I have added some code snippet and explanation below for some of the sections.\nBasic gradle dependencies this will be coupled with a build task which points to the source and destination of the wsdl and generated files\nimplementation ('org.springframework.boot:spring-boot-starter-web-services') { exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat' } implementation 'org.springframework.ws:spring-ws-core' // For Java 11: implementation 'org.glassfish.jaxb:jaxb-runtime' compile(files(genJaxb.classesDir).builtBy(genJaxb)) jaxb \u0026quot;com.sun.xml.bind:jaxb-xjc:2.1.7\u0026quot;  To create a web service client you will need to extend WebServiceGatewaySupport and put your operations in there\nimport com.medium.user.GetUserRequest; import com.medium.user.GetUserResponse; import org.springframework.ws.client.core.support.WebServiceGatewaySupport; public class UserClient extends WebServiceGatewaySupport { public GetUserResponse getUser(int id){ GetUserRequest getUserRequest = new GetUserRequest(); getUserRequest.setId(id); return (GetUserResponse) getWebServiceTemplate().marshalSendAndReceive(getUserRequest); } }  Then you need to configure Marshalling(refers to the process of converting the data or the objects into a byte-stream), Spring Web Service uses Spring Framework’s OXM module (mapping XML data), which has the Jaxb2Marshaller to serialize and deserialize XML requests.\nimport org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.oxm.jaxb.Jaxb2Marshaller; @Configuration public class UserConfiguration { @Bean public Jaxb2Marshaller marshaller() { Jaxb2Marshaller marshaller = new Jaxb2Marshaller(); // this package must match the package in the \u0026lt;generatePackage\u0026gt; specified in // gradle marshaller.setContextPath(\u0026quot;com.example.consumingwebservice.wsdl\u0026quot;); return marshaller; } @Bean public UserClient userClient(Jaxb2Marshaller marshaller) { UserClient client = new UserClient(); client.setDefaultUri(\u0026quot;http://localhost:8080/ws\u0026quot;); client.setMarshaller(marshaller); client.setUnmarshaller(marshaller); return client; } }  There is however a more simpler way which is more suited for our use case which is generating the files local and testing them. I can imagine that you can add this command in a build script that run on a deployed application but maybe that exploration is for another day. To do this we need to know what wsimport is.\n wsimport: Available in you JDK bin directory, is used to parse an existing Web Services Description Language (WSDL) file and generate required files for web service client to access the published web services.  To generate the classes you would do something like\nwsimport -keep -p com.mypackage.wsdl http://localhost:8080/ws/countries.wsdl  -keep: Store the files in disk.\n-p: specifies target package (where we are getting the wsdl from), this one http://localhost:8080/ws/countries.wsdl is hosted \u0026lsquo;remotely\u0026rsquo;.\nNow we have the classes in the this package com.mypackage.wsdl we can start using it to communicate with our web service and its as simple as this\n public class EmployeeServiceClient { public static void main(String[] args) throws Exception { URL url = new URL(\u0026quot;http://localhost:8080/employeeservice?wsdl\u0026quot;); EmployeeService_Service employeeService_Service = new EmployeeService_Service(url); EmployeeService employeeServiceProxy = employeeService_Service.getEmployeeServiceImplPort(); List\u0026lt;Employee\u0026gt; allEmployees = employeeServiceProxy.getAllEmployees(); } }  References https://spring.io/blog/2009/03/27/rest-in-spring-3-resttemplate\nhttp://zetcode.com/java/httpclient/\nhttps://mkyong.com/java/java-11-httpclient-examples/\nhttps://techndeck.com/put-request-with-json-using-java-11-httpclient-api/\nhttps://www.dariawan.com/tutorials/java/introduction-to-java-11-standarized-http-client-api/\nhttps://techndeck.com/delete-request-using-java-11-httpclient-api/\nhttps://www.baeldung.com/rest-template\nhttps://www.tutorialspoint.com/java/java_serialization.htm\nhttps://crunchify.com/basic-wsdl-structure-understanding-wsdl-explained/\nhttps://spring.io/guides/gs/consuming-web-service/#initial\nhttps://www.guru99.com/wsdl-web-services-description-language.html\nhttps://fileinfo.com/extension/xsd\nhttps://medium.com/swlh/consume-soap-web-services-with-spring-boot-4ea8e1ad7b16\nhttps://docs.spring.io/spring-ws/site/reference/html/client.html\nhttps://mkyong.com/webservices/jax-ws/jax-ws-wsimport-tool-example/\nhttps://www.baeldung.com/jax-ws\nhttps://www.w3schools.com/xml/xml_wsdl.asp\n"
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-infrastructure/",
	"title": "Introduction to Spring Infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-infrastructure/",
	"title": "Introduction to Spring Infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/introduction-to-spring-infrastructure/",
	"title": "Introduction to Spring Infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-infrastructure/part-1/",
	"title": "Introduction to Spring Infrastructure part 1",
	"tags": [],
	"description": "",
	"content": "nb Dependency Injection + ioC containers\n"
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-infrastructure/part-1/",
	"title": "Introduction to Spring Infrastructure part 1",
	"tags": [],
	"description": "",
	"content": "nb Dependency Injection + ioC containers\n"
},
{
	"uri": "/tech-department/workshops/java-specific/introduction-to-spring-infrastructure/part-1/",
	"title": "Introduction to Spring Infrastructure part 1",
	"tags": [],
	"description": "",
	"content": "nb Dependency Injection + ioC containers\n"
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-infrastructure/part-2/",
	"title": "Introduction to Spring Infrastructure part 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-infrastructure/part-2/",
	"title": "Introduction to Spring Infrastructure part 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/introduction-to-spring-infrastructure/part-2/",
	"title": "Introduction to Spring Infrastructure part 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/introduction-to-spring-infrastructure/part-3/",
	"title": "Introduction to Spring Infrastructure part 3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/introduction-to-spring-infrastructure/part-3/",
	"title": "Introduction to Spring Infrastructure part 3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/introduction-to-spring-infrastructure/part-3/",
	"title": "Introduction to Spring Infrastructure part 3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/intro-to-tilde/",
	"title": "Introduction to Tilde",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/intro-to-typescript/",
	"title": "Introduction to Typescript",
	"tags": [],
	"description": "",
	"content": "As usual, the official docs say it best :)\nTake note of that fact: IF you want to learn something new then the official documentation usually has the best and most up to date tutorial. This isn\u0026rsquo;t always the case, but it\u0026rsquo;s always a great place to look.\nStart here: https://www.typescriptlang.org/docs/handbook/basic-types.html Familiarise yourself with the entire handbook. Start from the top.\nSince you are already a coder it should all feel very familiar.\n"
},
{
	"uri": "/tech-department/topics/intro-to-asserive-programming/",
	"title": "Introduction to assertive programming",
	"tags": [],
	"description": "",
	"content": " You\u0026rsquo;ve all heard of \u0026ldquo;defensive driving\u0026rdquo;, right? When driving a car you do certain things if you want to stay alive. You maintain a safe following distance, you check your mirrors and blind spot, you watch your speed. And why do you do that?\nBecause mistakes happen. Sometimes the road is bad, sometimes there\u0026rsquo;s a cow in the road, sometimes the other drivers on the road are inatentive. Sometimes you are inattentive.\nOk. Now let\u0026rsquo;s talk about code. Code is written by humans for humans. Humans are prone to human error. Humans make mistakes all the time, there will be typos, off-by-one errors, assumptions and all sorts of weird nonesense.\nAssertive programming is one way to do defensive programming. It has loads of benefits.\nFirst consider the following code:\nassert refund_amount \u0026gt; 0, f\u0026quot;refund amound needs to be positive, this is invalid {refund_amount}\u0026quot;  This is written in Python, but other languages have their own way of doing the same kind of stuff. Basically what this does is raise/throw an Exception/Error when a certain condition is not met. The error message is nice and descriptive.\nThis is good for a few different things:\n sanity checking around human error and input validation these assertions are useful as documentation  Also, in general, the earlier you find a problem the cheaper it it to fix. This is a fact of life. Seriously.\nIn terms of coding, let\u0026rsquo;s talk a bit more about the refund_amount assertion. Imagine a piece of software that is all about shopping. Occasionaly users require refunds. What might happen if somehow a negative refund amount slips into the system? It might show up as something weird on a frontend and make the end users distrust the system, then the backend devs will blame the frontend devs, maybe the accounting system will be negatively effected (of course the frontend devs will be blamed for this too, at least for a little while), the refund wont be paid to the user on time, and lotd of other aweful nasty stuff.\nThat one little line of code prefents all sorts of crazy stuff from happening in the code.\nAssertions save lives!\nResources This excellent article talks about the benefits of failing fast and loudly: https://www.martinfowler.com/ieeeSoftware/failFast.pdf\nThis discussion on Stackoverflow is about where assertions are inappropriate. It makes use of heavy wordds like public methods and stuff like that. Basically a shortcut to doing this right is thinking about who is going to see your error message and how the error message will be useful to them. https://stackoverflow.com/questions/13832487/why-should-assertions-not-be-used-for-argument-checking-in-public-methods\nJava Resources  https://www.geeksforgeeks.org/assertions-in-java/  "
},
{
	"uri": "/tech-department/topics/ncit/intro-to-gnomio/",
	"title": "Introduction to gnomio",
	"tags": ["ncit"],
	"description": "",
	"content": "   "
},
{
	"uri": "/tech-department/topics/intro-to-pair-programming/",
	"title": "Introduction to pair programming",
	"tags": [],
	"description": "",
	"content": " What is it? Pair programming is when you get two (or three) programmers to work on the same piece of code on the same computer. Only one person is coding at a time and the rest of the people are being helpful in some way.\nBut why? Think about what can happen if you have multiple brains working on the same problem. There are lots of benefits.\n the coders can all leverage their own problem-solving strengths to solve the same problem, so the problem will get solved well the coders will learn from each other! You get to grow and help your peers grow. How cool is that? the coders catch each others mistakes and assumptions before they get into the code base  This wonderful article gives a bit more detail on the benefits of pair programming.\nHow to do it Pair programming works best if everyone gets a turn at the keyboard, team member roles get mixed around, and communication is prioritized. There are a few different approaches to getting this right:\nPing Pong This kind of pair programming works best when there is a natural cadence to the coding process. Eg: Alice writes a little function, then Bob writes a little functio, etc.\nThis works suuuper well when it comes to Test Driven Development (we cover TDD later in the course)\nDriver-navigator Basically in this form, one person is the driver (they drive the computer), and the other person gets to direct their efforts. The driver is writing all the code so they get to ask questions and suggest corrections if they think something is a bad idea.\nUnstructured In the absence of a plan, this tends to happen. It sounds like a terrible idea at first (if you fail to plan, you plan to fail) but it can work pretty well in some situations.\n if the coding pair is evenly matched if the coding pair already know how to work together if the pair have compatible styles of communication and code  While you are still learning how to do this well, rather stick to one of the other styles.\nHow to do it well  take turns. Set a timer if you have to try to communicate constantly and clearly. Communication can be hard but it can also be a super-power. Use this oppertunity to practice your communication skills always be learning. Everyone has something to teach you. If you feel frustrated by your partner\u0026rsquo;s coding abilities then use this opportunity to learn how to explain yourself better (this skill will serve you well). Teamwork is really really important in life so learn how to team. you should all understand every line of code. You should be in agreement that the code is good quality and clean  Extra reading https://medium.freecodecamp.org/want-to-be-a-developer-you-should-probably-be-pair-programming-2c6ec12c4866\n"
},
{
	"uri": "/tech-department/topics/intro-to-unit-tests-with-mocha/",
	"title": "Introduction to unit tests with Mocha",
	"tags": [],
	"description": "",
	"content": " https://github.com/dwyl/learn-tdd https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/ https://codeburst.io/javascript-unit-testing-using-mocha-and-chai-1d97d9f18e71 https://mochajs.org/ https://medium.com/@williamjoshualacey/unit-testing-with-mocha-fda6a6f360c6 https://blog.logrocket.com/a-quick-and-complete-guide-to-mocha-testing-d0e0ea09f09d  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-web-design/",
	"title": "Introduction to web design",
	"tags": [],
	"description": "",
	"content": " There is a lot to be said about web design. Before you can get into it you need some basic tools.\nYou will need to have basic familiarity of HTML and CSS if you want to make anything that looks good. Focus on understanding the basics for now.\nGuidelines User interfaces are for users. Think about your users and how they will interact with your work.\n Make sure your front-end is discoverable. What would a new user think to do when they arrive for the first time? Make sure that your front-end is learnable. If you need your users to take novel actions make sure that the users can remember how to do those actions later. The user is always right. If a user gets confused by your website then it means that your website is confusing. Swallow your pride and accept criticism Always have an escape strategy. If a user clicks on a button and navigates somewhere strange, they should be able to go back Don\u0026rsquo;t use too many colors. And remember that some of your users will be color-blind be consistent make sure that the most important parts of your site look important. Make them big, put them at the top. Guide your users to interact with the right components Make desired actions easy. Imagine two e-commerce sites with a similar style, selling similar items. On site A the user needs to click the mouse 10 times to make a purchase, on site B the user needs to click the mouse 3 times to make a purchase. Site B will make more sales. KISS. Don\u0026rsquo;t do this Familiarity breeds trust. If your website looks familiar then people will take it seriously https://www.orbitmedia.com/blog/web-design-standards/ https://www.pagecloud.com/blog/web-design-guide  Responsive design A responsive web site is one that changes shape so that it looks and feels good on many different devices. Since cellphones are so powerful and ubiquitous these days it is usually considered best practice to design your site in a \u0026ldquo;mobile first\u0026rdquo; way. This means that you should first make sure that your site works well on a phone, then you make sure it works well on larger devices.\nThese links will teach you the basics\n https://www.w3schools.com/html/html_responsive.asp https://www.w3schools.com/css/css_rwd_intro.asp Learn UI design fundamentals with this free one-hour course  Accessibility  A developer\u0026rsquo;s guide to web design for non-designers Design Course - Beginner\u0026rsquo;s Web Design Dev Ed - Creating a website from scratch  Principles of design  How To Plan For a Website design-101-for-developers 7 principles of design for coders https://www.w3.org/WAI/fundamentals/accessibility-intro/  Tools for design  Figma - Open source wireframing application  "
},
{
	"uri": "/tech-department/topics/java-specific/jdbc-templates/",
	"title": "JDBC templates",
	"tags": [],
	"description": "",
	"content": " Both Springboot and VanillaJS require a middle man to be able to talk to a database. This is where JDBC comes in. It can be used with multiple programming languages. Javascript languages tend to make more use of ODBC (Open Database Connectivity) whereas JDBC was created with Java in mind. The 2 are interchangeable.\nSpringboot has no way of directly communicating with a database, it requires a JDBC driver.\nJDBC - Java Database Connectivity JDBC is an API that consists of interfaces used to access relational databases such as SQL.\nNote: A relational database is one where the database can recognise relationships/links between the data saved in it.\nJDBC allows a Java application to connect to a SQL server and run SQL scripts to work with the databases on the server and manipulate the tables and the data stored within them.\n Example: Connect to a database server and fetch data from the database.  How to store data\nlong id = 1; string name = \u0026quot;umuzi\u0026quot; jdbcTemplate.update(\u0026quot;insert into User (id, name) values(?,?)\u0026quot;, new Object[]{id,name});  JPA - Java Persistence API JPA allows an individual to communicate with a database without having to create SQL queries. It bridges the gap between SQL and Java. For instance, you can create a modal and by adding certain annotations to it, you can create/alter the database.\nHere\u0026rsquo;s a quick tutorial that outlines some of the functionality that JPA provides.\nIn User.java\n@Entity public class User { @Id private int id; private String firstName; private String lastName; // Constructors, Getter and Setters }  It also comes with a more convenient way to add data into the database by the help of jpsRepository\nuser = new User(2, \u0026quot;umuzi\u0026quot;); userRepository.save(user);  Hibernate JPA provides the interface (the set of rules that need to be followed). But alone it does nothing. It needs to be implemented. This is where Hibernate comes in.\nWithout JPA though, Hibernate can still be used to communicate with the database in a similar manner, as can be seen here.\nResources  JDBC documentation. Video tutorials.\n JPA Documentation.\n Hibernate Documentation.\n JPA with Hibernate video tutorials.\n  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/",
	"title": "JS and Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/code-review/may-review-c13-c14f/",
	"title": "JS code review May 2019",
	"tags": [],
	"description": "",
	"content": " Use the git From the command line. Seriously. For all further projects forever.\nThe next person who gives us a drag and drop upload will be shamed with a bell.\nTake pride in your work There are some pieces of feedback that were given before that were not incorporated into your code. It makes the review process a pain in the neck because I like to keep my code review comments DRY.\nTo learn as much as you can from this feedback:\n make your work excellent don\u0026rsquo;t copy from tutorials you found on the internet, make sure you know how to make it work yourself  You are here to learn. So learn.\nLearn your technical skills and learn to produce like a professional\n your code should work if there is a front-end it should not be a complete mess. A lot of the time we don\u0026rsquo;t need something beautiful. But don\u0026rsquo;t give us something un-usable and did I mention git?  Obvious comments Obvious comments shouldn\u0026rsquo;t be left in the code. It just means there is more stuff to read, it doesn\u0026rsquo;t add value:\n /** * this contructor initialises variables and the variables are called by functions below */ constructor(totalTime, cards) {\u0026lt;!-- --\u0026gt;  Ideally:\n code should be self-documenting. Meaning, your code should be so obvious that comments aren\u0026rsquo;t even necessary if comments are required then that is OK, but don\u0026rsquo;t say obvious things.   /** * this contructor does constructor like things in order to allow my code to execute in an object orientated manner. */ constructor(totalTime, cards) {  Mixing UI and data This is a common thing that happens a lot. Should have spoken about it more before but\u0026hellip;\nThink about your project as a number of layers. You have a data and logic layer, this holds information about\u0026hellip;information. It doesn\u0026rsquo;t care about HTML. It doesn\u0026rsquo;t KNOW about HTML.\nThen there is the UI layer stuff. It generates DOM elements from the data. And it triggers data-layer functionality based on DOM events.\nYou\u0026rsquo;ll get to play with this concept more soon.\nThings to know about: Loose coupling\nLabelling your code with your name isn\u0026rsquo;t necessary. We have Git /** Michael: codeblock ends**/ //_________________________________________This is where Wandile's Edits starts__________________________________________________  Git can tell us the exact commit that made the change on every line of code. So we have all the info we can eat.\nDon\u0026rsquo;t leave junk lying around Usually it\u0026rsquo;s bad to leave stuff like this in your codebase:\n // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection);  Looooong comments  let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */  These tend to get out of date. It\u0026rsquo;s better to just have self-documenting code.\nFunctions should be short and have one purpose Let\u0026rsquo;s take a moment to appreciate\nfunction loadCards() { // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection); /**Michael: added the array created dynamically with users input**/ let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */ /******* ranNums *******/ while (i--) { j = Math.floor(Math.random() * (i+1)); ranNums.push(nums[j]); nums.splice(j,1); }; /* Create an HTML section and add the class memory-game to section. * */ /******* section *******/ let section = document.createElement(\u0026quot;section\u0026quot;); section.classList.add(\u0026quot;memory-game\u0026quot;); /* store the filenames of all the images that will be used in the game in an array. **/ let cards = [\u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;]; console.log(\u0026quot;WE're about to go in...\u0026quot;); /**Michael: set card length to the value of the users input.**/ cards.length = userLevel; /* for-loop to load and shuffle cards. **/ for (let index = 0; index \u0026lt; cards.length; index++) { /** create a div then add to the div; a class named memory-card as well as a dataset of the card's filename **/ let cardDiv = document.createElement('div'); cardDiv.classList.add(\u0026quot;memory-card\u0026quot;); cardDiv.dataset.card = cards[ranNums[index]]; /** create an image tag then add to the tag a class named front and the source of the image **/ let frontImage = document.createElement(\u0026quot;img\u0026quot;); frontImage.classList.add(\u0026quot;front\u0026quot;); frontImage.src = cards[ranNums[index]]; /** make the image tag as a child of the div **/ cardDiv.appendChild(frontImage); /** create an image tag then add to the tag a class named back and the source of the image **/ let backImage = document.createElement(\u0026quot;img\u0026quot;); backImage.classList.add(\u0026quot;back\u0026quot;); backImage.src = \u0026quot;img/umuzi_logo.png\u0026quot;; /** make the image tag as a child of the div **/ cardDiv.appendChild(backImage); /** make the meomry-card div a child of the memory-game div **/ section.appendChild(cardDiv); } /** once all cards have been loaded, add div memory-game a child of section **/ document.body.appendChild(section); console.log(cards); cardSelector() var sectionId = document.getElementsByTagName(\u0026quot;section\u0026quot;)[0].setAttribute(\u0026quot;id\u0026quot;, \u0026quot;memory-game\u0026quot;); };  If you try to explain the low level functionality of a functions and you end up saying: \u0026ldquo;it does x, and it does y, and it does z, but only if q, until the condition w\u0026rdquo;. Stop. Just stop.\nPay attention to naming conventions even when naming files and directories Bk.js ?  If working with web, make sure your slashes are in the right direction: const cardPack = [\u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;]  This game only works on windows. Seriously, what URL looks\\like\\this?\nfunky indenting function loadGame(selection) { if (document.getElementById('gameDisplay').hasChildNodes()) { document.getElementById(\u0026quot;gameDisplay\u0026quot;).removeChild(gameDisplay.childNodes[0]); } //The arrays that store all the URLs to picks and the dataset names const cardPack = [...stuff for (var i = 0; i \u0026lt; selection * 2; i++) {  inconsistent indenting is hard to follow JUST USE PRETTIER (demo with Bk.js)  caPitalisatopn Matters  var Section = document.createElement('section')  Be consistent. It makes your code easier to work with.\nnames should be meaningful Can anyone guess what this means?\nfunction IncreaseCards(selection) {  Do they get bigger? Does the number of cards increase? None of the above.\nCall a hammer a hammer. Call a nail a nail. Etc\nOne git repo one project Don\u0026rsquo;t put arbitrary things that have nothing to do with each other in the same repo. What does a memory game have to do with bowling?\nIf it walks like a loop and quacks like a loop, try using a loop  frame1.innerHTML = game.frameScore['1'] frame2.innerHTML = game.frameScore['2'] frame3.innerHTML = game.frameScore['3'] frame4.innerHTML = game.frameScore['4'] frame5.innerHTML = game.frameScore['5'] frame6.innerHTML = game.frameScore['6'] frame7.innerHTML = game.frameScore['7'] frame8.innerHTML = game.frameScore['8'] frame9.innerHTML = game.frameScore['9'] frame10.innerHTML = game.frameScore['10']  frames = [frame1,frame2, etc] then loop...  there are still memory games that are js embedded in HTML Take some pride in your work. You are here to learn. Pursue excellence.\nFlat is better than nested \t} else { function flip2Back(){ var tile_1 = document.getElementById(memory_tile_ids[0]); var tile_2 = document.getElementById(memory_tile_ids[1]); tile_1.style.background = 'url(tile_bg.jpg) no-repeat'; tile_1.innerHTML = \u0026quot;\u0026quot;; tile_2.style.background = 'url(tile_bg.jpg) no-repeat'; tile_2.innerHTML = \u0026quot;\u0026quot;; memory_values = []; memory_tile_ids = []; } setTimeout(flip2Back, 700); }  The technical term for this kind of thing is: ugly\nInitialise arrays the simple way var cards = []; ... cards[22]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[23]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[24]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[25]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[28]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[29]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[30]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[31]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[32]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; cards[33]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; ... even more stuff  I made a typo above, can you see it?\nComments should be useful for the next person reading the code //To randomise the positions of the cards on the board --\u0026gt; Learnt this syntax on ES6(Call right after creating function)  Sometimes if you are doing something novel it is good to talk about it a bit, something I often do in my code is:\n// the following is based on https://something.cool/I/found complicated_code_begins_here()  Loose coupling  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples\n https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6\n SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\n  Model-view One way to make complicated logic easier to test and understand and more portable is to have a clear separation of concerns. Think of it as a bunch of layers.\nCreate a bunch of code that is all about describing data. This is frontend-agnostic. Then have a visual layer that ties into that and makes your data visible and accessible.\nThis is an example of loose-coupling\nTDD specific  your tests should be small and specific. Gigantic tests should not  some code just isn\u0026rsquo;t self documenting. In these cases add documentation Eg:\n scores(){ this.updateTotals(); if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.secondRoll[this.index].innerHTML = 0; if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.index \u0026lt; 9){ //one strike if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); //two strikes if ((this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10) \u0026amp;\u0026amp; (this.firstRoll[this.index - 1].innerHTML == 10)) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //three strikes if (this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //spare if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; Number(this.firstRoll[this.index - 1].innerHTML) != 10 \u0026amp;\u0026amp; (Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) == 10)) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); this.frameScore[this.index].innerHTML = Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); this.totalScore[0].innerHTML = Number(this.frameScore[0].innerHTML); if (this.index \u0026gt;= 1) this.updateTotals(); } else if (this.index == 9) { this.secondRoll[9].innerHTML = Math.floor(Math.random() * this.pins + 1); this.thirdRoll[0].innerHTML = Math.floor(Math.random() * this.pins + 1); } }  I shouldn\u0026rsquo;t have to read the body of the function to know what it does. The name and optional documentation should be enough. What would be a better name for this function?\nYour tests are not your application Don\u0026rsquo;t put the specrunner in your index.html file. Imagine you are building this for a client. They care about bowling. You care about doing a good job. The test runner and test results are not client-facing.\nPlay by the rules If this is a TDD project then do it in a test driven way. There are big parts of many people\u0026rsquo;s codebases without tests at all. Eg: if the manner in which players take turns in the game has some complexity, maybe it would be good to test the logic that chooses whose turn it is?\nUntested code is a form of technical debt.\nAlso, we give you these exercises for a reason. If we are playing chess then the easiest way to win might be to drop-kick your opponent but that\u0026rsquo;s not the point. If you have a TDD assignment then figure out how you can use your tests to inform the structure of your code, and figure out how to write testable code.\nHTML in JS Try make it tidy at least. Use one notation at a time. Care about indentation and readability.\ndocument.getElementById(\u0026quot;currentNext\u0026quot;).innerHTML = `\u0026lt;strong\u0026gt;Round: \u0026lt;/strong\u0026gt; ${Player.list[showPlayer].round - Player.list[showPlayer].numOfStrikes + 1} Throw#: ${Player.list[showPlayer].throw+1}` + \u0026quot;\u0026lt;div id='\u0026quot; + Player.list[showPlayer].name + \u0026quot;'\u0026gt;\u0026lt;strong\u0026gt;Current Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[showPlayer].name + \u0026quot; - \u0026quot; + Player.list[showPlayer]. totalScore + \u0026quot; points\u0026quot; + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Next Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[nextPlayer].name + \u0026quot; - \u0026quot; + Player.list[nextPlayer]. totalScore + \u0026quot; points\u0026lt;/div\u0026gt;\u0026quot;;  A cool example of separating concerns This function is all about drawing a picture of some details. It is in no way concerned with calculating those details. It just shows them. This function does only one thing, and it does that one thing well.\nfunction showDetails(player) { console.log(\u0026quot;Show details for \u0026quot; + Player.list[player -1].name); document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + Player.list[player - 1].score + \u0026quot;]\u0026quot;; }  (Nice one Axel)\nThis idea is at the core of modern js frontend frameworks. Exciting things are on the horizon for you guys.\nnames people function getPos() {  FTW?\nok this is just a bit strange  this.addPlayer = (playerName = new Player()) =\u0026gt; { this.players.push(playerName); }  What is playerName suposed to be here. A string or an object?\n"
},
{
	"uri": "/tech-department/topics/jasmine-spies/",
	"title": "Jasmine Spies",
	"tags": [],
	"description": "",
	"content": " Spying on JavaScirpt Methods using Jasmine Jasmine is made for unit testing. Unit tests are supposed to test only one component of your application. A component can be a function, an object, a module, basically everything self-contained that acts like a black box to the outside world. You usually want to avoid that your unit tests fail because another component failed. That’s why you want to test your components in isolation as much as possible.\nFor example, you may not want to send data to another server in your unit tests or you don’t want to manipulate a page’s DOM. But you want to make sure that the components which are responsible for these tasks get called correctly. How do we do this?\nOne of the primary aims of unit testing is to isolate a method or component that you want to test and see how it behaves under a variety of circumstances. These might include calls with various arguments - or even none at all, - or whether it calls other methods as it should. Unfortunately, many methods and/or objects have dependencies on other methods and/or objects, such as network connections, data sources, files, and even previously executed methods. This is where mocks come in. A mock is a fake object that poses as the real McCoy in order to satisfy the inherent dependency(ies) without having to go through the overhead of creating the real object.\nIn Jasmine, mocks are referred to as spies. There are two ways to create a spy in Jasmine: spyOn() can only be used when the method already exists on the object, whereas jasmine.createSpy() will return a brand new function:\n//spyOn(object, methodName) where object.method() is a function spyOn(obj, 'myMethod') //jasmine.createSpy(stubName); var myMockMethod = jasmine.createSpy('My Method');  Using the SpyOn() method As mentioned above, spyOn() can only be used when the method already exists on the object.\nFor simple tests, this is your best bet.\nThe test cases all feature the following Person class. It has a couple of attributes,\na getter and setter for the name, and two public methods:\nclass Person { //default variables let _age = 0, _name = 'John Doe'; constructor(name, age) { this._name = name | _name; this._age = age | _age; } //Getters and setters this.getName = function() { return this._name; } this.setName = function( name ) { this._name = name; } this.getAge = function() { return this._age; } this.setAge = function( age ) { this._age = age; } //Public methods this.addBirthday = function() { this_age++; } this.toString = function() { return 'My name is \u0026quot; + this.getName() + \u0026quot; and I am \u0026quot; + this.getAge() + \u0026quot; years old.'; } }  Say that we want to verify that the toString() method was calling getName(). We would instantiate the Person as usual, but before calling toString(), we would call spyOn(), passing in the person instance and the name of the method that we want to spy on (\u0026lsquo;getName\u0026rsquo;).\nWe can then call jasmine matchers to see what happened. The simplest test is to check that getName() was in fact called:\ndescribe(\u0026quot;Person toString() Test\u0026quot;, function() { it(\u0026quot;calls the getName() function\u0026quot;, function() { //Creating person instance var testPerson = new Person(); //Creating a spy to test on spyOn(testPerson, \u0026quot;getName\u0026quot;); //Calling the function and the using matchers to check whether it has been called testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); });  But that\u0026rsquo;s just the beginning. We can run other tests on our spied function, such as what arguments it was called with.\nA spy only exists in the describe or it block in which it is defined, and will be removed after each spec.\nThere are special matchers for interacting with spies. This syntax has changed for Jasmine 2.0. The toHaveBeenCalled() matcher will return true if the spy was called. The toHaveBeenCalledWith() matcher will return true if the argument list matches any of the recorded calls to the spy.\nConversely, we can test that the function was called without any parameters by calling toHaveBeenCalledWith() without a value:\ndescribe(\u0026quot;Person toString() Test\u0026quot;, function() { var testPerson; beforeEach( function() { testPerson = new Person(); foo = { setBar: function(value) { bar = value; } }; } ); afterEach ( function() { testPerson = undefined; } ); it(\u0026quot;calls the getName() function\u0026quot;, function() { spyOn(testPerson, \u0026quot;getName\u0026quot;); testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); it(\u0026quot;Method getName() was called with zero arguments\u0026quot;, function() { // Ensure the spy was called with the correct number of arguments // In this case, no arguments expect(testPerson.getName).toHaveBeenCalledWith(); }); it(\u0026quot;tracks that the spy was called\u0026quot;, function() { spyOn(foo, 'setBar'); foo.setBar(123); expect(foo.setBar).toHaveBeenCalled(); }); it(\u0026quot;tracks all the arguments of its calls\u0026quot;, function() { spyOn(foo, 'setBar'); foo.setBar(123); expect(foo.setBar).toHaveBeenCalledWith(123); }); });  Creating Our Own Spy Method Sometimes, it may be beneficial to completely replace the original method with a fake one for testing. Perhaps the original method takes a long time to execute, or it depends on other objects that aren\u0026rsquo;t available in the test context. Jasmine lets us handle this issue by creating a fake method using jasmine.createSpy(). Here\u0026rsquo;s how to substitute a fake getName() for the real one:\ndescribe(\u0026quot;Person toString() Test with Fake getName() Method\u0026quot;, function() { it(\u0026quot;calls the fake getName() function\u0026quot;, function() { //Create new person instance var testPerson = new Person(); //Create own jasmine fake methid testPerson.getName = jasmine.createSpy(\u0026quot;getName spy\u0026quot;); //Test if the fake method is called instead of the original being called testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); });  Unlike spyOn(), creating a fake method circumvents the original method so that it is not called during tests.\nUnderstanding Spies By default a spy will only report if a call was done without calling through the spied function (i.e the function will stop executing), but you can change the default behavior using these method.\n and.callThrough(): call through the original function, and.returnValue(value): return the specified value, and.callFake(fn): call the fake function instead of the original one, and.throwError(err): throw an error, and.stub(): resets the default stubbing behavior.  References An Introduction to Jasmine Unit Testing.\nSpy on JavaScript Methods Using the Jasmine Testing Framework\nSpies in Isolation\nSpying On JavaScript methods using Jasmine\n"
},
{
	"uri": "/tech-department/topics/jasmine-unit-tests/",
	"title": "Jasmine Unit testing",
	"tags": [],
	"description": "",
	"content": " Jasmine is a unit testing framework we like a lot. Techically it\u0026rsquo;s a Behavior Driven Development (BDD) framework.\nGetting started Getting set up (the noob method) There are a few different ways to get started with Jasmine. Let\u0026rsquo;s go with the technically simplest one first:\nDownload the latest Jasmine release from here: https://github.com/jasmine/jasmine/releases. Unzip the stuff. Now replace the src with your own code and replace the specs with your own tests.\nEdit index.html so that it refers to your code.\nTo run the tests just open index.html in your browser.\nGetting set up (like a boss) Open up a terminal. Now execute each of the following commands:\nmkdir my_jasmine_goodies cd my_jasmine_goodies npm init npm add jasmine npx jasmine init npx jasmine examples  Take a moment to Google npm and npx if these concepts are new to you.\nNow, in your editor of choice (vscode, subline, atom\u0026hellip;), open up package.json. There should be something that looks like this:\n\u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; },  Edit it to look like this:\n\u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;jasmine\u0026quot; },  To run your tests you can now just do this:\nnpm test  Base your project structure off the example code that jasmine created for you.\nLinkz  The official tutorial is very thorough: https://jasmine.github.io/tutorials/your_first_suite  Advanced topics Now that you have the basics down, here are a few more advanced ways to use Jasmine.\nTesting the DOM Say you have some code that does some DOM manipulation. There are tools that exit that make this pretty straight-forward.\nnpm add jsdom  Now\n var jsdom = require(\u0026#34;jsdom\u0026#34;); function winning() { // This is the function under test. Put it somewhere that makes sense and \u0026#34;require\u0026#34; it here document.getElementById(\u0026#34;booya\u0026#34;).innerHTML = \u0026#34;so cool\u0026#34;; } describe(\u0026#34;FooFighters\u0026#34;, function() { beforeEach(function() { // make a fake DOM to interact with const dom = new jsdom.JSDOM(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;body id=\u0026#34;booya\u0026#34;\u0026gt;initial\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;); global.document = dom.window.document; global.window = dom.window; global.navigator = dom.window.navigator; }); it(\u0026#34;updates dom\u0026#34;, function() { expect(global.document.getElementById(\u0026#34;booya\u0026#34;).innerHTML).toBe(\u0026#34;initial\u0026#34;); winning(); // call the function that updates the dom expect(global.document.getElementById(\u0026#34;booya\u0026#34;).innerHTML).toBe(\u0026#34;so cool\u0026#34;); }); });  Spies Spies (often referred to as mocks in other languages and tools) are used to allow a kind of dependency injection within your tests. Here is a basic example of how it works:\n class Thing { constructor() { this.a = \u0026#34;some initial value\u0026#34;; } setA(newA) { this.a = newA; } } describe(\u0026#34;Spies\u0026#34;, function() { it(\u0026#34;doesn\u0026#39;t do surprising things\u0026#34;, function() { var o = new.Thing(); expect(o.a).toBe(\u0026#34;some initial value\u0026#34;); o.setA(\u0026#34;x\u0026#34;); expect(o.a).toBe(\u0026#34;x\u0026#34;); }); it(\u0026#34;mocks\u0026#34;, function() { var o = new Thing(); spyOn(o, \u0026#34;setA\u0026#34;); // spy on the function expect(o.a).toBe(\u0026#34;some initial value\u0026#34;); o.setA(\u0026#34;x\u0026#34;); // o.setA has been replaced with a spy o.setA(\u0026#34;x\u0026#34;); o.setA(\u0026#34;x\u0026#34;); o.setA(\u0026#34;x\u0026#34;); expect(o.setA).toHaveBeenCalledTimes(4); // we can check how many times it was called. // we can even check what arguments were passed to this function // setA now has no side effect expect(o.a).toBe(1); }); });  Of course this is just the tip of the ice berg. But it gives a a basic intro. Spies are detailed in the official tutorial.\nSpy on the filesysytem Use this. The official docs are nice.\nhttps://github.com/tschaub/mock-fs\nClick events Sometimes you\u0026rsquo;ll want to make sure that click events are fired as and when they shoud be. The following resources should help with that:\n https://stackoverflow.com/questions/48872864/testing-for-click-event-with-jasmine/50375478 https://www.htmlgoodies.com/beyond/javascript/js-ref/testing-dom-events-using-jquery-and-jasmine-2.0.html  Slides ..* (A brief introduction to unit testing.)\n ..* (A brief introduction to Jasmine)\n "
},
{
	"uri": "/tech-department/topics/java-specific/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/syllabuses/java/",
	"title": "Java Basics",
	"tags": [],
	"description": "",
	"content": "Introduction to NCIT curriculum - NCIT 01: Conducting research and user interviews - NCIT 02: Reporting - NCIT 03: Research presentation - TOPICS: Agile \u0026amp; Scrum - WORKSHOPS: Agile and Scrum - NCIT 18: Agile project management - NCIT 19: Agile meetings - WORKSHOPS: How to be a professional - PROJECTS: [TODO] Beginner Linux challenges - TOPICS: Python self-learning - TOPICS: Clean Code for Python - PROJECTS: Git Basic Exercises - NCIT 04: Version control (GIT) for teamwork - PROJECTS: Level 1 programming katas - PROJECTS: Build your first personal website - TOPICS: How to ask for help with your code - WORKSHOPS: [TODO] Big Picture of Web Dev  NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 06: Web design for business NCIT 07: Building an online business NCIT 12: Business and technology NCIT 09: Ethics and Professionalism in IT  WORKSHOPS: Clean Code (language agnostic)  OOP\n  PROJECTS: Animals Part 2. Adding Tests  Dice\n  PROJECTS: Dice  Person\n  PROJECTS: Person  Password Checker\n  PROJECTS: Add logging to password checker  Simple Calculator\n  PROJECTS: simple-calculator part 2  String Calculator\n  PROJECTS: string-calculator  SQL\n  PROJECTS: SQL  Java Collections\n  PROJECTS: Java collections  Java Data Structures\n  PROJECTS: Java data structures  Java Generics\n  PROJECTS: Java Generics  Spring Infrastructure\n  PROJECTS: [TODO] Introduction to Spring Infrastructure part 3  Spring Boot Introduction\n  PROJECTS: Introduction to Spring Boot - part 4  SQL and Java\n  PROJECTS: [TODO] SQL Extended  File - Input Output, Logging Errors.\n  PROJECTS: File IO \u0026#43; Logging \u0026#43; Errors   "
},
{
	"uri": "/tech-department/topics/java-specific/java-dev-environment-setup/",
	"title": "Java Dev environment setup",
	"tags": [],
	"description": "",
	"content": " In this little tutorial we\u0026rsquo;ll walk through the process of getting your dev environment ready for Java. We use a number of different tools, you\u0026rsquo;ll need to get them all set up.\nJava SDK First install openJDK\nsudo apt install openjdk-11-jdk  Try it out Now let\u0026rsquo;s take it for a spin.\nMake a file called HelloWorld.java that looks like this:\npublic class HelloWorld { public static void main(String[] args) { String greeting = \u0026quot;Hello World!\u0026quot;; System.out.println(greeting); } }  Now open up a terminal and cd into the directory containing your new file. Now do this:\nls | grep HelloWorld javac HelloWorld.java ls | grep HelloWorld  You should notice a new file called Java.class. The javac command compiles the java source code into bytecode.\nNow run the following command in your terminal:\njava HelloWorld  It should print Hello World! to the terminal. You just ran the bytecode.\njshell This is another way of interacting with Java. It gets installed automatically when you install the JDK (JDK == Java Development Kit). Type the following at the command line:\njshell  Now you can type in Java statements and they\u0026rsquo;ll just get executed immediately.\n| Welcome to JShell -- Version 11.0.4 | For an introduction type: /help intro jshell\u0026gt; \u0026quot;Can I get a whoop whoop!\u0026quot;.length() $1 ==\u0026gt; 24 jshell\u0026gt; $1 * 2 $2 ==\u0026gt; 48 jshell\u0026gt; int foo=42 foo ==\u0026gt; 42   use the Tab key to access auto-completion. Eg: Type \u0026ldquo;Ti\u0026rdquo; then press Tab and see what happens You can press Ctrl+d to exit the shell.  IntelliJ This will be your Integrated Development Environment (IDE). Anything you can do with IntelliJ you can also do from the command line and a plain ol text editer. The reason we us an IDE is because most of industry uses one.\nIf you are running Ubuntu or Mint you can just install it like this:\nsudo snap install intellij-idea-community --classic  Otherwise take a look here for full installation instructions: https://www.jetbrains.com/help/idea/installation-guide.html. Please note, we will be using the \u0026ldquo;community\u0026rdquo; version.\nTry it out  Open IntelliJ select File -\u0026gt; New Project Select Java press Next a couple of times, give your project a sensible name (eg HelloWorld) click \u0026lsquo;Finish\u0026rsquo;  Now let\u0026rsquo;s make a class file:\n select File \u0026gt; New \u0026gt; Java Class name yuor class HelloWorld and select Class edit the new file so it looks like this (this should seem very familiar)  public class HelloWorld { public static void main(String[] args) { String greeting = \u0026quot;Hello World!\u0026quot;; System.out.println(greeting); } }   save your changes (Ctrl+s). On a side note, keyboard shortcuts are your friend. Learn them.  Now let\u0026rsquo;s run the code: select Run \u0026gt; Run \u0026gt; HelloWorld\nYou should see something like this appear on the bottom of the screen:\n/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -javaagent:/snap/intellij-idea-community/177/lib/idea_rt.jar=32781:/snap/intellij-idea-community/177/bin -Dfile.encoding=UTF-8 -classpath /home/sheena/IdeaProjects/HelloWorld/out/production/HelloWorld HelloWorld Hello World! Process finished with exit code 0  "
},
{
	"uri": "/tech-department/topics/java-specific/file-io/",
	"title": "Java File IO",
	"tags": [],
	"description": "",
	"content": " It\u0026rsquo;s all good and well writing programs that a user can interact with, and programs that print stuff out to the screen. But that has limited usefulness. Serious programs generally have some form of data persistence.\nBasically programs often need to store data, or access stored data. And there are a lot of different ways to make that happen.\nFor now we\u0026rsquo;ll be focusing on reading and writing files.\nResources:  https://www.w3schools.com/java/java_files.asp a gentle introduction to file io https://www.tutorialspoint.com/java/java_files_io.htm this one is a bit less gentle https://docs.oracle.com/javase/tutorial/essential/io this one is very thorough, and the offical docs are practically always the best place to find the latest and greatest info  "
},
{
	"uri": "/tech-department/projects/java-specific/generics/",
	"title": "Java Generics",
	"tags": [],
	"description": "",
	"content": " Generic method Generic Java method takes a parameter and returns some value after performing a task. It is exactly like a normal function, however, a generic method has type parameters which are reproduced by actual type. This allows the generic method to be used in a more general way. The compiler takes care of the type of safety which enables programmers to code easily since they do not have to perform long, individual type castings.\nExample\npublic static \u0026lt;T\u0026gt; int getPets(T[] list, T item) {}  Fun Time!!\nYou have two arrays, First array is of type Integers\n12 324 6 7900  Second array is of type String\nPlease write a single function called:\nprintArrayContent(array);  This function should accept one parameter and be able to accept an integer array or string array and print out the contents of that array.\nNotes: If you use method overload the answer wont be accepted\nGeneric classes: A generic class is implemented exactly like a non-generic class. The only difference is that it contains a type parameter section. There can be more than one type of parameter, separated by a comma. The classes, which accept one or more parameters, ​are known as parametrized classes or parameterized types.\nCreate a class called GenericClass that is able to set and get a private single variable which can either be String or Integer\nstringInstance = new GenericClass\u0026lt;?\u0026gt;(); stringInstance.set(\u0026quot;Test\u0026quot;); stringInstance.get() // print out Test integerInstance = new GenericClass\u0026lt;?\u0026gt;(); integerInstance.set(1000); integerInstance.get() // print out 1000  "
},
{
	"uri": "/tech-department/topics/java-specific/generics/",
	"title": "Java Generics",
	"tags": [],
	"description": "",
	"content": " Java generics is a feature that allows you to create \u0026ldquo;parameterized data types\u0026rdquo;. For example, instead of just declaring a collection that can store any data you can pass it a parameter to allow only the objects of certain data types.\nInstead of declaring and instantiating a general collection to store pets like this:\n ​ArrayList pets = new ArrayList();  you can do it with a parameter so it can store only String objects like this:\n ​ArrayList\u0026lt;String\u0026gt; pets = new ArrayList\u0026lt;\u0026gt;();  Advantages of using generics  Generics ensure compile-time safety which allows the programmer to catch the invalid types while compiling the code.\n Java Generics helps the programmer to reuse the code for whatever type he/she wishes. For instance, a programmer writes a generic method for sorting an array of objects. Generics allow the programmer to use the same method for Integer arrays, Double arrays, and even String arrays.\n Another advantage of using generics is that Individual typecasting isn’t required. The programmer defines the initial type and then lets the code do its job.\n It allows us to implement non-generic algorithms.\n  Types of Java Generics  Generic method: Generic Java method takes a parameter and returns some value after performing a task. It is exactly like a normal function, however, a generic method has type parameters which are reproduced by actual type. This allows the generic method to be used in a more general way. The compiler takes care of the type of safety which enables programmers to code easily since they do not have to perform long, individual type castings.  public static \u0026lt;T\u0026gt; int getPets(T[] list, T item) {}   Generic classes: A generic class is implemented exactly like a non-generic class. The only difference is that it contains a type parameter section. There can be more than one type of parameter, separated by a comma. The classes, which accept one or more parameters, ​are known as parametrized classes or parameterized types.  class DemoClass\u0026lt;T\u0026gt; {}  Tutorial Please go through this tutorial to give yourself a better chance to understand the topic\nhttps://howtodoinjava.com/java/generics/complete-java-generics-tutorial/\nResource https://www.educative.io/edpresso/what-are-generics-in-java?https://www.educative.io/courses/grokking-the-object-oriented-design-interview?aid=5082902844932096\u0026amp;utm_source=google\u0026amp;utm_medium=cpc\u0026amp;utm_campaign=blog-dynamic\u0026amp;gclid=Cj0KCQiAvc_xBRCYARIsAC5QT9lk7E9OCRYSk5j9kKNwDjsatXCWMIRxr1bGagOKo9jcfk3njeeokRsaAoerEALw_wcB\nhttps://www.tutorialspoint.com/java/java_generics.htm\nhttps://howtodoinjava.com/java/generics/complete-java-generics-tutorial/\n"
},
{
	"uri": "/tech-department/topics/java-specific/logging/",
	"title": "Java Logging with Log4j",
	"tags": [],
	"description": "",
	"content": " Please make sure you read and understand this before moving forward: TOPICS: Logging Ok, so now you know about what logging is and why we do it, we\u0026rsquo;re going to dig a bit more into some specific details about how to do this stuff in Java.\nInstalling Log4j We are using IntelliJ and Gradle. This means we have a specific way of including Log4j in our projects.\nThe first thing you need to do is make sure you have added Log4j as a dependency on your project. Take a look here and here to see how to add Log4j to your project.\nNow make a new project and log some stuff:\nimport org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class MainProgram { private static final Logger logger = LogManager.getLogger(MainProgram.class.getName()); public static void main(String[] args){ logger.debug(\u0026quot;Hello this is a debug message\u0026quot;); logger.info(\u0026quot;Hello this is an info message\u0026quot;); logger.warn(\u0026quot;Hello this is a warning message\u0026quot;); logger.error(\u0026quot;Hello this is an error message\u0026quot;); logger.fatal(\u0026quot;Hello this is a fatal message\u0026quot;); // some languages call this level \u0026quot;critical\u0026quot; } }  If you run this then you\u0026rsquo;ll see some of the messages get logged to the standard output. But you\u0026rsquo;ll also see an error message.\nIntlliJ will show you an error message that says \u0026ldquo;ERROR StatusLogger No Log4j 2 configuration file found. Using default configuration (logging only errors to the console), \u0026hellip;\u0026rdquo;\nNow make a new file in the resources firectory and name it log4j2-test.properties. Here\u0026rsquo;s what it should look like:\nappender.console.name = STDOUT appender.console.type = Console appender.console.layout.type = PatternLayout appender.console.layout.pattern = %d | %c: %m%n rootLogger.level = debug rootLogger.appenderRef.stdout.ref = STDOUT  Save it and run your program again. Now all the logs should show up with some fancy formatting.\nConclusion We just scratched the surface here. Try use logging for now on instead of just System.out.println. In industry you\u0026rsquo;ll have to get used to logging things in a thoughtful way.\nResources  The official docs Info on log layout patterns Config properties syntax  "
},
{
	"uri": "/tech-department/topics/java-specific/oop-basics/",
	"title": "Java OOP basics resources and readings",
	"tags": [],
	"description": "",
	"content": " What is Object Oriented Programming?\nFour main OOP priciples in java OOP is really powerful. There\u0026rsquo;s a lot worth knowing. Make sure that you understand these foundational concepts and everything else will come pretty easily.\nAbstraction == focusing on the necessary details In Object-oriented programming, abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.\nAn every day example of abstraction is driving a car. When you turn on the ignition you just turn a key, the car does a whole lot of things under the hood. The starter motor and carberator is abstracted. You don\u0026rsquo;t need to know how that stuff works in order to work a car.\nIn Java there is a thing called an Abstract Class. This is not to be confused with the principle of abstraction. You can achieve abstraction without using abstract classes. A lot of people get these concepts mixed up.\n abstraction = hiding implementation details abstract classes = classes that are not meant to be instantiated  Abstraction can be achieved through use of abstract classes. Or just regular classes.\nTake a look at (this discussion)[https://softwareengineering.stackexchange.com/questions/230401/confused-about-the-definition-of-abstraction-in-oop] for a bit more info\nEncapsulation == hiding details Encapsulation is known as data-hiding. Basically in OOP in Java you can choose what parts of your objects are exposed for use, and which are under the hood. If we think about cars again, the steering wheel and gear lever are exposed to you, but then the fuel injection system is hidden away.\nIn coding terms this means that objects may be able to communicate with one another but are restricted to access some of the object\u0026rsquo;s components directly. Publicly accessible methods are generally provided in the class so-called accessors and mutators.)\nRead more on encapsulation.\nThe following Java code shows how Encapsulation can be implemented:\nclass Employee{ //private data member private String name; // you can't just access this whenever you want. public void setName(String employeeName){ // this is the only way to update the name. Yo can put validation logic in here if you want. Eg if the employeeName has naughty words in it then raise an exception. this.name = employeeName; } //getter method for name public String getName(){ return name; } } class Main{ public static void main(String args[]) { //creating instance of the encapsulated class Employee e = new Employee(); //setting value in the name member e.setName(\u0026quot;Mbali\u0026quot;); //getting value of the name member System.out.println(e.getName()); } }  Abstraction vs Encapsulation\nInheritance Inheritance can be thought of an an \u0026ldquo;is a\u0026rdquo; relationship.\nThe following Java code shows how Inheritance can be implemented. In this example we have a superclass called Vehicle. a Bakkie is a Vehicle, and a Beatle is a Vehicle. So both these child classes do vehivle things and have vehicle attributes, but layer on a bit of extra behavior.\n//superclass class Vehicle { void printType(){ System.out.println(\u0026quot;I am a Vehicle\u0026quot;); } } class Beatle extends Vehicle { //Override method @Override void printType() { //call method in super class super.printType(); System.out.println(\u0026quot;I am a Beatle\u0026quot;); } } class Bakkie extends Vehicle { //Override method @Override void printType() { //call method in super class super.printType(); System.out.println(\u0026quot;I am a Bakkie\u0026quot;); } } class Main{ public static void main(String[] args) { //Create a car object Beatle beatle = new Beatle(); //call method beatle.printType(); } }  To learn how @Override actually works, check (this)[https://www.baeldung.com/java-override] out\nPolymorphism Polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word \u0026ldquo;poly\u0026rdquo; means many and \u0026ldquo;morphs\u0026rdquo; means forms. So polymorphism means many forms.\nThere are two types of polymorphism in Java: compile-time polymorphism and run-time polymorphism. We can perform polymorphism in java by method overloading and method overriding. Read more.\nMethod overriding Refer back to the inheritance stuff above. We used overriding there.\nOverriding a method is when a method in the subclass has the same name and method signature as a method in the superclass. When overriding a method you are not allowed to make the method more private.\nThe following Java code shows how overriding can be implemented:\npublic class Fruit { public void print() { System.out.println(\u0026quot;I am a fruit\u0026quot;); } } class Apple extends Fruit { //Override method @Override public void print() { System.out.println(\u0026quot;I am an Apple\u0026quot;); } } class Main{ public static void main(String[] args) { //Create an animal object Fruit fruit = new Fruit(); //Create horse object Apple apple = new Apple() fruit.print(); //call method apple.print(); } }  Method overloading Overloading a method is when a method in the subclass has the same name but the method signature is different from the method in the superclass.Read more\nThe following Java code shows how overloading can be implemented:\nclass Calculate{ public int product (int x, int y) { return (x * y); } // Overloaded. This product method takes three int parameters public int product(int x, int y, int z) { return (x * y * z); } // Overloaded. This product method takes two double parameters public double product(double x, double y) { return (x * y); } } class Main { public static void main(String args[]) { Calculate prod_object = new Calculate(); System.out.println(prod_object.product(10, 20)); System.out.println(prod_object.product(10, 20, 30)); System.out.println(prod_object.product(10.5, 20.5)); } }  The danger of accidental overloading public class Machine { public boolean equals(Machine obj){ return true; } } public class MainProgram { public static void main(String[] args){ Object first = new Machine(); Object second = new Machine(); Machine third = new Machine(); Machine fourth = new Machine(); System.out.println(first.equals(second)); // returns false System.out.println(third.equals(fourth)); // returns true } }  This is because every class in Java inherits from a base Object class. And so a Machine is an Object. And Object.equals means something very specific.\nImportant links  Read more to gain further understanding on OOP concepts. Here is another useful link. Java oops concepts by Java T Point. Access modifiers explained Implements veresus Extends More on overloading versus overriding  Super cool advanced stuff The true power of OOP comes from the interaction between objects. There are some pretty common patterns to how OOP gets used in industry. These patterns are called \u0026ldquo;Design Patterns\u0026rdquo;. Take a look at this.\n"
},
{
	"uri": "/tech-department/projects/java-specific/",
	"title": "Java Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/",
	"title": "Java Specific Workshops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/collections/",
	"title": "Java collections",
	"tags": [],
	"description": "",
	"content": "This project assumes you have gone through the reading for both data structures as well as collection, but for a quick recap for the purpose of this project:\nJava has a collection framework that gives us a list of classes which help us efficiently deal with objects, one of these is called a dequeue/deque(double-ended queue). A deque is magical because it allows us to add or remove anything from either the front(head) or back(tail) of the queue.\nYou can implement a Deque by using either a LinkedList of an ArrayDeque class. For example\nDeque queue = new LinkedList\u0026lt;\u0026gt;(); or Deque queue = new ArrayDeque\u0026lt;\u0026gt;();  Now for the FUN part\u0026hellip; Project time\nintNumber = 9 // Number of integer in the set subArraySize = 3 // Size of the subArray to consider queue = 6 2 6 8 3 7 1 4 4 // integer sample  You have to print out the maximum number of unique integers among all possible adjacent subarrays of size subArraySize\nExample of the project\nInput\nintNumber = 9 subArraySize = 3 queue = 6 2 6 8 3 7 1 4 4  Output\n3\nExplanation\nr1 =\u0026gt; (6 2 6) = Has 2 unique numbers r2 =\u0026gt; (2 6 8) = Has 3 unique numbers r3 =\u0026gt; (6 8 3) = Has 3 unique numbers r4 =\u0026gt; (8 3 7) = Has 3 unique numbers r5 =\u0026gt; (3 7 1) = Has 3 unique numbers r6 =\u0026gt; (7 1 4) = Has 3 unique numbers r7 =\u0026gt; (1 4 4) = Has 2 unique numbers  So the highest number of unique integer in a subArray is 3\nIf your code is correct it should return these outputs for these inputs\nInput #1\nintNumber = 8 subArraySize = 4 queue = 2 2 2 2 2 2 2 2  Output\n1  Input #2\nintNumber = 10 subArraySize = 3 queue = 7 5 5 7 5 5 7 5 5 6  Output\n 2  HAVE FUN!!\n"
},
{
	"uri": "/tech-department/topics/java-specific/collections-and-datastructures/",
	"title": "Java collections and data structures",
	"tags": [],
	"description": "",
	"content": " Till now I am sure you have heard that the computer has storage either RAM or disk, which it uses to store information we care about. As people we care about a lot of things meaning a lot of information being stored and efficiently enough for us to get access to it without any hassles.\nComputers use this efficient storing of data to allow us to get information quickly with the help of data structures\nTake for example the differences between a binary tree and array\nCollections A Collection is a group of individual objects represented as a single unit. Java provides Collection Framework which defines several classes and interfaces to represent a group of objects as a single unit.\nThe Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main “root” interfaces of Java collection classes.\nResource https://opensourceforu.com/2015/06/data-structures-made-easy-with-java-collections/\nhttps://www.geeksforgeeks.org/data-structures/\nhttps://www.geeksforgeeks.org/linked-list-vs-array/\nhttps://www.geeksforgeeks.org/collections-in-java-2/\n"
},
{
	"uri": "/tech-department/projects/java-specific/data-structures/",
	"title": "Java data structures",
	"tags": [],
	"description": "",
	"content": "Game Time\nIn this project we are going to create a GAME!!! fun right, its called Conway Game of life\nHow This game works\nInitially, there is a grid (yours should be 10 * 10) with some cells which may be alive or dead. Our task is to generate the next generation of cells based on the following rules:\n Any live cell with fewer than two live neighbors dies, as if caused by under population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by overpopulation. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.  You will need to show in your console the initial state (input) and next generation\n(+) - Dead Cell\n(#) - Alive Cell\nInput\n/ + + # + + +\n/ + + # # # +\n/ + + + + + +\nNext generation\n/ + + # + + +\n/ + + # # + +\n/ + + + # + +\nYou should have a test for all the rules above but you can also add more test if you want.\n"
},
{
	"uri": "/tech-department/topics/java-specific/java-self-learning/",
	"title": "Java learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your Java development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nour favorate resources (so far) Please note, this document is alive. It is likely to change over time as we learn more about how best to learn Java. If you have any suggestions about how to make this page (or any page) better then please let us know! And if you have any opinons on the materials listed below please let us know as well!\nLearn Java the Hard Way This book looks like it will be very useful. We are keen to get your opinion on how good it is before buying a million copies.\nPlease download and work through the free samples and tell us what you think :)\nIt doesn\u0026rsquo;t cover absolutely everything we need to cover but it lays a very solid foundation.\nUnfortunately the author is working from a windows machine so the command-line stuff is a little strange. We\u0026rsquo;ll be using bash and IntelliJ instead of PowerShell and Notepad++.\nJava Syntax guide This is just a reference, it doesn\u0026rsquo;t explain absolutely everything\nCodeWars This is a nice tool that lets you practice your coding skills. We have found it very useful for our other syllabuses.\nUdemy This course will take you through all the basics of java\nTutorialsPoint This one has a lot of great info but expects you to have some coding experience already.\nhttps://www.tutorialspoint.com/java\nother resources under consideration  Java Overview Code Gym: You are a young robot who is learning some Java from some insensitive aliens\u0026hellip; Head First Java: This book is nice because it is thorough and weird. It\u0026rsquo;s not one of those boring text books. Unfortunately this book is a bit old so not all of it is appropriate:\n outdated and useless JUST SKIP Ch. 17 - last half of the chapter teaches Java Web Start(This was deprecated in Java 9, we’re on Java 11 at the time of me writing this) Ch. 18 - Part of this chapter talks about RMI, absolute legacy that you’ll only find in systems that are 15 - 20 years old. Parts that are outdated but not useless Ch 12 -15 - These chapters teach a small amount of Java Swing (quite outdated) to build projects. They are still full of useful information because the point is not to teach Swing, but to learn about Java core and just use Swing to make a very simple GUI. The Swing that you learn is quite minimal.  Core Java Volume 1. This is up to date with Java 11.\n  "
},
{
	"uri": "/tech-department/topics/java-specific/project-submission-requirements/",
	"title": "Java project submission requirements",
	"tags": [],
	"description": "",
	"content": " As a junior developer working on a team of professionas, your code will always have to conform to a certain shape. You will always need to write code that plays nicely with the code and mechanisms that are in place.\nFor all your Java projects you will need to make sure that your code conforms to the following:\nBuild.Gradle We are using JUnit 5. And some of our automations depend on how JUnit 5 logs its successes.\nPlease open up your build.gradle. Make sure that you have the JUnit5 dependencies listed below.\ndependencies { testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1' // your project dependencies }  Then paste this into your build.gradle file.\ntest { useJUnitPlatform( testLogging { events \u0026quot;passed\u0026quot;, \u0026quot;skipped\u0026quot;, \u0026quot;failed\u0026quot; } ) }  Now if you run your unit tests and everything passes (which they should before you submit your work) then you will get a bit of extra output about your passing tests.\nDirectory structure Please see this: TOPICS: Gradle and IntelliJ project submission structure "
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/",
	"title": "JavaScript Algorithms and Data Structures",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nYou\u0026rsquo;ll be hitting \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/template-engines/",
	"title": "JavaScript template engines",
	"tags": [],
	"description": "",
	"content": " About javascript template engines (Short explanation) More on Javascript templates  "
},
{
	"uri": "/tech-department/workshops/javascript-specific/",
	"title": "Javascript-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/js-and-node-specific/",
	"title": "Js-and-node-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/jupyter-notebooks-best-practices/",
	"title": "Jupyter notebooks best practices",
	"tags": [],
	"description": "",
	"content": " Why use a notebook? Working alone  Keep track of your thoughts Make sketch notes Add links to resources to review later Example notebook: https://danielfrg.com/blog/2013/03/kaggle-bulldozers-basic-cleaning/  Working in a team  For code review For colleagues to contribute to your notebook To write a report on your models As a tutorial guide To communicate with external clients/entities/blog Example notebook:  https://www.kaggle.com/burhanykiyakoglu/predicting-house-prices   Tips for effective and efficient use of (jupyter) notebooks for data science projects Follow standard coding practices:  Provide comments and documentation to your code Stick to a consistent naming scheme! Use meaningful names: answers_to_score is clearer than score_ans, which is clearer than score_1! Group code in a manner that allows anyone to follow the modelling process, e.g. data exploration (summary statistics, distributions, bar graphs, scatter plots), data transformation (outlier detection, counting \u0026amp; dropping/replacing NaN, renaming columns/rows etc), modelling and model evaluations (model scores and error) Limit length of code lines Refactor (restructuring) code whenever necessary to keep it simple  Make it easy for other to follow and improve your work  Have an author name and contact details in case someone wants to ask for clarity The notebook should be a standalone document that does not require someone to have to know about the problem being solved or in-depth knowledge of the algorithms. This will help others follow your thought processes and understand the data transformation/data analysis being done and why certain techniques are being used, since multiple techniques exist Tell the story: e.g. describe the problem being solved and how the model will solve that problem Summarise the data\u0026rsquo;s statistical characteristics (to show that your data cleaning will not introduce artefacts or new features, and to show that the data are appropriate for the model(s) you use). This includes showing the variables\u0026rsquo; distribution and central tendency, as well as amount of available data. Exploratory techniques for summarizing data should be used before you start formal modeling and can help development of more complex statistical models \u0026amp; to eliminate or sharpen potential hypotheses about the world that can be addressed by the data. You will almost always want to see graphs of variable distributions, relationships between variables and missing data patterns. Provide enough rationale for each coding task being carried out (you will find this information useful when you read your own notebooks later) Critique your own model, this will help pre-empt and address shortcomings of your model and avoid loss of confidence in your model by others  General tips  Keep cells of your notebook simple: don\u0026rsquo;t exceed the width of your cell Make sure that you don\u0026rsquo;t put too many unrelated functions in one cell. It\u0026rsquo;s neater to import all packages in the first code cell of your notebook Ensure graphics can display inline (use matplotlib inline magic commands \u0026amp; semicolons)  "
},
{
	"uri": "/tech-department/topics/data-science-specific/clustering/",
	"title": "K-Means Clustering",
	"tags": [],
	"description": "",
	"content": " There are many different clustering algorithms to cluster, or group, objects based on how similar (or close in terms of distance) their attributes are.\nWe will look at just one type of clustering, K-Means clustering, but many other types exist. You can read more about other methods of clustering here.\nIntroduction K-Means clustering is an unsupervised learning technique used in processes such as market segmentation, document clustering, image segmentation and image compression.\nUsually we do K-Means clustering to:\n Understand the structure of the data, and group similar observations. Cluster the data into subgroups and then do different predictions on the different subgroups.  If we think that subgroup behaviours differ substantially, then we will get more accurate models by making separate models for each subgroup, than one model for all groups.\nTutorials Guided tutorials  K-Means Clustering in Depth EDA and K-Means Example K-Means Clustering: Algorithm, Applications, Evaluation Methods, and Drawbacks  Unguided tutorial: Flower features This tutorial is not compulsory, but you can go through it on your own for a gentle introduction to clustering. It is easier than the clustering assignment given in Projects.\nData: Iris species\n Use K-Means cluster analysis to cluster different iris species. Make an elbow plot and/or use silhouette analysis to find the optimal number of clusters.\n What are the factors that differ between different iris species?\n Create a plot of the clusters.\n  "
},
{
	"uri": "/tech-department/projects/data-science-specific/k-means-clustering/",
	"title": "K-Means Clustering Assignment",
	"tags": ["kmeans"],
	"description": "",
	"content": " Pre-requisites Read through the K-Means Tutorials at TOPICS: K-Means Clustering before starting this project.\nClustering whisky distilleries according to tasting Profiles Data: Whisky Tasting Profiles\nUse K-Means clustering to cluster whisky distilleries by their tasting profile. Use the elbow or silhouette method to find the optimal number of clusters.\nTo see how successful clustering was, report relevant metrics (e.g. silhouette, adjusted rand index, etc.) and create a plot showing the different distilleries, their classes according to the k-Means clustering, and the distance between points. You can use sklearn.manifold to get Euclidean distances between points.\nDescribe the main differences between the cluster - what are the factors that differ between classes?\n"
},
{
	"uri": "/tech-department/tags/kafka/",
	"title": "Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/khan-academy/",
	"title": "Khan Academy",
	"tags": [],
	"description": "",
	"content": "This wonderful resource will teach you a lot about statistical modelling principles. The content outlined here will be essential to help make your learning journey at Umuzi smooth. Please go through all this stuff.\nWish you all the best!\n"
},
{
	"uri": "/tech-department/topics/khan-academy/statistics-and-probability/",
	"title": "Khan Academy - Statistics and probability",
	"tags": [],
	"description": "",
	"content": "Please sign up and go through all the material in this course https://www.khanacademy.org/math/statistics-probability. Please make sure you thoroughly understand the principles and calculations discussed in each section before moving on.\nWish you all the best!\n"
},
{
	"uri": "/tech-department/topics/kinds-of-web-apis/",
	"title": "Kinds of web APIs",
	"tags": [],
	"description": "",
	"content": "REST versus SOAP and GraphQL\n"
},
{
	"uri": "/tech-department/tags/kmeans/",
	"title": "Kmeans",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/introduction/",
	"title": "Kotlin Introduction",
	"tags": [],
	"description": "",
	"content": " Kotlin is a:\n Staticallytyped language. Developed by JetBrains. Java is a prerequisite for Kotlin. Can be used for: server-side, client side and android development. Interoperable. Concise syntax over java.  Interesting features of Kotlin:\n Open Source. Interoperability. Concise up to 40% less line of code than java. Easy to learn. Syntax is similar to java. Feature rich.  Hello World example you should try.\nThis will help you understand the basics of the Kotlin programming language.\n fun Main(args : Array\u0026lt;String\u0026gt;) { printlin(“Hello World”) //Similar to System.out.println(“Hello World”) in Java. }  Output\nHello World!\nBreakdown:\nfun Main(args : Array\u0026lt;\u0026gt;){}\n fun, is the keyword in Kotlin for function. This is the main function, just as in java it serves as the entry point to the application. Mandatory function of the Kotlin program. Code should be written in curly brackets. Text that should be printed on the screen should be in double quotes \u0026quot;\u0026quot;.  Activities with Kotlin How to manage user activity with Kotlin\nFragments Managing fragments for Android with Kotlin\nNavigation Setting up navigation in Android using Kotlin\nLive Data Working with live data\nLive Data and Observables Live data vs observables\nLive Data Transformations Android live data and transformation | map ans switch map\nCoroutines Kotlin coroutines on Android\nRecyclerView Android RecyclerView Tutorial with Kotlin\nConstrainLayout ConstraintLayout Tutorial for Android: Complex Layouts\nStyles and Themes Android Styling: Themes vs Styles\nMaterial Design Material Design for Android\nAccessibilityManager Android AccessibilityManager\n"
},
{
	"uri": "/tech-department/projects/basic-flow-control-katas/",
	"title": "Level 1 programming katas",
	"tags": [],
	"description": "",
	"content": " These Exercises are here to help you test out and demonstrate your knowledge of the basic flow control mechanisms and syntax for your language. These Exercises are relevent whether you are doing Java, JavaScrupt, Python, Kotlin or any other modern language.\nPlease follow best practices when doing this work!\n Use git: push your code every day. Maybe even a few times every day. If you don\u0026rsquo;t back up your work and something terrible happens to your computer then you will not be granted an extension. Make sure your commit messages make sense Be careful about how you name your functions and variables. Be consistent. Be clear. Call it what it is. Any fool can write code that a machine can understand, professionals write code that people understand.  Note The Exercises below are meant to be language-agnostic. If we use the word print in an Exercise description then we mean output it to the terminal/console/stdout. We dont mean print to a printer, and we dont want a gui. These Exercises just spit out some text.\nExcercise: Hello Write a function named hello, it needs to take in a string as an argument. The function should work like this:\neg: hello(\u0026quot;Tshepo\u0026quot;) should output\nHello Tshepo!  Exercise: check if a number is even Write a function named even_or_odd or evenOrOdd. Your function should take an integer and print in the work \u0026ldquo;even\u0026rdquo; or \u0026ldquo;odd\u0026rdquo;\nPlease be careful what name you choose to use. Different programming languages have different conventions.\neg, if the input is 3 then the output is \u0026ldquo;odd\u0026rdquo;. If the input is 4 then the output is \u0026ldquo;even\u0026rdquo;\nExercise: Draw a square Write a function, name it square. It takes in an integer and then prints out a square using the hash character.\neg square(2) should output\n## ##  eg square(4) should output\n#### #### #### ####  Exercise: Draw a right handed triangle eg triangle(2) should output\n# ##  eg triangle(4) should output\n# ## ### ####  Exercise: Draw an isosceles triangle eg isosceles(2) should output\n # ###  eg isosceles(4) should output\n # ### ##### #######  Exercise: find the longest string Write a function that takes in an arra/list of strings and then prints out the longest one\neg: longest([\u0026quot;the\u0026quot;,\u0026quot;quick\u0026quot;,\u0026quot;brown\u0026quot;, \u0026quot;fox\u0026quot;, \u0026quot;ate\u0026quot;, \u0026quot;my\u0026quot;, \u0026quot;chickens\u0026quot;])\nshould output\nchickens  If there are multiple longest strings then print them all.\neg:\nlongest([\u0026quot;once\u0026quot;, \u0026quot;upon\u0026quot;, \u0026quot;a\u0026quot; \u0026quot;time\u0026quot;])\nshould output\nonce upon time  Exercise: combine two lists/arrays Write a function that combines two lists by alternatingly taking elements and prints the result\neg combine([11,22,33], [1,2,3]) should output\n [11,1,22,2,33,3]  Exercise: Frame some text Write a function that takes a list of strings an prints them, one per line, in a rectangular frame.\neg: frame([\u0026quot;Write\u0026quot;,\u0026quot;good\u0026quot;,\u0026quot;code\u0026quot;,\u0026quot;every\u0026quot;,\u0026quot;day\u0026quot;]) gets printed as:\n********* * Write * * good * * code * * every * * day * *********  Next Steps Well done for getting this far! These excercises practiced some really fundamental skills. You should be familiar with some loops, if statements, comparisons, and the syntax of functions. But even though we have hit the end of this project there is a LOT left for you to learn and practice.\nMake sure you really understand all the code you wrote here. You can\u0026rsquo;t build a house without a foundation. You need a solid foundational skills so you can be a pro!\nSo keep practicing. Practice in your free time, practice if you are ahread of schedule with one of your projects, practice if you need a break from another task. Push yourself and be awesome! You can even practice with a pen and paper if you don\u0026rsquo;t have access to a computer at home.\nRemember that you are here to become a professional! Professionals take ownership of their own learning and skills, and professionals help the people around them to become successful.\nHere are some resources you can use to continue this journey:\n https://adriann.github.io/programming_problems.html : this has lots of cool little excercises. They\u0026rsquo;re mostly pretty small, you could do a few every day if you wanted to. Even one per day would be a winner https://www.codewars.com: you should know about this already, it\u0026rsquo;s legit!  Have fun :)\n"
},
{
	"uri": "/tech-department/projects/kotlin/liner-layout-using-the-layout-editor/",
	"title": "Linear layout using the Layout Editor",
	"tags": [],
	"description": "",
	"content": " Task 1: Create the AboutMe Project 1 - Open Android Studio, if it\u0026rsquo;s not already open.\n2 - If a project is already open in Android Studio, select File \u0026gt; New \u0026gt; New Project.\n3 - If a project is not already open, select + Start a new Android Studio project in the Welcome to Android Studio dialog.\n4 - In the Create New Project dialog, in the Phone and Tablet tab, select the Empty Activity template. Click Next.\n5 - In the next Create New Project dialog, set the following parameters and click Finish.\nUse this details below as a guideline and not the actual data for your settings: Android Studio will take a moment to generate the project files.\n6 - Run your app. You will see the string \u0026ldquo;Hello World\u0026rdquo; on the blank screen\nThe Empty Activity template creates a single empty activity, Mainactivity.kt. The template also creates a layout file called activity_main.xml. The layout file has ConstraintLayout as its root ViewGroup, and it has a single TextView as its content.\nTask 2 : Change the root layout to use LinearLayout In this task, you change the generated root ViewGroup to a LinearLayout. You also arrange the UI elements vertically.\nView groups A ViewGroup is a view that can contain child views, which are other views and view groups. Views that make up a layout are organized as a hierarchy of views with a view group as the root.\nIn a LinearLayout view group, the UI elements are arranged either horizontally or vertically.\nChange the root layout so that it uses a LinearLayout view group:\n Select the Project \u0026gt; Android pane. In the app/res/layout folder, open the activity_main.xml file. Select the Text tab and change the root view group from ConstraintLayout to LinearLayout. Remove the TextView. In the LinearLayout element, add the android:orientation attribute and set it to vertical.  Before:\n\u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; tools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt; \u0026lt;TextView android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:text=\u0026quot;Hello World!\u0026quot; app:layout_constraintBottom_toBottomOf=\u0026quot;parent\u0026quot; app:layout_constraintLeft_toLeftOf=\u0026quot;parent\u0026quot; app:layout_constraintRight_toRightOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; After: \u0026lt;LinearLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; tools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt; \u0026lt;/LinearLayout\u0026gt; Back  After:\n\u0026lt;LinearLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; tools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt; \u0026lt;/LinearLayout\u0026gt;  Task 3 : Add a TextView using Layout Editor The Layout Editor is a visual-design tool inside Android Studio. Instead of writing XML code by hand to build your app\u0026rsquo;s layout, you can use the Layout Editor to drag UI elements into the design editor.\nTo see the Layout Editor, click the Design tab. The screenshot below shows the parts of the Layout Editor.\nKey 1 - Design editor: Displays a visual representation of your screen layout in design view, blueprint view, or both. The design editor is the main part of the Layout Editor.\n2 - Toolbar: Provides buttons to configure your layout\u0026rsquo;s appearance in the design editor, and to change some layout attributes. For example, to change the display of your layout in the design editor, use the Select Design Surface drop-down menu:\n Use Design for a real-world preview of your layout. Use Blueprint to see only outlines for each view. Use Design + Blueprint to see both displays side by side.  3 - Palette: Provides a list of views and view groups that you can drag into your layout or into the Component Tree pane.\n4 - Attributes: Shows attributes for the currently selected view or view group. To toggle between a complete list of attributes and commonly used attributes, use the icon at the top of the pane.\n5 - Component Tree: Displays the layout hierarchy as a tree of views. The Component Tree is useful when you have small, hidden, or overlapping views that you could not otherwise select in the design editor.\nStep 1: Add a TextView 1 - Open the res/layout/activity_main.xml file, if it\u0026rsquo;s not already open.\n2 - Switch to the Text tab and inspect the code. The code has a LinearLayout as its root view group. (View groups are views that contain other views.)\nThe LinearLayout has the required attributes layout_height, layout_width, and orientation, which is vertical by default.\n3 - Switch to the Design tab to open the Layout Editor.\n*Note: The Design tab and the Text tab shows the same layout, just in a different way. Changes you make in one tab are reflected in the other.*\n4 - Drag a text view from the Palette pane onto the design editor.\n5 - Notice the Component Tree pane. The new text view is placed as a child element of the parent view group, which is the LinearLayout.\n6 - Open the Attributes pane, if it\u0026rsquo;s not open already. (To open the pane, double-click the newly added TextView in the design editor.)\n7 - Set the following attributes in the Attributes pane:\n   Attribute Value     ID name_text   text Set it to your name. (One of the text fields shows a wrench icon to indicate that it\u0026rsquo;s for the tools namespace. The one without the wrench is for the android namespace—this is the text field you want.)   textAppearance \u0026gt; textSize 20sp   textAppearance \u0026gt; textColor @android:color/black   textAppearance \u0026gt; textAlignment Center     Step 2: Create a string resource In the Component Tree, next to the TextView, you will notice a warning icon . To see the warning text, click the icon or point to it, as shown in the screenshot below.\nTo resolve the warning, create a string resource:\n1 - In the Attributes pane, click the three dots next to the text attribute that you set to your name. The resource editor opens.\n2 - In the Resources dialog, select Add new resource \u0026gt; New string Value.\n3 - In the New String Value Resource dialog, set the Resource name field to name. Set the Resource value field to your own name. Click OK. Notice that the warning is gone.\n4 - Open the res/values/strings.xml file and look for the newly created string resource called name.\n\u0026lt;string name=\u0026quot;name\u0026quot;\u0026gt;Aleks Haecky\u0026lt;/string\u0026gt;  Step 3: Create a dimension resource You just added a resource using the resource editor. You can also extract resources in the XML code editor to create new resources:\n In the activity_main.xml file, switch to the *Text tab.\n On the textSize line, click on the number (20sp) and type Alt+Enter (Option+Enter on a Mac). Select Extract dimension resource from the popup menu.\n In the Extract Resource dialog, enter text_size in the Resource name field. Click OK.\n  4 - Open the res/values/dimens.xml file to see the following generated code:\n\u0026lt;dimen name=\u0026quot;text_size\u0026quot;\u0026gt;20sp\u0026lt;/dimen\u0026gt;  Note: If the dimens.xml file was not already present inside your res/values folder, Android Studio creates it.\n5 - Open MainActivity.kt file, and look for the following code at the end of the onCreate() function:\nsetContentView(R.layout.activity_main)  The setContentView() function connects the layout file with the Activity. The specified layout resource file is R.layout.activity_main:\n R is a reference to the resource. It is an auto-generated class with definitions for all the resources in your app.\n layout.activity_main indicates that the resource is a layout named activity_main.\n  6 - Run your app. A TextView with your name is displayed.\nTask 4 : Style your TextView When you look at your app screen, your name is pushed up against the top of the screen, so now you add padding and a margin.\nPadding versus margin Padding is the space inside the boundaries of a view or element. It is the space between the edges of the view and the view\u0026rsquo;s content, as shown in the figure below.\nA view\u0026rsquo;s size includes its padding. The following are commonly used padding attributes:\n android:padding specifies padding for all four edges of the view. android:paddingTop specifies padding for the top edge. android:paddingBottom specifies padding for the bottom edge. android:paddingStart specifies padding for the \u0026ldquo;starting\u0026rdquo; edge of the view. android:paddingEnd specifies padding for the \u0026ldquo;ending\u0026rdquo; edge of the view. android:paddingLeft specifies padding for the left edge. android:paddingRight specifies padding for the right edge.  Margin is the space added outside of the view\u0026rsquo;s borders. It is the space from the edge of the view to its parent, as shown in the figure above. The following are commonly used margin attributes:\n android:layout_margin specifies a margin for all four sides of the view. android:layout_marginBottom specifies space outside the bottom side of this view. android:layout_marginStart specifies space outside the \u0026ldquo;starting\u0026rdquo; side of this view. android:layout_marginEnd specifies space on the end side of this view. android:layout_marginLeft specifies space on the left side of this view. android:layout_marginRight specifies space on the right side of this view.  Right/left versus start/end \u0026quot;Right\u0026quot; and \u0026quot;left\u0026quot; always refer to the right and left sides of the screen, whether your app uses a left-to-right (LTR) flow or a right-to-left (RTL) flow. \u0026quot;Start\u0026quot; and \u0026quot;end\u0026quot; always refer to the start and end of the flow: For a LTR flow, start = left and end=right. For a RTL flow, start=right and end=left. If your app targets API level 17 (Android 4.2) or higher: Use \u0026quot;start\u0026quot; and \u0026quot;end\u0026quot; instead of \u0026quot;left\u0026quot; and \u0026quot;right\u0026quot;. For example, android:layout_marginLeft should become android:layout_marginStart to support RTL languages. If you want your app to work with versions lower than Android 4.2; that is, if the app's targetSdkVersion or minSdkVersion is 16 or lower: Add \u0026quot;start\u0026quot; and end\u0026quot; in addition to \u0026quot;left\u0026quot; and \u0026quot;right\u0026quot;. For example, use both android:paddingLeft and android:paddingStart.  Step 1: Add padding To put space between your name and the top edge of the name text view, add top padding.\n Open activity_main.xml file in the Design tab.\n In the Component Tree or in the design editor, click the text view to open its Attributes pane.\n At the top of the Attributes pane, click the double-arrow icon to see all the available attributes.\n Search for Padding, expand it, and click the three dots \u0026hellip; next to the top attribute. The Resources dialog appears.\n In the Resources dialog, select Add new resource \u0026gt; New dimen Value.\n In the New Dimension Value Resource dialog, create a new dimen resource called small_padding with a value of 8dp.\n  The dp abbreviation stands for density-independent. If you want a UI element to look the same size on screens with different densities, use dp as your unit of measurement. When specifying text size, however, always use sp (scalable pixels). Click OK.\nStep 2: Add a margin To move the name text view away from the edge of the parent element, add a top margin.\nIn the Attributes pane, search for \u0026ldquo;margin\u0026rdquo; to find Layout_Margin.\nExpand Layout_Margin, and click the three dots \u0026hellip; next to the top attribute.\nCreate a new dimen resource called layout_margin and make it 16dp. Click OK.\nStep 3: Add a font To make the name text view look better, use the Android Roboto font. This font is part of the support library, and you add the font as a resource.\n In the Attributes pane, search for \u0026ldquo;fontFamily\u0026rdquo;.\n In the fontFamily field, click the drop-down arrow, scroll to the bottom of the list, and select More Fonts.\n In the Resources dialog, search for rob and choose Roboto. In the Preview list, select Regular.\n Select the Add font to project radio button.\n Click OK.\n  The res folder now has a font folder that contains a roboto.ttf font file. The @font/roboto attribute is added to your TextView.\nStep 4: Extract the style A style is a collection of attributes that specify the appearance and format for a view. A style can include font color, font size, background color, padding, margin, and other common attributes.\nYou can extract the name text view\u0026rsquo;s formatting into a style and reuse the style for any number of views in your app. Reusing a style gives your app a consistent look when you have multiple views. Using styles also allows you to keep these common attributes in one location.\n1 - Right-click the TextView in the Component Tree and select Refactor \u0026gt; Extract Style.\n2 - In the Extract Android Style dialog, clear the layout_width checkbox, the layout_height checkbox, and the textAlignment checkbox. These attributes are usually different for each view, so you don\u0026rsquo;t want them to be part of the style.\n3 - In the Style name field, enter NameStyle.\n4 - Click OK.\n5 - A style is also a resource, so the style is saved in the res/values/ folder in a styles.xml file. Open styles.xml and examine the generated code for the NameStyle style, which will look similar to this:\n\u0026lt;style name=\u0026quot;NameStyle\u0026quot;\u0026gt; \u0026lt;item name=\u0026quot;android:layout_marginTop\u0026quot;\u0026gt;@dimen/layout_margin\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:fontFamily\u0026quot;\u0026gt;@font/roboto\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:paddingTop\u0026quot;\u0026gt;@dimen/small_padding\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textColor\u0026quot;\u0026gt;@android:color/black\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026quot;android:textSize\u0026quot;\u0026gt;@dimen/text_size\u0026lt;/item\u0026gt; \u0026lt;/style\u0026gt;  6 - Open activity_main.xml and switch to the Text tab. Notice that the generated style is being used in the text view as style=\u0026quot;@style/NameStyle\u0026quot;.\n7 - Run the app and notice the changes in the font and the padding around your TextView.\nTask 5 : Add an ImageView\nMost real-world Android apps consist of a combination of views to display images, display text, and accept input from the user in the form of text or click events. In this task, you add a view to display an image.\nAn ImageView is a view for displaying image resources. For example, an ImageView can display Bitmap resources such as PNG, JPG, GIF, or WebP files, or it can display a Drawable resource such as a vector drawing.\nThere are image resources that come with Android, such as sample icons, avatars, and backgrounds. You will add one of these resources to your app.\n1 - Display the layout file In the Design tab, then drag an ImageView from the Palette pane to below name_text in the Component Tree. The Resources dialog opens.\n2 - Select Drawable if it\u0026rsquo;s not already selected.\n3 - Expand android, scroll, and select btn_star_big_on. It\u0026rsquo;s the yellow star .\n4 - Click OK.\nThe star image is added to the layout below your name. Because you have a vertical LinearLayout, views you add are vertically aligned.\n5 - Switch to the Text tab and look at the generated ImageView code. The width is set to match_parent, so the view will be as wide as its parent element. The height is set to wrap_content, so the view will be as tall as its content. The ImageView references the btn_star_big_on drawable.\n\u0026lt;ImageView android:id=\u0026quot;@+id/imageView\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; app:srcCompat=\u0026quot;@android:drawable/btn_star_big_on\u0026quot; /\u0026gt;  8 - To rename the id of the ImageView, right-click on \u0026rdquo;@+id/imageView\u0026rdquo; and select Refactor \u0026gt; Rename.\n7 - In the Rename dialog, set the id to @+id/star_image. Click Refactor.\nTip: Refactor \u0026gt; Rename renames all the occurrences of an attribute or variable name in your app project.\n8 - In the Design tab, in the Component Tree, click the warning icon next to star_image. The warning is for a missing contentDescription, which screen readers use to describe images to the user.\n9 - In the Attributes pane, click the three dots \u0026hellip; next to the contentDescription attribute. The Resources dialog opens.\n10 - In the Resources dialog, select Add new resource \u0026gt; New string Value. Set the Resource name field to yellow_star, and set the Resource value field to Yellow star. Click OK.\n11 - Use the Attributes pane to add a top margin of 16dp (which is @dimen/layout_margin) to the yellow_star, to separate the star image from the name.\n12 - Run your app. Your name and the star image are displayed in your app\u0026rsquo;s UI.\nTask 5 : Add a ScrollView A ScrollView is a view group that allows the view hierarchy placed within it to be scrolled. A scroll view can contain only one other view, or view group, as a child. The child view is commonly a LinearLayout. Inside a LinearLayout, you can add other views.\nThe following image shows an example of a ScrollView that contains a LinearLayout that contains several other views.\nIn this task, you will add a ScrollView that allows the user to scroll a text view that displays a brief biography. If you are only making one view scrollable, you can put the view directly into the ScrollView, which is what you do in this task.\nStep 1: Add a ScrollView that contains a TextView 1 - Open the activity_main.xml file in the Design tab.\n2 - Drag a scroll view into the layout by dragging it into the design editor, or into the Component Tree. Put the scroll view below the star image.\n3 - Switch to the Text tab to inspect the generated code.\n// Auto generated code \u0026lt;ScrollView android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;LinearLayout android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; /\u0026gt; \u0026lt;/ScrollView\u0026gt;  The height and width of the ScrollView match the parent element. Once the name_text text view and the star_image image view have used enough vertical space to display their contents, the Android system lays out the ScrollView to fill the rest of the available space on the screen.\n4 - Add an id to the ScrollView and call it bio_scroll. Adding an id to the ScrollView gives the Android system a handle for the view so that when the user rotates the device, the system preserves the scroll position.\n5 - Inside the ScrollView, remove the LinearLayout code, because your app will only have one view that\u0026rsquo;s scrollable—a TextView.\n6 - Drag a TextView from the Palette to the Component Tree. Put the TextView under the bio_scroll, as a child element of bio_scroll.\n7 - Set the id of the new text view to bio_text.\n8 - Next you add a style for the new text view. In the Attributes pane, click the three dots \u0026hellip; next to the style attribute to open the Resources dialog.\n9 - In the Resources dialog, search for NameStyle. Select NameStyle from the list, and click OK. The text view now uses the NameStyle style, which you created in a prior task.\nStep 2: Add your biography to the new TextView Open strings.xml, create a string resource called bio, and put in some long text about yourself, or about anything that you want.\nUse \\n to indicate a line break. If you use an apostrophe, you must escape it with a backslash. For example: \u0026ldquo;You mustn\\\u0026rsquo;t forget the backslash.\u0026rdquo; For bold text use \u0026hellip;, and for italicized text use \u0026hellip;. For example: \u0026ldquo;This text is bold and this text is italics.\u0026rdquo;\nHere is a sample biography:\n\u0026lt;string name=\u0026quot;bio\u0026quot;\u0026gt;Hi, my name is Aleks. \\n\\nI love fish. \\n\\nThe kind that is alive and swims around in an aquarium or river, or a lake, and definitely the ocean. \\nFun fact is that I have several aquariums and also a river. \\n\\nI like eating fish, too. Raw fish. Grilled fish. Smoked fish. Poached fish - not so much. \\nAnd sometimes I even go fishing. \\nAnd even less sometimes, I actually catch something. \\n\\nOnce, when I was camping in Canada, and very hungry, I even caught a large salmon with my hands. \\n\\nI\\'ll be happy to teach you how to make your own aquarium. \\nYou should ask someone else about fishing, though.\\n\\n\u0026lt;/string\u0026gt;  2 - In the bio_text text view, set the value of the text attribute to the bio string resource that contains your biography.\n3 - To make the bio_text text easier to read, add spacing between the lines. Use the lineSpacingMultiplier attribute, and give it a value of 1.2.\nNotice how in the design editor, the bio text runs all the way to the side edges of the screen. To fix this problem, you can add left, start, right, and end padding attributes to the root LinearLayout. You do not need to add bottom padding, because text that runs right up to the bottom signals to the user that the text is scrollable.\n4 - Add start and end padding of 16dp to the root LinearLayout.\n5 - Switch to the Text tab, extract the dimension resource, and name it layout_padding.\nNote: Starting from API level 17, use \u0026ldquo;start\u0026rdquo; and \u0026ldquo;end\u0026rdquo; instead of \u0026ldquo;left\u0026rdquo; and \u0026ldquo;right\u0026rdquo; for padding and margin to adapt your app for RTL languages like Arabic.\n6 - Run your app and scroll through the text.\nCongratulations! You have created a complete app from scratch, and it looks great! "
},
{
	"uri": "/tech-department/department-processes/linkz/",
	"title": "Linkz",
	"tags": [],
	"description": "",
	"content": " Calendars  Umuzi tech events FOR RECRUITS Umuzi Tech deadlines  Forms  code review code submission events attendance form? TODO  "
},
{
	"uri": "/tech-department/tags/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/linux/",
	"title": "Linux challenges",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/live_dashboards/",
	"title": "Live Dashboard Assignment",
	"tags": ["webscraping", "dashboard"],
	"description": "",
	"content": "Watch the sessions on Dashboarding with Notebooks to help you create a dashboard with Jupyter Notebooks and Plotly.\nWrite a script that will get the latest figures data from ReliefWeb\u0026rsquo;s Crisis Figures on a daily basis. The Latest Figures dataset contains information on the world\u0026rsquo;s most pressing humanitarian crises. The data, curated by ReliefWeb\u0026rsquo;s editorial team based on its relevance to the humanitarian community, is updated daily.\nCreate interactive graphs showing the number of People in Need and People Targeted for Assistance by country.\n"
},
{
	"uri": "/tech-department/workshops/python-specific/live-code-python-intro/",
	"title": "Live code python intro",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/javascript-specific/live-code-javascript-intro/",
	"title": "Live code: introduction to JS",
	"tags": [],
	"description": "",
	"content": "Demonstrate:\n F12 in the browser Use of vs code terminal  Talk a little about the history of JS:\n started off in the browser only was kak, became lekker now the backend\u0026hellip;  "
},
{
	"uri": "/tech-department/workshops/java-specific/live-code-java-intro/",
	"title": "Live coding: Introduction to Java",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/tags/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": " Through the development process logging helps us evaluate computation which we might be uncertain about, or show us what is happening during runtime where we have little control. Its like a third eye helping us see things that we might otherwise finding very difficult to see.\nWhat? Logging is basically getting your program to write stuff down. You are already familiar with printing things out to the console or screen, logging is like that but on steroids.\nBasically when a program runs in a production environment, logs let us keep track of what it is doing over time. A log is a series of messages that get printed or sent somewhere. They might be stored in a file, or sent over a network to a special logging service, or (during development) you might want to just see log messages on your screen.\nWhy? Because a running program can be super opaque. Sometimes thing break in really interesting ways and logs can be used to understand what actually happened that led up to this breakage. Sometimes logs need to be in place for generating metrics about system performance. Sometimes logs are used to understand security breaches.\nSometimes logs are just useful for a developer making some changes to a system. A dev can watch the log messages roll in and get a clear picture of what the code is doing.\nLog levels Log messages come in a few different flavours called levels. Basically each log message is given a level (either implicitly or explicitly) and those levels mean different things. The different log levels tend to be pretty consistent between languages.\nThere are the main levels:\n debug: info for devs, these shouldn\u0026rsquo;t be logged on a production environment info: this veries. Basically there are usually a few different stakeholders involved in a project. These logs should add clarity without being overwhelmingly noisy warn: something is looking kinda weird error: oh crap. Some error or exception has happened critical or fatal: This is serious, immediate action required  As an analogy, if you shout \u0026ldquo;DONT TOUCH THAT!\u0026rdquo; to a three year old about to put their hand on a stove then that might be a critical message. And if you say \u0026ldquo;I\u0026rsquo;m going to the shop\u0026rdquo; then that might be an info message. And if you say \u0026ldquo;I\u0026rsquo;m going to the shop to buy cigaretts\u0026rdquo; then that might be an error message.\nTwo major use cases for log levels are:\n deciding which logs should be generated. Eg: In your production environment you wont want to see any debug logs. But when you are developing then you do want to see them taking different actions on messages of different levels: eg: if there is an warn log message then create a ticket on the bugtracker, and if there is a critical log message then sound the alarms.  In your language Different languages have different tooling that you can use to manage logs. To continue learning about logs, please follow the appropriate link below:\n  TOPICS: Logging in Node and JS   TOPICS: Java Logging with Log4j   TOPICS: [TODO] Logging in Python   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/logging/",
	"title": "Logging in Node and JS",
	"tags": [],
	"description": "",
	"content": "Please make sure you read and understand this before moving forward: TOPICS: Logging Why we would like to log\n Quick debugging of unexpected behavior during development Browser-based logging for analytics or diagnostics Logs for your server application to log incoming requests, as well as any failures that might have happened Optional debug logs for your library to assist the user with issues Output of your CLI to print progress, confirmation messages or errors  The most basic form of logging in javascript is console logging\nThe console object provides access to the browser\u0026rsquo;s debugging console and though it might differ from browser to browser they\u0026rsquo;re a set of functions common to all see more features here\nconsole.log('Logging in Node and JS');  Log Levels\nBut, as you know, there are multiple ways and places one can log to, like output logs in a file or on a reporting tool or intecepting a request to the backend. For such activities you might need more than just console.logging. Lucky for us Node provides a few options for this.\n Middleware  Expressjs  Packages such as:  Winston Node-Loggly Morgan Retrace agent for server logs   Resources for reading\n https://www.twilio.com/blog/guide-node-js-logging https://stackify.com/node-js-logging/  "
},
{
	"uri": "/tech-department/topics/python-specific/logging/",
	"title": "Logging in Python",
	"tags": [],
	"description": "",
	"content": " Please make sure you read and understand this before moving forward: TOPICS: Logging As you have read on the previous topic, Logging is really useful. in Python we use the logging module for that.\nCheck out it\u0026rsquo;s official well documented documentation\nTutorials  Python documentation: Basic introduction\n Real Python\n  "
},
{
	"uri": "/tech-department/tags/logistic-regression/",
	"title": "Logistic Regression",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/",
	"title": "Logistic regression",
	"tags": [],
	"description": "",
	"content": " Background material Sensitivity and specificity\nUnderstanding ROC curves with Python\nAssignment 1 Complete and submit a copy of PROJECTS: Predict credit card approvals .\nAssignment 2 Complete and submit PROJECTS: Predict breast cancer . For your submission, create an html report to accompany your notebook in your repo.\n"
},
{
	"uri": "/tech-department/topics/ncit/115392/",
	"title": "Managing the Software Development Process",
	"tags": ["agile"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/memory-game-modern/",
	"title": "Memory Game: rebuild using a modern web frontend framework",
	"tags": [],
	"description": "",
	"content": " Prerequisites You should have already completed this: PROJECTS: Memory game in vanilla js You should also have some solid TDD skills.\nYou need to be familiar with either AngularJs or React.\nInstructions Part 1: MVP Create an MVP memory game using Angular or React. Follow a TDD procedure.\n The game should draw a grid with 6 columns and 5 rows The cards in the game should be randomized When the game finishes then display a message on the screen that says \u0026ldquo;Congratulations! You are done!\u0026rdquo; There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game  Part 2: Count-down  Draw a timer widget on the screen. It should start off showing 2 minutes and count down to zero The color of the timer should be green initially the timer should turn orange after one minute has passed the timer should turn red when there are 30 seconds left on the clock when the timer runs out:  flip all the cards over to reveal what is underneath display a message saying \u0026ldquo;Sorry! You lost the game\u0026rdquo;. There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game   Part 3: Winning stats When the user wins the game then the congratulations message should include:\n the number of turns taken (1 turn == 2 clicks) the amount of time taken  Part 4: ExpressJs  Serve your game using ExpressJS (as static content) Connect a MongoDB database expose the following json api endpoints:  POST update_score: This should accept a json object like this {name:\u0026quot;a string\u0026quot;, time: number of seconds, turns: number of turns taken}. This endpoint must update the database GET leaderboard/time: This should return the top 10 fastest people to win the game GET leaderboard/turns: This should return the top 10 people to win the game using the fewest clicks   Part 5: Ajax  When the game starts then the user will need to enter their name\n Whenever a user successfully wins the game then:\n their score should be stored in MongoDB updated through use of the update_score endpoint the two leaderboards should be fetched and displayed on the page If the current user is on a leaderboard then they should be highlighted  Whenever a player loses the game\n display the two leaderboards   "
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/",
	"title": "Memory game in vanilla js",
	"tags": ["TDD", "Dom Manipulation", "Mocks and spies"],
	"description": "",
	"content": " Here is an example of a memory game: http://dkmgames.com/memory/pairsrun.php\nInstructions Create a Memory game MVP. Requirements:\n Take a moment to google MVP. If you add unnecessary features we\u0026rsquo;ll ask you to remove them make use of simple dom elements, no fancy graphics needed or canvas stuff a single player can play the game board is a pre-defined size board allows one set of symbols or images to be randomly hidden  Build your game in a TDD manner. If you don\u0026rsquo;t include tests in your final submission you will be held back and you will be expected to start over.\n"
},
{
	"uri": "/tech-department/projects/memory-game-angular-material/",
	"title": "Memory game using Angular Material",
	"tags": [],
	"description": "",
	"content": "Take a look at this: PROJECTS: Memory game in vanilla js Please build it using Angular Material\n"
},
{
	"uri": "/tech-department/topics/messaging/",
	"title": "Messagings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/mocks/",
	"title": "Mocks",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/mocks-and-spies/",
	"title": "Mocks and Spies",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/model-evaluaton/",
	"title": "Model Evaluation",
	"tags": [],
	"description": "",
	"content": " The slides to the workshop on Understanding Linear regression metrics  References  https://www.dataquest.io/blog/understanding-regression-error-metrics/  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/mongodb/",
	"title": "MongoDB and JavaScript",
	"tags": [],
	"description": "",
	"content": " https://goalkicker.com/MongoDBBook/ https://www.w3schools.com/nodejs/nodejs_mongodb.asp https://zellwk.com/blog/crud-express-mongodb/  "
},
{
	"uri": "/tech-department/topics/python-specific/mongodb/",
	"title": "MongoDB and Python",
	"tags": [],
	"description": "",
	"content": " https://www.mongodb.com/blog/post/getting-started-with-python-and-mongodb: The official \u0026ldquo;getting started\u0026rdquo; guide https://docs.mongodb.com/manual/tutorial/getting-started/: something a bit more in depth https://realpython.com/introduction-to-mongodb-and-python/: a nice tutorial from the folks at RealPython  "
},
{
	"uri": "/tech-department/topics/ios-mobile/more-segues/",
	"title": "More Segues",
	"tags": [],
	"description": "",
	"content": " Slides More Segues (Lecture 16) Video Lectures: Lecture 16: More Segues "
},
{
	"uri": "/tech-department/projects/ios-mobile/swift-and-gestures-animations/",
	"title": "More Swift, Gestures and Animations",
	"tags": [],
	"description": "",
	"content": " Project Set "
},
{
	"uri": "/tech-department/topics/ios-mobile/swift-and-gestures-animations/",
	"title": "More Swift, Gestures and Animations",
	"tags": [],
	"description": "",
	"content": " Slides Data Structures, Protocols, Delegation, Strings, Function Types, Closures (Lecture 4) Miscellaneous, Views, Demo (enum) (Lecture 5) Views continued, Gestures (Lecture 6) Multiple MVCs, Timer, Animation (Lecture 7) Animation (Lecture 8) Video Lectures: Lecture 4: More Swift Lecture 5: Drawing Lecture 6: Multitouch Lecture 7: Multiple MVCs, Timer and Animation Lecture 8: Animation Additional Content: Friday Session 1: Debugging and Xcode Tips and Tricks Reading Assignment 1: Intro to Swift "
},
{
	"uri": "/tech-department/tags/multiple-linear-regression/",
	"title": "Multiple Linear Regression",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/ios-mobile/timer-segues-autolayout/",
	"title": "Multithreading Layout and Other Functionality - Animated Set",
	"tags": [],
	"description": "",
	"content": " Project Animated Set "
},
{
	"uri": "/tech-department/projects/ios-mobile/multithreading-layout-and-functionality/",
	"title": "Multithreading Layout and Other Functionality - Graphical Set",
	"tags": [],
	"description": "",
	"content": " Project Graphical Set "
},
{
	"uri": "/tech-department/topics/ios-mobile/multithreading-layout-and-functionality/",
	"title": "Multithreading, Auto-Layout and Other Functionality",
	"tags": [],
	"description": "",
	"content": " Slides View Controller Life Cycle, Scroll View (Lecture 9) Multithreading, Auto-Layout (Lecture 10) Drag and Drop UI Views(Lecture 11) Emoji Art (demo) UI Text Field (Lecture 12) Emoji Art, Persistence, Archiving, File System, URL, Core Data, Cloud Kit (Lecture 13) More about Documents and Persistence Demo (Lecture 14) Video Lectures: Lecture 9: View Controller Lifecycle and Scroll View Lecture 10: Multithreading and Auto-layout Lecture 11: Drag and Drop, Table View and Collection View Lecture 12: Drag and Drop, Table View, Collection View, and Text Field Lecture 13: Persistence and Documents Lecture 14: Persistence and Documents Demo Additional Content: Friday Session 2: Github and Source Control Workflow Reading Assignment 2: Intro to Swift "
},
{
	"uri": "/tech-department/projects/data-science-specific/multivariate-linear-regression/",
	"title": "Multivariate Linear Regression",
	"tags": ["multiple-linear-regression"],
	"description": "",
	"content": " This week is all about one-hot encoding and multiple regression.\nBackground materials  Robust One-Hot Encoding in Python Feature Engineering and Selection ebook One-hot encoding multicollinearity and the dummy variable trap Emulating R Regression Plots in Python Statsmodels Regression Plot Building and evaluating models. Test/Train Splits and Crossvalidation Interpreting residuals plot Stattrek and Statwing  Assignment We will predict employee salaries from different employee characteristics (or features). Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary metadata.csv. You will need the packages matplotlib / seaborn, pandas and statsmodels.\nSteps and questions  Perform some exploratory data analys (EDA) is by creating appropariate plots (e.g scatterplots and histograms) to visualise and investigate relatioships between dependent variables and the target/independent variable (salary).   Create a descriptive statistics table to further characterise and describe the population under investigation. Which variables seem like good predictors of salary? Do any of the variables need to be transformed to be able to use them in a linear regression model?   Perform some basic features engineering by one-hot encoding the variable Field into three dummy variables, using HR as the reference category   You can use pandas\u0026rsquo; get_dummies() function for this (refer to \u0026ldquo;Background materials 1-3\u0026rdquo;).   Perform correlation and statistical significance analysis to validate the relationship salary to each of the potential predictor variables:   Calculate Pearson correlation coeffificent and plot the correspnding correlation matrix Calculate p-values related to the Pearson correlation coeffificents Address any problems that may adversely affect the multiple regression (e.g multicollinearity)   Conduct some basic feature selection tasks by aggreating results from EDA, correlation matrix and p-values. Justify your feature selection decisions. Split your data into a training and test set. Train model:   Fit a multiple linear regression model using a training dataset with corresponding features selected above Use the multiple linear regression model created from independent variables selected above and the training dataset to predict salary using the training dataset. Interpret the standardised coefficients given in the statsmodels output. What are the most important features when predicting employee salary?   Test model:   Run your model on the test set.   Evaluate model   Calculate and eplxain the significance of the Mean Absolute Error (MAE), Mean Squared Error (MSE), Root Mean Square Error (RMSE) and R-squared values for your model Calculate the standardised residuals (resid()) and standardised predicted values (fittedvalues()). Plot the residuals versus the predicted values using seaborn\u0026rsquo;s residplot with predicted values as the x parameter, and the actual values as y, specify lowess=True. Are there any problems with the regression?   Benchmark with cross-validation model   Perform cross-validation using the training dataset, test and evaluate the cross-validation model with test data Compare performance of the cross-validation model (less prone to over-fitting) to determine whether the developed model has overfitted or not Does it seem like you have a reasonably good model?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/natural-language-processing/",
	"title": "Natural Language Processing",
	"tags": [],
	"description": "",
	"content": " Natural Language Processing, or NLP, is used to analyse, visualise, and predict natural language. That is, languages that developed naturally, such as isiZulu, English or Spanish (but not Java or C#).\nVideos and Readings Watch the following videos as an introduction to Natural Language Processing in Python: - Introduction to NLP - Data cleaning and text-preprocessing in Python - Exploratory data analysis and word clouds in Python - Sentiment analysis with TextBlob in Python\nThe code from the videos can be found here.\nThe videos are a great introduction to the basic NLP analysis pipeline. They go through how to do NLP with the packages NLTK and TextBlob. However, we will be using spaCy as that is most often used in industry. For documentation on spaCy commands, see spaCy\u0026rsquo;s website and RealPython.\nTerms to know Natural Language Processing has its own set of terms that you should know to be able to talk about it. At the end of this topic, you should know what the following terms mean:\n Tokenization Corpus Document-Term Matrix Stop words Bag-of-words Lemmatization Bi-grams Word cloud Named Entity Recognition  "
},
{
	"uri": "/tech-department/projects/data-science-specific/natural-language-processing/",
	"title": "Natural language processing",
	"tags": ["nlp"],
	"description": "",
	"content": "The contents of the State of the Nation Address (SONA) for every year dating back to 1990 is available on the South African Government website. This gives us a great opportunity to look at the priorities and challenges have faced over time, and the focus points for the various presidents over this time.\n Create a corpus from the English-language text for the SONAs dating back to 2000. Save them with the speaker information and date for later analysis. Where there is more than one SONA per year, get both.\n Use NLTK to create a document-term matrix from the text. To do this, the text should be:\n   in lowercase with punctuation and numbers removed (tip: use regular expressions) tokenized and lemmatized without stop words in a matrix   Examine the most frequently removed terms in each speech. You may need to add additional stop words that are said very often, such as \u0026ldquo;South Africa\u0026rdquo; and \u0026ldquo;country\u0026rdquo;. If a word occurs in the top 10 words in each SONA, add it to the stop words list.\n How do the speeches compare in terms of complexity and length? How many speeches are there per president? On average, which presidents use the most unique words and which presidents use the most words?\n Create word clouds to visualise the speeches for each president. What are the main issues that they talked about during their presidency?\n Use TextBlob to do sentiment analysis of the SONAs. Get the polarity and subjectivity for each SONA and visualise the changes in polarity and subjectivity over time. Also create a graph of the average polarity and subjectivity by president. Do you notice any patterns?\n How have focus areas and sentiment in the SONAs changed over the last twenty years in South Africa? Are there clear changes in focus areas between different presidents?\n  "
},
{
	"uri": "/tech-department/tags/ncit/",
	"title": "Ncit",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/",
	"title": "Ncits",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/nested-classes/",
	"title": "Nested Classes",
	"tags": [],
	"description": "",
	"content": " Classes can be nested in other classes\nclass Outer { private val bar: Int = 1 class Nested { fun foo() = 2 } } val demo = Outer.Nested().foo() // == 2  Inner classes A class may be marked as inner to be able to access members of outer class. Inner classes carry a reference to an object of an outer class:\nclass Outer { private val bar: Int = 1 inner class Inner { fun foo() = bar } } val demo = Outer().Inner().foo() // == 1  Anonymous inner classes Anonymous inner class instances are created using an object expression:\nwindow.addMouseListener(object: MouseAdapter() { override fun mouseClicked(e: MouseEvent) { // ... } override fun mouseEntered(e: MouseEvent) { // ... } })  If the object is an instance of a functional Java interface (i.e. a Java interface with a single abstract method), you can create it using a lambda expression prefixed with the type of the interface:\n val listener = ActionListener { println(\u0026quot;clicked\u0026quot;) }  "
},
{
	"uri": "/tech-department/projects/data-science-specific/challenges/network-intrusion/",
	"title": "Network Intrusion",
	"tags": [],
	"description": "",
	"content": " Software to detect network intrusions protects a computer network from unauthorized users, including perhaps insiders. The intrusion detector learning task is to build a predictive model (i.e. a classifier) capable of distinguishing between \u0026ldquo;bad\u0026rdquo; connections, called intrusions or attacks, and \u0026ldquo;good\u0026rdquo; normal connections.\nBackground The 1998 DARPA Intrusion Detection Evaluation Program was prepared and managed by MIT Lincoln Labs. The objective was to survey and evaluate research in intrusion detection. A standard set of data to be audited, which includes a wide variety of intrusions simulated in a military network environment, was provided.\nLincoln Labs set up an environment to acquire nine weeks of raw TCP dump data for a local-area network (LAN) simulating a typical U.S. Air Force LAN. They operated the LAN as if it were a true Air Force environment, but peppered it with multiple attacks.\nThe raw training data was about four gigabytes of compressed binary TCP dump data from seven weeks of network traffic. This was processed into about five million connection records. Similarly, the two weeks of test data yielded around two million connection records.\nA connection is a sequence of TCP packets starting and ending at some well defined times, between which data flows to and from a source IP address to a target IP address under some well defined protocol. Each connection is labeled as either normal, or as an attack, with exactly one specific attack type. Each connection record consists of about 100 bytes.\nThis data was adjusted from the original and was taken from the 1999 KDD Cup. The data set contains 43 features per record, with 41 of the features referring to the traffic input itself and the last two are labels (whether it is a normal or attack) and Score (the severity of the traffic input itself).\nInstructions Create a classifier to predict good vs bad connections. Go through all the relevant steps of CRISP Data Mining to decide on the best model to use and to build the classifier.\nThe compressed data file can be found here.\nOutcome Attacks fall into four main categories:\n DOS: denial-of-service, e.g. syn flood R2L: unauthorized access from a remote machine, e.g. guessing password U2R: unauthorized access to local superuser (root) privileges, e.g., various - \u0026ldquo;buffer overflow\u0026rdquo; attacks probing: surveillance and other probing, e.g., port scanning  Attack types:  back\n buffer_overflow\n ftp_write\n guess_passwd\n imap\n ipsweep\n land\n loadmodule\n multihop\n neptune\n nmap\n normal\n perl\n phf\n pod\n portsweep\n rootkit\n satan\n smurf\n spy\n teardrop\n warezclient\n warezmaster\n  Features: Table 1: Basic features of individual TCP connections.    feature name description type     duration length (number of seconds) of the connection continuous   protocol_type type of the protocol, e.g. tcp, udp, etc. discrete   service network service on the destination, e.g., http, telnet, etc. discrete   src_bytes number of data bytes from source to destination continuous   dst_bytes number of data bytes from destination to source continuous   flag normal or error status of the connection discrete   land 1 if connection is from/to the same host/port; 0 otherwise discrete   wrong_fragment number of \u0026lsquo;wrong\u0026rdquo; fragments continuous   urgent number of urgent packets continuous    Table 2: Content features within a connection suggested by domain knowledge.    feature name description type     hot number of \u0026lsquo;hot\u0026rsquo; indicators continuous   num_failed_logins number of failed login attempts continuous   logged_in 1 if successfully logged in; 0 otherwise discrete   num_compromised number of \u0026lsquo;compromised\u0026rsquo; conditions continuous   root_shell 1 if root shell is obtained; 0 otherwise discrete   su_attempted 1 if \u0026lsquo;su root\u0026rsquo; command attempted; 0 otherwise discrete   num_root number of \u0026lsquo;root\u0026rsquo; accesses continuous   num_file_creations number of file creation operations continuous   num_shells number of shell prompts continuous   num_access_files number of operations on access control files continuous   num_outbound_cmds number of outbound commands in an ftp session continuous   is_hot_login 1 if the login belongs to the \u0026lsquo;hot\u0026rsquo; list; 0 otherwise discrete   is_guest_login 1 if the login is a \u0026lsquo;guest\u0026rsquo; login; 0 otherwise discrete    Table 3: Traffic features computed using a two-second time window.    feature name description type     count number of connections to the same host as the current connection in the past two seconds continuous   Note: The following features refer to these same-host connections.     serror_rate % of connections that have SYN errors continuous   rerror_rate % of connections that have REJ errors continuous   same_srv_rate % of connections to the same service continuous   diff_srv_rate % of connections to different services continuous   srv_count number of connections to the same service as the current connection in the past two seconds continuous   Note: The following features refer to these same-service connections.     srv_serror_rate % of connections that have SYN errors continuous   srv_rerror_rate % of connections that have REJ errors continuous   srv_diff_host_rate % of connections to different hosts continuous    "
},
{
	"uri": "/tech-department/tags/nlp/",
	"title": "Nlp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Wikipedia.org defines Node.js as an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user\u0026rsquo;s web browser.\nThe article below unfold the following points\n What is Node.js Why Node js Node installation process Asynchronous vs Synchronous  Resources  Understanding the basics of Node.js https://codeburst.io/getting-started-with-node-js-a-beginners-guide-b03e25bca71b https://docs.npmjs.com/about-packages-and-modules https://www.w3schools.com/nodejs/nodejs_npm.asp https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc  "
},
{
	"uri": "/tech-department/projects/nodejs/sql/",
	"title": "Node &amp; SQL assignment",
	"tags": ["node", "sql"],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Set up a postgresql database on your computer. Please use Docker to do this. You can find more information here: TOPICS: Intro to Docker and Docker-compose  Create a table inside the database and name it Visiters. The table must contain the following fields :   id: This should be automatically generated by SQL visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  Helloworld Before you dive into anything too intense, let\u0026rsquo;s make sure that you can get node to connect to your database. Can you get this Node script to run:\n // npm install --save pg // find out more here: https://node-postgres.com/ const Pool = require(\u0026#34;pg\u0026#34;).Pool; const pool = new Pool({ user: \u0026#34;user\u0026#34;, host: \u0026#34;localhost\u0026#34;, database: \u0026#34;db\u0026#34;, password: \u0026#34;pass\u0026#34;, port: 5432 }); const helloWorld = () =\u0026gt; { pool.query( \u0026#34;SELECT $1::text as message\u0026#34;, [\u0026#34;Hello world!\u0026#34;], (error, results) =\u0026gt; { if (error) { throw error; } console.log(results.rows); } ); }; helloWorld();  Functionality Create a single index script with the following functions:\n addNewVisitor. This should save the Visitor into the database list all visitors. This should return an array of all the visitor names and ids delete a visitor update a visitor view one visitor: given a visitor\u0026rsquo;s id, return all information about that visitor delete all visitors  NOTE You will be expected to properly test your code. You can use whatever testing framework you want. If you use something that isn\u0026rsquo;t taught at Umuzi please justify your choice (if you found something cool we might incorporate it into the syllabus)\nResources  https://www.guru99.com/introduction-to-database-sql.html https://www.w3schools.com/sql/sql_intro.asp  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/javascript-dev-environment-setup/",
	"title": "Node setup",
	"tags": [],
	"description": "",
	"content": " This is a guide to help lab assistants setup a local JavaScript environment.\nStep 1 – Add Node.js PPA sudo apt-get install curl curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash - Or sudo apt-get install curl curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -  Step 2 – Install Node.js on Ubuntu sudo apt-get install nodejs  Step 3 – Check Node.js and NPM Version After installing node.js verify and check the installed version.\nnode -v  v13.0.1 or the latest version\nAlso, check the npm version\nnpm -v  6.12.0 the latest version\n"
},
{
	"uri": "/tech-department/projects/nodejs/",
	"title": "Nodejs Challenges",
	"tags": [],
	"description": "",
	"content": "These are NodeJS challenges. Your main focus here is to make sure your Node code is good. You will not be evaluated on the prettiness of your frontend. Your frontend just needs to work.\n  PROJECTS: Node \u0026amp; File IO   PROJECTS: Node \u0026amp; mongoDB assignment OR PROJECTS: Node \u0026amp; SQL assignment   PROJECTS: Express, forms and templates   PROJECTS: Expose a JSON API   PROJECTS: Add a little Ajax   "
},
{
	"uri": "/tech-department/workshops/nodejs-intro-to-socketio/",
	"title": "Nodejs intro to socketIO",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/null-safety/",
	"title": "Null Safety",
	"tags": [],
	"description": "",
	"content": " Nullable types and Non-Null Types Kotlin\u0026rsquo;s type system is aimed at eliminating the danger of null references from code, also known as the The Billion Dollar Mistake.\nOne of the most common pitfalls in many programming languages, including Java, is that of accessing a member of a null reference, resulting in a null reference exception. In Java this would be the equivalent of a NullPointerException or NPE for short.\nKotlin\u0026rsquo;s type system is aimed to eliminate NullPointerException\u0026rsquo;s from our code. The only possible causes of NPE\u0026rsquo;s may be\n An explicit call to throw NullPointerException() Usage of the !! operator that is described below External Java code has caused it There\u0026rsquo;s some data inconsistency with regard to initialization (an uninitialized this available in a constructor is used somewhere)  In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). For example, a regular variable of type String can not hold null:\nvar a: String = \u0026quot;abc\u0026quot; a = null // compilation error To allow nulls, we can declare a variable as nullable string, written String?:  var b: String? = \u0026quot;abc\u0026quot; b = null // ok  Now, if you call a method or access a property on a, it\u0026rsquo;s guaranteed not to cause an NPE, so you can safely say\nval l = a.length  But if you want to access the same property on b, that would not be safe, and the compiler reports an error:\nval l = b.length // error: variable 'b' can be null  But we still need to access that property, right? There are a few ways of doing that.\nChecking for null in conditions First, you can explicitly check if b is null, and handle the two options separately:\nval l = if (b != null) b.length else -1  The compiler tracks the information about the check you performed, and allows the call to length inside the if. More complex conditions are supported as well:\nif (b != null \u0026amp;\u0026amp; b.length \u0026gt; 0) { print(\u0026quot;String of length ${b.length}\u0026quot;) } else { print(\u0026quot;Empty string\u0026quot;) }  Note that this only works where b is immutable (i.e. a local variable which is not modified between the check and the usage or a member val which has a backing field and is not overridable), because otherwise it might happen that b changes to null after the check.\nSafe Calls Your second option is the safe call operator, written ?.:\nb?.length  This returns b.length if b is not null, and null otherwise. The type of this expression is Int?.\nSafe calls are useful in chains. For example, if Bob, an Employee, may be assigned to a Department (or not), that in turn may have another Employee as a department head, then to obtain the name of Bob\u0026rsquo;s department head (if any), we write the following:\nbob?.department?.head?.name  Such a chain returns null if any of the properties in it is null.\nTo perform a certain operation only for non-null values, you can use the safe call operator together with let:\nval listWithNulls: List\u0026lt;String?\u0026gt; = listOf(\u0026quot;A\u0026quot;, null) for (item in listWithNulls) { item?.let { println(it) } // prints A and ignores null }  Elvis Operator When we have a nullable reference r, we can say \u0026ldquo;if r is not null, use it, otherwise use some non-null value x\u0026rdquo;:\nval l: Int = if (b != null) b.length else -1  Along with the complete if-expression, this can be expressed with the Elvis operator, written ?::\nval l = b?.length ?: -1  If the expression to the left of ?: is not null, the elvis operator returns it, otherwise it returns the expression to the right. Note that the right-hand side expression is evaluated only if the left-hand side is null.\nNote that, since throw and return are expressions in Kotlin, they can also be used on the right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:\nfun foo(node: Node): String? { val parent = node.getParent() ?: return null val name = node.getName() ?: throw IllegalArgumentException(\u0026quot;name expected\u0026quot;) // ... }  The !! Operator The third option is for NPE-lovers. We can write b!!, and this will return a non-null value of b (e.g., a String in our example) or throw an NPE if b is null:\nval l = b!!.length  Thus, if you want an NPE, you can have it, but you have to ask for it explicitly, and it does not appear out of the blue.\nSafe Casts Regular casts may result into a ClassCastException if the object is not of the target type. Another option is to use safe casts that return null if the attempt was not successful:\nval aInt: Int? = a as? Int  Collections of Nullable Type If you have a collection of elements of a nullable type and want to filter non-null elements, you can do so by using filterNotNull.\nval nullableList: List\u0026lt;Int?\u0026gt; = listOf(1, 2, null, 4) val intList: List\u0026lt;Int\u0026gt; = nullableList.filterNotNull()  "
},
{
	"uri": "/tech-department/projects/oop/",
	"title": "OOP Excercises",
	"tags": [],
	"description": "",
	"content": "Here are a few oop challenges for you. If you are new to OOP then it would make sense to do these in the following order:\n  PROJECTS: Person   PROJECTS: Dice   PROJECTS: Bank Accounts   Please note: these exercises have no mention of frontend, gui, dom, html or any other stuff like that. You should be able to prove to yourself that your classes work just through use of unit tests. You should be able to interact with your classes from the command line.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/oop-for-data-science/",
	"title": "OOP for data science",
	"tags": ["oop-data-sci"],
	"description": "",
	"content": " Prerequisite You need to complete the Multivariate Regression assignment using the salary dataset before doing this assignment ( PROJECTS: Multivariate Linear Regression ). You will use the data and the model you built in that assignment for this OOP assignment.\nGo through the OOP for Python topic TOPICS: Intro OOP(Object-oriented Programming) for Python before starting this assignment.\nYou may also want to look at Khan Academy\u0026rsquo;s content on interpreting residual plots.\nAssignment It is efficient to put machine learning models and other data science techniques into classes so that we can reuse them later and change attributes without changing the code behind these models. Independent concepts can also be put into independent classes: for example, the functioning of a cross-validate class should not affect the functioning of a linear regression class. These concepts are also referred to as high cohesion and loose coupling.\n Create a class called ErrorCalculator that has methods to compute the residuals, standardised residuals, Mean Squared Error (MSE) and Root Mean Squared Error (RMSE). Name these methods get_residuals, get_standardised_residuals, get_mse and get_rmse respectively. You can also have a method, error_summary that prints the average, minimum and maximum of the standardised residuals, as well as the MSE and RMSE.  The class should have the following parameters:\n y: A 1D array of the target variable, size n_observations y_pred: A 1D array of the predicted values of the target variable, size n_observations   Create a generic class called Plotter. This class should have a method, run_calculations, to calculate the residuals if they have not yet been calculated, and a method plot, which simply plots a histogram of the residuals.  As before, the class should have the following parameters:\n y: A 1D array of the target variable, size n_observations y_pred: A 1D array of the predicted values of the target variable, size n_observations  Now create two child classes, HistogramPlotter and ScatterPlotter, that both inherit from Plotter. As the name suggests, HistogramPlotter.plot() should return a histogram of the residuals, whereas ScatterPlotter.plot() should return scatterplots of the residual versus predicted values and the predicted versus observed values. (Why do this, you ask? Inheriting in this way makes it easier for future developers to know that the method plot will return a plot, regardless of the type of plot specified by the child class).\n Use the model you built in the Multivariate Regression project to predict log-transformed salary (log_salary). Also create a second multiple regression model which does not include yearsrank as a feature. Save these model instances as model1 and model2. Remember to scale (standardise) the features before modelling.  In other words, you should have two models:\nModel 1:\nFeatures: exprior, yearsworked, yearsrank, market, degree, otherqual, position, male, Field_dummyvariable1, Field_dummyvariable2, Field_dummyvariable3, yearsabs\nModel 2:\nFeatures: exprior, yearsworked, market, degree, otherqual, position, male, Field_dummyvariable1, Field_dummyvariable2, Field_dummyvariable3, yearsabs\n Use ErrorCalculator, HistogramPlotter and ScatterPlotter to get accuracy metrics and diagnostic plots for model 1 and model 2 (as defined in Q3). To keep the notebook neat, your classes should be imported from separate python files. How does the model accuracy and diagnostics for the two models compare? Which is the better regression model?\n [OPTIONAL] Create a class called InfluenceCalculator that takes a model fit object as an argument and has methods for calculating and displaying leverage values and Cook\u0026rsquo;s distance. Call these methods leverage, cooks_distance. This is easiest to do using the package statsmethods to create the linear regression model object. Are there any observations that may be influencing the models?\n  Tip: These classes should be able to work with any regression problem. You can re-use these classes in upcoming assignments when inspecting models and you can also make classes in future that can work for both regression and classification problems.\n"
},
{
	"uri": "/tech-department/workshops/js-and-node-specific/basic-intro-to-oop/",
	"title": "OOP in JS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/oop-basics/",
	"title": "OOP in JS and Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/object-orientated-programming/",
	"title": "Object Orientated Programming",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Object Orientated Programming \u0026ldquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/ncit/115378/",
	"title": "Object-Oriented Programming",
	"tags": ["oop"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/team-onboarding/",
	"title": "Onboarding - What the team needs to know and access",
	"tags": [],
	"description": "",
	"content": " This is a guide to the Tech Department and how it works. It contains contact details, important links to documents we use and software that are useful.\nGeneral Ground Rules  Arrive before 9:00 and ensure you are up to date on recruit activities and any announcements you may have for stand-up Don\u0026rsquo;t be late for workshops - if you commit to doing a workshop ensure it happens and start on time. Deep work days - Staff that need to are allowed to take work from home 1 day per week - Deep work is planned out one week in advance. Tech team members have access to sheet where they can either comment directly to the spreadsheet or they can send a slack on the tech team channel. ALSO on Deep work day, the work completed on the deepwork day should be visable and measurable. While on deepwork you will still be required to come online on Rocketchat and respond to messages occasionally. Find the schedule here Your responsibilities are yours to handle - should you be unable to deal with one of them arrange someone to cover for you and ensure that it gets done.  Disciplinary Procedures and Guidelines At Umuzi we have rules and regulations to adhere by and there are also disciplinary acts that come with those rules if they not followed accordingly. Read all about them here\nWhat recruits need to know Firstly, read through DEPARTMENT-PROCESSES: What You Need To Know (as a recruit) Syllabus Find the tech repo with all (or at least most) curriculum documents, assignments, processes and deadlines here: https://umuzi-org.github.io/tech-department/\nSlack Please check your slack messages first thing in the morning (before stand-up) and regularly throughout the day (at least 3 times per day).\nChannels to join:\n #tech-team - contains communication all management discussions for tech team #deadlines - communications on deadline setting and changes #surprise_and_invisible_work - reporting on and trying to track work that takes up time but is not widely known #tech-assist - helping with tech problems #umuzi_coders - all coders #umuzi_data - all data scientists #meetups-and-events - info about meetups etc that are happening relevant cohort channels (e.g. c14-data, c13_data)  Personnel: Pay, Leave, Medical Aid, Computers Hloni Letuka\nhloni.letuka@umuzi.org\nSocial Media and Communication Sarah Lawson\nsarah.lawson@umuzi.org\nLeave Request Approval Sheena OConnell\nsheena.oconnell@umuzi.org\nRegular meetings: Daily stand ups with recruits at 9am.\nDaily tech meeting / check-in with tech facilitators and managers at 4pm Monday to Thursday and 3pm Friday. Tech team daily meeting format:\n Mondays: Review the prototyping we are currently implimenting (Findings will be useful for daily runnings and future prototyping). Tuesdays: ad hoc Wednesdays: ad hoc Thursdays: Syllabus and workshop planning for the next two weeks. Fridays: ad hoc  Processes for Umuzi tech managers when new staff join:  Get Umuzi email. Add to Slack and WhatsApp Add to Github staff team: https://github.com/orgs/Umuzi-org/teams/ and required repos Add to Trello boards Add to Datacamp (Data hires) Go through recruit project submission, code review, contributing to the tech department repo and specific product contributions (as relevant)   Cohort Leaders:  A cohort leader is the junior staff member that is put in charge of a specific cohort, you can find the allocations and responsibilities: here  Mentorship Here\u0026rsquo;s what you have to know about the role of a Mentor, what is expected from both you and your Mentees: WORKSHOPS: How To Be A Great Mentor Code review: General process here\nCode submission form to get the link to recruit submissions\nCode review form to complete\nMore info on what to look for in code review\n"
},
{
	"uri": "/tech-department/makeumuzibetter/",
	"title": "Online Learning and bootcamp",
	"tags": [],
	"description": "",
	"content": "A recruit’s journey includes a three-week programme called #MakeUmuziBetter (MUB). Recruits from all departments form small cross-functional teams to tackle issues at Umuzi - anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\n"
},
{
	"uri": "/tech-department/tags/oop/",
	"title": "Oop",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/oop-data-sci/",
	"title": "Oop Data Sci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/capstone-projects/pair-stairs/",
	"title": "Pair Stairs",
	"tags": [],
	"description": "",
	"content": " Who should do this? We have some options.\n It could be fully implemented as a React frontend-only app BUT this would then just be a proof of concept, it wouldn’t be practically useful without a database It could be fully implemented using only Django. This would be a useful thing A full stack app would also work - a React frontend dev working with a Django dev. This would be the most awesome but also the most difficult because teamwork is hard. If you go this route then use Django Rest Framework to expose apis from Django.  Spec Create an application that keeps track of pair programming sessions between people. Take a look at this: https://tanzu.vmware.com/content/blog/pair-programming-matrix\nData Entry Basically what you would need to do is record pairing sessions like this\n Allow the user to enter/select 2 names The user can say what the pairing session was about. Eg: Factoryboy on Tilde attendance app Specify date and time that the session happened  Every time the form is submitted then the data is saved. If you are doing a pure React implementation then you can just put it in your app state or, preferably, in a redux store.\nDisplay the stairs The other piece of functionality is of course drawing the stairs graphic to display how many times people paired together.\nStep 1: Draw all the sessions\nStep 2: Add a date filter so we can see how many sessions happened between two dates\nStep 3: If the user clicks on a person’s name then your application must display all the things that were covered in pairing sessions for that user.\nEg:\n Tshepo paired with Boitumelo and they worked on \u0026ldquo;Factoryboy on Tilde attendance app\u0026rdquo; Thsepo paired with Margaret and they worked on \u0026ldquo;writing selenium tests for user registration on the recruitment portal\u0026rdquo;  If only those 2 sessions have been recorded then we can say that\n Tshepo worked on:  \u0026ldquo;Factoryboy on Tilde attendance app\u0026rdquo; \u0026ldquo;writing selenium tests for user registration on the recruitment portal\u0026rdquo;  Boitumelo worked on:  \u0026ldquo;Factoryboy on Tilde attendance app\u0026rdquo;  And Margaret worked on:  \u0026ldquo;writing selenium tests for user registration on the recruitment portal\u0026rdquo;   Resources "
},
{
	"uri": "/tech-department/projects/tdd/password-checker/",
	"title": "Password Checker",
	"tags": [],
	"description": "",
	"content": "  PROJECTS: password-checker   PROJECTS: Add logging to password checker   "
},
{
	"uri": "/tech-department/projects/oop/person/",
	"title": "Person",
	"tags": ["oop"],
	"description": "",
	"content": " Project structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main └── java ├── Person.java \u0026lt;-------- names are important └── MainProgram.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions Please follow TDD when implementing this code if you have covered TDD in your course.\nCreate a class called Person which defines the generic data and functionality of a human.\nA class is a collection of attributes and functions. Different languages use different terminology for these things, but the bacic concepts are the same.\nGive your Person class should have the following attributes:\n name age gender interests. This is a list or array of strings  Give your Person class a hello function:\nExample usage:\n// JavaScript: let person = new Person('Ryan',30,'male',['being a hardarse','agile', 'ssd hard drives'] ) let greeting = person.hello() console.log(greeting)  # Python person = Person('Ryan',30,'male',['being a hardarse','agile', 'ssd hard drives'] ) greeting = person.hello() print(greeting)  // Java Person person = new Person( \u0026quot;Ryan\u0026quot;,30,\u0026quot;male\u0026quot;, new String[] {\u0026quot;being a hardarse\u0026quot;, \u0026quot;agile\u0026quot;, \u0026quot;ssd hard drives\u0026quot;}) String greeting = person.hello() System.out.println(greeting)  This should output:\nHello, my name is Ryan and I am 30 years old. My interests are being a hardarse, agile and ssd hard drives.  In OOP this is known as abstraction. We created a simple model of a more complex thing. We only represent the attributes and functionality that we need.\nWhen an object instance is created from a class, the class\u0026rsquo;s constructor function is run to create it. This process of creating an object instance from a class is called instantiation — the object instance is instantiated from the class. person is an instance of Person\n"
},
{
	"uri": "/tech-department/tags/plotly/",
	"title": "Plotly",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/plotly_dashboards/",
	"title": "Plotly Dashboard Assignment",
	"tags": ["plotly"],
	"description": "",
	"content": " Tutorials  Create a Plotly Dashboard in under 10 minutes (Easy) Create a dashboard with Pusher and Flask (Advanced)  Assignment In the Mobile Money Data Visualisation Assignment, you created graphs to display the relationship between the type of financial services accessed (non-mobile, mobile, both), how frequently these services were accessed, and socio-demographic information about the users (gender, land ownership type of income, and so forth). Create a Plotly dashboard of the 3-5 most informative graphs from this assignment.\nYour dashboard should be both visually appealing and informative.\n"
},
{
	"uri": "/tech-department/tags/postgres/",
	"title": "Postgres",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/pre-bootcamp-challenges/",
	"title": "Pre bootcamp challenges",
	"tags": [],
	"description": "",
	"content": " Complete these tasks in the correct language. If you are here to learn JavaScript, do them in JavaScript. If you have been told to use Python then use Python.\nUse Git and Github to save your code to the cloud (like a boss)\nPlease remember that you need to focus on UNDERSTANDING!\nSome of these task are kinda easy, but they were all chosen for good reasons. Try think about the lessons each task is trying to teach you. Think about what might confuse other people.\nSome of these are difficult. If you can\u0026rsquo;t complete all of them, it\u0026rsquo;s ok. Just do your best and seek out help when you need it\nTask 1 Convert this pseudocode into actual code. Make it run. Make sure you understand the results. This is a fundamental lesson:\nx = 0 y = 1 Print the value of x Print the value of y x = x + 3 y = y + x Print the value of x Print the value of y  Check your understanding:\n do you know what pseudocode means? Did you look it up? do you understand why x and y have the values they have at each point in the program?  Task 2 Convert this pseudocode into actual code. Make it run. Make sure you understand the results. This is a fundamental lesson. If you don’t understand the results then spend some time Googling BODMAS.\nx = 1 + 1 * 2 y = (1 + 1) * 2 z = 1 + ( 1 * 2 ) a = 1 + 1 * 2 / 2 b = (1 + 1 * 2 ) / 2  Check your understanding:\n do you know what pseudocode means? Did you look it up? do you understand why the variables have the values they have at each point in the program? do you understand BODMAS?  Task 3 Write a function that takes 2 numbers as input. If either of the numbers is 65, OR if the sum of the numbers is 65 then return true. Otherwise return false.\nTask 4 Write a function that takes 2 numbers as input. If either of the numbers is 3 AND the sum of the numbers contains a 3 then return true. Otherwise return false\nTask 5 Write a function that takes in three numbers. These numbers represent the lengths of the sides of a triangle. The function should return the area of a triangle.\nThis might help: https://www.wikihow.com/Calculate-the-Area-of-a-Triangle\nTask 6 White a function that takes in three numbers and returns the maximum number. Do this without using any builtin methods. Write your own logic from scratch.\nBonus: How can you change the code so it can take in any number of numbers?\nTask 7 Write a function that takes in a number representing the temperature in Celsius and returns the temperature in Fahrenheit. Write another function that does the opposite (Fereignheit to Celsius)\nTask 8 Make a function to convert any number into hours and minutes. (For example, 71 will become “1 hour, 11 minutes”; 133 will become “2 hours, 13 minutes”.)\nTask 9 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\nTask 10 Write a function that takes in a string and then prints out all the vowels in the string. Make sure it can deal with capital letters and small letters.\nTask 11 Make a function that takes two strings as input, and outputs the common characters/letters that they share. (For example, Input: ‘house’, ‘computers’ . Output: ‘Common letters: o, u, e, s’)\nTask 12 This task isn\u0026rsquo;t compulsory but we\u0026rsquo;ll be impressed if you do it.\nCan you make a user interface for each of the previous tasks? You\u0026rsquo;ll need HTML and CSS to do it.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/breast-cancer/",
	"title": "Predict breast cancer",
	"tags": ["logistic-regression"],
	"description": "",
	"content": " Assignment Predict the class of breast cancer (malignant or \u0026lsquo;bad\u0026rsquo; versus benign or \u0026lsquo;good\u0026rsquo;) from the features of images taken from breast samples. Ten biological attributes of the cancer cell nuclei have been calculated from the images, as described below:\n   Attribute Domain     1. Sample code number id number   2. Clump Thickness 1 - 10   3. Uniformity of Cell Size 1 - 10   4. Uniformity of Cell Shape 1 - 10   5. Marginal Adhesion 1 - 10   6. Single Epithelial Cell Size 1 - 10   7. Bare Nuclei 1 - 10   8. Bland Chromatin 1 - 10   9. Normal Nucleoli 1 - 10   10. Mitoses 1 - 10   11. Class (2 for benign, 4 for malignant)    The data can be found here.\nAt a minimum, you should complete these steps:\n Split the data into training and test sets. Get basic descriptive statistics for the training data and check for missing and incorrect values. Replace missing values if this makes sense to do. Do the necessary feature preparation and build a logistic regression model.  Answer the following questions:  What are the factors that predict malignant cancer? (i.e. which variables significantly predict malignancy, p \u0026lt; 0.05) Create a classification report and confusion matrix of predicted and observed values. What is the accuracy, precision, recall and F1-score of the model on the (a) training and (b) test data? Plot a Receiver Operating Characteristic (ROC) curve on the test data. What is overdispersion?  "
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/credit-card-approvals/",
	"title": "Predict credit card approvals",
	"tags": ["datacamp-logistic-regression"],
	"description": "",
	"content": " Instructions Complete and submit the DataCamp project Predicting credit card approvals.\n"
},
{
	"uri": "/tech-department/topics/ncit/13925/",
	"title": "Presenting your findings",
	"tags": [],
	"description": "",
	"content": " 1. Introduction to presentations Presentations are a part of most real-life work environments. They are an effective tool in a variety of different situations; you may have to give a presentation as an employee in a large company where you need to communicate your work and goals with your colleagues and managers, or it may be to get funding for a project. Either way it is a valuable skill to be able to summarise and communicate your ideas to other people in a concise and understandable way.\nThey can take different forms and the format will vary but for this project you will be creating a 10 minute presentation of your report.\nTarget Audience When presenting to other people you must always think about who you’re communicating with; what do they need to know and how will they best understand the information? These questions are especially important in the computer industry because not everyone involved in your projects will be interested or familiar with the technical aspects of your work. We also looked at this question when writing reports.\nAsk yourself these questions:\n Who are you presenting to and what do they need to know? What are the goals of your presentation?\n How much technical information do you need to give them, if any?\n How can you simplify or summarise the technical information in a way that someone from a non-technical background might understand?\n How formal does your language need to be?\n Is humour appropriate? Will it help keep people engaged?\n  As you will be presenting your report think about what information you might present to get people so interested in your report that they want to read the whole document.\n2. Preparing a presentation Much of the preparation for your presentation will have been done while creating your report. The process for both is the same, but the main difference is that a presentation won’t go as in depth as a report and is more of a summary of information. Most presentations will be between 10 and 30 minutes long (yours should only be 10). While this may sound like a long time, you will be surprised how quickly time can go when you talk, so the fundamental skill of preparing a presentation is choosing the information to share and thinking about how you will present it.\nSince you have already written a report, you have all the information that is going to go into the presentation already. What you need to think about is:\nWhat is your report about and why is it important to the audience\nWhich parts are necessary for the audience to understand your conclusion\nAnd how will you present that information; will you use bullet point lists in a slideshow? Do you need diagrams/images? Are videos or sound necessary? How much text will you put on the slides?\nDon’ts Don’t leave it to the last minute\nMake sure you know what you’re going to say, what order you’re going to say it in and that you understand the content.\nDon’t provide too much information\nLess is more. Overloading people can be more confusing than helpful, especially if the topic is new to them. Give your audience enough information to pique their interest and then you can direct them to other resources for more information.\nDon’t read from a script\nWhile it is useful to prepare notes about what you are going to say, reading from a prepared piece of text can make a presentation monotonous and difficult to focus on. Practice explaining your ideas with a prompt or bulleted list.\nDon’t speak too fast or too quietly\nYou want people to understand what you’re saying, but not speak so slowly that they get bored. Ask your audience if you’re unsure about the best pacing for your presentation.\nDon’t include too many special effects or flares and whistles\nTry to keep the focus on what you’re saying rather than the visuals. They should be there only to aid you, not distract from what you’re saying.\n3. Presentation tools Powerpoint and Google Slides There are different tools you can use to help you present information. For this project we will be using a slideshow based tool. You can either use Powerpoint, if you have the software installed on your computer, or Google Slides, which is a free web-application that provides similar functionality.\nYou will be using these programs to create a slideshow that will run alongside your spoken presentation. This is the format you will be presenting your report research in. It should provide a visual aid to the information. It is up to you what you display and how many slides you have but here are some tips on creating the slideshow:\n Provide a roadmap for your audience. Use one slide at the beginning (after a title slide) to tell them what your presentation will cover and the order you will present things. This will help them follow along as you move through your content.\n Don’t fill your slides with text, you want people to focus on what you’re saying.\n Think about how much time you have and how much time you need to explain the different parts of your report. You don’t want to have to rush through the information and speak quickly.\n Include images, diagrams and videos to help illustrate your message. Ensure that they are good quality.\n Keep the aesthetic simple and professional, you don’t want your presentation to distract people from what you’re saying.\n Use transitions and effects in moderation. They can be distracting and look unprofessional.\n Plan the slides so they synchronise with what you’re saying. Know when to switch between them.\n  Think about how the slides will compliment what you’re actually saying. A good presentation involves skilled public speaking and a planned presentation.\n4. Presentation skills Mastering public speaking can be crucial to the growth of your business and the success of your projects. As we have discussed, you need to be able to talk about your products and communicate your ideas effectively because there will always be other people involved in your work, be it customers, investors or colleagues. It takes time, practice and experience but here are some tips to get you started:\nRelate to the audience\nYou can use personal stories or relate it to your audience’s work and circumstances. Examples and custom demos can help you with that.\nRehearse, rehearse, rehearse\nDon’t just think you can wing a presentation. You need to rehearse and then warm up. Feeling comfortable and practiced will help calm your nerves and keep you from freezing in front of your audience\nPlan but don’t write a script\nConsider creating small flash cards that remind you of your key points in a bulleted list. They might also indicate when you need to change the slide. Remember that you don’t want to be reading an essay word for word. You also don’t want to read exactly what’s on your slide, the audience can read that themselves.\nInclude interactive elements\nAsk the audience questions, or ask a volunteer to help with a demonstration. This can be a really effective way of keeping the audience’s attention.\nBe prepared\nAre your slides online? On a USB stick? If you have sound and video, do you have the equipment to present it properly? Technical difficulties can make you look incompetent, so avoid them by making sure everything is ready and working.\nFollow up, stand out\nHave a Questions and Answers (Q \u0026amp; A) section at the end to give the audience a chance to clear up any doubts and to show that you really know what you’re talking about. Try to anticipate the kinds of questions they might have and be prepared with answers.\n5. Feedback and Improving In presentation etiquette, it all comes down to one thing: valuing your audience. This means speaking directly to them, having all the information prepared and practiced, and above all, being worthwhile of their time. If you remain focused on providing value to your audience, you’ll find yourself giving successful presentations every time. You might not always give the best presentation but you will always learn something and be able to improve. Here are some ways of you can keep improving:\nPractice\nIt’s only through actually rehearsing your presentation that you will get a sense of how you can improve it. You can do this in a mirror, or you can ask a friend/classmate to listen. You could even record yourself. Crucially you should time yourself to make sure you’re within 10 minutes.\nWhen you do this, you might discover that you need to:\n Change the order of the slides, or points your making\n You might need to remove information to keep within the time limit\n Include more pictures to illustrate what you’re saying\n  Interaction\nCommunicate with your audience. You don’t have to be very formal. Ask them if they can hear you properly or if you’re speaking too quickly. You can even open up your presentation and let them know they can ask you questions if they are unsure of anything during the presentation. Feel confident enough to interact with them. It will make your presentation dynamic and it means that you can respond to problems more instantly.\nFeedback\nFeedback is crucial to learning any skill. When you have worked on something closely and for a long time it can be hard to step back and assess it objectively. Like with your report which you gave to classmates to proofread, ask for constructive criticism from a friend or, depending on your audience, after the presentation ask your audience how they think it went. You could even ask them to anonymously write their feedback down.\n6. Next steps While feedback is one way of gauging how successful your presentation has been, you might also want to think about what you were hoping to achieve from the presentation and whether you succeeded in that. In the context of presenting your report, here are some questions you might ask yourself:\n Did anyone ask to read the full report after the presentation?\n Did anyone follow up on any of the points you mentioned?\n Did anyone talk to you after the presentation about the information you had presented?\n Did people engage with your Q \u0026amp; As? That can be a good indication that people were listening and interested in what you were saying.\n  If you think the presentation was successful you might want to keep the presentation template. Perhaps reflect on the experience and make notes for next time you have to do a presentation. Since your classmates will be presenting their reports as well, what do you think was successful about their presentations? Is there something you have learnt from them?\n"
},
{
	"uri": "/tech-department/topics/kotlin/properties-and-fields/",
	"title": "Properties and Fields",
	"tags": [],
	"description": "",
	"content": " Declaring Properties Classes in Kotlin can have properties. These can be declared as mutable, using the var keyword or read-only using the val keyword.\nclass Address { var name: String = ... var street: String = ... var city: String = ... var state: String? = ... var zip: String = ... }  To use a property, we simply refer to it by name, as if it were a field in Java:\nfun copyAddress(address: Address): Address { val result = Address() // there's no 'new' keyword in Kotlin result.name = address.name // accessors are called result.street = address.street // ... return result }  ###Getters and Setters The full syntax for declaring a property is\nvar \u0026lt;propertyName\u0026gt;[: \u0026lt;PropertyType\u0026gt;] [= \u0026lt;property_initializer\u0026gt;] [\u0026lt;getter\u0026gt;] [\u0026lt;setter\u0026gt;]  The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).\nExamples:\nvar allByDefault: Int? // error: explicit initializer required, default getter and setter implied var initialized = 1 // has type Int, default getter and setter  The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with val instead of var and does not allow a setter:\nval simple: Int? // has type Int, default getter, must be initialized in constructor val inferredType = 1 // has type Int and a default getter  We can write custom accessors, very much like ordinary functions, right inside a property declaration. Here\u0026rsquo;s an example of a custom getter:\nval isEmpty: Boolean get() = this.size == 0  A custom setter looks like this:\nvar stringRepresentation: String get() = this.toString() set(value) { setDataFromString(value) // parses the string and assigns values to other properties }  By convention, the name of the setter parameter is value, but you can choose a different name if you prefer.\nSince Kotlin 1.1, you can omit the property type if it can be inferred from the getter:\nval isEmpty get() = this.size == 0 // has type Boolean  If you need to change the visibility of an accessor or to annotate it, but don\u0026rsquo;t need to change the default implementation, you can define the accessor without defining its body:\nvar setterVisibility: String = \u0026quot;abc\u0026quot; private set // the setter is private and has the default implementation var setterWithAnnotation: Any? = null @Inject set // annotate the setter with Inject  Backing Fields Classes in Kotlin cannot have fields. However, sometimes it is necessary to have a backing field when using custom accessors. For these purposes, Kotlin provides an automatic backing field which can be accessed using the field identifier:\nvar counter = 0 // the initializer value is written directly to the backing field set(value) { if (value \u0026gt;= 0) field = value }  The field identifier can only be used in the accessors of the property.\nA backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier.\nFor example, in the following case there will be no backing field:\nval isEmpty: Boolean get() = this.size == 0  Backing Properties If you want to do something that does not fit into this \u0026ldquo;implicit backing field\u0026rdquo; scheme, you can always fall back to having a backing property:\nprivate var _table: Map\u0026lt;String, Int\u0026gt;? = null public val table: Map\u0026lt;String, Int\u0026gt; get() { if (_table == null) { _table = HashMap() // Type parameters are inferred } return _table ?: throw AssertionError(\u0026quot;Set to null by another thread\u0026quot;) }  In all respects, this is just the same as in Java since access to private properties with default getters and setters is optimized so that no function call overhead is introduced.\nCompile-Time Constants Properties the value of which is known at compile time can be marked as compile time constants using the const modifier. Such properties need to fulfil the following requirements:\nTop-level or member of an object Initialized with a value of type String or a primitive type No custom getter Such properties can be used in annotations:\nconst val SUBSYSTEM_DEPRECATED: String = \u0026quot;This subsystem is deprecated\u0026quot; @Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }  Late-Initialized Properties Normally, properties declared as having a non-null type must be initialized in the constructor. However, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.\nTo handle this case, you can mark the property with the lateinit modifier:\npublic class MyTest { lateinit var subject: TestSubject @SetUp fun setup() { subject = TestSubject() } @Test fun test() { subject.method() // dereference directly } }  The modifier can only be used on var properties declared inside the body of a class (not in the primary constructor), and only when the property does not have a custom getter or setter. The type of the property must be non-null, and it must not be a primitive type.\nAccessing a lateinit property before it has been initialized throws a special exception that clearly identifies the property being accessed and the fact that it hasn\u0026rsquo;t been initialized.\nDelegated Properties The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.\nSuch common behaviours can be implemented as libraries using delegated properties.\nClasses and Interfaces For members declared inside a class:\n private means visible inside this class only (including all its members); protected — same as private + visible in subclasses too; internal — any client inside this module who sees the declaring class sees its internal members; public — any client who sees the declaring class sees its public members.  Note that in Kotlin, outer class does not see private members of its inner classes.\nIf you override a protected member and do not specify the visibility explicitly, the overriding member will also have protected visibility.\nopen class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e: Int = 5 } } class Subclass : Outer() { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // 'b' is protected } class Unrelated(o: Outer) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either }  "
},
{
	"uri": "/tech-department/topics/ncit/115388/",
	"title": "Pseudocode and documentation",
	"tags": [],
	"description": "",
	"content": " 1. Why document? Documenting software is one of the most crucial, but often most neglected, parts of the development process. Documenting your variables, functions, and entire programs is absolutely necessary if you are to succeed as a coder. Various sources will tell you to dedicate at least 10% of your development time to documentation. That is reasonable advice, and should be adopted when you are planning the development of any program or website.\nAfter we cover some best practices for documentation, we will cover the general process for documentation (listed below). Each of these will be covered in detail in the following sections.\nDocumentation Process  Pseudocode\n Convert pseudocode to comments\n Update comments as program changes\n Add summary/high-level instructions\n Develop user documentation (API docs) and technical docs (for other coders and administrators)\n  2. Best practices Documentation requirements The first step of documentation should take place before you write a single line of code. If your organization follows a “Waterfall” process, there will be several planning and “vision” documents that outline all the resources needed and plans for development. However, in the Agile project management process, teams produce far fewer documents before development starts. The product owner may create a document outlining user requirements and goals for the project, but most of the documentation will come during and after development.\nWhat are these development documents used for?\nThe main reasons why people need the technical design document for their work:\n Stakeholders require the reports.\n Customers need to feel more secure and at ease using the program.\n To keep track of everything on the project.\n For Audit purposes.\n As a training material for new people in the team.\n  Agile documentation best practices: Only the relevant information\nAgile suggests that only the most necessary information should be documented. What is the need for documenting something everyone knows? Create a vision, if it helps you to get fundraising. Write only the customer documents your customers require. Document your decisions only if there are alternatives and you need a reminder of what was behind those decisions.\nWait before documenting\nThis is the best way to avoid the false information in your papers. Document late. Wait until the decision is implemented and there’s no going back until you actually put it on paper. The information is stabilized and reliable. You economize the cost, time and effort, spent on redoing your documents. Note: This only applies to high-level documents that explain your program to a user. You should document your code with comments/pseudocode before you write any code.\nBe specific\nKeep in mind, that every project has its own requirements and specifics. You cannot apply the document templates for one project while working with another one. Some fields might not even exist in a project whilst some important ones are missing.\nIn addition, the customers are different and what works with one is simply not enough for the other. Let the customers decide on the content and amount of your documentation. It will save you some extra work and nerves.\nKeep it all in one place\nTechnical design documents have to be accessible and transparent. You need to have them available for anyone who might be in need for them. So as not to have a mess, keep all your papers in order and in one place. A real life-hack is to create your own Wiki or at least a separate folder in your GitHub repository that everyone can access.\nFor more info on Agile documentation can be found here.\n3. Pseudocode Once the general requirements and goals have been documented (or at least discussed and agreed upon by the team), you should start by writing pseudocode. Starting with pseudocode will help you think through all the functionality of your program without getting distracted by the technical details of how you will implement it. The added bonus of creating good pseudocode for all the functions of your program is that pseudocode is easily converted into comments.\nTo review the steps of how and why to write pseudocode, visit the following link:\nhttps://www.wikihow.com/Write-Pseudocode\nA quick summary (halfway down the page) with examples: http://userpages.wittenberg.edu/bshelburne/Comp150/Algorithms.htm\nA quick video description is here\n"
},
{
	"uri": "/tech-department/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/decorators-intro/",
	"title": "Python Decorators",
	"tags": ["python", "decorators"],
	"description": "",
	"content": "https://www.codementor.io/@sheena/introduction-to-decorators-du107vo5c\n"
},
{
	"uri": "/tech-department/topics/python-specific/decorators-advanced/",
	"title": "Python Decorators - Intro",
	"tags": ["python", "decorators"],
	"description": "",
	"content": "https://www.codementor.io/@sheena/advanced-use-python-decorators-class-function-du107nxsv\n"
},
{
	"uri": "/tech-department/topics/python-specific/exception-handling/",
	"title": "Python Exception handling",
	"tags": [],
	"description": "",
	"content": "https://www.codementor.io/@sheena/python-exception-handling-ogr0a41t7\n"
},
{
	"uri": "/tech-department/topics/python-specific/iterators/",
	"title": "Python Iterators and Generators",
	"tags": [],
	"description": "",
	"content": "Why? This stuff will give you superpowers. Well, it already does. Iterators are part of the beating heart of Python. If you know how they really work you\u0026rsquo;ll be able to do some pretty cool stuff.\nhttps://www.codementor.io/@sheena/python-generators-and-iterators-du1082iua\n"
},
{
	"uri": "/tech-department/topics/python-specific/lists-in-depth/",
	"title": "Python Lists in depth",
	"tags": ["python"],
	"description": "",
	"content": "https://www.codementor.io/@sheena/python-lists-in-depth-lrtmk7w4q\n"
},
{
	"uri": "/tech-department/topics/python-specific/oop-basics/",
	"title": "Python OOP basics",
	"tags": ["oop"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/recursion/",
	"title": "Python Recursion by example",
	"tags": [],
	"description": "",
	"content": "I heart recursion you guys.\nhttps://www.codementor.io/@sheena/python-recursion-by-example-n8v9zlans\n"
},
{
	"uri": "/tech-department/topics/unit-testing/mocks-and-spies/",
	"title": "Python Unit testing with mocks and spies",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/kafka/",
	"title": "Python and Kafka",
	"tags": ["python", "kafka"],
	"description": "",
	"content": "The first step is to create an \u0026ldquo;app\u0026rdquo; on twitter. https://developer.twitter.com/en/apps\nAnd then in your virtualenv, install these dependencies:\npip install kafka-python pip install python-twitter pip install tweepy  Create a topic. Pick something you are interested in. For example you might want to collect tweets about data-engineering, covid-19, or space travel. Whatever you want :)\nWrite a script that will print tweets to standard out, and also publish them to kafka.\nMake sure that you follow good practices - don\u0026rsquo;t hard-code any secret information (like your passwords) and don\u0026rsquo;t hard-code configuration either (it should come from your environmental variables)\n"
},
{
	"uri": "/tech-department/topics/python-specific/kafka/",
	"title": "Python and Kafka",
	"tags": [],
	"description": "",
	"content": "Read the offial introduction here: https://kafka.apache.org/intro\nIf you understood your RabbitMQ stuff then this should feel pretty familiar to you.\nWhat can you use it for? Check this out: https://kafka.apache.org/uses\nNow this little tutorial will help you get started. Can you get it to run? https://towardsdatascience.com/kafka-python-explained-in-10-lines-of-code-800e3e07dad1\nThis one is more thorough. So long as you are comfortable with the Kafka concepts in here you are good to go.\nhttps://towardsdatascience.com/getting-started-with-apache-kafka-in-python-604b3250aa05\nPlease note Exception handling is important. The above tutorials are not about exception handling and the authors did some things that are really terrible from an engineering prespective. When reading tutorials you always need to think about what\u0026rsquo;s wrong with the code. There is a lot wrong here. But the Kafka parts are good.\n"
},
{
	"uri": "/tech-department/projects/python-specific/mongo/",
	"title": "Python and MongoDB",
	"tags": [],
	"description": "",
	"content": " Create a docker composition which will run mongodb. You will be connecting to this container while developing. Be sure to commit your composition to your repo.\nAlso: DO NOT hardcode your connection configuration into your Python code. Use environmental valiables. Eg: MONGO_HOST = os.getenv(\u0026quot;MONGO_HOST\u0026quot;,\u0026quot;localhost\u0026quot;). Make sure you understand why this is a good idea.\nInstructions You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Create a database and name it UmuziProspects Create a collection inside the database and name it Visiter. The collection must contain the following fields :   id: This should be automatically generated by MongoDB visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  functionality Create a single index script with the following functions:\n create_visitor. This should save the Visitor into the database list_visitors This should return an array of all the visitor names and ids delete_visitor update_visitor visitor_details: given a visitor\u0026rsquo;s id, return all information about that visitor delete_all  NOTE You will be expected to properly test your code. You can use whatever testing framework you want.\nResources  https://realpython.com/introduction-to-mongodb-and-python/  "
},
{
	"uri": "/tech-department/projects/python-specific/spark/",
	"title": "Python and Spark",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/spark/",
	"title": "Python and Spark",
	"tags": [],
	"description": "",
	"content": " As a Data Engineer, you will be required to process large data sets for various reasons. In this fast paced world, the rate at which you carry out the processing matters and as a result, there exits various tools which help Data Engineers process large datasets quickly. Apache Spark is an open-source general-purpose distributed processing system used for big data workloads.\nApache Spark is written in Scala and can be integrated with Python, Scala, Java, R, SQL languages.\nBut what does that mean? Do you have to use Scala or Java?\nThe answer is a simple no. Fortunately for us, PySpark enables us to work with Spark in Python. PySpark is the Python API written in python to support Apache Spark.\nGo forth and learn.\nResources This is a good tutorial to get you started with PySpark. It\u0026rsquo;ll take you from zero to hero.\nThere is also a YouTube tutorial on Apache Spark.\nPick the one you\u0026rsquo;re comfortable with or even both if you can.\n"
},
{
	"uri": "/tech-department/topics/python-specific/python-backend-dev-environment-setup/",
	"title": "Python backend dev environment setup",
	"tags": [],
	"description": "",
	"content": " What you need This page is here to help you get set up on your local machine. These are very important tools we use at Umuzi and eventually at the workplace.\nInstallations Setting up your environment needs you to to install a bunch of stuff. A good programmer knows their stuff, knows what they are installing and doesn\u0026rsquo;t just jump into code. You will need the following:\n VScode: Visual Studio Code is an IDE developed by Microsoft for Windows, Linux and macOS. An integrated development environment is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of at least a source code editor, build automation tools, and a debugger. What makes an IDE so useful is the I: integrated. You could use just about anything for a development environment and many people use a variety of basic, individual programs in place of an IDE but an integrated environment gives you the ability to do everything in a single editor.\n python3.7: You will need to install the latest version of python3.7.* . Why Python? because it\u0026rsquo;s friggin awesome. You can use Python for developing desktop GUI applications, websites and web applications. Also, Python, as a high level programming language, allows you to focus on core functionality of the application by taking care of common programming tasks.  How to run things on the terminal The terminal is an interface in which you can type and execute text based commands. It can be much faster to complete some tasks using a Terminal than with graphical applications and menus. Another benefit is allowing access to many more commands and scripts. A common terminal task of installing an application can be achieved within a single command, compared to navigating through the Software Centre or Synaptic Manager. Press Ctrl + Alt + T to open the terminal when using Ubuntu/Linux-mint\nRunning Python There are 2 ways of running python that you should care about right now. The first way is pretty easy. Just open up a terminal end enter the command python3. This will open up a thing called a REPL. Basically it lets you just type in python commands and then it executes things. This is really useful if you just want to quickly calculate something or try out a piece of code.\nOf course if you\u0026rsquo;ve written some awesome code you would want to save it somewhere so you can run it whenever you want. For now let\u0026rsquo;s assume you don\u0026rsquo;t know your way around linux (if you do, that\u0026rsquo;s cool. But for now we\u0026rsquo;ll keep it simple). Try this out:\n Open up a text editer and make a file that looks like this: print(\u0026quot;Welcome to Umuzi!\u0026quot;) Save the file as hellp.py in your home directory (directory means folder). Now open up a terminal and type in python3.7 hello.py  Running programs  After installing from the terminal some programs can allow you to open them from the terminal. So instead of navigating everywhere in your computer you can just type the alias of that program. e.g. Since we installed VScode on our machines, a simple way to open it is to go into the terminal and type in code. code is an alias created by the terminal as a short cut for the program. You can also open up a terminal and type in code hello.py. This opens your file in VScode.  You can also open up a whole directory in vscode (this is really useful when you start working on real stuff). Try this out in a terminal:\n mkdir python_practice # this command makes a new directory mv hello.py python_practice/hello.py # this moves the file you made before  You could achieve the stuff above ^^ by using the graphical user interface (the file browser) but where\u0026rsquo;s the fun in that?\nNow execute this: code python_practice\n"
},
{
	"uri": "/tech-department/projects/python-specific/",
	"title": "Python projects",
	"tags": [],
	"description": "",
	"content": "The projects in this folder are specific to the Python programming language.\nUnless otherwise stated, please use Python3.7+. Python2.7 is considered legacy Python.\nAlso, if your project calls for you to install external packages from a package manager, please consider using virtualenv.\n"
},
{
	"uri": "/tech-department/topics/python-self-learning/",
	"title": "Python self-learning",
	"tags": [],
	"description": "",
	"content": "You are expected to spend your free time upgrading your Python skills. Here are some resources for you:\n Learn Python Real Python CodeWars  "
},
{
	"uri": "/tech-department/topics/python-specific/custom-exceptions/",
	"title": "Python writing custom exceptions",
	"tags": [],
	"description": "",
	"content": "https://www.codementor.io/@sheena/how-to-write-python-custom-exceptions-du107ufv9\n"
},
{
	"uri": "/tech-department/workshops/python-specific/",
	"title": "Python-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/rabbit-mq/",
	"title": "Rabbit Mq",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/rabbitmq/",
	"title": "RabbitMQ",
	"tags": ["rabbit-mq"],
	"description": "",
	"content": " RabbitMQ, despite its funny name, is a seriously useful piece of software.\nOn top of this, it\u0026rsquo;s a great introduction to parallel computing.\nTake a look at the offical tutorial here: https://www.rabbitmq.com/getstarted.html.\nInstructions Create one repo. Inside that repo create 6 directories, name them: one, two, three, etc. Inside directory one, implement tutorial 1 from here: https://www.rabbitmq.com/getstarted.html. Inside directory 2 implement tutorial 2, etc. Go up to number 6.\nNow pay close attention: Copy-pasting code is not sufficient.\nSuccess criteria 1: DRY CODE Each of your tutorial implementations must be DRY in itself. eg: If you have the string \u0026lsquo;hello\u0026rsquo; pasted all over the place then your code would not be DRY.\nHint: Here\u0026rsquo;s the expected file structure for the first tutorial:\none/ channel.py recieve.py send.py  Success criteria 2: Environmental variables Hard-coding the connection string is no good. You want to fetch it from an environmental variable. On top of that you want to be able to run your code successfully even if the environmental variable is not set.\neg:\npython send.py # this should work as per the tutorials export HOST=\u0026quot;35:456:145:235\u0026quot; python send.py # this should attempt to connect to a rabbitmq server at the given ip address  "
},
{
	"uri": "/tech-department/topics/data-science-specific/regression/",
	"title": "Regression",
	"tags": [],
	"description": "",
	"content": " Regression is all about finding relationships between variables.\nComplete the Khan Academy section on bivariate numerical data. Remember to do the practice sections and unit test.\nOnce you have completed the basic regression section above, complete the Khan academy section on advanced regression.\nResources  Regression and R-Squared (YouTube video) What is R-squared  "
},
{
	"uri": "/tech-department/topics/regular-expressions/",
	"title": "Regular Expression Resources",
	"tags": [],
	"description": "",
	"content": " A regular expression, regex or regexp (sometimes called a rational expression) is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for \u0026ldquo;find\u0026rdquo; or \u0026ldquo;find and replace\u0026rdquo; operations on strings, or for input validation. \u0026ndash; wikipedia\nRegular expressions are very useful. We use them to:\n validate user input url matching: If you are working with any kind of web backend technology you will come across this extracting and cleaning data And many many other things  It\u0026rsquo;s not worth memorizing this stuff, but you should understand it.\nGeneral Regular Expressions  Video: Best of Fluent 2012: /Reg(exp){2}lained/: Demystifying Regular Expressions  Python Regular expressions  https://www.w3schools.com/python/python_regex.asp - Introduction to Regular Expression. https://docs.python.org/3/library/re.html - Python has a built-in package called re, which can be used to work with Regular Expressions.  Javascript Regular Expressions  https://www.w3schools.com/js/js_regexp.asp  Java Regular Expressions  https://www.javatpoint.com/java-regex  "
},
{
	"uri": "/tech-department/tags/regular-expressions/",
	"title": "Regular Expressions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/free-code-camp/javascript-data-structures-and-algorithms/regular-expressions/",
	"title": "Regular Expressions",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Regular Expressions\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/responsive-web-design-principles/",
	"title": "Responsive Web Design Principles",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nLook under \u0026ldquo;Responsive Web Design\u0026rdquo;\nYou\u0026rsquo;ll be hitting \u0026ldquo;Responsive Web Design Principles\u0026rdquo;\n"
},
{
	"uri": "/tech-department/topics/free-code-camp/responsive-web-design/",
	"title": "Responsive-web-designs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/resturaunt/",
	"title": "Resturaunt menu system",
	"tags": [],
	"description": "",
	"content": " Create an OOP program that can be used to represent and manage a resturaunt\u0026rsquo;s menu.\n The menu contains items Each item can come in different sizes, the sizes have different prices. Eg you might want to order a small pizza or a large pizza Items have names and descriptions Items have different categories (eg: pizzas, hamburgers, drinks) Item\u0026rsquo;s can have different tags. Eg vegetarian, vegan, chef\u0026rsquo;s choice, new, spicey  Different kinds of people need to interact with the menu in different ways: - everyone needs to be able to view the menu - The resturaunt manager needs to be able to add/edit/delete everything on the menu\nCan you think of any other people who might want to interact with the menu? And how they might interact?\nInstructions 1. Draw the class hierarchy Before you start writing any code, draw a picture of your classes and how they interact. Are you making use of inheritance? What Objects contain other objects? You will be expected to be able to explain your class hierarchy so please take care.\nIf you are running linux then there\u0026rsquo;s a simple tool called dia that is quite useful for these kinds of diagrams. sudo apt install dia.\n2. Code the class hierarchy Then code up your class hierarchy. Note that at this point in the process there is no functionality exposed. There is no frontend or user interface. The only functions you have are constructors.\nIf you are doing this in JS then this program\n3. Resturaunt Manager functions Create the functionality that the resturaunt manager would need. This functionality should be developed in a TDD way.\nThe following functionality should be exposed: - create/delete/list/edit categories - create/delete/list/edit tags - create/delete/list/edit menu items\nThis functionality will eventually be accessable through a user interface. Take some time to think abou that user interface. How would a manager want to interact with it? How will these functions get called? What information will be required at each point?\n4. Now for the Customers  Customers should be able to create orders An order is composed of a bunch of menu items (or specific sizes) menu items can be added to the order at any point\n menu items can be removed from the order at any point\n   Update your class diagrams to show this new information Code the necessary classes Create the following functions:  order_instance.add_item(???) order_instance.remove_item(???) order_instance.get_total_price()   Additional Resources   TOPICS: Intro to software architecture   "
},
{
	"uri": "/tech-department/topics/kotlin/returns-and-jumps/",
	"title": "Returns and Jumps",
	"tags": [],
	"description": "",
	"content": " Kotlin has three structural jump expressions: return. By default returns from the nearest enclosing function or anonymous function. break. Terminates the nearest enclosing loop. continue. Proceeds to the next step of the nearest enclosing loop. All of these expressions can be used as part of larger expressions:\nval s = person.name ?: return  The type of these expressions is the Nothing type.\nBreak and Continue Labels Any expression in Kotlin may be marked with a label. Labels have the form of an identifier followed by the @ sign, for example: abc@, fooBar@ are valid labels (see the grammar). To label an expression, we just put a label in front of it\nloop@ for (i in 1..100) { // ... }  Now, we can qualify a break or a continue with a label:\nloop@ for (i in 1..100) { for (j in 1..100) { if (...) break@loop } }  A break qualified with a label jumps to the execution point right after the loop marked with that label. A continue proceeds to the next iteration of that loop.\nReturn at Labels With function literals, local functions and object expression, functions can be nested in Kotlin. Qualified returns allow us to return from an outer function. The most important use case is returning from a lambda expression. Recall that when we write this:\nfun foo() { listOf(1, 2, 3, 4, 5).forEach { if (it == 3) return // non-local return directly to the caller of foo() print(it) } println(\u0026quot;this point is unreachable\u0026quot;) }  The return-expression returns from the nearest enclosing function, i.e. foo. (Note that such non-local returns are supported only for lambda expressions passed to inline functions.) If we need to return from a lambda expression, we have to label it and qualify the return:\nfun foo() { listOf(1, 2, 3, 4, 5).forEach lit@{ if (it == 3) return@lit // local return to the caller of the lambda, i.e. the forEach loop print(it) } print(\u0026quot; done with explicit label\u0026quot;) }  Now, it returns only from the lambda expression. Oftentimes it is more convenient to use implicit labels: such a label has the same name as the function to which the lambda is passed.\nfun foo() { listOf(1, 2, 3, 4, 5).forEach { if (it == 3) return@forEach // local return to the caller of the lambda, i.e. the forEach loop print(it) } print(\u0026quot; done with implicit label\u0026quot;) }  Alternatively, we can replace the lambda expression with an anonymous function. A return statement in an anonymous function will return from the anonymous function itself.\nfun foo() { listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) { if (value == 3) return // local return to the caller of the anonymous fun, i.e. the forEach loop print(value) }) print(\u0026quot; done with anonymous function\u0026quot;) }  Note that the use of local returns in previous three examples is similar to the use of continue in regular loops. There is no direct equivalent for break, but it can be simulated by adding another nesting lambda and non-locally returning from it:\nfun foo() { run loop@{ listOf(1, 2, 3, 4, 5).forEach { if (it == 3) return@loop // non-local return from the lambda passed to run print(it) } } print(\u0026quot; done with nested loop\u0026quot;) }  When returning a value, the parser gives preference to the qualified return, i.e.\nreturn@a 1  means \u0026ldquo;return 1 at label @a\u0026rdquo; and not \u0026ldquo;return a labeled expression (@a 1)\u0026rdquo;.\n"
},
{
	"uri": "/tech-department/projects/sql/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": " Installation:  We are using Postgres Instead of installing Postgres on your computer, you can launch it with a docker composition MySQL is nice and lot\u0026rsquo;s of people use it in industry, but it doesn\u0026rsquo;t actually implement standard SQL, it sort of does it\u0026rsquo;s own thing a bit. Postgres is a much more standard DB, and industry loooooves it  Instructions Part 1: Creating a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n Create a database called \u0026ldquo;Umuzi\u0026rdquo;.\n Create the following tables in the Umuzi database:\n Customers Employees Orders Payments Products  Create a primary key for each table with auto-increment (make sure you correctly specify the data types, e.g. the ID field should be int).\n Create foreign keys so that every ID in the order table references an existing ID in the tables referenced (e.g., ProductID, EmployeeID, etc).\n INSERT the records in the tables below into the table you created in step 2.\n Document what information is stored in your database. Be sure to say what information is kept in what table, and which keys link the records between tables.\n  Customers Table    CustomerID (int) FirstName (varchar50) LastName (varchar50) Gender (varchar) Address (varchar200) Phone (int 10) Email (varchar100) City (varchar20) Country (varchar50)     1 John Hibert Male 284 chaucer st 084789657 john@gmail.com Johannesburg South Africa   2 Thando Sithole Female 240 Sect 1 0794445584 thando@gmail.com Cape Town South Africa   3 Leon Glen Male 81 Everton Rd,Gillits 0820832830 Leon@gmail.com Durban South Africa   4 Charl Muller Mal 290A Dorset Ecke +44856872553 Charl.muller@yahoo.com Berlin Germany   5 Julia Stein Female 2 Wernerring +448672445058 Js234@yahoo.com Frankfurt Germany    Employees Table    EmployeeID (int) FirstName (varchar50) LastName (varchar50) Email (varchar100) JobTitle (varchar20)     1 Kani Matthew mat@gmail.com Manager   2 Lesly Cronje LesC@gmail.com Clerk   3 Gideon Maduku m@gmail.com Accountant    Orders Table    OrderId (int) ProductID (int) PaymentID (int) FulfilledByEmployeeID (int) DateRequired (datetime) DateShipped (datetime) Status (varchar20)     1 1 1 2 05-09-2018  Not shipped   2 1 2 2 04-09-2018 03-09-2018 Shipped   3 3 3 3 06-09-2018  Not shipped    Payments Table    CustomerId (int) PaymentID (int) PaymentDate (datetime) Amount (decimal)     1 1 01-09-2018 R150.75   5 2 03-09-2018 R150.75   4 3 03-09-2018 R700.60    Products Table    ProductId (int) ProductName (varchar100) Description (varchar300) BuyPrice (decimal)     1 Harley Davidson Chopper This replica features working kickstand, front suspension, gear-shift lever R150.75   2 Classic Car Turnable front wheels, steering function R550.75   3 Sports car Turnable front wheels, steering function R700.60    Part 2: Querying a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n SELECT ALL records from table Customers.\n SELECT records only from the name column in the Customers table.\n Show the name of the Customer whose CustomerID is 1.\n UPDATE the record for CustomerID = 1 on the Customer table so that the name is \u0026ldquo;Lerato Mabitso\u0026rdquo;.\n DELETE the record from the Customers table for customer 2 (CustomerID = 2).\n Select all unique statuses from the Orders table and get a count of the number of orders for each unique status.\n Return the MAXIMUM payment made on the PAYMENTS table.\n Select all customers from the \u0026ldquo;Customers\u0026rdquo; table, sorted by the \u0026ldquo;Country\u0026rdquo; column.\n Select all products with a price BETWEEN R100 and R600.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where country is \u0026ldquo;Germany\u0026rdquo; AND city is \u0026ldquo;Berlin\u0026rdquo;.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where city is \u0026ldquo;Cape Town\u0026rdquo; OR \u0026ldquo;Durban\u0026rdquo;.\n Select all records from Products where the Price is GREATER than R500.\n Return the sum of the Amounts on the Payments table.\n Count the number of shipped orders in the Orders table.\n Return the average price of all Products, in Rands and in Dollars (assume the exchange rate is R12 to the Dollar).\n Using INNER JOIN create a query that selects all Payments with Customer information.\n Select all products that have turnable front wheels.\n  "
},
{
	"uri": "/tech-department/topics/intro-to-relational-databases/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": "Complete the DataCamp Intro and Intermediate SQL courses:\n Intro to SQL for data science Intermediate SQL  "
},
{
	"uri": "/tech-department/projects/java-specific/hello-sql-and-java/",
	"title": "SQL Extended",
	"tags": [],
	"description": "",
	"content": " I hope at this point you should have already read up on JDBC templates, JPA and Hibernate from the topic resources. In this project we wil re-visit you SQl project. Instead of only using scripts to create and interact with your database you are doing to do this using java + scripts. You will be using dataSources to configured your connection to your database and query your tables.\nPart1  Revise PROJECTS: SQL and make sure all tables are created and populated\n Use vanilla java (no Springboot) connect to your database and perform the queries in part2 but only number [1-7]\n Use Springboot JDBC templates to connect to your database and perform the queries in part2 but only number [1-9]\n  Added Bonus\n Lastly I would like you to use Hibernate + JPA to connect to your database and perform the queries in part2 [1-17]  Don\u0026rsquo;t forget to test your application\nPart 2: Querying a database (Reminder) Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n SELECT ALL records from table Customers.\n SELECT records only from the name column in the Customers table.\n Show the name of the Customer whose CustomerID is 1.\n UPDATE the record for CustomerID = 1 on the Customer table so that the name is “Lerato Mabitso”.\n DELETE the record from the Customers table for customer 2 (CustomerID = 2).\n Select all unique statuses from the Orders table and get a count of the number of orders for each unique status.\n Return the MAXIMUM payment made on the PAYMENTS table.\n Select all customers from the “Customers” table, sorted by the “Country” column.\n Select all products with a price BETWEEN R100 and R600.\n Select all fields from “Customers” where country is “Germany” AND city is “Berlin”.\n Select all fields from “Customers” where city is “Cape Town” OR “Durban”.\n Select all records from Products where the Price is GREATER than R500.\n Return the sum of the Amounts on the Payments table.\n Count the number of shipped orders in the Orders table.\n Return the average price of all Products, in Rands and in Dollars (assume the exchange rate is R12 to the Dollar).\n Using INNER JOIN create a query that selects all Payments with Customer information.\n Select all products that have turnable front wheels.\n  "
},
{
	"uri": "/tech-department/topics/python-specific/sql-and-python/",
	"title": "SQL and Python",
	"tags": [],
	"description": "",
	"content": "Python can be used to interface with SQL. To give you an idea of what can be done, complete the Datacamp skill track Importing \u0026amp; Cleaning Data with Python: https://www.datacamp.com/tracks/importing-cleaning-data-with-python\n"
},
{
	"uri": "/tech-department/department-processes/workshops_and_events/",
	"title": "Scheduling workshops and events",
	"tags": [],
	"description": "",
	"content": " This is specifically for workshops that are compulsory for specific cohorts and optional for others. Eg: This is allowed \u0026ldquo;Introduction to Unit testing with Jasmine, Compulsory C14B, All welcome\u0026rdquo;.\nProcess for staff members:\n Create the event on your personal umuzi calendar. Say who should be there. Include a useful description as much as possible, even links to materials if appropriate Invite the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar  if your event doesn\u0026rsquo;t clash with anything on the tech events calendar it will automatically be accepted if it DOES clash then it will automatically be rejected   This automation is set up on purpose. For the most part we should never make a recruit from any cohort unwelcome in any internal workshop or event. So they should not clash.\nUpdating events Workshops can be rescheduled at least a day in advance. If a workshop is happening TODAY then the time should be considered immutable. Because we don\u0026rsquo;t mess our recruits around. And because we want to demonstrate good time management and planning skills so that the recruits can learn good habits from us.\nTo reschedule an event simply update the event in your own calendar (if you set the event up in the first place)\nClashes Be mindful of how events get automatically rejected if they clash. If you put an event on this calendar then it should make sense in that context.\nScheduling External workshops and events (eg: meetups)  Post a link to the event in the slack channel #meetups-and-events Put the event on the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar Attach a form where recruits can sign up to attend (so that transport can be organized etc) (TODO) tell te recruits about when they need to fill in the form by, what\u0026rsquo;s the maximum number of people who can go etc  "
},
{
	"uri": "/tech-department/topics/free-code-camp/scientific-computing-with-python/",
	"title": "Scientific Computing with Python",
	"tags": [],
	"description": "",
	"content": "Make an account here if you haven\u0026rsquo;t already: https://www.freecodecamp.org/learn\nUnder \u0026ldquo;JavaScript Algorithms and Data Structures\u0026rdquo;, do the section entitled \u0026ldquo;Scientific Computing with Python\u0026rdquo;.\nTry not to ask for too many hints. Do your best to understand everything.\n"
},
{
	"uri": "/tech-department/tags/scrum/",
	"title": "Scrum",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/sealed-classes/",
	"title": "Sealed Classes",
	"tags": [],
	"description": "",
	"content": "Sealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a limited set, but cannot have any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances which can contain state.\nTo declare a sealed class, you put the sealed modifier before the name of the class. A sealed class can have subclasses, but all of them must be declared in the same file as the sealed class itself. (Before Kotlin 1.1, the rules were even more strict: classes had to be nested inside the declaration of the sealed class).\nsealed class Expr data class Const(val number: Double) : Expr() data class Sum(val e1: Expr, val e2: Expr) : Expr() object NotANumber : Expr() fun eval(expr: Expr): Double = when (expr) { is Const -\u0026gt; expr.number is Sum -\u0026gt; eval(expr.e1) + eval(expr.e2) NotANumber -\u0026gt; Double.NaN }  (The example above uses one additional new feature of Kotlin 1.1: the possibility for data classes to extend other classes, including sealed classes.)\nNote that classes which extend subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily in the same file.\nThe key benefit of using sealed classes comes into play when you use them in a when expression. If it\u0026rsquo;s possible to verify that the statement covers all cases, you don\u0026rsquo;t need to add an else clause to the statement.\nfun eval(expr: Expr): Double = when(expr) { is Expr.Const -\u0026gt; expr.number is Expr.Sum -\u0026gt; eval(expr.e1) + eval(expr.e2) Expr.NotANumber -\u0026gt; Double.NaN // the `else` clause is not required because we've covered all the cases }  "
},
{
	"uri": "/tech-department/topics/ncit/115373/",
	"title": "Search and Sort Techniques",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/semitone-challenge/",
	"title": "Semitone Challenge",
	"tags": [],
	"description": "",
	"content": " This is a multi-step project designed to level up many different skills.\nWe want to see the following skills demonstrated in different parts of this project:\n code structure functions loops conditions datatypes operators DOM maipulation  This project should be completed in a TDD way. This includes writing unit tests around the DOM!\nOk\u0026hellip;so WTF is a semitone? I\u0026rsquo;m glad you asked. Take a look at these links:\n https://www.justinguitar.com/guitar-lessons/the-note-circle-bc-152 https://www.justinguitar.com/guitar-lessons/note-circle-with-a-jam-buddy-mt-106  What we want to do is build a simple application that a musician can use to test their music theory skillz.\nIn the second video, Justin talks about a game that you can play with a jam buddy. Your buddy picks two notes from the note circle and tells them to you, then you tell your buddy how many semi-tones seperate those notes. That is basically what we are building here.\nThe final goal is to have a program that outputs two notes from the note circle and then allows the user to enter a number. The program needs to be ablt to tell the user if they chose the correct number or not.\nFor those of you studying web dev, you will be expected to build a simple user interface for this thing using vanilla js. For those of you studying Python you can make a command-line utility that does this.\n  PROJECTS: semitone difference - basic algorithm   PROJECTS: Make a simple GUI   PROJECTS: Advanced algorithm   PROJECTS: A gui that is more...awesome   Useful content   TOPICS: Jasmine Unit testing   "
},
{
	"uri": "/tech-department/topics/kotlin/set-up/",
	"title": "Set Up",
	"tags": [],
	"description": "",
	"content": " Beginning Android Development There aren\u0026rsquo;t any prerequisites for this tutorial, other than a willing mind and a Mac or PC. You can develop for Android on both a Mac or a PC. The instructions are similar but slightly different between macOS, Windows and Linux.\nYou will need to ensure the following installed on your system:\n Install the latest version of Android Studio. Versions higher than 2.0 comes with built in support for Kotlin. Older versions require installation of a Kotlin plugin. Install Java JDK 8.0 or higher. Older versions may work. It\u0026rsquo;s Logical to install the latest then go down from there, if you encounter any incompatibility issues. Do not go lower than 8 as support for Lambda in version 8.0 upwards. Make sure you have the latest or stable version of Android SDK installed.  Please feel free to google a setup process for your specific OS or use the links below. Setup may vary according to the time of content creation. Please use your google ability to solve any setup issues you may encounter.\nAsk your senior for help if all else fails.\nResources:  https://www.youtube.com/watch?v=rDqZgx21eH8 https://www.youtube.com/watch?v=i-GDpRzsMiU  Configure Kotlin on older versions on Android Studio:  https://www.youtube.com/watch?v=kEpVuKn1yT8 Test your configuration with the \u0026quot;Hello World\u0026quot; application in the Kotlin Introduction topic.  "
},
{
	"uri": "/tech-department/tags/simple-linear-regression/",
	"title": "Simple Linear Regression",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/smtp/",
	"title": "Smtp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/capstone-projects/spaced-repitition-machine/",
	"title": "Spaced Repitition machine to help you remember what you read",
	"tags": [],
	"description": "",
	"content": " Who should do this? This is a pretty fun and generally awesome scripting problem to be done in any old langage. It’s for anyone who likes books, and likes to remember what they read.\nThis will seem more awesome to you if you know a little bit about the science of learning. https://collegeinfogeek.com/spaced-repetition-memory-technique/\nSpec Google Books is pretty cool. You can upload or buy books and then read them on your computer or mobile device. You can highlight and add notes to parts of the text that you want to remember.\nWhen you do this then Google saves the highlights and notes in your Google Drive in the form of a Google doc (one doc per book). You can see what text you highlighted, what you said about it and when you highlighted it.\nTry it. It’s pretty easy and useful.\nYour mission is to write an app that has only one page. Whenever you refresh your page it should display a random note. Your app should be fast enough to be user-friendly.\nResources https://developers.google.com/docs/api/samples/extract-text\n"
},
{
	"uri": "/tech-department/tags/sql/",
	"title": "Sql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/basics/",
	"title": "Sqlalchemy Basics",
	"tags": [],
	"description": "",
	"content": "There\u0026rsquo;s more to Sqlalchemy that meets the eye. for this course we are most interested in the ORM: You can learn about it here:\nhttps://docs.sqlalchemy.org/en/13/orm/tutorial.html\nIt\u0026rsquo;s good to know one ORM well because it will make it easy to understand other ORMs down the line. ORMs aren\u0026rsquo;t a uniquely Python thing, they exist in other languages too.\nIf you want to go deeper into Sqlalchemy, take a look at this:\nhttps://docs.sqlalchemy.org/en/13/\n"
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/",
	"title": "Sqlalchemy ORM",
	"tags": [],
	"description": "",
	"content": "Sqlalchemy is the most popular Python ORM (Object Relational Mapper). It is highly legit. Lit even (am I using that right?)\nWhat\u0026rsquo;s an ORM? Well, I\u0026rsquo;m glad you asked. And I\u0026rsquo;m also glad that this guy asked\nSqlalchamy of course is not the only ORM around. There\u0026rsquo;s a very good chance that you\u0026rsquo;ll come across this one as well.\nTake a little bit of time to learn the fundamentals here: TOPICS: Sqlalchemy Basics Once you are done with the basics, it\u0026rsquo;s good to understand migrations. Migrations basically let you version control the structure of your database. This is seriously freaking useful if you ever want to actually us an ORM in production (hint: You do!)\nTOPICS: Sqlalchemy migrations with Alembic "
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/migrations/",
	"title": "Sqlalchemy migrations with Alembic",
	"tags": [],
	"description": "",
	"content": "Here\u0026rsquo;s the official tutorial. It\u0026rsquo;s really quite good.\nFirst, learn what a migration is: https://alembic.sqlalchemy.org/en/latest/tutorial.html\nNow learn how to make them automatically: https://alembic.sqlalchemy.org/en/latest/autogenerate.html\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/statistical-thinking/",
	"title": "Statistical Thinking",
	"tags": ["stats"],
	"description": "",
	"content": " Objectives At the end of this assignment you should be able to:\n Do exploratory data analysis on a new dataset Know what the measures of central tendency and spread are used for Know when to use which measure of central tendency Be able to describe different distributions and interpret a histogram Know what outliers are and how they affect measures of central tendency and spread Be able to interpret correlations from a graph and from the correlation coefficient  Background material  Crash Course Statistics: Measures of Spread Crash Course Statistics: Plots, Outliers and Justin Timberlake Crash Course Statistics: Correlation Doesn’t Equal Causation  Tutorials Complete the DataCamp courses Statistical Thinking in Python Part 1 and Statistical Thinking in Python Part 2.\nAssignment Instructions The Millennium Development Goals were a set of 8 goals for 2015 that were defined by the United Nations to help improve living conditions and the conditions of our planet. Key indicators were defined for each of these goals, to see whether they were being met. We will have a look at some of the key indicators from Goal 7: Ensure environmental sustainability, namely carbon dioxide emissions, protected land and sea areas, and forests. The full dataset can be found at http://mdgs.un.org/.\nImport the MDG data to a Jupyter Notebook. You will need the packages matplotlib, numpy, seaborn, pandas and scipy.\nQuestions  How many different countries are represented? How many missing values are there by country, year and series? Who are the top and bottom 5 countries in terms of C02 emissions in 1990 and what are their emissions? How has this changed by 2011?  Do you spot any problems with the data? If so, fix it.  Calculate the mean and median C02 emissions for 1990. Why do you think these values differ? Calculate the minimum, maximum and interquartile range of the CO2 emissions for 1990. Using this information, and the mean and median, what does this tell you about the distribution of CO2 emissions? Create a histogram of the CO2 emissions for 1990. Is this what you expected from your answers in questions 3 and 4? Calculate the standard deviation and standard error of the mean for CO2 emissions in 1990. How is the standard error different from the standard deviation? Create a line graph to show C02 emissions in Brazil, Russia, China, India, the USA and South Africa over time. What does the graph tell you about the difference and change in C02 emissions in these countries? What is the mean and standard deviation for land area covered by forest in 1990? Why do you think the standard deviation is so large? Create histograms for land area covered by forest and percentage of area protected in 1990. Describe the distributions. Create a scatterplot with a regression line using seaborn.regplot to show the relationship between the proportion of land area covered by forest and the percentage of area protected in 2000.  What is the relationship between these two variables? Describe any patterns in the scatterplot. Do you notice any unusual/extreme values that do not fit the general trend? If you see any unusual values, briefly describe them (Who are they? In what way are they different?).  Since neither forested land area nor protected area is normally distributed, we will need to log transform these variables in order to calculate a correlation coefficient. Log transform the variables and show the transformed distributions in a histogram. Using the pearsonr function from the scipy.stats module, calculate the Pearson correlation coefficient (and its corresponding p value) to determine the nature of the relationship between proportion of land area covered by forest and the percentage of area protected (as measured in 1990 and log transformed). See help(pearsonr) for help on this function.  Interpret the size and direction of the correlation statistic. Is the relationship statistically significant? Report the appropriate statistic(s) to support your answer. Calculate the Spearman Rank-Order Correlation Coefficient. This test only looks at the order of the categories, not the values. The Spearman Rank-Order Coefficient is therefore not influenced by non-normality of variables or outliers. How do the results of this test compare the results of the Pearson\u0026rsquo;s correlation?   "
},
{
	"uri": "/tech-department/topics/khan-academy/quantitative-data-analysis/",
	"title": "Statistics and Probability - Quantitative data analysis",
	"tags": [],
	"description": "",
	"content": "Go through the first folling units in https://www.khanacademy.org/math/statistics-probability\n https://www.khanacademy.org/math/statistics-probability/analyzing-categorical-data https://www.khanacademy.org/math/statistics-probability/displaying-describing-data https://www.khanacademy.org/math/statistics-probability/summarizing-quantitative-data  Wish you all the best!\n"
},
{
	"uri": "/tech-department/tags/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/string-and-number-manipulation/",
	"title": "Strings and numbers in Java",
	"tags": [],
	"description": "",
	"content": " In Java there are multiple ways to manipulate both strings and numbers to work in a manner that is required. These methods can play a vital role in the business logic of a system.\nFor example: Say you have a list of 100 books and you need to provide the functionality to search for a book. Without being able to manipulate a String the user would always have to search for the full title of a book and ensure that every letter\u0026rsquo;s case, matches that of the title.\nJava has built in methods to assist with just these kinds of situations.\nManipulating Strings  Concatenating Strings.\n Appending Number values to Strings.\n Determine the total number of characters in a String.\n How to alter the case of a String.\n Finding the position of a character in a word/sentence.\n Comparing 2 Strings to check for similarities.\n Substituting new values into a String.\n Splitting up sentences/words into multiple parts.\n Remove empty spaces from the start and end of Strings.\n Formatting Strings to a desired output. Example: for currency, converting 23.21 into R23.21.\n  On the other hand, being able to manipulate numbers is critical to most systems.\nManipulating Numbers  Convert negative values to positive values.\n Rounding a number up or down.\n Get the Highest/Lowest number, between 2 numbers.\n Calculate X to the power of Y.\n Generate a Random number.\n Get the Remainder/Modulus of 2 numbers.\n  "
},
{
	"uri": "/tech-department/topics/bootcamp/success-in-bootcamp/",
	"title": "Success in bootcamp",
	"tags": [],
	"description": "",
	"content": "tell them the plan and mechanisms tell them what we are looking for tell them how to ask for help\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/super-basic-intro-to-node/",
	"title": "Super basic intro to Node",
	"tags": [],
	"description": "",
	"content": " Most people are introduced to JavaScript in the context of a web browser. JS adds smarts to HTML and CSS.\nJS is a proper programming language so it can do a whole lot more than that. Basically it doesn\u0026rsquo;t need to interact with a website in order to work. You can use it on the \u0026ldquo;back-end\u0026rdquo;. It can be used to interact with filesystems and databases and all sorts of other things.\nWhen JS is running on the backend it\u0026rsquo;s usually referred to as Node. Node is really a \u0026ldquo;runtime environmnet\u0026rdquo; that can execute JS code.\nTry type this into a terminal:\nnode  Now type\nvar greeting = \u0026quot;hello world\u0026quot;; console.log(greeting);  So you see you can execute JavaScript code right there in your terminal and it just works (assuing you have node installed).\nNow save the helloworld code above to a file named hello.js. You can execute this whenever you want to by saying node hello.js in a terminal. Or rather node /path/to/hello.js if you are in a different location.\npackage managers Now one of the really super cool things about node is npm.\ntodo:\n talk about npm, show how to get started, install something and use it talk about .gitignore and node_modules  "
},
{
	"uri": "/tech-department/projects/ios-mobile/swift-and-more/",
	"title": "Swift and More",
	"tags": [],
	"description": "",
	"content": " Project Concentration Game "
},
{
	"uri": "/tech-department/topics/ios-mobile/swift-and-more/",
	"title": "Swift and More",
	"tags": [],
	"description": "",
	"content": " Slides: iOS Overview (Lecture 1) MVC (Lecture 2) Intro : Swift Development and other Tools (Lecture 3) Video Lectures: Lecture 1: Introduction to iOS 11, Xcode 9 and Swift 4\nLecture 2: MVC\u0026rsquo;s\nLecture 3: Swift Programming Language\nAdditional Content: Friday Session 1: Debugging and Xcode Tips and Tricks\n"
},
{
	"uri": "/tech-department/topics/unit-testing/tdd-horrors/",
	"title": "TDD Horrors",
	"tags": [],
	"description": "",
	"content": " These are all the most common TDD problems recruits tend to come across, read and make sure you didn\u0026rsquo;t make any of these or any mistakes at all.\n Write tests. Recruits in the past have done the mistake of not writing tests for TDD assignments, make sure you avoid this weird mistake. Always write tests for your TDD projects. Please make sure you understand .gitignore, please don\u0026rsquo;t add your node_modules to git. Name your files according to what is inside them Avoid making tests depend on each other. Making test dependent on each other is the perfect path to pain, expense, fragility, and complication. Pay attention to failure messages. Make each failure message as helpful for diagnosis as you can. Do not skimp on the refactoring. It is the refactoring that will keep your code (including the tests) easy to understand and change Naming conventions: in general, be careful with your naming conventions. make sure your naming convention consistent, names should be more descriptive. Name your files properly and according to what\u0026rsquo;s inside them. Keep good directory structure and delete all junk files. Avoid messy indentation (install prettier). Test for errors/exception, sometimes code is supposed to throw an error or raise an exception. In these cases your tests should make sure that the error happens as it should, your tests need to use the following syntax:\nJavascript:\nexpect(...).toThrow()  Python:\nwith pytest.raises([ErrorType])...  Python peeps DO NOT Define a test case(testing function) inside a function.\n  def test_something(): def totally_valid_test(): assert add(1,20,5) == 26 def another_test(): assert add(1,23,5) == 29  Note: Nice thing about the pytest module is that it removes the need for boilerplate code. so the following code would work:\nfrom module import add # tests start here. def test_add_two_values(): assert add(1,2) == 3 def test_add_multiple_values(): assert add(1,2,3,4) == 10   Test cases should focus on one functionality and one functionality only.  Python example:\nDo not do this:\ndef test(self): assert add(1,2,3,4) == 10 assert multiply(1,2,3) == 6  Do this instead:\n# test add function. def test_add_two_values(self): assert add(1,2) == 3 def test_add_multiple_values(self): assert add(1,2,3,4,5,6) == 21 assert add(2,3,4,5) == 14 def test_multiply_two_values(self): assert multiply(1,2) == 2 def test_multiply_multiple_values(self): assert multiply(1,2,4) == 8  Javascript example:\nDon\u0026rsquo;t do this:\ndescribe('Test one', () =\u0026gt; { it('Should add', () =\u0026gt; { let sum = add(1, 23, 5); expect(sum).toBe(29); }) it('Should multiply', () =\u0026gt; { let prod = multiply(1, 23); expect(prod).toBe(23); }) })  Each Function should have it\u0026rsquo;s own describe object_\nDo this:\ndescribe('add()', () =\u0026gt; { it('Should add [what exactly?]', () =\u0026gt; { let sum = add(1, 23, 5); expect(sum).toBe(29); }) }) describe('multiply()', () =\u0026gt; { it('Should multiply [what exactly?]', () =\u0026gt; { let prod = multiply(1, 23); expect(prod).toBe(23); }) })   Javascript: Test strings are there to be descriptive:\n eg:  Do: it(\u0026quot;can/should multiply [what exactly?]\u0026quot;)\nDon\u0026rsquo;t: it(\u0026quot;multiply\u0026quot;)\n Incomplete projects:\n Always make sure that your projects are complete. Submitting Incomplete projects looks, BAD! to both an employer and Code reviewers, so don\u0026rsquo;t submit incomplete projects, it\u0026rsquo;s bad for your reputation. If you do not have tests, for your TDD project, then your project is incomplete.  TDD tests fail:\n Failing tests aren\u0026rsquo;t bad during development, but make sure your all tests pass when you submit your project.  Documentation on how to setup and test the code:\n Make use of README.md, requirements.txt files, collaborators shouldn\u0026rsquo;t guess/remember how to setup all the dependencies for your project, document all the necessary processes please.  Clean code base. Need I say more?\n Dirty.  Javascript:\n// Testing if the Error Checks throw //var sixSided = new Dice(6,[1,\u0026quot;gdfdf\u0026quot;]); var sixSided = new Dice(6,[1,6,5,-16]); //console.log(sixSided.rollDice());  Python:\n# I was thinnking about This # Then I did this but it didn't work. so I left # And then, it came to me, eureka! die6 = Dice(6) # Since it works, there's no need to clean it.   Clean.  Javascript:\nvar sixSided = new Dice(6,[1,6,5,-16]);  Python:\ndie6 = Dice(6)   Remove useless stuff, it serves no purpose. so get rid of it.\n One test: writing one test to test everything is a bad idea, you need to separate it into multiple tests that test one and thing only.  Some useful Readings  Common mistakes in TDD  TOPICS: Unit testing (language agnostic concepts)   TOPICS: Clean Code   "
},
{
	"uri": "/tech-department/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/tags/tdd/",
	"title": "Tdd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/remote-work/tech-product-teams/",
	"title": "Tech Product Teams",
	"tags": [],
	"description": "",
	"content": " Product teams need to interact like teams. There will be a few compulsory meetings set up by your scrum masters. Just the usual things: Standups, Sprint plannings, demos, retros\u0026hellip; if you just show up 100% when you need to then life should be groovy.\nYour scrum masters will keep you in the loop with what you need to do to prepare for these meetings and when they will be.\nNow, pay close attention.\nYou still need to fill these in. Yes, even if you feel like you are repeating yourself in standup meetings with your scrum team. Please fill these in properly.\n (Morning form)[https://forms.gle/E2W9cC5cpHQdu1EL7] To be completed by 8:30 every day (Afternoon form)[https://forms.gle/68E7WMeWtMz4ryQSA] To be completed between 12:00 and 13:00 every day (End of day form)[https://forms.gle/cmUR2DiTgZRisDad8] To be completed from 16:30 onwards  Why?\nBecause we still need to take your attendance. It\u0026rsquo;s just how we\u0026rsquo;ll be doing things. Don\u0026rsquo;t fight it.\nTeamwork Teamwork is hard enough when you are sitting right next to each other. Remote teamwork is even harder. Here are a few hints:\nWhen you are responding to a message or reviewing some code, always remember that there is a person on the other side of that text. That person is trying to learn and grow just like you. So be kind and share your knowledge. A good team player is a force multiplier.\nOptimise your efforts around making your team successful and you will be successful.\nThis is also hugely important: always try to understand what your team mates are working on and how that relates to your work. For one thing this will make you an all round better human being and will make your mother proud. For another thing it will reduce waste on the team.\nWe\u0026rsquo;ve had a few situations in the past where two developers built the same thing in different ways on the same project. And then what happens is we have to just delete someone\u0026rsquo;s code. And that suuuucks. A lot! Don\u0026rsquo;t let that be you. And don\u0026rsquo;t let that be your team mate.\nSo basically, focus on communication! They say communication is a soft skill, but it\u0026rsquo;s actually pretty hard. So give it the care and attention it deserves.\nAlso: make sure you push your code every day.\nI REPEAT: PUSH YOUR CODE EVERY DAY. There are many reasons to do this.\nAnd read this: https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow. That\u0026rsquo;s how we work. You need to understand it and follow it.\n"
},
{
	"uri": "/tech-department/projects/tdd/",
	"title": "Test Driven Development",
	"tags": [],
	"description": "",
	"content": " The exercises in this section can be done in any language. The aim is to have working logic, not a beautiful user interface. You will be expected to demonstrate your working code and also to build on lessons you have already learned.\n if you know OOP please use it where it is appropriate write clean code (it will be reviewed by your peers and by senior staff) use Git from the command line. This is a suuuper important skill in industry have fun :) (but not too much)  There are a few exercises here. Try the ones marked as easy first.\nReads  Here is a quick read on the most common TDD pitfalls: TOPICS: TDD Horrors   "
},
{
	"uri": "/tech-department/topics/test-driven-development/",
	"title": "Test Driven Development",
	"tags": ["tdd"],
	"description": "",
	"content": " By now you should know a bit about what a unit test is and why we do them. The next question is: when should we do them? Do we write our unit tests after we write our code or before?\nTest driven development is a methodology in which tests are written before the code. This probably seems a little bit strange. Because it is. But it has a lot of advantages.\nThe basic algoorithm you follow in TDD is the same no matter what language you are writing in. Here it is:\nRED -\u0026gt; GREEN -\u0026gt; REFACTOR -\u0026gt; repeat until victory!\n RED means: Step 1 is to write a test. The test should fail GREEN means: Write some code so that your test passes REFACTOR means: Look critically at your code. Is it DRY and cohesive? do the names make sense? Is it kak or is is lekker. Make it lekker and make sure your tests still pass. VICTORY: Beautiful code that works  There\u0026rsquo;s a lot more to be said about it than that. And there are a lot of intricacies and frustrations that you are going to bump into. YOu\u0026rsquo;re going to be doing a lot of this.\nResources  https://www.guru99.com/test-driven-development.html This is really good. But it glosses over the REFACTOR phase of TDD. ALways refactor. Always. https://www.youtube.com/watch?v=H4Hf3pji7Fw https://www.youtube.com/watch?v=3vuW4lFdAxc  This video is about BDD. Which is even cooler than tdd. https://www.youtube.com/watch?v=VS6EEUVZGLE\nExample This is written in Java. But if you aren\u0026rsquo;t learning Java, eg if you are writing Python or JS instead, don\u0026rsquo;t be scared! Once you know one language then many others are pretty straight-forward to pick up.\nhttps://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\n"
},
{
	"uri": "/tech-department/topics/ncit/115359-and-115384/",
	"title": "Test-driven development",
	"tags": ["tdd"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/115391/",
	"title": "The Internet and World Wide Web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/capstone-projects/quizmaster/",
	"title": "The Quizmaster",
	"tags": [],
	"description": "",
	"content": " Who should do this? This will work best as a Django application.\nSpec Admin interface Create an app where an administrator can set up multiple choice quizzes. Create database models for Quiz, Question and Choice. Questions and choices should be able to contain rich text and even images. These should be fully defined using Markdown. Questions should also have another field called “explanation” that also contains markdown text.\nRecruit Interface Recruits can test their skills by answering the questions. They can navigate to a quiz and then they will get shown one question at a time. They will get to choose between the answers. Once they have finished the quiz they will be told their mark and a summary of what they got right and wrong. If a question was wrong then the recruit should be shown the “explanation” associated with the question.\nResources "
},
{
	"uri": "/tech-department/topics/tech-terminology/",
	"title": "The Tech Landscape Terminology",
	"tags": [],
	"description": "",
	"content": " The tech landscape is vast with interconnected technologies that comprise backend, frontend and database functionalities. These technologies vary, ranging from languages, frameworks, IDEs, databases and platforms.\nLanguages A programming language is essentially a set of instructions given to a computer to produce various kinds of output. They are used to implement algorithms. Different languages have different syntax. In Web development, the frontend has 3 essential languages.\nFrameworks and Libraries Frameworks and libraries are reusable code that has been written by someone else and packaged. They help save you time when coding as the main aim for them is to solve common problems that other developers have faced and solved. Most frameworks are open source, which means anyone can import them into their code and use them.\nRead more on The difference between Frameworks and Libraries\nTools A tool is a program that developers use to create, debug, maintain or support other programs and applications. These are usually simple programms that can be combined to accomplish a task. Some basic tools include source code editors, and compilers or interpreters. Tools are often excuted from the command line.\nA tool that is widely used in development is Git read more, which is a version-control tool. It is used to track changes in the source code during the development process.\nDatabases A database is basically a structure that enables the storage, retrieval, manipulation and updating of data.\nIDEs Integrated Development Environment(IDE) is a software suite that consolidates basic tools that a developer needs to write and test code. An IDE can consist of a Text Editor (for writing the actual code), a debugger (to detect and fix errors) and code libraries (to make coding faster and easier).\nPlatforms A platform is any hardware or software that is used to execute or host software, application or service. The most popular ones include Heroku, Amazon Web Services (AWS), Microsoft Azure and Google Cloud Platform.\nA widely used platform in Tech is Github watch for more info. It is a code hosting platform for version-control and collaboration. It is an online service to which developers who use Git can connect, upload and download resources. There are also alternatives to Github like GitLab, Bitbucket,Beanstalk and a whole lot others.\nNew to Git and Github? Here\u0026rsquo;s a tutorial to help you get started.\nCloud Computing The practise of using a network of remote servers hosted on the Internet to store, manage, and process data, rather than a local server or a personal computer.\nThere are three types of Cloud Computing:\nSaaS (Software as a Service) It uses the internet to deliver applications. The applications are managed by 3rd party vendors to their users. Most SaaS applications run through a web browser, hence they don’t require downloading or installation. Examples: Google Apps \u0026amp; Dropbox\nPaaS (Platform as a Service) Also known as Cloud Platform Services. They provide cloud components to certain software while being used mainly for applications. PaaS delivers a framework for developers that they can build upon and use to create customized applications. All servers, storage, and networking can be managed by the enterprise or a third-party provider while the developers can maintain management of the applications. Examples: AWS Elastic Beanstalk, Windows Azure, Heroku, Force.com, Google App Engine\nIaaS (Infrastructure as a Service) Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are made of highly scalable and automated compute resources. IaaS is fully self-service for accessing and monitoring computers, networking, storage, and other services. IaaS allows businesses to purchase resources on-demand and as-needed instead of having to buy the hardware outright. Examples: DigitalOcean, Linode, Rackspace, Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE)\nVirtual Machines These are software computers that provide the same functionality as a physical computer. They run on a physical computer, they behave like a separate computer system. VMs can run applications and operating software like a physical computer would. They are used to perform specific tasks that are risky to run on a host environment like accessing virus-infected data or testing an operating system. There different virtual machines for different operating systems namely: Mac, iOS, Android, Linux, VMware and Ubuntu. There are also virtual machines for Python and Java.\nContainer A container is a method for packaging applications and other dependencies so that it can be run in isolation from other processes. There are different types of container software. They include Docker, Apache Mesos, rkt (rocket) and Kubernetes.\nWeb Development Web development is the work involved in building websites, web apps and social media services, for the internet or private network (intranet). It can be broken down into specific specializations, namely: Frontend (Client facing side, Backend (server-side) or Fullstack (specializes in both). Web development is like a machine and the specializations are like different parts of the machine.\nThese parts have different technologies that comprise languages, frameworks, libraries and Databases and IDEs which make development possible.\nMore on how Frontend and Backend work together\nLanguages:  HTML (Hypertext Markup Language) Read more CSS (Cascading Style Sheet) Read more Javascript Read more NodeJS read more SQL read more  Frameworks:  Express read more React read more Bootstrap read more  Databases:  MongoDB read more mySQL read more  IDEs:  Visual Studio Code download here Atom download here Sublime Text download here  System Development (Mobile Development) Systems Development is the process of defining, designing, testing and implementing new software.\nLanguage  Java read more Kotlin (Android) read more Swift (iOS) read more  Build Tool:  Gradle read more  IDE:  IntelliJ Download here XCode (iOS) download here Android Studio download here  Database:  Firebase read more Sqlite read more Core Data read more Realm read more  Data Science \u0026amp; Engineering Data Science is the study of data, it combines domain expertise, programming skills, mathematics and statistics to extract meaningful information from data. Data engineering is an aspect of data science. It focuses on the practical application of data collection and analysis.\nLanguages:  Python read more  Frameworks and Libraries:  Django read more Flask read more Pandas read more TensorFlow read more scikit-learn read more NumPy read more NLTK read more matplotlib read more Seaborn read more  IDE:  Jupyter Notebook download here  Databases:  PostgreSQL download here  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dotenv/",
	"title": "The dotenv module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/messaging/umuzi-recruit-user-journey/",
	"title": "The journey of an Umuzi recruit",
	"tags": [],
	"description": "",
	"content": " This might be your first real introduction to what we at Umuzi are all about. All this stuff will be covered in detail in one of our introductry conversations, so this page will be brief.\nUmuzi\u0026rsquo;s mission Umuzi’s mission is to help high potential young people access high value digital careers.\nIn order to do this we have worked with corporate partners to invest in young people and support their career journeys.\nYour Journey There are a few phases of the Umuzi recruit user journey. What\u0026rsquo;s a recruit? Keep reading and you\u0026rsquo;ll find out.\nHere are all the phases to the journey\n1. Applying online You have already done this. But here\u0026rsquo;s a fun fact: Did you know that our applicant portal and process was mostly built by our own Umuzi recruits? Cool hey?\nIn the background, we mark your tests and figure out who might be able to make it with us. If we think you have potential then we invite you to the next phase.\n2. Pre bootcamp learning phase You are here.\nWe make decisions about who is in and who is out in our bootcamp. Now is a good time to prepare yourself.\nWe\u0026rsquo;ve found that our recruits do best when they are able to:\n hold themselves accountable if we bring people onto the program who aren\u0026rsquo;t willing to do their homework without being pulled into disciplinary hearings then that\u0026rsquo;s a giant waste of time. We are looking for adults who we can trust to get things done pursue understanding those people who copy random bits of code off the internet don\u0026rsquo;t do too far  By properly preparing yourself for our bootcamp, you\u0026rsquo;ll show us who you are.\nWe\u0026rsquo;ve given you quite a lot of stuff to do. Do your best, we don\u0026rsquo;t think everyone will get through all of it. All we are asking for here is your best work.\n3. Bootcamp This is the next step for you.\nThis is a 2 week course that will teach you some solid skills.\nThe bootcamp will be run using our own custom built learning platform. There will be a bit of a learning curve and you\u0026rsquo;ll probably get confused, but there will be staff on hand to help you out if you get stuck. Please make sure you ask questions when you get stuck!\nDuring the bootcamp you\u0026rsquo;ll have a bit of work to do, and you\u0026rsquo;ll have a few interviews and tests with different people.\nPLEASE NOTE: the bootcamp should be treated like a full time job! Spend at least a full workday on your course every single day!\nIt is your responsibility to:\n make sure you have the time and space to do this adequitely prepare make sure you are available for all your scheduled interviews, tests and workshops  If you sucessfully complete our bootcamp then you\u0026rsquo;ll get a nationally recognised certificate! This is pretty cool if you ask me, even if you don\u0026rsquo;t get into Umuzi you can put this on your CV. This is because we want to make sure that our bootcamp is useful for you, even if you don\u0026rsquo;t get into Umuzi.\n4. Contract signing Once bootcamp is finished, Umuzi staff members (and our trusty robots) will make a final selection of who gets into our program. Those people will be offered 1 year contracts with us and will be referred to as \u0026ldquo;recruits\u0026rdquo;. Here are a few details:\n you will technically be an Umuzi employee, your job will be to grow your skills. You will be expected to follow staff members instructions and to behave professionally. this is a full-time commitment. You will be expected to work on your Umuzi tasks as your full time job. If you have another job, you\u0026rsquo;ll need to quit. You will get paid during your learnership. Umuzi is committed to pay you R3500 every month while you are with us. This isn\u0026rsquo;t a tonne of money, but it should be enough to keep you housed and fed. Yes, that\u0026rsquo;s right! We\u0026rsquo;ll pay YOU to study with us. Usually people pay good money to have access to this kind of high quality education.  Once you\u0026rsquo;ve signed your contract, you\u0026rsquo;ll be an Umuzi recruit.\n5. Level-up your foundational skills The next phase is learning. You\u0026rsquo;ll be familiar with how we do things from going through our bootcamp. We\u0026rsquo;ll give you a whole lot of learning to do, and lots of projects and assessments to hone your skillz.\nYou\u0026rsquo;ll be expected to work like a real professional. You will be immersed in modern agile development practices from day 1. You\u0026rsquo;ll learn hard skills, interact with your peers and overcome challenges you never thought you could.\nAt the end of this you\u0026rsquo;ll have an NQF level 5 National Certificate in IT, and some solid, proven skills, and a network of high potential indviduals who know what you are about.\n6. Capstone project An NQF level 5 National Certificate in IT is pretty cool and all, but we like to go above and beyond that.\nIn this phase you\u0026rsquo;ll take on an interesting problem to solve. It will tie a bunch of your different skills together.\nThis is different for everyone. You and your manager will decide on a project together.\n7. Product team! As mentioned before, our recruitment portal was built by Umuzi recruits. Tilde also a project that recruits helped build - you\u0026rsquo;ll get to work on that pretty soon. We even use machine learning pipelines built by recruits in different parts of our organisation, and all sorts of little automations that help with our day to day work.\nUmuzi is a growing, evolving, innovative organisation and we have a bunch of awesome projects underway.\nOnce you are done with your capstone project you will be allowed to join a product team.\nThis will polish your skills, working on a real team towards real goals is something else. It\u0026rsquo;s great preparation for the next phase.\n8. External work experience After the first 9 months of your contract with us, we start watching you extra closely and preparing you for job interviews.\nIf we believe that you are work-ready then we hustle to get you an internship at an external company. The external company will give you a top-up on your salary at this point, at least an extra R3500. So you\u0026rsquo;d get R7000 total for the last 3 months.\nNote: If you are not work ready at this point, we will not be sending you out. Umuzi is a reputable training organisation and we will only vouch for you if we believe in you.\nAlso, VERY IMPORTANT, if you don\u0026rsquo;t go out for work experience for any reason at all, then you will NOT be given the top up. Umuzi will pay your R3500 per month until your contract is concluded. Unless, of course, if a new contract is signed by all parties.\nHistorically, in pre-covid conditions, about 80% of our recruits on work experience ended up staying at the hosting companies for longer than 3 months, many of them even got offers for perminant employment.\n9. Job time! But it\u0026rsquo;s not the end\u0026hellip; Your 12 months are up! Time to get hired. If your work experience hosting company didn\u0026rsquo;t hire you, then we work to find you another oppertunity.\nWe have a team of recruitment ninjas and a large network of employer partnerts. So we\u0026rsquo;re pretty good at placing people.\nAnd if your job doesn\u0026rsquo;t last for whatever reason then you can get in touch with us and we\u0026rsquo;ll hook you up again.\nOf course you need to be a \u0026ldquo;work ready\u0026rdquo; professional for us to do this.\n10. Alumni Program Once you have gone through our program you are one of the family and we\u0026rsquo;ll continue supporting your career. You will have ongoing access to our services and syllabus.\nIf you are ever in need of a job, let us know and we\u0026rsquo;ll try find you a spot with one of our partners. Our recruitment ninjas are always happy to assist, and our network of employer organisations keeps growing.\nOn top of that, we will support your continued learning by keeping our platform and syllabus open to you. You\u0026rsquo;ll be able to register for other courses that we run, some of those courses will be advanced specialisations. When you complete these courses we\u0026rsquo;ll be able to give you our stamp of approval.\nOur course offerings grow all the time. Maybe you are a web dev who wants to learn about cross platform mobile development, we\u0026rsquo;ll hook you up! Maybe you are a data-scientist and you want to learn about productionising your pipelines, we got you!\n11. Pay it forward Umuzi is dedicated to opening doors for you! After you get your first real job, we\u0026rsquo;ll need you to help us open doors for other high potential people like you. Basically, all the stuff we do is quite expensive and we need to stay afloat. So our graduates help out by giving back a small portion of their salary for a little while.\nUmuzi will work out a repayment plan that works for your pocket. Basically how it works is that you wont need to pay unless you are earning enough to do so. And payments will be calculated as a portion of your paycheck. We want to make sure that we don\u0026rsquo;t put you into a tough position so we stretch this out a bit instead of expecting all the money at once.\nIn total the required pay-it-forward amount is R34500, although some people choose to give more.\nAll funds paid back to Umuzi from recruits goes into an to supporting the next generation of talent.\n"
},
{
	"uri": "/tech-department/topics/ncit/115367/",
	"title": "Thinking like a machine",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/time-managment/",
	"title": "Time Management",
	"tags": [],
	"description": "",
	"content": "TODO: which one?\nhttps://docs.google.com/presentation/d/1gRAGqSma21RkbnfoCO2KM565EfGCf9m4ZuJ9S7mcyFc\nhttps://docs.google.com/presentation/d/1gOBA6zen5jre1DxCKRU9zHpVDFh2n8yPMXw2STCOkCw\n"
},
{
	"uri": "/tech-department/remote-work/tools-for-remote-workshops/",
	"title": "Tools for remote workshops",
	"tags": [],
	"description": "",
	"content": " We run a lot of workshops at Umuzi. Here\u0026rsquo;s how to do them well.\nWhat does success look like? Basically we want to allow the workshop attendees to interact as much as possible. But sometimes the internet sucks and sometimes there\u0026rsquo;s no electricity. So this process has a few redundancies in it.\nFirstly, for a workshop to be sucessful people need to know when it is and how to link to it. So you want to be careful about communication on that point.\nNow in the ideal situation, all the recruits can just join a video call and everything will go swimmingly.\nBut things wont be ideal so we have some redundancies built in. In case the internet is a bit slow we live-stream the workshop to youtube. Youtube live is a bit less data-hungry than a video call so if people are struggling they can go watch and participate there.\nAnd then youtube live records the workshops for us, and that\u0026rsquo;s great because it means that any recruits who missed out, or who want to refer back to something can go watch the video when they want.\nStep 1: Schedule the workshop Open up google calandar and reserve some time. If you want to include specific people in the workshop take a moment to look at their calandars and check if they are available. We find that if we make our workshops longer than an hour people tend to loose focus.\nAdd a link to your google hangout or Jitsi meeting. Remember that google hangouts has a user limit of 25.\n https://meet.jit.si/ https://hangouts.google.com/  Step 2: Schedule a Youtube live-stream It\u0026rsquo;s quite likely that you\u0026rsquo;ve never done this before. You should have access to a Youtube accout that has streaming turned on. You\u0026rsquo;ll see a little plus button on the top right that allows you to create a video. Click on that and choose to \u0026ldquo;Go Live\u0026rdquo;.\nClick on \u0026ldquo;Streams\u0026rdquo; and make a new one. Fill in some stuff about your workshop - most of the fields should make sense.\nYou can choose to have your stream Private, Public or Unlisted. If you set it to Public then random people from the interwebs WILL show up and make comments about your content. Consider yourself warned. I learned this the hard way.\nYou can choose to edit your stream and set a date, time and thumbnail. Make the date and time are the same as your calandar event.\nNow you\u0026rsquo;ll see a whole lot of weird stuff going on.\nNow you are scheduled.\nClick on the arrow on the top right and you\u0026rsquo;ll be directed to a page showing all your upcoming video streams. You can get the \u0026ldquo;Sharable link\u0026rdquo; for a stream on this page. Explore, you\u0026rsquo;ll find it.\nCopy that and paste it onto your google calandar event.\nYou are scheduled. Cool.\nStep 3: It\u0026rsquo;s workshop time: OBS studio You should probably try this out before workshop time lest you screw up\u0026hellip; It\u0026rsquo;s a little bit involved.\nYou\u0026rsquo;ll need this: https://obsproject.com/download\nBasically, Youtube live doesn\u0026rsquo;t simply let you share your desktop. You have to jump through some hoops to get it right. OBS helps with that.\nWhen you open up OBS and it is set up right, you\u0026rsquo;ll see something\u0026hellip; horrible. Ignore most of it, just focus on the controls at the botton of the screen.\nYou get to tell OBS what you want to capture by adding Sources. Add a source for your screen and for your microphone. You can remove all the others.\nIn a browser, navigate back to this page:\nSee those stream settings on the left? Yeah, you\u0026rsquo;ll need those.\nIn the OBS application, on the right hand side you\u0026rsquo;ll see a settings button. Go there then click on stream. set your service to \u0026ldquo;Custom\u0026rdquo; then paste in the stream server and key fro youtube.\nOnce your settings are saved you can choose to start streaming.\nGo stare at Youtube for a while. After a little while a preview will come up that will display your screen with a hell of a lot of lag. Well done. You are connected!\nClick the \u0026ldquo;start Streaming\u0026rdquo; button when yo want to let people start watching your stream.\nHints I find it useful to open up all the different programs I want to demonstrate before I even open OBS. Get everything else set up, then get the streaming turned on, then join your actual video call.\nAlso if you are working with multiple screens, I find it\u0026rsquo;s much nicer not to. Either turn one screen off, or set your screens to mirror.\nStep 4 The end. Tell OBS to stop streaming. Then go to youtube and also tell it to stop once the content runs out. And quit your video call.\nOther tools and options Sometimes it\u0026rsquo;s useful to just draw a picture. Here are a few online whiteboarding tools. Of course nothing beats a real whiteboard, but these might be useful.\n https://app.ziteboard.com/ https://www.webwhiteboard.com/ https://whiteboard.explaineverything.com/ https://whiteboardfox.com/  If you aren\u0026rsquo;t too keen on getting video interaction from people then you can also cut out hangouts/jitsi. If you want your attendees to be able to talk to you with words then Discord is an option, just remember that there will be a lag between what you do on your computer and what tey see in the live stream so it can get a bit hairy.\nOr you can also do pure Youtube live streaming and just let the recruits send you text messages. This can get a bit clumsy.\n"
},
{
	"uri": "/tech-department/",
	"title": "Umuzi Tech Department",
	"tags": [],
	"description": "",
	"content": " Umuzi Tech Department This website/repo is the source of truth around what and how we teach here in Umuzi\u0026rsquo;s tech department. Let me show you around:\nIf you want to contribute to this repo Take a look at the contribution guide guide. This guide will tell you basically how this application works and will give you info on what a good pull request looks like.\nIf you are a recruit This here is basically how we work.\nIf you want to see the entire syllabus (as it currently exists) then take a look here. What you see in this section is constantly evolving based on feedback from you and from industry.\nIf you think anything we have in here can be improved upon we would love to know! You can even make a pull request. If we merge your stuff then you will show up on out credits page. Cool, eh?\nIf you are a staff member You are probably looking for our department processes documentation. Take a look here.\nIf you are interested in getting in touch with Umuzi Hi friend, we would love to meet you. Check out our contact page for more info\n"
},
{
	"uri": "/tech-department/tags/unit-testing/",
	"title": "Unit Testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/unit-testing/",
	"title": "Unit testing (language agnostic concepts)",
	"tags": [],
	"description": "",
	"content": "The following videos use JavaScript to demonstrate and explain some key concepts around unit testing. Even if JS is not your vibe these are worth watching.\n Lesson 1: Why Unit Testing Lesson 2: Your first tests Lesson 3: Test Runners. This discussion on test runners mentions a bunch of JS stuff. But there are still many language agnostic concepts that are worth knowing about. Examples of Python test runners are unittest and pytest.  If you are actually doing JS then it\u0026rsquo;s worth watching the rest of this series of videos.\n"
},
{
	"uri": "/tech-department/workshops/js-unit-tewsting/",
	"title": "Unit testing Introduction",
	"tags": [],
	"description": "",
	"content": "A brief introduction to unit testing\n"
},
{
	"uri": "/tech-department/workshops/intro-to-unit-testing-with-jasmine/",
	"title": "Unit testing with Jasmine Introduction",
	"tags": [],
	"description": "",
	"content": "..* (A brief introduction to unit testing.)\n ..* (A brief introduction to Jasmine)\n "
},
{
	"uri": "/tech-department/topics/unit-testing-mocks-and-spies/",
	"title": "Unit testing with mocks and spies",
	"tags": [],
	"description": "",
	"content": " Unit testing is a pretty powerful thing - it lets you quickly and easily check if your code works the way it is supposed to, and acts as documentation for your code. And it stops your team mates from breaking your stuff. This is super powerful.\nOne thing that is special about unit tests is the concept of a \u0026ldquo;unit\u0026rdquo;. A unit test tests a unit of code. A unit is supposed to be something small and specific, it should be quick to test and it should be \u0026ldquo;cheap\u0026rdquo; to run. What does that mean? If your tests take a long time to run, or actually cost money to run then that\u0026rsquo;s a real problem. Your tests shouldn\u0026rsquo;t have real world conseqences when you run them.\nLet me show you an example.\nLet\u0026rsquo;s imaging that you have a program where users create accounts. Users have phone numbers and those phone numbers need to be verified using an sms. There are a lot of ways to send an sms from your program, for example Twilio and Nexmo.\nSo basically when a user changes their phone number we need to send a single sms. Sending two sms\u0026rsquo;s would be a problem. We need to send the sms to the right person, with the right message. Basically instead of actually sending an sms, we need to make sure that the correct sms sending api has been called with the correct arguments and the correct number of times.\nFor now, to Keep It Short and Simple, let\u0026rsquo;s just assume we have a simple function to send sms\u0026rsquo;s that looks a bit like this:\n# python def send_sms(to_phone_number,message): magic happens here  // js def sendSms(toPhoneNumber,message): magic happens here  So our test should do something like this (pseudocode-ish):\n# python ish def test_validate_phone_number_sends_correct_sms(): do_some_setup() change_the_user_phone_number(new_phone_numer) assert send_sms.call_count == 1 assert send_sms.call_arguments[\u0026quot;to_phone\u0026quot;] == new_phone_number  # js -ish it('should send the correct sms when a user's phone number changes',()=\u0026gt;{ doSomeSetup() changeTheUserPhoneNumber(newPhoneNumer); expect(sendSms.callCount).toBe(1); expect(sendSms.arguments.toPhone).toBe(newPhoneNumber); })  Note: the above code is not strictly correct. This is just an illustration of the kind of thinking you need to do.\nDiffernt languages and tools have different ways to do this stuff. But you can often use the same mental models to understand how it all works.\nPython Resources  Real Python has a great tutorial The official docs  JS Resources TOPICS: Jasmine Spies "
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/",
	"title": "Unit-testings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/bootcamp/git-for-bootcamp/",
	"title": "Useful Git commands",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;re going to need to execute a few git commands in order to succeed at bootcamp. Here\u0026rsquo;s a bit of a cheat-sheet. Make sure you can use all this stuff!\n   git command Function     git clone repo url clones the repo to your local machine   git checkout -bname-of-your-new-branch creates a new branch from the branch you had checks that branch out (this means you are now working on that branch)   git status Returns the current working branch. If a file is in the staging area, but not committed, it shows with git status. Or, if there are no changes it’ll return nothing to commit, working directory clean.   git push pushes the changes you have made, saved and committed locally to the remote repo   git push --set-upstream origin branch name sets the upstream and enables you to push to the correct branch using the git push command   git add file name adds the specified file to the stageing area so that it is ready to be committed   git add . adds all files with saved changes to staged so they are ready to commit NB! always check git status before using git add .   git commit -m \u0026quot;*your commit message*\u0026quot; Record the changes made to the files to a local repository. For easy reference, each commit has a unique ID.It’s best practice to include a message with each commit explaining the changes made in a commit. Adding a commit message helps to find a particular change or understanding the changes.   git status Shows what files were changed since your last commit   git diff Shows how files changed since your last commit. This is like a very informative version of git status    Common Git Commands with Explications and examples of usage\n"
},
{
	"uri": "/tech-department/projects/kotlin/user-activity/",
	"title": "User Activity",
	"tags": [],
	"description": "",
	"content": " App overview In this project, you extend the AboutMe app to add user interaction. You add a nickname field, a DONE button, and a text view to display the nickname. Once the user enters a nickname and taps the DONE button, the text view updates to show the entered nickname. The user can update the nickname again by tapping the text view.\nTask : Add an EditText for text input In this task, you add an EditText input field to allow the user to enter a nickname. This you need to do to with a clone of your previous project \u0026lsquo;About Me\u0026rsquo;.\nApps are more interesting if the user can interact with the app, for example if the user can enter text. To accept text input, Android provides a user interface (UI) widget called an edit text. You define an edit text using EditText, a subclass of TextView. An edit text allows the user to enter and modify text input, as shown in the screenshot below.\nStep 1 : Add an EditText In Android Studio, open the activity_main.xml layout file in the Design tab. In the Palette pane, click Text.\nAb TextView, which is a TextView, shows at the top of the list of text elements in the Palette pane. Below Ab TextView are multiple EditText views.\nIn the Palette pane, notice how the icon for TextView shows the letters Ab with no underscoring. The EditText icons, however, show Ab underscored. The underscoring indicates that the view is editable.\nFor each of the EditText views, Android sets different attributes, and the system displays the appropriate soft input method (such as an on-screen keyboard). Drag a PlainText edit text into the Component Tree and place it below the name_text and above the star_image.\nUse the Attributes pane to set the following attributes on the EditText view.\n   Attribute Value     id nickname_edit   layout_width match_parent (default)   layout_height wrap_content (default)    Run your app. Above the star image, you see an edit text with default text \u0026ldquo;Name\u0026rdquo;.\nTask: Style your EditText In this task, you style your EditText view by adding a hint, changing the text alignment, changing the style to the NameStyle, and setting the input type.\nStep 1: Add hint text 1 - Add a new string resource for the hint in the string.xml file.\n\u0026lt;string name=\u0026quot;what_is_your_nickname\u0026quot;\u0026gt;What is your Nickname?\u0026lt;/string\u0026gt;  Tip: It's a good practice to show a hint in each EditText view to help users figure out what input is expected for editable fields.\n2 - Use the Attributes pane to set the following attributes to the EditText view:\n   Attribute Value     style NameStyle   textAlignment (center)   hint @string/what_is_your_nickname    3 - In the Attributes pane, remove the Name value from the text attribute. The text attribute value needs to be empty so that the hint is displayed.\nStep 2 : Set the inputType attribute The inputType attribute specifies the type of input users can enter in the EditText view. The Android system displays the appropriate input field and on-screen keyboard, depending on the input type set.\nTo see all the possible input types, in the Attributes pane, click the inputType field, or click the three dots \u0026hellip; next to the field. A list opens that shows all the types of input you can use, with the currently active input type checked. You can select more than one input type.\nFor example, for passwords, use the textPassword value. The text field hides the user\u0026rsquo;s input.\nFor phone numbers, use the phone value. A number keypad is displayed, and the user can enter only numbers.\nSet the input type for the nickname field:\n1 - Set the inputType attribute to textPersonName for the nickname_edit edit text.\n2 - In the Component Tree pane, notice an autoFillHints warning. This warning does not apply to this app and is beyond the scope of this codelab, so you can ignore it.\n3 - In the Attributes pane, verify the values for the following attributes of the EditText view:\n   Attribute Value     id nickname_edit   layout_width match_parent (default)   layout_height wrap_content (default)   style @style/NameStyle   inputType textPersonName   hint \u0026rdquo;@string/what_is_your_nickname\u0026rdquo;   text (empty)    Task: Add a button and style it. A Button is a UI element that the user can tap to perform an action. A button can consist of text, an icon, or both text and an icon.\nIn this task, you add a DONE button, which the user taps after they enter a nickname. The button swaps the EditText view with a TextView view that displays the nickname. To update the nickname, the user can tap the TextView view.\nStep 1: Add a DONE button 1 - Drag a button from the Palette pane into the Component Tree. Place the button below the nickname_edit edit text.\n2 - Create a new string resource named done. Give the string a value of Done,\n\u0026lt;string name=\u0026quot;done\u0026quot;\u0026gt;Done\u0026lt;/string\u0026gt;\n3 - Use the Attributes pane to set the following attributes on the newly added Button view:\n   Attribute Value     id done_button   text @string/done   layout_gravity center_horizontal   layout_width wrap_content    The layout_gravity attribute centers the view in its parent layout, LinearLayout.\n4 - Change the style to Widget.AppCompat.Button.Colored, which is one of the predefined styles that Android provides. You can select the style from either the drop-down or from the Resources window.\nThis style changes the button color to the accent color, colorAccent. The accent color is defined in the res/values/colors.xml file.\nThe colors.xml file contains the default colors for your app. You can add new color resources or change the existing color resources in your project, based on your app\u0026rsquo;s requirements.\nSample colors.xml file:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;color name=\u0026quot;colorPrimary\u0026quot;\u0026gt;#008577\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026quot;colorPrimaryDark\u0026quot;\u0026gt;#00574B\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026quot;colorAccent\u0026quot;\u0026gt;#D81B60\u0026lt;/color\u0026gt; \u0026lt;/resources\u0026gt;  Step 2: Style the DONE button 1 - In the Attributes pane, add a top margin by selecting Layout_Margin \u0026gt; Top. Set the top margin to layout_margin, which is defined in the dimens.xml file.\n2 - Set the fontFamily attribute to roboto from the drop-down menu.\n3 - Switch to the Text tab and verify the generated XML code for the newly added button.\n\u0026lt;Button android:id=\u0026quot;@+id/done_button\u0026quot; style=\u0026quot;@style/Widget.AppCompat.Button.Colored\u0026quot; android:layout_width=\u0026quot;wrap_content\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_gravity=\u0026quot;center_horizontal\u0026quot; android:layout_marginTop=\u0026quot;@dimen/layout_margin\u0026quot; android:fontFamily=\u0026quot;@font/roboto\u0026quot; android:text=\u0026quot;@string/done\u0026quot; /\u0026gt;  Step 3: Change the color resource In this step, you change the button\u0026rsquo;s accent color to match your activity\u0026rsquo;s app bar.\n1 - Open res/values/colors.xml and change the value of the colorAccent to #76bf5e.\n\u0026lt;color name=\u0026quot;colorAccent\u0026quot;\u0026gt;#76bf5e\u0026lt;/color\u0026gt;\nYou can see the color corresponding to the HEX code, in the left margin of the file editor.\nNotice the change in the button color in the design editor.\n2 - Run your app. You should see a styled DONE button below the edit text.\nTask: Add a TextView to display the nickname After the user enters a nickname and taps the DONE button, the nickname displays in a TextView view. In this task, you add a text view with a colored background. The text view displays the user\u0026rsquo;s nickname above the star_image.\nStep 1: Add a TextView for the nickname Drag a text view from the Palette pane into the Component Tree. Place the text view below the done_button and above the star_image.\n2 - Use the Attributes pane to set the following attributes for the new TextView view:\n   Attribute Value     id nickname_test   style NameStyle   textAlignment (center)    Step 2: Change the visibility of the TextView You can show or hide views in your app using the visibility attribute. This attribute takes one of three values:\n visible: The view is visible. Invisible: Hides the view, but the view still takes up space in the layout. gone: Hides the view, and the view does not take up any space in the layout.  1 - In the Attributes pane, set the visibility of the nickname_text text view to gone, because you don\u0026rsquo;t want your app to show this text view at first.\nNotice that as you change the attribute in the Attributes pane, the nickname_text view disappears from the design editor. The view is hidden in the layout preview.\n2 - Change the text attribute value of the nickname_text view to an empty string.\nYour generated XML code for this TextView should look similar to this:\n\u0026lt;TextView android:id=\u0026quot;@+id/nickname_text\u0026quot; style=\u0026quot;@style/NameStyle\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:textAlignment=\u0026quot;center\u0026quot; android:visibility=\u0026quot;gone\u0026quot; android:text=\u0026quot;\u0026quot; /\u0026gt;  Your layout preview should look something like the following:\nTask: Add a click listener to the DONE button A click handler on the Button object (or on any view) specifies the action to be performed when the button (view) is tapped. The function that handles the click event should be implemented in the Activity that hosts the layout with the button (view).\nThe click listener has generically this format, where the passed in view is the view that received the click or tap.\nprivate fun clickHandlerFunction(viewThatIsClicked: View) { // Add code to perform the button click event }  ou can attach the click-listener function to button click events two ways:\nIn the XML layout, you can add the android:onClick attribute to the \u0026lt;Button\u0026gt;element. For example:\n\u0026lt;Button android:id=\u0026quot;@+id/done_button\u0026quot; android:text=\u0026quot;@string/done\u0026quot; ... android:onClick=\u0026quot;clickHandlerFunction\u0026quot;/\u0026gt;  OR\nYou can do it programmatically at runtime, in onCreate() of the Activity, by calling setOnClickListener. For example:\nmyButton.setOnClickListener { clickHanderFunction(it) }  In this task, you add a click listener for the done_button programmatically. You add the click listener in the corresponding activity, which is MainActivity.kt.\nYour click-listener function, called addNickname, will do the following:\nGet the text from the nickname_edit edit text. Set the text in the nickname_text text view. Hide the edit text and the button. Display the nickname TextView.\nStep 1: Add a click listener 1 - In Android Studio, in the java folder, open the MainActivity.kt file.\n2 - In MainActivity.kt, inside the MainActivity class, add a function called addNickname. Include an input parameter called view of type View. The view parameter is the View on which the function is called. In this case, view will be an instance of your DONE button.\nprivate fun addNickname(view: View) { }  3 - Inside the addNickname function, use findViewById() to get a reference to the nickname_edit edit text and the nickname_text text view.\nval editText = findViewById\u0026lt;EditText\u0026gt;(R.id.nickname_edit) val nicknameTextView = findViewById\u0026lt;TextView\u0026gt;(R.id.nickname_text)  4 - Set the text in the nicknameTextView text view to the text that the user entered in the editText, getting it from the text property.\nnicknameTextView.text = editText.text  5 - Hide the nickname EditText view by setting the visibility property of editText to View.GONE.\neditText.visibility = View.GONE  6 - Hide the DONE button by setting the visibility property to View.GONE. You already have the button\u0026rsquo;s reference as the function\u0026rsquo;s input parameter, view.\n view.visibility = View.GONE  7 - At the end of the addNickname function, make the nickname TextView view visible by setting its visibility property to View.VISIBLE.\nnicknameTextView.visibility = View.VISIBLE\nStep 2: Attach the click listener to the DONE Button Now that you have a function that defines the action to be performed when the DONE button is tapped, you need to attach the function to the Button view.\n1 - In MainActivity.kt, at the end of the onCreate() function, get a reference to the DONE Button view. Use the findViewById() function and call setOnClickListener. Pass in a reference to the click-listener function, addNickname().\nfindViewById\u0026lt;Button\u0026gt;(R.id.done_button).setOnClickListener { addNickname(it) }  In the above code, it refers to the done_button, which is the view passed as the argument.\n2 - Run your app, enter a nickname, and tap the DONE button. Notice how the edit text and the button are replaced by the nickname text view.\nNotice that even after the user taps the DONE button, the keyboard is still visible. This behavior is the default.\nStep 3: Hide the keyboard In this step, you add code to hide the keyboard after the user taps the DONE button.\n1 - In MainActivity.kt, at the end of addNickname() function, add the following code. If you\u0026rsquo;d like more information on how this code works, see the hideSoftInputFromWindow documentation.\n// Hide the keyboard. val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)  2 - Run your app again. Notice that after you tap DONE, the keyboard is hidden.\nThere\u0026rsquo;s no way for the user to change the nickname after they tap the DONE button. In the next task, you make the app more interactive and add functionality so that the user can update the nickname.\nTask: Add a click listener to the nickname TextView In this task, you add a click listener to the nickname text view. The click listener hides the nickname text view, shows the edit text, and shows the DONE button.\nStep 1: Add a click listener\n1 - In MainActivity, add a click-listener function called updateNickname(view: View) for the nickname text view.\nprivate fun updateNickname (view: View) { }  2 - Inside the updateNickname function, get a reference to the nickname_edit edit text, and get a reference to the DONE button. To do this, use the findViewById() method.\nval editText = findViewById\u0026lt;EditText\u0026gt;(R.id.nickname_edit) val doneButton = findViewById\u0026lt;Button\u0026gt;(R.id.done_button)  3 - At the end of the updateNickname function, add code to show the edit text, show the DONE button, and hide the text view.\neditText.visibility = View.VISIBLE doneButton.visibility = View.VISIBLE view.visibility = View.GONE  4 - In MainActivity.kt, at the end of the onCreate() function, call setOnClickListener on the nickname_text text view. Pass in a reference to the click-listener function, which is updateNickname().\nfindViewById\u0026lt;TextView\u0026gt;(R.id.nickname_text).setOnClickListener { updateNickname(it) }  5 - Run your app. Enter a nickname, tap the DONE button, then tap the nickname TextView view. The nickname view disappears, and the edit text and the DONE button become visible.\nNotice that by default, the EditText view does not have focus and the keyboard is not visible. It\u0026rsquo;s difficult for the user to figure out that the nickname text view is clickable. In the next task, you add focus and a style to the nickname text view.\nStep 2: Set the focus to the `EditText view and show the keyboard 1 - At the end of the updateNickname function, set the focus to the EditText view. Use the requestFocus() method.\n// Set the focus to the edit text. editText.requestFocus()  2 - At the end of the updateNickname function, add code to make the keyboard visible.\n// Show the keyboard. val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager imm.showSoftInput(editText, 0)  Step 3: Add a background color to the nickname TextView view 1 - Set the background color of the nickname_text text view to @color/colorAccent, and add a bottom padding of @dimen/small_padding. These changes will serve as a hint to the user that the nickname text view is clickable.\nandroid:background=\u0026quot;@color/colorAccent\u0026quot; android:paddingBottom=\u0026quot;@dimen/small_padding\u0026quot;  2 - Run your final app. The edit text has focus, the nickname is displayed in the edit text, and the nickname text view is styled.\nNow go show your interactive AboutMe app to a friend!\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/fetch/",
	"title": "Using the fetch api",
	"tags": [],
	"description": "",
	"content": " Fetch  "
},
{
	"uri": "/tech-department/projects/validating-user-input-for-web/",
	"title": "Validating user input for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ncit/115362/",
	"title": "Version Control",
	"tags": ["git"],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/virtual-envs/",
	"title": "Virtual Environments",
	"tags": [],
	"description": "",
	"content": "and os.environ\n"
},
{
	"uri": "/tech-department/topics/ncit/115374/",
	"title": "Web Design for Business",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/web-dev-self-learning/",
	"title": "Web Dev learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your web development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nYou should know HTML, CSS and JavaScript (including ES6 syntax).\nIf you are prepping to attend the Umuzi bootcamp we suggest you concentrate on the first 2 links below and concentrate on the JavaScript language.\nBasics  FreeCodeCamp: This one is great if you\u0026rsquo;ve never coded before. It holds your hand through the whole process MDN - Most comprehensive javascript reference guide on the internet. W3Schools: This is also very friendly for beginners but teaches things in a more exploratory way CodeWars: Practice makes perfect JS re-introduction - Compact introduction covering types, variables, operators, control structures, functions and closures. Hacker Rank - Practice coding, prepare for interviews, and get hired. Simplified JavaScript Jargon - Glossary which explains all the buzzwords from the JavaScript eco system.   Once you have the basics down then you need to start learning ES6, this is a more modern version of JavaScript and has a few new concepts.\n  Exploring ES6 - Good introduction with in-depth chapters. Exploring ES2016 and ES2017 - Follow up of »Exploring ES6«. Setting up ES6 - Explains how to set up ES6 projects that are transpiled to ES5. ES6 Overview - Bullet point overview including in-depth articles. ES6 Katas - Learn ES6 by solving unit test online. Practical ES6 - eBook with practical examples and advices. 30 seconds of code - Useful ES6 snippets that you can understand in 30 seconds or less.   We find the following bits and pieces really useful. Make sure you really understand this stuff:\n  Classes - Javascript Classes description and use cases. Arrow functions - Arrow functions description and use cases. let - let description and use cases. const - const description and use cases. Modern JavaScript Cheatsheet - Helps developers with basic knowledge to get familiar with modern codebases. ECMAScript Language Specification - The standard JavaScript is based on. Only for very advanced learners. Spread Operator - ... Spread Operator description and use cases. Ternary Operator - ? Ternary Operator description and use cases.  "
},
{
	"uri": "/tech-department/syllabuses/web-dev/",
	"title": "Web Development",
	"tags": [],
	"description": "",
	"content": " Introduction to NCIT curriculum\n NCIT 01: Conducting research and user interviews\n NCIT 02: Reporting\n NCIT 03: Research presentation\n  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum   TOPICS: Basic Javascript   WORKSHOPS: [TODO] Big Picture of Web Dev  NCIT 18: Agile project management\n NCIT 19: Agile meetings\n  WORKSHOPS: How to be a professional   PROJECTS: [TODO] Beginner Linux challenges   TOPICS: ES6   TOPICS: Debugging   TOPICS: Web Dev learning materials   TOPICS: Clean Code   PROJECTS: Git Basic Exercises  NCIT 04: Version control (GIT) for teamwork\n  TOPICS: [TODO] Super basic intro to Node   TOPICS: How to ask for help with your code   PROJECTS: Level 1 programming katas   TOPICS: Basic HTML and HTM5   TOPICS: Basic CSS   TOPICS: Applied Visual Design   WORKSHOPS: Intro to CSS architecture   TOPICS: Introduction to web design   PROJECTS: Build your first personal website  NCIT 06: Web design for business\n NCIT 07: Building an online business\n NCIT 12: Business and technology\n NCIT 08: Pseudocode and documentation\n NCIT 10: Workshop: Giving and receiving constructive feedback\n  WORKSHOPS: Clean Code (language agnostic)   TOPICS: [TODO] OOP in JS and Node   TOPICS: Object Orientated Programming   TOPICS: Jasmine Unit testing   PROJECTS: Animals Part 2. Adding Tests  NCIT 13: Object-oriented programming\n  TOPICS: Basic Data Structures   TOPICS: Basic Algorithm Scripting   TOPICS: Applied Accessability   TOPICS: Responsive Web Design Principles   TOPICS: CSS Flexbox   PROJECTS: Semitone Challenge   TOPICS: Logging in Node and JS  NCIT 11: Test-driven development\n  TOPICS: Regular Expressions   PROJECTS: Add logging to password checker   PROJECTS: string-calculator   TOPICS: How the internet works   TOPICS: Data Ethics and Privacy  NCIT 05: History of the Internet\n NCIT 09: Ethics and Professionalism in IT\n  PROJECTS: Email random inspirational quote   PROJECTS: Consume Github API   TOPICS: The Tech Landscape Terminology   TOPICS: Functional Programming   TOPICS: Intermediate Algorithm Scripting   TOPICS: CSS Grid   PROJECTS: Memory game in vanilla js   TOPICS: Node   PROJECTS: Node \u0026amp; File IO   PROJECTS: Node \u0026amp; SQL assignment  NCIT 14: Database Development\n NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output\n NCIT 16: Thinking like a machine / Boolean algebra, logic\n NCIT 17: Search and sort techniques\n  TOPICS: Database Comparison   PROJECTS: Add a little Ajax   WORKSHOPS: Git for Teamwork   WORKSHOPS: [TODO] Agile Recap  NCIT 20: Managing the Software Development Process\n NCIT Summative assessment\n  TOPICS: Intro to Angular   TOPICS: Intro to React   TOPICS: Intro to Vue   WORKSHOPS: [TODO] Nodejs intro to socketIO   WORKSHOPS: [TODO] Basic introduction to Redux   WORKSHOPS: [TODO] Node Sync/Async   TOPICS: MongoDB and JavaScript   TOPICS: [TODO] The dotenv module   "
},
{
	"uri": "/tech-department/topics/web-frontend/",
	"title": "Web Frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/bootcamp/web-dev-enviroment-setup/",
	"title": "Web dev bootcamp setup",
	"tags": [],
	"description": "",
	"content": " You\u0026rsquo;ll need to be set up so that you can write and run code on your own device.\nIf you have a computer You\u0026rsquo;ll need a couple of things:\n https://code.visualstudio.com/ This is a really wonderful code editer, it works on any operating system and has a few features we like a lot https://git-scm.com/downloads (of course) optional: https://nodejs.org/en/download/  Now since you are doing the web-dev thing, you\u0026rsquo;ll need to be able to run your code to make sure it works. Here\u0026rsquo;s a little video: https://www.youtube.com/watch?v=liy7kSdLB7s\nIf you have an Android device If you don\u0026rsquo;t have a computer you can use then you can use your phone. Here\u0026rsquo;s how to get set up on an Android.\nYou\u0026rsquo;ll need to install 2 things:\n Acode: This is where you will edit your code: https://play.google.com/store/apps/details?id=com.foxdebug.acodefree\u0026amp;hl=en_ZA Termux: https://play.google.com/store/apps/details?id=com.termux\u0026amp;hl=en_ZA  Have some videos:\n Using ACode: https://www.youtube.com/watch?v=XZAc-imlq88 Setting up Git on Termux: https://www.youtube.com/watch?v=DG3l9sxFVnY  Termux takes a little bit of setup before you can use it for all the stuff we need. Also, it might seem really weird and confusing at first. If this stuff kicks your a\\$\\$ then rather come back to this page when you feel ready. But you do need to get comfortable with this stuff before bootcamp.\nWhen you open termux up for the first time please do the following:\npkg update pkg upgrade pkg install git git config --global user.email \u0026quot;your@email.whatevs\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; termux-setup-storage cd storage/shared # now you can cd into your folders and interact with git  Note:\n If any of these commands ask you if you want to continue, then type in Y then enter. At some point Termux will ask you for a github password. When you type in a password then it looks like nothing is being typed. This is normal. Just type out your password like you normally would and press enter.  If you have an iPhone Eish, we haven\u0026rsquo;t managed to find anything good here. If you have any suggestions please bring them up.\nIf you don\u0026rsquo;t have the gear you need Do your best to find a solution on your own\n ask your friends and family if you can borrow something see if you can find an internet cafe and try make a deal see if there are any co-working spaces near you that have computers available see if you can make a plan with someone who refurbishes computers for a living, sometimes you can pick up gear very cheaply  Equipment after bootcamp If you get through our bootcamp, we\u0026rsquo;ll hook you up with gear. But for now it\u0026rsquo;s on you.\nGood luck!\n"
},
{
	"uri": "/tech-department/syllabuses/web-dev-boot/",
	"title": "Web development boot camp",
	"tags": [],
	"description": "",
	"content": "  TOPICS: [TODO] Success in bootcamp   TOPICS: [TODO] Introduction to gnomio   TOPICS: [TODO] Introduction to Tilde TODO: Create Content (Multiple instruction videos)  TOPICS: [TODO] Pseudocode and documentation   PROJECTS: Level 1 programming katas   PROJECTS: Bootcamp Writing Assignment   PROJECTS: Assertive programming kata   "
},
{
	"uri": "/tech-department/syllabuses/web-dev-pre-boot/",
	"title": "Web development boot camp pre-learning",
	"tags": [],
	"description": "",
	"content": "  TOPICS: The journey of an Umuzi recruit   TOPICS: Introduction to Bootcamp Preparation phase   TOPICS: Extra bootcamp preparation instructions for web devs   TOPICS: Web dev bootcamp setup   TOPICS: Basic Javascript   TOPICS: Bash for bootcamp   PROJECTS: Git Basic Exercises   TOPICS: Useful Git commands   PROJECTS: Pre bootcamp challenges   "
},
{
	"uri": "/tech-department/topics/python-specific/web-scraping/",
	"title": "Web scraping with Python",
	"tags": [],
	"description": "",
	"content": "Python\u0026rsquo;s beautifulsoup package is great for web-scraping. See the documentation at beautifulsoup.\nAn example of using web-scraping for a data project is I was looking for a house, so I built a web scraper in Python!.\n"
},
{
	"uri": "/tech-department/tags/webscraping/",
	"title": "Webscraping",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/webscraping/",
	"title": "Webscraping Assignment",
	"tags": [],
	"description": "",
	"content": " Use the packages requests and beautifulsoup to get the text from the Wikipedia page on Energy in South Africa.\n Get only the information from the Overview table \u0026lsquo;Energy in South Africa\u0026rsquo;. Loop through the rows and columns of the table to get the data into a list. Turn the list into a pandas data frame with the table headings (as given in Wikipedia) as the column names.\n Plot energy production and export between 2004 and 2012 in a line graph. Remember to label your axes clearly and to provide a legend and title.\n Plot C02 emissions between 2004 and 2012. Remember to label your axes clearly and to provide a legend and title.\n  "
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/webscraping_plus_dashboards/",
	"title": "Webscraping and Live Dashboard Assignment",
	"tags": ["webscraping", "dashboard"],
	"description": "",
	"content": " Assignment Use beautifulsoup and regular expressions (regex) to scrape the data of provincial dam levels from the Department of Water and Sanitation.\nCreate a dashboard with graphs showing the current and previous week\u0026rsquo;s dam levels by province, and compare it to the water levels from the previous year. Your dashboard should update weekly (in other words, you can\u0026rsquo;t just copy and paste this week\u0026rsquo;s data to your notebook).\nThink about  What type of graph will show this information best? Do all graphs have clearly understandable headings, axis labels and (if applicable) legends?  "
},
{
	"uri": "/tech-department/department-processes/what-recruits-need-to-know/",
	"title": "What You Need To Know (as a recruit)",
	"tags": [],
	"description": "",
	"content": " NOTE: While we are in remote-work mode things will be a little bit different. Any reference to being at your desk and what not might not apply.\nThis is a guide to the Tech Department and how it works. It contains contact details, important links to documents we use and software that are useful.\nUmuzi Handbook This documentation has EVERYTHING you need to know about Umuzi. The recruit user journey, the processes and protocols and the culture of Umuzi are all found here\nGround Rules In order to be efficient and productive we have some ground rules: You are expected to be online most of the time between 9am and 5pm (barring lunch)\n Don\u0026rsquo;t be late for workshops. Don\u0026rsquo;t be late for standup. Don\u0026rsquo;t be disruptive and noisy during workshops and meetings. Check your calendars daily. This includes the calendars mentioned below. Check your Rocket Chat at lease 3 times daily (Morning, Midday, and before you log off). Check your email at lease 3 times daily (Morning, Midday, and before you log off). Submit your projects on time via Tilde. Submit high quality work and do your best. Communicate problems to the staff (you are not in this alone but we cannot help you if you don\u0026rsquo;t communicate) Always complete your attendance check here for details: REMOTE-WORK: [TODO] Umuzi Remote work   Tilde Tilde means home and during your time at Umuzi this will be the home of the majority or your learnings as well as the board that shows you your user journey and what you will be working on next.\nYou can access Tilde Here\nPlease also read TOPICS: Agile Triage Daily Tech Events These happen everyday and are compulsory for everyone to attend.\nStand up This is how we begin our day, announcements are shared and we discuss anything that hinders progress.\n Every morning at 09:00  Tech Meetups These are currently carried out online due to COVID-19 keep an eye on the #meetups-and-events channel on Rocket Chat\nCommunication Communication is a crucial part of the department and also encourages productivity. We use:\nRocket Chat This is the most important platform for communication. There are various Rocket Chat channels for different purposes. The sole purpose is to administer communication between recruits and the tech staff:\n To get feedback from managers. To share relevant material and opportunities with fellow recruits. To get departmental and cohort specific announcements.  Make sure you check your Rocket Chat at least 3 times a day.\nWhy is Rocket Chat important?\n Rocket Chat (and tools like Rocket Chat) are industry standards. So start developing good habits now Our staff are not always in the office, sometimes work happens off site. But communication should still happen  Emails For any official communication and setting up meetings, events and workshops. Check your emails at least once a day.\nWhatsApp groups For communication within cohorts and the mighty Coding Department WhatsApp group for the whole department.\nNCIT Material \u0026amp; Assessments As you will be doing assessments for your National Certificate in Information Technology - Systems Development The material and assessments are found on Gnomio. This is where you will also submit these assessments\nImportant Spreadsheets, Forms and Calendars (I suggest you bookmark these)  Tech Events Calendar That all tech events are scheduled on. This is where you will find dates for Workshops, Talks and Meetups. Check this everyday.\n Leave Request Form This is to be completed for any leave requested or taken.\n Disciplinary Policy | Disciplinary Guidelines | Code Of Conduct | Sexual Harassment Policy These are the Umuzi policies please read through them and familiarise yourself with them.\n Leave Policy [TODO]\n To help us improve our content please review or rate by clicking here If you have any queries, these are the people to contact:\n  Junior Tech Facilitators Java\n Latoya Simbini - latifa.simbini@umuzi.org  Web Development:\n Elija Sepuru - elijah.sepuru@umuzi.org Lisa Mabe - lerato.mabe@umuzi.org Shaheedah Momoza - lindokuhle.momoza@umuzi.org  Data:\n Rokhuda Tshitimbi - rokhuda.tshitimbi@umuzi.org  Senior Staff General\n Ryan O\u0026rsquo;Connell - ryan.oconnell@umuzi.org Lindelani Mbatha - lindelani.mbatha@umuzi.org  Java\n Bentley Ritson - joshua.ritson@umuzi.org  Web Development:\n Dibwe Kalangu - dibwe.kalangu@umuzi.org Thandiwe Nyandeni - thandiwe.nyandeni@umuzi.org  Data:\n Webster Gova - webster.gova@umuzi.org  Department Head  Sheena O’Connell - sheena.oconnell@umuzi.org  Softwares to use Text Editors These are all good. Choose your favorite\n Visual Studio Code - https://code.visualstudio.com/download Atom - https://atom.io/ Sublime Text - https://www.sublimetext.com/3  Time Management \u0026amp; Project Management tool  Trello, https://trello.com/ Rescue Time,https://www.rescuetime.com/  Useful android apps  https://play.google.com/store/apps/details?id=com.trello  "
},
{
	"uri": "/tech-department/workshops/what-to-put-on-a-cv/",
	"title": "What to Put On A CV",
	"tags": [],
	"description": "",
	"content": "This is a rundown on how to make a proper CV.\n "
},
{
	"uri": "/tech-department/topics/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/kotlin/work-manager/",
	"title": "Work Manager",
	"tags": [],
	"description": "",
	"content": " Working With Android WorkManager Using Kotlin An ideal way of scheduling future tasks with backward compatibilit\nThe WorkManager is an API which can schedule your future asynchronous tasks and can run them in the background. The tasks assigned to the WorkManager are executed even if the user is outside the app or app is closed. WorkManager can run your task(s) for one time only as well as many times or periodically.\nFeatures of WorkManager  It provides backward compatibility up to API level 14 You can add one or many constraints, such as execute tasks only when phone is charging or phone is restarted etc. You can schedule onetime task or periodic tasks You can also chain multiple tasks. For instance, task (B) should only be executed when task (A) is finished. It can help you to execute tasks on particular events.  Note: WorkManager is not intended for in-process background work that can safely be terminated if the app process goes away or for tasks that require immediate execution.\nThe classes  Worker: The work needed to be done is defined here. WorkRequest: It decides which worker class is going to be executed. It\u0026rsquo;s an abstract class, so we’re going to use its direct classes, and they’re OneTimeWorkRequest and PeriodWorkRequest. WorkManger: It enqueues and manages the work request. WorkInfo: It gives us information about the work, whether its success, running or failed.  Let’s start coding now…\nWhat we’ll create? We’re going to create a notification in the background and this notification can be created only once because we’re using the OneTimeWorkRequest class. Later on, We’ll use some constraints to generate the notification on the basis of events.\nFirst of all, add the following dependency.\nimplementation \u0026quot;androidx.work:work-runtime-ktx:2.3.4\u0026quot;  We’ll create our worker class first by extending the Worker class, and override its doWork() method for background processing. When doWork() method is called by WorkManager, then it calls user defined method createNotification().\npackage com.workmanagerdemo import android.app.NotificationChannel import android.app.NotificationManager import android.content.Context import android.os.Build import androidx.core.app.NotificationCompat import androidx.work.Worker import androidx.work.WorkerParameters class MyWork(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) { override fun doWork(): Result { createNotification(\u0026quot;Background Task\u0026quot;, \u0026quot;This notification is generated by workManager\u0026quot;) return Result.success() } fun createNotification(title: String, description: String) { var notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.O) { val notificationChannel = NotificationChannel(\u0026quot;101\u0026quot;, \u0026quot;channel\u0026quot;, NotificationManager.IMPORTANCE_DEFAULT) notificationManager.createNotificationChannel(notificationChannel) } val notificationBuilder = NotificationCompat.Builder(applicationContext, \u0026quot;101\u0026quot;) .setContentTitle(title) .setContentText(description) .setSmallIcon(R.drawable.ic_launcher_background) notificationManager.notify(1, notificationBuilder.build()) } }  In our MainActivity.kt class, I’ve created a button, when user clicks on the button, then immediately notification gets generated.\npackage com.workmanagerdemo import androidx.appcompat.app.AppCompatActivity import android.os.Bundle import android.widget.Toast import androidx.lifecycle.Observer import androidx.work.OneTimeWorkRequest import androidx.work.OneTimeWorkRequestBuilder import androidx.work.WorkManager import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) val request = OneTimeWorkRequestBuilder\u0026lt;MyWork\u0026gt;().build() btnClick.setOnClickListener { WorkManager.getInstance(this).enqueue(request) } WorkManager.getInstance(this).getWorkInfoByIdLiveData(request.id) .observe(this, Observer { val status: String = it.state.name Toast.makeText(this,status, Toast.LENGTH_SHORT).show() }) } }  Here, I’m creating the object of OneTimeWorkRequest and passing the class name of our MyWork class. In the real world, we can have many worker classes, so which class should be executed is decided by this request object.\nval request = OneTimeWorkRequestBuilder\u0026lt;MyWork\u0026gt;().build()  As user clicks on the button, WorkManager enqueues the request.\nWorkManager.getInstance(this).enqueue(request)  Here, we’re creating a toast to display the status of our task, whether its RUNNING, SUCCESS, and FAILED. The getWorkInfoByIdLiveData method takes the request id and gives the information about the task.\nWorkManager.getInstance(this).getWorkInfoByIdLiveData(request.id) .observe(this, Observer { val status: String = it.state.name Toast.makeText(this,status, Toast.LENGTH_SHORT).show() }) }  Now run your application and click on the button, you’ll see a notification.\nNow we’ll see how we can add constraints to create notification only when the phone is charging.\nAdd the following line of code to create the constraint and modify your request object. In the request object, I’m just setting the constraints and that’s it. Now notification will only be generated when this particular criterion is met.\nval constraints = Constraints.Builder() .setRequiresCharging(true) .build() var request = OneTimeWorkRequestBuilder\u0026lt;MyWork\u0026gt;() .setConstraints(constraints) .build()  Note: When multiple constraints are specified, your task will run only when all the constraints are met.\nIf you click on the button and your phone is not charging, then you’ll see a status saying “Enqueued”, this means that your request has been put in the queue and this will only execute when your phone will be charging.\nIf you’re facing any problem running the code, then you can download this project from this Github account.\nConclusion We’ve seen how we can use WorkManager class to perform some background processing.\n"
},
{
	"uri": "/tech-department/topics/android/image-assets/",
	"title": "Working with image assets",
	"tags": [],
	"description": "",
	"content": " In every Android project there is a drawables folder. This folder is where image assets are uploaded to. The images in this folder are packaged with the apk when it is built. The android app can access these images offline and at a much higher speed.\nAdding an image to an Android application Here is a video with a simple example of adding an image to the drawable folder and then displaying it in an imageview.\nSupporting the various pixel densities As mentioned above, accounting for multiple screen resolutions plays a role in both performance and overall user experience. Luckily though, Android has a simple way to handle this.\nYou can read more about it in the documentation.\nImportant Note The size and quantity of the image assets directly affects the size of the apk file.\nWhen adding image assets to the drawable folder, the names of the images are not allowed to contain capital letters or spaces between the words.\nExample: Adding the following files will provide the following results\nAllowed image name examples cars.jpg toyota_corolla.png\nNot-allowed image names Cars.png Toyotal Corolla.png Cars!.jpg\n"
},
{
	"uri": "/tech-department/topics/android/sound-assets/",
	"title": "Working with sound assets",
	"tags": [],
	"description": "",
	"content": " Sound can be used for various things in an Android application. From streaming music to acting as notifications or even acting as background music in a game.\nHere\u0026rsquo;s some examples on how to play audio.\nExamples Playing audio from the asset folder.\nThis video also explains how to play a local audio file.\nYou can also stream audio from online sources, if the user is connected to the internet.\n"
},
{
	"uri": "/tech-department/topics/android/video-assets/",
	"title": "Working with video assets",
	"tags": [],
	"description": "",
	"content": " In Android when working with videos, you can either stream from a Url or you can add a video to your project and play it without using any data.\nExamples Stream a video from a url.\nPlay a video from the raw folder.\nHere\u0026rsquo;s an example of working with a video in Android.\n"
},
{
	"uri": "/tech-department/topics/ncit/116389/",
	"title": "Write a report",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/choosing-a-task-queue/",
	"title": "ZeroMQ versus RabbitMQ versus Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/capstone-projects/chrome-extension-tie-spent-in-hangouts/",
	"title": "build a Chrome Extension that measures time spent in meetings",
	"tags": [],
	"description": "",
	"content": " Who should do this? This project doesn’t have a lot to do with Tilde or the Recruitment Portal just yet. It’s just a cool fun thing. Note, I’ve personally never done this kind of thing so it should be for someone who is up for a challenge.\nChrome extensions make heavy use of JS\nSpec Part 1 Create a chrome extension that monitors the time you spend in any Google meetings. You can tell if a tab is relevant by looking at the url.\nThe extension should record:\n Start-time End-time Full url For each meeting.  See what other info you can grab. Eg, can you record who else is in the meeting?\nFor now you can just store your data using the Storage api (linked to at the end of this document)\nCreate a mechanism for displaying the data you collected. You can just put the data in a \u0026lt;table\u0026gt; for display, or you can draw it some other way\nPart 2 Get the chrome extension to also measure your internet connection strength during meetings.\nResources  https://developer.chrome.com/extensions/devguide https://developer.chrome.com/extensions/tabs https://developer.chrome.com/extensions/storage  "
},
{
	"uri": "/tech-department/department-processes/code-review/",
	"title": "code review process",
	"tags": [],
	"description": "",
	"content": " General Process  Recruits get given some project instructions. Like this: PROJECTS: simple-calculator part 1  You\u0026rsquo;ll notice there is a link at the top of the project instructions. Peeps follow that link to submit their work The code submissions show up in a https://docs.google.com/spreadsheets/d/1jIWBgfh4PbZU0KpBQi_hTjSFK74CRkTQtoEcvJ1V0uA/edit#gid=2104739812\u0026amp;fvid=1123262740. This is stored on the Tech Dept Drive, send a message on the tech-team channel if you don\u0026rsquo;t have access You\u0026rsquo;ll notice if you scroll to the left there is a column entitled \u0026ldquo;INITIAL REVIEWER\u0026rdquo;, if you are intending to review someone\u0026rsquo;s code then you need to put your name in this column To review the code you need to make sure you understand the project instructions, clone the code, make sure it works, make sure the tests cover everything they should cover, and comment on things like good coding practices. We are currently working on some automations around this stuff but for now that\u0026rsquo;s what needs to happen If you are unsure about what kind of code quality we are looking for, take a look here for some ideal answers: https://github.com/Umuzi-org/automark-project-config Look at the PRs as well, there\u0026rsquo;s a lot of good stuff there. If you need assistance you can ask for help on the tech-team channel and someone will jump in. Now fill this in with comments about the code review: Code review google form Communicate with effected parties. Tell the recruit your feedback. If there is a RED FLAG and you need some help dealing with this recruit then let us know on the tech-team channel.  The projects that are worth reviewing first are these (in order).\n  PROJECTS: simple-calculator part 1   PROJECTS: Password Checker   PROJECTS: string-calculator   PROJECTS: simple-calculator part 2   PROJECTS: Person   PROJECTS: Dice   PROJECTS: Bank Accounts   Also, be a perfectionist. We want our recruits to write beautiful code\nGoals We have a few goals for code review:\n We need to keep track of who has submitted code and who hasn\u0026rsquo;t. deadlines should be taken seriously by recruits which means that WE need to take them seriously We need to know what the recruits need. If they need help then we need to help them quickly. If disciplinery action is needed then we should act fast Code review aids in knowledge sharing within our team Code review is a useful skill that should be taught to recruits  Process and Roles When deadlines are set up then a few different staff members are assigned different roles. This will be done by populating columns in the (mighty) Coding and Data program outline spreadsheet.\nThe roles are as follows:\ndeadline-tracker:  checks that people have submitted in time keeps track of excuses for late submissions and acts with good judgment can adjust deadlines if needed. MUST tell the project owner about any adjustments issues verbal warnings for late submissions (fills out the verbal warning form as needed)  junior reviewers:  performs first and possibly second review completing the code review form listed above under general process. explicitly alerts senior reviewer about any RED FLAGs immediately (send a message on slack) if the reviewer is unhappy with the code but thinks that they can assist then they need to: send the recruit a summary of the problems that need to be fixed and an expected time frame (eg: fix by the end of tomorrow) inform the deadline-tracker review the re-submitted code or find another junior reviewer to do so  senior reviewer:  make sure that the junior reviewers understand the project submission requirements ahead of time deal with any RED FLAGs on a case by case basis re-review a few random code bases that various junior reviewers are happy with get a summary of common problems that came up in the review and update documentation as needed and/or create a workshop as needed ideally start reviewing as soon as possible in order to catch any problems that come up in the junior review process use the same code review form that the junior reviewers use send any problems found to all other reviewers involved and the recruit  MUSTs, SHOULDs and whatnots  every piece of code submitted by any recruit MUST be reviewed by a staff member OR by a recruit that has proven themselves at least once when a recruit submits code then they MUST receive their initial review comments by the end of the following day. If the cohort is large then the day after that is acceptable deadline-tracker SHOULD be a junior facilitator  Using our recruits to help with code review TODO. I think they should use the same code review form?\n Let a recruit review a few code submissions and let a junior or senior staff member check their work keep track of what recruits are good at code review and then dont require staff members to double check their work so much senior reviewers are in charge of making sure that juniors understand instructions junior reviewers are in charge of making sure that recruits understand instructions  "
},
{
	"uri": "/tech-department/projects/python-consuming-an-api-with-requests/",
	"title": "consuming APIs with the requests module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/build-rest-api-with-db/",
	"title": "create a REST api to interact with actual database",
	"tags": [],
	"description": "",
	"content": " In this project you\u0026rsquo;ll be taking a lot of your existing knowledge and pulling it together. At this point you know what it means to consume an API. Now you\u0026rsquo;re going to make one :)\nThe tools to use:\n Flask Sqlalchemy  Please note, people have been making APIs for a loooong time now. So there are loads of cool and useful tools out there that make this kind of thing quick and easy. That said: it\u0026rsquo;s super important that you know how to make one from scratch on your own instead of just using someone else\u0026rsquo;s stuff.\nWhat you need is a profound apprectation for what an API is and how it works.\nWhy Flask? Firstly Flask is simple compared to Django. You can jump right in and learn the API lessons we are trying to teach here. The lessons you learn in Flask are very transferrable - if you do get into Django later on then you\u0026rsquo;ll have a good understanding of its foundations by default.\nLet\u0026rsquo;s go Create a Flask app that exposes a REST API for keeping track of computers owned by Umuzi.\nJust make one table in your database: Computer.\nFor every computer we\u0026rsquo;ll need to know:\n hard drive type processor amount of ram maximum ram hard drive space form-factor (mini, mini,etc)  Note that some of the fields can only allow certain values. This is often called enumeration.\nExpose some REST api endoints. The content type must be json.\nThe following operations should be allowed (and should be exposed at well named urls)\n List all computers Add a computer Edit a computer Delete a computer  Bonus! Umuzi is growing pretty fast. So that means we keep having to buy computers. Eventually when you call the list computers endpoint the list will be way too long.\nTo combat this there is a technique called paging.\nImplement that :)\nResources  Official Flask Tutorial Designing a RESTful API with Python and Flask  "
},
{
	"uri": "/tech-department/projects/python-specific/expose-rest-api-simple/",
	"title": "expose a simple JSON rest api",
	"tags": [],
	"description": "",
	"content": " Instructions Part 1: Data layer  Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{some_number}.json. The number part of the file name should be automatically generated as you save the visitor. eg:  alice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json   Create a function called load that takes in a number and returns a Visitor object that was saved to file.  eg:\nalice = load(1) bob = load(2)   Make sure that this kind of functionality works appropriately  alice = Visitor(...stuff) alice.save() # creates a file alice.age = 93 alice.save() # DOES NOT create a file. This updates the original file  This should also work:\nbob = load(2) bob.comments = \u0026quot;great personality\u0026quot; bob.save() # should update visitor_2.json  Part 2: Expose JSON api Use Flask to expose the following functionality:\n create a new Visitor in the database delete a single Visitor from the database delete all Visitors view all Visitors view a single Visitor update a single Visitor  Something to think about Imagine that your api is hosted somewhere on the internet and is very popular. Lots of people are using it.\n What might happen if many people access the \u0026ldquo;create visitor\u0026rdquo; functionality at the same time? what might happen if many people ty to update the same visitor at the same time? what might happen if someone deletes all the visitors while someone else is trying to create a new one?  A lot of really weird bugs can creep in. This class of error is generally referred to as a race condition. There are tools and techniques that exist to help deal with this kind of thing. In general it\u0026rsquo;s good to keep race conditions in mind whenever dealing with processes that access data in parallel.\nResources  Python and JSON Official Python tutorial Official Flask tutorial  "
},
{
	"uri": "/tech-department/projects/tdd/factorials/",
	"title": "factorials",
	"tags": [],
	"description": "",
	"content": " Write a script with a function called calculate_factorial that takes a number and returns its factorial.\nIn a separate file, write some tests that prove that your code works.\nJavascript instructions  Name your script factorial.js Use jasmine to test your code  Python instructions  Name your script factorial.py Use pytest to test your code  Steps:  Think about which tests you want to do to test that the factorial function works. Write the tests first (before creating the function). Test an empty function called factorial - it should fail the tests Add code for returning the factorial of a number - it should pass for numbers \u0026gt;= 1 Add code for dealing with zero - should pass unit test for zero and for numbers \u0026gt;= 1 Add code for dealing with negative numbers Add code for dealing with non-numeric input  Make sure you use Github to keep track of your progress.\nReferences: Factorial Numbers\n"
},
{
	"uri": "/tech-department/projects/ios-mobile/",
	"title": "iOS Mobile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/ios-mobile/",
	"title": "iOS Mobile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/syllabuses/ios-mobile/",
	"title": "iOS Mobile Development",
	"tags": [],
	"description": "",
	"content": " Course Content Link Stanford CS193P iOS11 Swift4\nSwift and More  Topic : iOS Overview Topic : MVC Topic : Swift Development and other Tools  PROJECTS: Swift and More   More Swift and Gestures  Topic : Data Structures, Protocols, Delegation, Strings, Function Types, Closure\n Topic : Miscellaneous, Views, Demo (enum)\n Topic : Views continued, Gestures\n Topic : Multiple MVCs, Timer, Animation\n Topic : Animation\n  PROJECTS: More Swift, Gestures and Animations   Multithreading Layout and Functionality  Topic : View Controller Life Cycle, Scroll View\n Topic : Multithreading, Auto-Layout\n Topic : Drag and Drop UI Views\n Topic : Emoji Art (demo) UI Text Field\n Topic : Emoji Art, Persistence, Archiving, File System, URL, Core Data, Cloud Kit\n Topic : More about Documents and Persistence Demo\n  PROJECTS: Multithreading Layout and Other Functionality - Graphical Set   Multithreading Layout and Other Functionality   PROJECTS: Multithreading Layout and Other Functionality - Animated Set   Drag and Drop, Multithreading and Delegation   PROJECTS: Drag and Drop, Multithreading and Delegation   Codable, File Manager, URL   PROJECTS: Codable, File Manager, URL   "
},
{
	"uri": "/tech-department/topics/linux/",
	"title": "linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/collection/",
	"title": "lots and lots of tdd katas",
	"tags": [],
	"description": "",
	"content": "http://codingdojo.org/kata/\n"
},
{
	"uri": "/tech-department/topics/optimizations-and-big-o/",
	"title": "optimizations and big-O",
	"tags": [],
	"description": "",
	"content": " Here are a few good resources on Big O and optimization. Learn enough to understand what Big O is, when and why do we implement it and please give us feedback (or pull requests) on this page if you think any improvements can be made.\nReadings  Big O Notation Article Some more material - Stack Overflow Big O Notation Cheatsheet  Make sure you checkout the Big O Cheat sheet, It\u0026rsquo;ll give you an understanding on the performance of different data structures(Arrays, Stacks, Queues\u0026hellip; etc) that you use on a daily.\nVideos  Big O in 5 minutes Big O in depth Big O and Time Complexity  "
},
{
	"uri": "/tech-department/projects/tdd/password-checker/part1/",
	"title": "password-checker",
	"tags": ["tdd", "error-checking"],
	"description": "",
	"content": " Set up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support -jasmine.json - password_is_valid_spec.js - password_is_ok_spec.js \u0026gt;src - password_checker.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── password_checker the package under test │ └── password_checker.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory ├── test_password_is_valid.py └── test_password_is_ok.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main | └── java | └── PasswordChecker.java \u0026lt;-------- names are important └── test └── java └── ???.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions Implement the following function by following a TDD methodology:\n// Javascript: passwordIsValid(password)  // Java: passwordIsValid(password)  # Python: password_is_valid(password)  password_is_valid will check if the password meets a few different conditions. If one of the below conditions is not met then the relevant error/exception should be thrown/raised. Your error/exception message should match one of the following conditions exactly (word-for-word).\n password should exist password should be longer than than 8 characters password should have at least one lowercase letter password should have at least one uppercase letter password should at least have one digit password should have at least one special character  In the case of (6) above, a special character is a character that is on the keyboard but is not a number or letter. Eg { % \u0026amp; * \u0026quot; ' etc\nNext, implement a function called password is ok:\n// Javascript: passwordIsOk(password)  // Java: passwordIsOk(password)  # Python: password_is_ok(password)  If the given password meets at least three of the conditions listed above then this function should return true, otherwise it should return false.\nAdd a feature: the password is never OK if conditions 1 and 2 are not met.\nJS Resources  JS Errors Errors and Jasmine  Python Resources  Python Errors Exceptions and Pytest  Java Resources  https://howtodoinjava.com/junit5/expected-exception-example/  "
},
{
	"uri": "/tech-department/topics/python-specific/",
	"title": "python specific resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/recursive_search/",
	"title": "recursive search",
	"tags": [],
	"description": "",
	"content": " This should be written following a TDD process. Remember that this means: RED, GREEN, REFACTOR. The refactor part of this is very very important.\nYou have a data structure like this:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR }, { name: \u0026#34;workspace\u0026#34;, type: DIR }, { name: \u0026#34;house_cats.mp4\u0026#34;, type: FILE }, { name: \u0026#34;house_cats.txt\u0026#34;, type: FILE } ] };  This represents a directory structure with files and directories. (directory == folder)\nPart 1  Write a function that returns a list/array of all .mov files. Call this function find_all_movs Write a function that returns a list/array of all .mp4 files. Call this function find_all_mp4s Write a function that returns a list/array of all cat videos (mp4 and mov files that have the word \u0026ldquo;cat\u0026rdquo; in their name). . Call this function find_all_cat_videos  You will notice that there is a lot of repetition in the functionality you implemented. Each of these functions need to visit every FILE in the directory structure and then check if that file matches the search criteria.\nNow consider te following:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR, children: [ { name: \u0026#34;horror\u0026#34;, type: DIR, children: [ { name: \u0026#34;really_awful_cats.mp4\u0026#34;, type: FILE } ] }, { name: \u0026#34;adventure\u0026#34;, type: DIR, children: [ { name: \u0026#34;adventure_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;adventure_dogs.mov\u0026#34;, type: FILE } ] }, { name: \u0026#34;tragedy\u0026#34;, type: DIR, children: [{ name: \u0026#34;a sad story about cats.md\u0026#34;, type: FILE }] } ] }, { name: \u0026#34;workspace\u0026#34;, type: DIR, children: [ { name: \u0026#34;grumpy_cats.mp4\u0026#34;, type: FILE } ] } ] };  Directory structures usually have some depth. Directories have sub directories. Sub directories also contain stuff.\nPart 2 make sure find_all_movs,find_all_mp4s,find_all_cat_videos work with nested directory structures.\nHINT: you\u0026rsquo;ll be using a technique called \u0026ldquo;recursion\u0026rdquo; here. play with it a little bit. The just of it is: You can call a function from within itself. Play with this a little bit\nfunction my_recursive_function(i){ console.log(i) ; if (i \u0026gt; 100) // this terminates the recursion return my_recursive_function(i + 1); // this does the recursion }  "
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part1/",
	"title": "simple-calculator part 1",
	"tags": ["tdd"],
	"description": "",
	"content": " The objective of this project is to build a calulator that can perform multiplication and addition on multiple integers. Do not build a front-end (UI). Complete this project by using a TDD approach.\nThe basic TDD approach is as follows:\n RED: Write tests. It should fail initially because there isn\u0026rsquo;t any code that it is testing. GREEN: Write code to make the tests pass. REFACTOR: Make sure code is understandable and clean.  Remember to make sure your tests still pass after refactoring it.\nSet up environment JavaScript: Use Jasmine to test your code. Please do not use the SpecRunner html file to test your code. Run Jasmine on the terminal.\n  TOPICS: Jasmine Unit testing . Look under the heading: Getting set up (like a boss) for instructions to set up.  After setting up Jasmine on the terminal, please ensure that your directory has the following:\n A src folder that has a file called:\n simple_calculator.js \u0026lt;\u0026mdash;- this is where you will implement all your functionality.  A spec folder that has a file called:\n simple_calculator_spec.js \u0026lt;\u0026mdash;- this is where you will put your tests.   Your directory structure should look like this:\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - simple_calculator_spec.js \u0026gt;src - simple_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── simple_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Java You\u0026rsquo;ll be using IntelliJ, Gradle and JUnit to pull this off.\nCreate a class named Calculator. All your methods should be static methods that return integers. Eg:\n public static int add(....  Please make sure that you make proper use of gitignore. We don\u0026rsquo;t want your junk files. The git repo you give us should have a file hierarchy that looks like this:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main │ └── java │ └── Calculator.java \u0026lt;-------- names are important └── test └── java └── CalculatorTest.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: Gradle and IntelliJ project submission structure 1. Create an add function that can add two integers Create a function called add that works like this:\nadd(1,2) // should return 3 add(-1,-1) // should return -2  2. Modify the add function so that it can add multiple integers. The add function should now behave like this:\nadd(1,2,3,4,5) // should return 15 add(1,2) // should still return 3 add(-1,-1) // should still return -2  Please note that your function should NOT expect an array or list of numbers, for example:\nadd([1,2,3,4])  This is NOT what we are looking for. If you have square brackets inside your round brackets, you are doing it wrong. The same will apply for the multiply function you will build in the next section.\n3. Create a multiply function that can multiply two integers Create a function called multiply that works like this:\nmultiply(1,3) // should return 3 multiply(-1,3) // should return -3  4. Modify the multiply function so that it can multiply multiple integers. The multiply function should now behave like this:\nmutilply(1,2,3,4,5) // should return 120 multiply(1,3) // should still return 3 multiply(-1,3) // should still return -3  "
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part2/",
	"title": "simple-calculator part 2",
	"tags": ["tdd"],
	"description": "",
	"content": " This a continuation of PROJECTS: simple-calculator part 1 . If you haven\u0026rsquo;t done that yet then please do. At this point you should have a well tested add and multiply function.\nThis exercise will require a little OOP knowledge. Brace yourself.\nSet up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - string_calculator_spec.js \u0026gt;src - string_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── simple_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Introducing the calculator class Update your tests so that they expect the add and multiply functions to be part of a class. Now make those tests pass.\nFor now on this document will just describe the features we need the Calculator to have. You need to figure out the tests and implementation yourself.\nNote This is an extension of PROJECTS: simple-calculator part 1 . In other words, previously implemented functionality should still work.\n# this should still work calculator_instance.add(3,5) # should return 8 calculator_instance.multiply(30,2) # should return 60 # and multiple arguments should work too calculator_instance.add(3,5,2) # should return 10  The multiply functionality should also still work.\nRemember the last result The calculator should have a function called last that returns the last result. Example usage:\ncalculator_instance.add(1,2) calculator_instance.last() # should return 3  Use the last result in other calculations The add and multiply functions should allow \u0026quot;LAST\u0026quot; as a parameter.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.multiply(\u0026quot;LAST\u0026quot;,5) # should return 15  Memory Slots Allow the calculator to remember more stuff by implementing a set_slot function. The set_slot function should take a single number as an argument. That argument is called the slot number. Also implement get_slot for getting the value from a memory slot. Neither get_slot or set_slot should effect the output of last.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.set_slot(1) calculator_instance.get_slot(1) # should return 3 calculator_instance.add(10,20) calculator_instance.set_slot(2) calculator_instance.get_slot(2) # should return 30 calculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300  Allow the use of memory slots and LAST as arguments The add and multiply functions should allow memory slots as parameters. If we were using memory slot 5 as an argument then we would represent it like this \u0026quot;SLOT_5\u0026quot;.\nExample usage: Following from the previous example:\ncalculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300 (just like before) # THE FOLLOWING FUNCTIONALITY SHOULD WORK calculator_instance.add(\u0026quot;LAST\u0026quot;,10) # should return 310 (= 300 + 10) calculator_instance.add(\u0026quot;SLOT_1\u0026quot;,5) # should return 8 (= 3 + 5) calculator_instance.multiply(\u0026quot;SLOT_2\u0026quot;,2) # should return 60 (= 30 * 2)  "
},
{
	"uri": "/tech-department/projects/tdd/string-calculator/",
	"title": "string-calculator",
	"tags": ["tdd", "regular-expressions"],
	"description": "",
	"content": " Set up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - string_calculator_spec.js \u0026gt;src - string_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── string_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Instructions Before you commence, first read through TOPICS: Data Validation . Upon completion, read through TOPICS: Regular Expression Resources .\nPlease note that this project should be done in a TDD manner.\n1. Create an add function that can handle up to two integers passed in as a string. Create a function called add() that takes in a string as a parameter and behaves in the following way:\nadd(\u0026quot;\u0026quot;) // should return 0 add(\u0026quot;1\u0026quot;) // should return 1 add(\u0026quot;1,1\u0026quot;) // should return 2  Note: The output that the function returns should be an integer and not a string.\n2. Modify the add function to handle multiple integers. add(\u0026quot;1,2,3,4\u0026quot;) // should return 10 add(\u0026quot;\u0026quot;) // should still return 0 add(\u0026quot;1\u0026quot;) // should still return 1 add(\u0026quot;1,1\u0026quot;) // should still return 2  As you keep adding more functionality to your code always make sure that the previous functionality you implemented still works flawlessly. Keep this in mind as you continue to modify your code.\n3. Modify the add function so that it can handle new lines between integers. add(\u0026quot;1\\n2,3\u0026quot; ) // should return 6  4. Modify the add function so that it can handle different delimeters. Delimiters will be specified in the following manner:\n \u0026rdquo;//[delimiter]\\n[numbers…]\u0026rdquo;, the default delimiter will be in the beginning of the string just before a new line character (\u0026rdquo;\\n\u0026rdquo;).For example:  add(\u0026quot;//;\\n1;2\u0026quot;) // should return 3 add(\u0026quot;//4\\n142\u0026quot;) // should return 3  In the first case, the default delimiter is: \u0026ldquo;;\u0026rdquo;.\nIn the second case, the default delimiter is: \u0026ldquo;4\u0026rdquo;.\n5. Modify the add function so that it can handle negative integers. If a negative number is passed into the add function it should throw this exception: \u0026quot;negatives not allowed\u0026quot;\nThe exception should contain a list of all the negative integers that were passed into the add function.\nFor example:\nadd(\u0026quot;-1,-2,3,4\u0026quot;) // should throw the following: 'ERROR: negatives not allowed -1,-2'  6. Modify the add function so that it ignores integers greater than or equal to 1000. add(\u0026quot;//;\\n1000;1;2\u0026quot;) // should return 3  7. Modify the add function so that it can support delimiters of any length As long as the string passed in satisfies this format, \u0026ldquo;//[delimiter]\\n[integers\u0026hellip;]\u0026ldquo;, which was explained above. The add function should be able to handle it. For example:\nadd(\u0026quot;//***\\n1***2***3\u0026quot;) // should return 6  8. Modify the add function so that it is able to support different delimiters of any length As long as the string passed into the add function follows this format, \u0026ldquo;//[delim1][delim2]\\n[integers\u0026hellip;]\u0026ldquo;, the add function should be able to handle it:\nFor example:\nadd(\u0026quot;//[:D][%]\\n1:D2%3\u0026quot;) // should return 6 add(\u0026quot;//[***][%%%]\\n1***2%%%3\u0026quot;) // should return 6 add(\u0026quot;//[(-_-')][%]\\n1(-_-')2%3\u0026quot;) // should return 6 add(\u0026quot;//[abc][777][:(]\\n1abc27773:(1\u0026quot;) // should return 7  9. Modify the add function so that it can handle invalid input. If the string passed in is invalid, your code should be able to detect this and throw an error.\nHint: A valid string input follows these formats:\n- \u0026quot;integer,integer,integer\u0026quot; e.g \u0026quot;1,2\u0026quot; or \u0026quot;1,2,3,4\u0026quot; - \u0026quot;integer \\n integer,integer e.g \u0026quot;1\\n2,3\u0026quot; - \u0026quot;//delimiter \\n integer delimiter integer\u0026quot; e.g \u0026quot;//;\\n1;2\u0026quot; - \u0026quot;//[delimiter][delimiter]\\n integer delimiter integer\u0026quot; e.g \u0026quot;//[\\*][%]\\n1\\*2%3\u0026quot;  If the string doesn\u0026rsquo;t abide by any of these formats, it should be considered invalid.\nadd(\u0026quot;//;\\n1000;1;2;\u0026quot;) // should throw the following: 'ERROR: invalid input' add(\u0026quot; //;\\n1000,1;2\u0026quot;) // should throw the following: 'ERROR: invalid input' add(\u0026quot;1,2,3//;\\n1000,1;2\u0026quot;) // should throw the following: 'ERROR: invalid input'  why is this important?  If you\u0026rsquo;re wondering to yourself, \u0026ldquo;Why is this sooo important!?\u0026rdquo; take a look at TOPICS: Data Validation   "
},
{
	"uri": "/tech-department/projects/tdd/bowling/",
	"title": "ten-pin bowling scoring system",
	"tags": [],
	"description": "",
	"content": " Take Note This is a Test Driven Development Project. Please follow a test driven methodologies. That means that you write your test code first!\nThe basic idea of TDD is to write the test code before you write any actual code. So you write a test (which will fail) then you write the code that will make the test pass.\nWhen you submit your code (on Github people!) then your tests MUST BE included in your code base.\nIn a professional setting, untested code is incomplete code.\nIn general: Follow recognized best practices around whatever language and test framework you are using. Eg: consistent naming conventions of functions, test files and literally everything else. Literally.\nAlso this is a team project. Do this in groups of two following a TDD ping-pong approach as described here: WORKSHOPS: [MISSING title or page]Instructions Write a software system for keeping track of bowling scores. You can read about traditional 10 pin bowling scoring here.\nPlease put your tests in a directory named \u0026ldquo;tests\u0026rdquo; unless the testing framework you are using follows some other convention.\nProject Description Gameplay This project is more about data, tests and algorithms than html. It needs a WORKING frontend but don\u0026rsquo;t spend too much time making it beautiful. Here is how it will work:\n As the game starts the user will be allowed to enter the names of the players eg \u0026ldquo;Uncle Bob Martin\u0026rdquo; and \u0026ldquo;Ada Lovelace\u0026rdquo; The user then chooses to start the game The user should be able to see the scores of all the players at all times. This includes scores for individual throws and frames, and their total scores The user should be able to see whose turn it is The user should be able to submit the number of pins hit on each throw. One by one. Eg, it\u0026rsquo;s Uncle Bob\u0026rsquo;s turn, so he throws and misses everything. The user submits a 0. The user interface shows that Bob\u0026rsquo;s score is unchanged and it\u0026rsquo;s still his turn. Bob throws again and hits 2 pins, the user submits a 2 and Bob\u0026rsquo;s score is updated and it\u0026rsquo;s still his turn. He throws again and misses. The user enters a 0. We now see that it is Ada\u0026rsquo;s turn. She throws and hits all the pins because she is awesome. The user enters a 10. Ada\u0026rsquo;s score is updated. Now it\u0026rsquo;s Bob\u0026rsquo;s turn again. Get it?  Notes about frontends For those of you doing this in JS: Your user interface will be a web page.\nFor those of you completing this in Python, don\u0026rsquo;t get too fancy. Python is usually considered to be bad t user interfaces so it\u0026rsquo;s really not worth learning a python frontend framework at this point. Just use the terminal. Take a look here for some details.\nAnd everyone: Always remember KISS.\nMore Outputs We should be able to see at any point in time:\n the total score of any player the \u0026ldquo;leaderboard\u0026rdquo; of the current game (who is in first place, second, third etc) the points any person accumulated during a single turn (aka frame) how many turns are left who\u0026rsquo;s turn is it now? whose turn is it next?  Please don\u0026rsquo;t PLEASE DO NOT IMPLEMENT A FANCY GUI. We don\u0026rsquo;t care to see the bowling pins or the ball, we don\u0026rsquo;t care about physics.\nResources and things to know This is not a simple project. To build something awesome you should be aware of a few architectural concepts.\n  TOPICS: Intro to software architecture   "
}]