[
{
	"uri": "/tech-department/syllabuses/data-engineering/",
	"title": "Data Engineering",
	"tags": [],
	"description": "",
	"content": " Data Engineering: Job Description Data Engineers can Extract, Transform and Load data from many different sources to create unified data warehouses that enable the Data Scientists to build business-relevant analyses and make important business decisions. Data Engineering: Programme\nTECHNICAL Basic Linux / Authentication security Object-Oriented Python Basic SQL Relational DB\nComputer Science Time and Space complexity Data Structuring\nExtraction REST APIs Databases SaaS API (e.g. Google Forms, FB, etc.) Web scraping\nData Transformation Advanced SQL, Python [Using Intermediate Queues (Kafka, RabbitMQ)] Data transformation at scale\nData Loading (My)SQL, DB schema Architecture / DB schema\nOptional extras: Deploy/write / launch micro-services e.g. using Docker Cloud services (AWS, Azure, etc) Web frameworks (Django, Flask)\n"
},
{
	"uri": "/tech-department/syllabuses/data-science/",
	"title": "Data Science",
	"tags": [],
	"description": "",
	"content": " Data Science Programme Summary Using computer science and applied statistics, data scientists find valuable patterns where other people just see noise. Harvard Business Review says Data Scientist is \u0026ldquo;The Sexiest Job of the 21st Century,\u0026rdquo; and we agree. It’s a rare combination of interesting challenges and high-value opportunities. Data skills are a superpower, and with great power comes great job responsibilities. Our data scientist learn basic mathematics, programming, data extraction and manipulation, and data analysis and interpretation skills.\nPrerequisites  English literacy Matric maths (not maths literacy) No specific technical prerequisites, except a strong aptitude for coding and statistics, as well as a strong motivation to challenge oneself and learn new things, assessed through Umuzi’s rigorous application process Ability to work in an agile, human-centred way.  Duration  160 hours of training in HCD and Agile through the Umuzi workshops and crash course 1360 hours of subject-specific, technical training over 8 months at Umuzi proper 3 months of full-time work experience with Umuzi’s world-class employer-partners  Cost  100% free for learners Learners receive a stipend for living costs Employer partners sponsor the training costs and stipends  Data Science Curriculum Content Statistics  Basic algebra Survey design Hypothesis testing Distributions, central tendency and variation Effect sizes and confidence intervals Modelling data: basic regression, classification and clustering techniques Interpreting graphs and models  Programming  Functions, variables, data types Object-oriented programming Functional programming Test driven development Debugging Exposure to scientific libraries such as numpy, pandas, statsmodels, scikit-learn, matplotlib, seaborn Exposure to creating reports with Jupyter Notebooks and dashboards (e.g. with Dash) Using version-control software, individually and as part of a team  Data extraction and transformation  Importing, cleaning and manipulation of data Interacting with APIs Relational database management and quality control Data visualisation in Python and Tableau / Google Data Studio  Professional skills and methodologies  Human centred design thinking Agile and scrum methodology Time management and productivity Presentation skills  Tech Stack  Linux, Python, MySQL, Google Data Studio, HTML5, CSS, Git  "
},
{
	"uri": "/tech-department/syllabuses/product-teams/",
	"title": "Product Teams",
	"tags": [],
	"description": "",
	"content": "Product teams are teams of no more than 6 recruits guided by a product owner (Umuzi staff). The teams use the Scrum methodology to build real-world, web-based products. Recruits learn additional frameworks (e.g., Django) and packages as needed for the products.\nAn example of a current product is Umuzi’s online application process. In the past, Umuzi has used a combination of Google Forms and other, off-the-shelf, tools, to create an online application process for applicants. Now, under the leadership of Umuzi’s Data Science and Web Development managers, a team of Umuzi recruits is developing a custom solution which will allow applicants to apply to Umuzi, complete a variety of online learning and tests, enable managers to easily sort candidates by results, and automatically handle communications with the candidates. It’s through real builds like this that recruits put their learning into practice. Additional learning In addition to the curriculum listed above, the recruits participate in workshops given by industry professionals and Umuzi staff. Generally there are 2-3 workshops each month. Topics include time management, public speaking, networking, preparing for technical interviews, introduction to new frameworks, tech trends, etc.\nRecruits are also encouraged to attend industry meetups, conferences, and hackathons. On average, recruits attend 1 meetup/conference per month and 1-2 hackathons during their time at Umuzi.\n"
},
{
	"uri": "/tech-department/syllabuses/web-dev-long/",
	"title": "Web Dev full course",
	"tags": [],
	"description": "",
	"content": " Web Development: Job Description A web developer is someone who designs and implements modern, responsive websites and webapps. They must be strong at technical web development skills (full-stack Javascript, CSS and HTML, and associated libraries and frameworks); have strong visual and design skills; and strong modern engineering methodologies (including Git and Agile).\nWeb Development: Programme TECHNICAL Languages:  HTML CSS Modern JavaScript  Frameworks:  Node.JS/Express JQuery Bootstrap, CSS grid React or Angular Mocha  Databases:  MongoDB MySQL  Other stuff  REST APIs Git Linux  PROFESSIONAL  Human Centred Design Agile  "
},
{
	"uri": "/tech-department/syllabuses/home-study-web-dev-prep/",
	"title": "Web Dev home study",
	"tags": [],
	"description": "",
	"content": "If you want to get into one of our web-dev courses it would be best if you do some preparation on your own.\nFree Code Camp\n Javascript Algorithms And Data Structures Certification: Basic JavaScript Responsive Web Design Certification: HTML and HTML 5 Responsive Web Design Certification: Basic CSS Javascript Algorithms And Data Structures Certification: ES6 Javascript Algorithms And Data Structures Certification: Debugging Javascript Algorithms And Data Structures Certification: Basic Data Structures Javascript Algorithms And Data Structures Certification: Basic Algorithm Scripting Javascript Algorithms And Data Structures Certification: Object Oriented Programming Front End Libraries Certification: Bootstrap Front End Libraries Certification: jQuery  "
},
{
	"uri": "/tech-department/syllabuses/web-dev-short-course/",
	"title": "Web Dev short course",
	"tags": [],
	"description": "",
	"content": "Our web dev short course is a compressed and extra-high intensity version of ouw web-dev long course. The major difference between these courses is: - web dev short is 6 months long in total - this course is not NCIT certified\nBasically we focus on getting students coding and teaming as soon as possible.\n"
},
{
	"uri": "/tech-department/projects/nodejs/file-io/",
	"title": "Node &amp; File IO",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi. In this project you\u0026rsquo;ll just be storing and retrieving information from plain old json files.\nInstructions Create the following functionality in a TDD way.\n Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{their_full_name}.json.  alice.save() # results in visitor_alice_cooper.json bob.save() # results in visitor_bob_marley.json charlie.save() # results in visitor_charley_sheen.json  Notice that the full name used in the file is all lower-case and spaces are replaced by underscores.\n Create a function called load that takes in a name and then grabs a Visitor object from file. It should simply console.log the visitor.  eg:\nload(\u0026quot;Alice Cooper\u0026quot;) // prints out all of Alice's goodies load(\u0026quot;Bob Marley\u0026quot;) // Same deal for good ol Bob  Resources  Accessing the file system JSON: Make sure you understand everything up to the end of \u0026ldquo;JSON Arrays\u0026rdquo;  Up for a challenge? Here are some upgrades you can add to your project if you are up for it.\n Update your load function so that it returns an instance of Visitor instead of just console.logging it. You\u0026rsquo;ll need to learn a little bit about Syncronous versus Asyncronous code to get this one right :)\n Make use of integer ids when saving things to files.\n  Update your save function so it works like this:\nalice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json alice.comments = \u0026quot;Kinda weird, I don't think he'll fit in\u0026quot; alice.save() # results in an UPDATE to visitor_1.json  Your load function should also get a bit of an update.\ncharlie = load(3) charlie.comments = \u0026quot;Winning!\u0026quot; charlie.save() # results in an UPDATE to visitor_3.json  "
},
{
	"uri": "/tech-department/syllabuses/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " We support a few different technical learning paths. Data Science, Data Engineering, Web Dev, and Java sys dev. What follows below is a week-by-week breakdown of these courses. This is all on one page because our various courses have enough in common that it makes sense to keep them synchronized.\nA note on Umuzi’s formal qualification and accreditation Umuzi is a registered training provider with MICT SETA. Our National Certificate IT (Systems Development) (NCIT) qualification is a learnership requirement (i.e. Umuzi’s employer partners can therefore recognize their training and stipend spend as part of their skills development budgets). We work hard to both meet the National Certificate requirements and deliver a practical and relevant learning experience (which are not always well aligned) however, we firmly believe the most important part is the practical application of learning rather than merely meeting the unit standard requirements. Below we refer to the formal NCIT requirements e.g. NCIT01: Business and technology.\nTerminology This is a living document and there are a few things that need to be fleshed out:\n as far as possible each bullet point that describes a piece of our syllabus should be marked as a WORKSHOP, TOPIC or PROJECT. Or exercise??\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == you know  we need to make sure all the NCIT requirements have been dealt with before hitting the summative assessment\n the syllabus is really long. There is a lot to cover so that has effects on Product teams. There are decisions to be made there.\n  Week -1: Bootcamp This is the final step of our selection process. If applicants get through the bootcamp then they are accepted as Umuzi recruits and go on with the rest of the program.\nWe start off by introducing the applicants to the development environment and resources that they\u0026rsquo;ll be using. They are given various group an individual challenges throughout the week.\nWeek 0: Make Umuzi Better A recruit’s journey starts with a one week programme called #MakeUmuziBetter. Recruits from all departments form small cross-functional teams to tackle issues at Umuzi - anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\nNCIT assessments We get a few NCIT assessments out of the way during MUB.\n NCIT 01: Conducting research and user interviews NCIT 02: Reporting NCIT 03: Research presentation  Week 1: Linux and soft skills In this week, everyone gets to know their way around linux.\n ALL:\n Department ice-breaker  DEPARTMENT-PROCESSES: What You Need To Know (as a recruit)   WORKSHOPS: How to be a professional  Introduction to NCIT curriculum  WORKSHOPS: Introduction to Linux: Live demo   TOPICS: Introduction to Linux   PROJECTS: Beginner Linux challenges   TOPICS: Introduction to Bash and the terminal    Everyone is also given links to resources so that they can start reading ahead.\n JAVA:\n  TOPICS: Java Dev environment setup   TOPICS: Java learning materials   WEB_DEV:\n  TOPICS: Web Dev learning materials   DATA_ENG:\n  TOPICS: Python self-learning   DATA_SCI: please take note, you don\u0026rsquo;t need to go as deep into coding as others. But it is good to know your way around\n  TOPICS: Python self-learning    Week 2: Git and personal portfolio Recruits learn a bit about how to build an online presence. Recruits submit their work using Git from the very beginning of their course.\n ALL:\n  TOPICS: Git Basics  Q\u0026amp;A Git basics  PROJECTS: Git Basic Exercises   WORKSHOPS: What to Put On A CV   PROJECTS: Build your first personal website - Introduction  TOPICS: Clean Code  NCIT 04: Version control (GIT) for teamwork  WEB_DEV:\n  WORKSHOPS: Intro to CSS architecture   TOPICS: Introduction to web design    Week 3: Finish portfolio project The recruits finish off their portfolios. From this point forward they are expected to keep their portfolios up to date on their own time.\n ALL:\n  WORKSHOPS: [TODO] Big Picture of Web Dev   PROJECTS: Build your first personal website - Deadline NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 06: Web design for business NCIT 07: Building an online business NCIT 12: Business and technology NCIT 09: Ethics and Professionalism in IT  WORKSHOPS: Clean Code (language agnostic)    Week 4:   TOPICS: How to ask for help with your code  WEB_DEV:\n  TOPICS: [TODO] Super basic intro to Node  WORKSHOP: Live code. Super basic intro to node  PROJECTS: Level 1 programming katas do this in pairs  DATA_ENG:\n  PROJECTS: Level 1 programming katas do this in pairs  WORKSHOPS: [TODO] Basic Intro to OOP   TOPICS: [TODO] Python OOP basics   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week  DATA_SCI:\n  WORKSHOPS: Survey design   WORKSHOPS: Google forms like a boss   PROJECTS: Level 1 programming katas do this in pairs  JAVA:\n carry over any NCIT tasks from previous week  TOPICS: Introduction to Gradle   WORKSHOPS: Live coding: Introduction to Java Monday or Tuesday Recruits should be familiar with basic flow control, if, else, loops. It may be necessary to have another workshop on this  PROJECTS: Level 1 programming katas do this in pairs, they should use Gradle   Week 5: Some specific skills  DATA_SCI:\n  PROJECTS: Data Visualisation Projects   TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata do this in pairs  TOPICS: [TODO] Assertive programming and Pandas   DATA_ENG:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   TOPICS: Automated Testing in Python   PROJECTS: simple-calculator part 1   WEB_DEV:\n  WORKSHOPS: [TODO] OOP in JS   TOPICS: [TODO] OOP in JS and Node   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week  JAVA:\n  WORKSHOPS: Basic intro to oop with IntelliJ   TOPICS: Java OOP basics resources and readings   PROJECTS: Person do this in pairs  PROJECTS: Animals Part 1. OOP basics individual. Due towards the end of the week NCIT 08: Pseudocode and documentation NCIT 13: Object-oriented programming workshop: oop Q\u0026amp;A might be needed   Week 6  ALL:\n  TOPICS: How the internet works   TOPICS: Data Ethics and Privacy   DATA_SCI:\n  WORKSHOPS: Data Ethics   TOPICS: Unit testing (language agnostic concepts)   TOPICS: Automated Testing in Python   PROJECTS: simple-calculator part 1   DATA_ENG:\n  PROJECTS: password-checker  logging with python add logging to password checker  WEB_DEV:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   WORKSHOPS: Unit testing Introduction   PROJECTS: simple-calculator part 1   JAVA:\n  TOPICS: Introduction to assertive programming   PROJECTS: Assertive programming kata   TOPICS: Unit testing (language agnostic concepts)   TOPICS: Intro to JUnit  LIVE CODE WORKSHOP: demonstrate unit tests with intelliJ and JUnit.  PROJECTS: Animals Part 2. Adding Tests : add some tests to existing code  TOPICS: Test Driven Development   PROJECTS: simple-calculator part 1   TOPICS: Exception Handling   NCIT 05: History of the Internet\n NCIT 06: Web design for business\n NCIT 07: Building an online business\n NCIT 08: Pseudocode and documentation\n  Week 7  ALL:\n NCIT 09: Ethics and Professionalism in IT NCIT 10: Workshop: Giving and receiving constructive feedback NCIT 11: Test-driven development  DATA_SCI:\n  PROJECTS: password-checker   DATA_ENG:\n  PROJECTS: string-calculator   WEB_DEV:\n  PROJECTS: password-checker   TOPICS: Logging in Node and JS  add logging to password checker  JAVA:\n LIVE CODE WORKSHOP: Error Handling  PROJECTS: password-checker   TOPICS: Java Logging with Log4j   PROJECTS: Add logging to password checker   TOPICS: Java File IO    Week 8:  DATA_SCI:\n  PROJECTS: string-calculator   TOPICS: Automated Testing pandas and numpy   Java:\n  PROJECTS: File IO \u0026#43; Logging \u0026#43; Errors   TOPICS: Regular Expression Resources  NCIT 17: Search and sort techniques  DATA_ENG:\n  TOPICS: [TODO] Unit testing with mocks and spies   PROJECTS: [TODO] Unit test mocks and spies kata   TOPICS: API basics   PROJECTS: [TODO] Consume Github API - INTRODUCED  WEB_DEV\n  PROJECTS: string-calculator    Week 9:  DATA_SCI\n  PROJECTS: string-calculator   DATA_ENG\n  PROJECTS: [TODO] Consume Github API - DUE  TOPICS: Environmental Variables   TOPICS: [TODO] Virtual Environments   WEB_DEV:\n  TOPICS: [TODO] Unit testing with mocks and spies   PROJECTS: [TODO] Unit test mocks and spies kata   TOPICS: API basics   PROJECTS: [TODO] Consume Github API - INTRODUCED  JAVA\n  PROJECTS: string-calculator   TOPICS: Strings and numbers in Java    Week 10:  ALL\n  TOPICS: The Tech Landscape Terminology  NCIT 12: Business and technology  DATA_SCI:\n  PROJECTS: Data Wrangling   TOPICS: Intro to functional programming   DATA_ENG:\n  TOPICS: Intro to Docker and Docker-compose   PROJECTS: SQL   WEB_DEV:\n  PROJECTS: [TODO] Consume Github API - DUE  TOPICS: DOM manipulation with vanilla JavaScript   PROJECTS: Memory game in vanilla js INTRODUCED  JAVA:\n  PROJECTS: Java data structures   PROJECTS: Java collections   TOPICS: Java collections and data structures    Week 11  DATA_ENG\n  TOPICS: [TODO] Sqlalchemy   PROJECTS: [TODO] create a REST api to interact with actual database   DATA_SCI:\n  PROJECTS: Statistical Thinking INTRODUCED  WEB_DEV:\n  PROJECTS: Memory game in vanilla js DUE  JAVA:\n  PROJECTS: Dice INTRODUCED  PROJECTS: [TODO] Java Generics   TOPICS: [TODO] Java Generics   TOPICS: [TODO] Introduction to Design Patterns    WEEK 12:  DATA_SCI:\n  PROJECTS: Statistical Thinking DUE  WEB_DEV\n  WORKSHOPS: Node advanced  TOPICS: Introduction to Node   PROJECTS: Node \u0026amp; File IO   DATA_ENG:\n  TOPICS: [TODO] Sqlalchemy migrations with Alembic   PROJECTS: [TODO] Database migrations with SQLAlchemy - INTRODUCTION  JAVA:\n  PROJECTS: Dice DUE  TOPICS: Intro to Docker and Docker-compose    PROJECTS: SQL INTRODUCED\n  Week 13  NCIT 13: Object-oriented programming\n DATA_SCI\n  TOPICS: Intro OOP(Object-oriented Programming) for Python   PROJECTS: Person   PROJECTS: Animals Part 1. OOP basics   PROJECTS: [TODO] OOP for data science   DATA_ENG\n  TOPICS: [TODO] Database Comparison   TOPICS: MongoDB and Python   TOPICS: optimizations and big-O   PROJECTS: [TODO] Python and MongoDB - DUE  WEB_DEV:\n  TOPICS: Intro to Docker and Docker-compose   PROJECTS: SQL - INTRODUCTION  WORKSHOPS: [TODO] Introduction to Node and SQL   JAVA:\n  PROJECTS: SQL DUE  TOPICS: Environmental Variables   TOPICS: [TODO] JDBC templates   TOPICS: [TODO] Environmental variables and secrets with gradle   PROJECTS: [TODO] SQL \u0026#43; Java Helloworld    Week 14  DATA_ENG\n  TOPICS: [TODO] Sqlalchemy migrations with Alembic   PROJECTS: [TODO] Database migrations with SQLAlchemy - DUE  TOPICS: [TODO] Database Comparison   TOPICS: MongoDB and Python   PROJECTS: [TODO] Python and MongoDB - INTRODUCTION  WEB_DEV:\n  PROJECTS: SQL - DUE  WORKSHOPS: [TODO] Introduction to Node and SQL    Week 15  DATA_ENG:\n  TOPICS: [TODO] DAGs with Airflow   PROJECTS: [TODO] DAGs with Airflow - INTRODUCED  DATA_SCI:\n  TOPICS: Intro to Docker and Docker-compose   TOPICS: [TODO] Virtual Environments   WEB_DEV:\n  TOPICS: Environmental Variables   TOPICS: [TODO] The dotenv module   PROJECTS: Node \u0026amp; SQL assignment    Week 16  DATA_ENG:\n  PROJECTS: [TODO] DAGs with Airflow - DUE  DATA_SCI:\n  TOPICS: SQL and Python   WEB_DEV:\n  PROJECTS: Express, forms and templates    ALL:\n  TOPICS: Data validation and quality control  NCIT 14: Database Development  Week 17  WEB_DEV:\n  PROJECTS: Expose a JSON API   DATA_ENG:\n  TOPICS: [TODO] Python and Kafka   PROJECTS: [TODO] Python and Kafka - INTRODUCTION   Week 18  NCIT 15: Analytics, Surveys, and Reports / Input \u0026amp; Output\n DATA_SCI:\n  TOPICS: Web scraping with Python   PROJECTS: Dashboard Assignment   WEB_DEV:\n  PROJECTS: Add a little Ajax   DATA_ENG:\n  PROJECTS: [TODO] Python and Kafka - DUE  TOPICS: [TODO] ZeroMQ versus RabbitMQ versus Kafka    Week 19  WEB_DEV:\n  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum   TOPICS: optimizations and big-O   DATA_ENG:\n  PROJECTS: [TODO] Python and Spark - INTRODUCED  TOPICS: Python and Spark    Week 20  ALL:\n  TOPICS: Agile \u0026amp; Scrum   WORKSHOPS: Agile and Scrum   TOPICS: optimizations and big-O   NCIT 16: Thinking like a machine / Boolean algebra, logic\n NCIT 17: Search and sort techniques\n NCIT 18: Agile project management\n NCIT 19: Agile meetings\n NCIT 20: Managing the Software Development Process\n  Week 21: NCIT bits and pieces MUB must happen before this point.\n DATA_ENG:   PROJECTS: [TODO] Python and Spark - DUE   ALL:\n NCIT Summative assessment  Week 22:  DATA_SCI:\n  PROJECTS: Cross-validation \u0026amp; Simple Linear Regression   ALL:\n  TOPICS: [TODO] Database Comparison    Week 23  DATA_SCI:   PROJECTS: Multivariate Linear Regression    Week 24  DATA_SCI:   PROJECTS: Decision Trees    Week 25  DATA_SCI:   PROJECTS: Logistic regression    Week 26  DATA_SCI:\n  PROJECTS: K-Means Clustering   ALL:\n  WORKSHOPS: Git for Teamwork   WORKSHOPS: [TODO] Agile Recap    Optional Extras If recruits want/need to go a little further with their learning then here are a few useful resources.\n WEB_DEV:\n  TOPICS: Intro to Angular   TOPICS: Intro to React   TOPICS: Intro to Vue   WORKSHOPS: [TODO] Nodejs intro to socketIO   WORKSHOPS: [TODO] Basic introduction to Redux   WORKSHOPS: [TODO] Node Sync/Async   TOPICS: MongoDB and JavaScript   DATA_ENG:\n postgres stored procedures sql index optimisations Entity Relationship Diagrams (ERD) Data warehousing with Hive Overview of the Hadoop ecosystem Linear regressions   Optional Projects The projects listed below are not necessary but could be used to re-enforce certain learnings\n  PROJECTS: Semitone Challenge   "
},
{
	"uri": "/tech-department/projects/semitone-challenge/basic-algorithm/",
	"title": "semitone difference - basic algorithm",
	"tags": [],
	"description": "",
	"content": " Make a class called JamBuddy. JamBuddy should work like this:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # this will print an array of two notes correct = buddy.checkAnswer(1) console.log(correct) # this will print True if the `1` was the correct answer  Python:\nbuddy = JamBuddy() notes = buddy.select_notes() print(notes) # this will print an array of two notes correct = buddy.check_answer(1) print(correct) # this will print True if the `1` was the correct answer  Some finer points For now don\u0026rsquo;t worry about \u0026ldquo;flat\u0026rdquo; notes. The notes we care about are:\nA A# B C C# D D# E F F# G G#  Here is an example usage:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # let's pretend that this outputs ['A', 'B'] let correct = buddy.checkAnswer(1) console.log(correct) # false correct = buddy.checkAnswer(2) console.log(correct) # true  Acceptance criteria Make sure you do this in a TDD way. And that code sample from the top needs to run as is.\nPlease just supply a working class. The only place you should instantiate your class is inside your unit tests\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/gui-part-1/",
	"title": "Make a simple GUI",
	"tags": [],
	"description": "",
	"content": " Create a basic web site that a user can use to interact with the JamBuddy class.\n Make a page named index.html. To run the application the user will just need to open that page in their browser Make a button with the text \u0026ldquo;Get random notes\u0026rdquo;. If the user clicks on this button then the selectNotes function should be called and the notes should be displayed on the screen. make an input box where the user can enter their answer. create a button with the text \u0026ldquo;Submit answer\u0026rdquo;. If the user clicks this button then the checkAnswer function should be called.  if the answer is correct then display the message \u0026ldquo;You got it right .Well Done!\u0026rdquo; if the answer is incorrect then display the message \u0026ldquo;Wrong answer! Try again\u0026rdquo;   Acceptance criteria TDD is a must. Yes, you need to even unit test your DOM manipulations\n"
},
{
	"uri": "/tech-department/projects/nodejs/sql/",
	"title": "Node &amp; SQL assignment",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Set up a postgresql database on your computer. Please use Docker to do this. You can find more information here: TOPICS: Intro to Docker and Docker-compose  Create a table inside the database and name it Visiters. The table must contain the following fields :   id: This should be automatically generated by SQL visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  Helloworld Before you dive into anything too intense, let\u0026rsquo;s make sure that you can get node to connect to your database. Can you get this Node script to run:\n // npm install --save pg // find out more here: https://node-postgres.com/ const Pool = require(\u0026#34;pg\u0026#34;).Pool; const pool = new Pool({ user: \u0026#34;user\u0026#34;, host: \u0026#34;localhost\u0026#34;, database: \u0026#34;db\u0026#34;, password: \u0026#34;pass\u0026#34;, port: 5432 }); const helloWorld = () =\u0026gt; { pool.query( \u0026#34;SELECT $1::text as message\u0026#34;, [\u0026#34;Hello world!\u0026#34;], (error, results) =\u0026gt; { if (error) { throw error; } console.log(results.rows); } ); }; helloWorld();  Functionality Create a single index script with the following functions:\n addNewVisitor. This should save the Visitor into the database list all visitors. This should return an array of all the visitor names and ids delete a visitor update a visitor view one visitor: given a visitor\u0026rsquo;s id, return all information about that visitor delete all visitors  NOTE You will be expected to properly test your code. You can use whatever testing framework you want. If you use something that isn\u0026rsquo;t taught at Umuzi please justify your choice (if you found something cool we might incorporate it into the syllabus)\nResources  https://www.guru99.com/introduction-to-database-sql.html https://www.w3schools.com/sql/sql_intro.asp  "
},
{
	"uri": "/tech-department/projects/nodejs/mongo/",
	"title": "Node &amp; mongoDB assignment",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Create a database and name it UmuziProspects Create a collection inside the database and name it Visiter. The collection must contain the following fields :   id: This should be automatically generated by MongoDB visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  functionality Create a single index script with the following functions:\n addNewVisitor. This should save the Visitor into the database list all visitors. This should return an array of all the visitor names and ids delete a visitor update a visitor view one visitor: given a visitor\u0026rsquo;s id, return all information about that visitor delete all visitors  NOTE You will be expected to properly test your code. You can use whatever testing framework you want. If you use something that isn\u0026rsquo;t taught at Umuzi please justify your choice (if you found something cool we might incorporate it into the syllabus)\nResources TOPICS: MongoDB and JavaScript "
},
{
	"uri": "/tech-department/topics/",
	"title": "Topics",
	"tags": [],
	"description": "",
	"content": "A topic is a collection of learning materials that the recruit can go through on their own.\n"
},
{
	"uri": "/tech-department/workshops/",
	"title": "Workshops",
	"tags": [],
	"description": "",
	"content": "A workshop is an interactive session that includes at least one Umuzi staff member. These will often be presentations, demonstrations or Q\u0026amp;A sessions.\nThis section includes all the references and explanations needed to put on a workshop.\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/advanced-algorithm/",
	"title": "Advanced algorithm",
	"tags": [],
	"description": "",
	"content": " Adjust your JamBuddy class so that it can handle flats and sharps.\nHere is an example usage:\nJS:\nlet buddy = new JamBuddy() let notes = buddy.selectNotes() console.log(notes) # let's pretend that this outputs ['A#', 'Db'] let correct = buddy.checkAnswer(1) console.log(correct) # false correct = buddy.checkAnswer(3) console.log(correct) # true  Have fun :)\nAcceptance criteria The usual. TDD is a must\n"
},
{
	"uri": "/tech-department/projects/nodejs/express-forms/",
	"title": "Express, forms and templates",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\ncreate a basic html form Create an HTML form. This form will (eventually) be used to create Visitor fields in your mongo database. Your form should have the following fields:\n visitor name your name (name of the person who assisted the visitor) visitor\u0026rsquo;s age date of visit time of visit comments  use express to host the form as a static resource Create a basic express.js application and serve your form as a static file\nThe url should be http://localhost:[YOUR_PORT]/new_visit\nsubmit the form There should be a submit button on the form. When the user submits the form then the following should happen:\n The form data will be collected and your addNewVisitor function will be called in order to save the visitor details into your database The user should then be redirected to a page that says: \u0026ldquo;Thanks for the info! The following was saved to the database:\u0026ldquo;. This page should display the information that was saved, as well as the id of the new Visitor instance.  Make use of the pug template engine to render the \u0026ldquo;Thank you\u0026rdquo; page\nResources   TOPICS: ExpressJs   TOPICS: JavaScript template engines   TOPICS: Using the fetch api   "
},
{
	"uri": "/tech-department/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": " Units of work with strict deadlines to be completed alone or in groups\nProjects have three parts:\nPROJECT INTRO This is when the project is given to the recruits. Everything is explained, they are pointed at useful resources and clear instructions, and they are told the deadline.\nPROJECT DEADLINE This is when the projects are due. Umuzi staff members will now review the code to give feedback.\nFor code projects The recruits need to provide evidence that they got another recruit to review their work, and that they reviewed another recruits work prior to the deadline.\nThe recruit is expected to submit code and documentation in the form of a git repo. All git, coding, testing and documentation best practices that the course has covered thus far need to be adhered to.\nPROJECT CODE REVIEW Once the staff members have reviewed code projects then a code review session will be held. This is a kind of workshop where an Umuzi staff member will present on the project submissions.\n If anyone did something awesome then highlight that If there is a common misconception or mistake then highlight that highlight any subtle lessons that should have been learned get feedback from the recruits, Q\u0026amp;A get a few of the recruits to explain parts of their code and approaches to the group  If anyone submitted nonesense - either they were sloppy or they just didn\u0026rsquo;t get it, then don\u0026rsquo;t make them the center of attention. Pull them aside after the code review and have a private discussion. This should happen after the group code review session because that way they will see the standard of the group as a whole and possibly be motivated to conform.\n"
},
{
	"uri": "/tech-department/projects/semitone-challenge/gui-part-2/",
	"title": "A gui that is more...awesome",
	"tags": [],
	"description": "",
	"content": "Extend your simple gui with the following behavior:\n When the user loads the page for the first time then there should be two notes already displayed on the screen. Add a button with the text \u0026ldquo;Reveal answer\u0026rdquo;. If the user clicks on this button then ALL the notes (A, A#, B,\u0026hellip;) should be displayed in a div with the id \u0026ldquo;explanation\u0026rdquo;. The currently s4elected notes should be highlighted and the final answer should be displayed on the screen. If the user clicks on the \u0026ldquo;Get random notes\u0026rdquo; button then the \u0026ldquo;explanation\u0026rdquo; div should be emptied. If the user submits the correct answer then the \u0026ldquo;explanation\u0026rdquo; div should be populated as above. The user should be congratulated just like before Keep track of how many correct answers the user gets in a row and display this answer on the screen. This is referred to as a streak. Have some pseudocode:  user accesses gui for first time gui displays: \u0026quot;Streak: 0\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 1\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 2\u0026quot; user gets correct answer gui displays: \u0026quot;Streak: 3\u0026quot; user gets wrong answer gui displays: \u0026quot;Streak: 0\u0026quot; \u0026lt;\u0026lt;\u0026lt; the streak is reset to zero because the user got the answer wrong  "
},
{
	"uri": "/tech-department/projects/nodejs/api/",
	"title": "Expose a JSON API",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\nInstructions Use Express to expose the following JSON endpoints.\n /addNewVisitor: create a new Visitor in the database /deleteVisitor:id: delete a single Visitor from the database /deleteAllVisitors: delete all Visitors /viewVisitors: view all Visitors /viewVisitor:id: view a single Visitor /updateVisitor:id: Update a single Visitor  Resources   TOPICS: API basics   TOPICS: APIs and Node   "
},
{
	"uri": "/tech-department/projects/nodejs/ajax/",
	"title": "Add a little Ajax",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\na new static resource Create a new HTML static web page just like the form page you made before. You can even copy-paste your form\u0026rsquo;s html here. Usually copy-pasting pieces of code is a bad idea, this time it\u0026rsquo;s ok.\nServe your new page from the following url: http://localhost:[YOUR_PORT]/single-page-app\nform submissions The submit button should make an AJAX call to the addNewVisitor. It should not redirect the user to any kind of \u0026ldquo;thank you\u0026rdquo; page\nlist existing visitors Create an html table on the same page (on your single page app). Use an ajax call to /viewVisitors to populate the table\ndelete visitors, and update the table Add a \u0026ldquo;delete\u0026rdquo; button to each line of the table. When the user clicks \u0026ldquo;delete\u0026rdquo; then\n make a request to /deleteVisitor:id and delete that visitor update the information displayed in the table  Also make sure that if you create any new visitors then they are visible in the table\nResources   TOPICS: Introduction to Ajax   "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/c-shape/",
	"title": "C shape",
	"tags": [],
	"description": "",
	"content": " C SHAPE Write a function that takes in number as argument and draws the C pattern/shape Input\nlet cPattern(5) =\u0026gt; Expected output:  def cPattern(5):  Input\n***** * * * *****  "
},
{
	"uri": "/tech-department/katas/ceasar-cipher/",
	"title": "Ceasar cipher",
	"tags": [],
	"description": "",
	"content": "What is ceasar cipher?\n Caesar Cipher:\nIs a type of substitution cipher encryption in which each letter in the plaintext is \u0026lsquo;shifted\u0026rsquo; a certain number of places down the alphabet. For example, with a shift of 1, A would be replaced by B, B would become C, and so on. The method is named after Julius Caesar, who apparently used it to communicate with his generals.\n Example\n To pass an encrypted message from one person to another, it is first necessary that both parties have the \u0026lsquo;key\u0026rsquo; for the cipher, so that the sender may encrypt it and the receiver may decrypt it. For the caesar cipher, the key is the number of characters to shift the cipher alphabet.In the example below, text we will encrypt is \u0026lsquo;defend the east wall of the castle\u0026rsquo;, with a shift (key) of 1.\n Input\nplaintext: defend the east wall of the castle  Output\nciphertext: efgfoe uif fbtu xbmm pg uif dbtumf  TASK\n1. write a function that takes in a string and number arguments and shifts each and every alphabet of the given string by/to [n] steps after the character\n//javascript function ceasarCipher(string,n) =\u0026gt;  Input\nceasarCipher(\u0026quot;fmjkbi\u0026quot;,3)  Output\nExpected output =ipmnel   calling function ceasarCipher(\u0026ldquo;fmjkbi\u0026rdquo;,3) must return output like Below\nThe Expected output =ipmnel\nNote Be: notice that every character from given String is shifted to three positions/ steps ahead\n "
},
{
	"uri": "/tech-department/katas/compound-interest/",
	"title": "Compound interest",
	"tags": [],
	"description": "",
	"content": " compound Interest 1. Write a function that calculates compount interest. It should return a number.\nEg if I have R100 in a bank account and I get 1% interest every month, I can see how much money I will have in my account at the end of each month like so:\nTry it with a loop. Try it with recursion.\n// JavaScript function finalAmount(startAmount,interest,iterations){ // clever things } finalAmount(100,0.01,1) // 101.0 finalAmount(100,0.01,2) // 102.01 finalAmount(100,0.01,3) // 103.031 finalAmount(100,0.01,100) // 270.481...  //py compountInterest(principleAmount,interest,iterations): # clever things Expected output: def compountIntere(100,10,1): # 101.0 def compountIntere(100,10,2): # 102.01 def compountIntere(100,10,3): # 103.031 def compountIntere(100,10,100): =\u0026gt; # 270.481...  ADVANCED COMPOUND INTEREST 2. Write a program that will figure out how many iterations are needed to meet a specific target amount. Eg: if I have R100 in a bank account and I get 1% interest every month, how many months do I have to wait before my bank acount contains R200?\nThere are a lot of ways to do this. Some are very inefficient (and easy to code). Some are more efficient (and hard to code). Try the easy way first. MAke it work then make it work well.\n"
},
{
	"uri": "/tech-department/katas/fibonacci-sequence/",
	"title": "Fibonacci sequence",
	"tags": [],
	"description": "",
	"content": "What is fibonacci sequence?\n Fibonacci Sequence: is the series of numbers where the next number is found by adding up the 2 numbers before it.\n TASK\n1. Write a function, fibonacci(n) that takes in a number/int argument (n) and returns the first nth terms of the sequence.\nInput\nfibonacci(12)  Output\nExpected output: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 in this case n = 2:  "
},
{
	"uri": "/tech-department/katas/",
	"title": "Katas",
	"tags": [],
	"description": "",
	"content": "This section just has a bunch of little excersises. For the most part they are language agnostic puzzles that can be used in a bunch of different ways:\n recruits can use them to practice on their own whiteboarding excercises pair programming excercises practicing tdd  Guidelines Make sure you can do this stuff without relying heavily on the built in functions. Eg if the goal is to find the maximum number in the list, using the max function wont teach you a thing. This is about algorithmic thinking. The mental capabilities you will build by doing these excercises are much more important than memorising built in functions. You should end up with skills you can apply to problems in other languages.\nNOTE all the string excercises listed should be adapted to work with arrays as well\n"
},
{
	"uri": "/tech-department/katas/palindrome/",
	"title": "Palindrome",
	"tags": [],
	"description": "",
	"content": " Palindromes Write a function that detects if an inputted string is a palindrome or not. It should return a boolean result.\n// JavaScript isPalindrome(\u0026quot;mom\u0026quot;) // returns true isPalindrome(\u0026quot;Mom\u0026quot;) // returns false isPalindrome(\u0026quot;rats live on no evil star\u0026quot;) // returns true isPalindrome(\u0026quot;rats live on no evil star.\u0026quot;) // returns false  //Py def is_palindrome(\u0026quot;mom\u0026quot;): # returns True def is_palindrome(\u0026quot;Mom\u0026quot;): # returns False def is_palindrome(\u0026quot;rats live on no evil star\u0026quot;): # returns True def is_palindrome(\u0026quot;rats live on no evil star.\u0026quot;): # returns False  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/pyramids/",
	"title": "Pyramids",
	"tags": [],
	"description": "",
	"content": " Pyramids 1. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4.\nInput:\nlet triangle=(n)=\u0026gt;{ //clever things }  def triangle(5):  Output\nexpected output: PYRAMID TRIANGLE. * *** ***** ******* *********  2. Write a function that takes in number as argument and draws a Hollow pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def traingle(n):  Output\nexpected output: HOLLOW RIGHT ANGLE TRIANGLE AND FOR ITS MIRROR. * * * * * * * ***********  3. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def triangle(5):  Output\nexpected output: PYRAMID PATTERN * ** *** **** ***** ****** ******* ****** ***** **** *** ** *  4. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle = (5) =\u0026gt;{//clever things}  def triangle(n):  Output\nexpected output: PYRAMID PATTERN ************* *********** ********* ******* ***** *** *  5. Write a function that takes in number as argument and draws a pyramid triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle shaped as pyramid with height 4\nInput:\nlet triangle(5) =\u0026gt;  def triangle(5):  Output\nexpected output: PYRAMID PATTERN * ** *** **** ***** ****** ******* ****** ***** **** *** ** *  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/squares/",
	"title": "Squares",
	"tags": [],
	"description": "",
	"content": " Print (triangles \u0026amp; squares) using loops 1. Write a function that takes in number as argument and prints a square\nInput\nlet square(n) =\u0026gt;  def square(n):  Output\nexpected output: remember to use \u0026quot;*\u0026quot; ##### ##### ##### ##### #####  2 Write a function that takes in number as argument and prints a hollow square in the center\nInput\nlet square(n) =\u0026gt;  def square(n):  Output\nexpected output: remember to use \u0026quot;*\u0026quot; ##### # # # # # # #####  "
},
{
	"uri": "/tech-department/katas/string-reverse/",
	"title": "String reverse",
	"tags": [],
	"description": "",
	"content": " String reverse Make a function that can reverse a string\n//javascript reverse(\u0026quot;hello\u0026quot;) =\u0026gt; // Expected output olleh  //py def reverse(\u0026quot;hello\u0026quot;): # Expected output =\u0026gt; olleh  "
},
{
	"uri": "/tech-department/katas/string-rotate/",
	"title": "String rotate",
	"tags": [],
	"description": "",
	"content": " String rotate forward/backwards Write a function that takes in string argument and n (number) argument and the rotate the given string to nth position\n//javascript rotate(\u0026quot;hello\u0026quot;,1) =\u0026gt; // Expected output: elloh rotate(\u0026quot;hello\u0026quot;,2) =\u0026gt; // Expected output: llohe rotate(\u0026quot;hello\u0026quot;,3) =\u0026gt; // Expected output: lohel rotate(\u0026quot;hello\u0026quot;,-1) =\u0026gt; // Expected output: ohell rotate(\u0026quot;hello\u0026quot;,-2) =\u0026gt; // Expected output: lohel rotate(\u0026quot;hello\u0026quot;,-3) =\u0026gt; // Expected output: llohe  //py def rotate(\u0026quot;hello\u0026quot;,1) # Expected output: elloh def rotate(\u0026quot;hello\u0026quot;,2) # Expected output: llohe def rotate(\u0026quot;hello\u0026quot;,3) # Expected output: lohel def rotate(\u0026quot;hello\u0026quot;,-1): # Expected output: ohell def rotate(\u0026quot;hello\u0026quot;,-2): # Expected output: lohel def rotate(\u0026quot;hello\u0026quot;,-3): # Expected output: llohe  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/triangles/",
	"title": "Triangles",
	"tags": [],
	"description": "",
	"content": " Print (triangles \u0026amp; squares) using loops 1. Write a function that takes in number as argument and draws a right angled triangle using the \u0026ldquo; * \u0026ldquo; characters. If the input is 4, then the output is a traingle with height 4\nInput\nlet triangle(4) =\u0026gt;  def triangle(n):  Output\nexpected output: RIGHT ANGLE TRIANGLE * ** *** ****  2. Write a function that takes in number as argument and draws a reflection/mirror of right angled triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle with height 4\nInput\nlet triangle(5) =\u0026gt;  def triangle(n):  Output\nexpected output: MIRROR OF RIGHT ANGLE TRIANGLE * ** *** ****  3. Write a function that takes in number as argument and draws a Hollow right angled triangle above using the \u0026ldquo; * \u0026ldquo; characters . If the input is 4, then the output is a traingle with height 4\n//javascript function triangle(5)  def trianlge(n):  expected output =\u0026gt; HOLLOW RIGHT ANGLE TRIANGLE AND FOR ITS MIRROR. * * * * * * * ******  "
},
{
	"uri": "/tech-department/katas/use-loops-to-print-patterns/",
	"title": "use loops to print-patterns",
	"tags": [],
	"description": "",
	"content": " Why use loops?  In order to know why we use looping in programming, we will first, be aware that different programming languages have different for loops. In Python, for instance, you can iterate through all the items in a list by writing.\n Loops are used in programming as a test to know if the arguments in a clause are true or false and then determine to do an action that may involve skipping the clause and going to the next one.\n There are many different types of looping. If your loop only needs a test to decide if it should keep looping or not, then a do-while fits that.\n  Different Kinds of Loops Distinct programming Languages such as \u0026ldquo;JavaScript, Python,C,Java \u0026amp; moar\u0026hellip;\u0026rdquo; supports different kinds of loops:\n for - loops through a block of code a number of times.\n for/in - loops through the properties of an object.\n for/of - loops through the values of an iterable object.\n foreach- loops through the iterable object checking its properties/values.\n while - loops through a block of code while a specified condition is true.\n do/while - also loops through a block of code while a specified condition is true\n  "
},
{
	"uri": "/tech-department/department-processes/",
	"title": "Department Processes",
	"tags": [],
	"description": "",
	"content": " In order to make sure our department is as effective, efficient and scalable as possible we need a few ground rules. The documents contained in this section aim to help us do our jobs better. If anything in here gets in the way of progress, if anything starts to smell like useless bureaucracy, then it should be revised or removed.\nThese are living documents. They are up for debate, and will be added to over time.\nA few things to think about  what can we do better? what should we stop doing? what do we value that is not expressed in our priorities and processes? what in this document should change? how can we stimulate better knowledge sharing between cohorts? how can we stimulate better accountability?\n how about live-coding workshops. Having senior team members run those can be very useful, empowering and encouraging junior team members to do them would be very powerful\n how can we best use and educate our strategist recruits who are helping our tech department as a \u0026ldquo;product\u0026rdquo;?\n How can we scale better? Umuzi will grow\n what will the tech department look like if we triple in size? How can we remain effective and keep our signal to noise ratio good? how will we onboard new team members so that they can be effective from day 1? what if we open another Umuzi studio? How do we ensure that the lessons we learn here can be copy-pasted into a new environment? And how will we make sure that lessons learned by staff in those new environments are available to everyone on the team?  how can we do nitty gritty annoying tasks (eg: attendance) better?\n  "
},
{
	"uri": "/tech-department/projects/how-to-submit-your-project/",
	"title": "How to submit your project",
	"tags": [],
	"description": "",
	"content": " How to submit your project Create a repo on github. The repo name should be: \u0026ldquo;umuzi-project-[the project description filename without the extension]\u0026ldquo;. Eg: if you are completing the project described in \u0026ldquo;basic-website-frontend-events.md\u0026rdquo; then you should name your github repo: \u0026ldquo;umuzi-project-basic-website-frontend-events\u0026rdquo;\nAll coding projects will be submitted as git repos. You are expected to use git properly, you will be penalised if you only have one gigantic commit or if your commit messages are nonesense.\nThere should be a clear README that describes how to launch your program. Maybe a script needs to be run, maybe an index.html needs to be opened in a browser. Tell us what we need to do.\nOnce your code is all neat and tidy in git then post a link to the #project-submissions channel on slack.\nTODO: should we use older cohorts to review code before we do? It\u0026rsquo;ll be good practice for them but might effect deadlines\n"
},
{
	"uri": "/tech-department/workshops/interviewing-sucessfully/",
	"title": "Interviewing sucessfully",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/16FMMbvXrrNBOS3RJfG0-CHERvlldaiY7pq_i3cs4S_c\n"
},
{
	"uri": "/tech-department/workshops/intro-to-agile/",
	"title": "Intro to Agile",
	"tags": [],
	"description": "",
	"content": "Project management with Trello (first intro to Agile and Scrum methodologies)\nTODO\n"
},
{
	"uri": "/tech-department/workshops/intro-to-node-and-friends/",
	"title": "Introduction to Node and Friends",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/1dtrsWOWjoA9A9nTmznCkdYz0oRK6O76jXRINp0tzjrQ\n"
},
{
	"uri": "/tech-department/workshops/intro-to-development-tools-and-environment-for-web/",
	"title": "Introduction to development environment for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/nodejs-async-vs-sync/",
	"title": "Node Sync/Async",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/19ppsjmkKAvJcasK_BnjptTUfF4KQwaInDKVkhK1b6vA\n"
},
{
	"uri": "/tech-department/topics/git/version-control-and-scrum/",
	"title": "Version Control &amp; Scrum using Trello &amp; Github",
	"tags": [],
	"description": "",
	"content": " Scrum roles  Team Member Developers, designers, and anyone who\u0026rsquo;s doing that actual production of work. Responsible for working with the Product Owner to break down tasks \u0026amp; reach completion on different ticket items. Scrum Master The facilitator of the scrum process. If this person is doing their job right, the team becomes independent over time. Product Owner The stakeholder for the product. This person is in charge of deciding what the MVP, and different versions of the product look like. They are also responsible for ensuring the backlog is in correct order.  Scrum Meetings Planning  When: At the beginning of the sprint What: The team commits to a set of tickets for the sprint that they think they can complete. Why: Gives a goal to work towards, ensures that there is a select pool of tickets that the team can then have the freedom to choose as they please.  Storytime  When: As needed. 2-3+ sprint\u0026rsquo;s worth of tickets should be in the backlog at all times. What: The team hashes out different story point from the product manager, converting them into tickets that are an appropriate size with unambiguous requirements. Why: So every ticket is clear on what needs to be accomplished.  Review  When: At the end of every sprint What: Team demos all work done for an audience including, but not limited to, stakeholders \u0026amp; team members Why: It\u0026rsquo;s not only nice to show off work, but it ensures that everything is actually working in harmony.  Retro  When: After the end of every sprint What: The team, with the intention of improving the scrum process, covers the following issues together What went well What went poorly What can be done to improve Why: The scrum process should be adaptable to the organization\u0026rsquo;s needs. This also allows all members of the team to participate and own the process.  Standup  When: Every day What: Team answers following questions in order - What did I do to advance the team\u0026rsquo;s goals in the sprint yesterday? - What is impeding me from working on the team\u0026rsquo;s goals for this sprint? All other discussions are tabled for smaller groups afterwards Why: Helps to adapt to problems that come up, and to initiate conversation about different topics.  General issue board procedure Every time you move a ticket from one column to another, you are unassigning yourself. A ticket in the done column is reassigned to the person who did the development work on it. Comment on the tickets as a form of taking notes \u0026amp; passing on explanations from one person to another. Attach all resources to the ticket whether they are points of reference, design documents, etc. Name the tickets so there is no confusion as to what is being accomplished. Add every requirement to the checklist, and be specific. Check off requirements as you finish work on them in development.\nBacklog Items in the backlog represent the conceived work for the team over the next 2-3+ sprints. Before items are able to be moved into the \u0026ldquo;To Do\u0026rdquo; column, they need to be looked over by the team during the \u0026ldquo;Storytime\u0026rdquo; meeting to make sure that the objectives are clear. Various labeling/measuring can take place on these tickets, like adding the feature they\u0026rsquo;re associated with, the estimated work hours to complete the feature, and more.\nTo Do Tickets in to-do are in the queue for the team\u0026rsquo;s current sprint. The team commits to completing a given amount of tickets in the coming sprint during the \u0026ldquo;Planning\u0026rdquo; meeting.\nDeveloping Tickets moved to developing are being actively worked on by the person assigned to them.\nGit Action Before any coding occurs, pull down the latest version from \u0026ldquo;origin/master\u0026rdquo;. Then, after coding is finished, create a new branch with a name corresponding to your ticket. Commit, push to origin, and create a pull request in Github.\nCode Review Tickets in code review are having their associated code (or design) reviewed. A team member will look at the pull request on Github and see that the code is well formed, doesn\u0026rsquo;t have obvious bugs, and accomplishes what it set out to do. If necessary, changes are suggested, and the ticket is sent back to development.\nGit Action If the code passes review, the pull request is approved and the branch is merged into master.\nQuality Assurance Tickets in quality assurance are being checked to make sure the user experiences what the ticket was set out to accomplish. If there\u0026rsquo;s bugs or missing functionality, send it back to development. ####Git Action Pull the merge commit from origin/master for testing.\nDone: Tickets here are done.\n"
},
{
	"uri": "/tech-department/workshops/survey-design/",
	"title": "Survey design",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/agile-scrum/",
	"title": "Agile &amp; Scrum",
	"tags": [],
	"description": "",
	"content": " NCIT Units 114059 \u0026amp; 114051 Definition of Agile: Agile project management is an iterative and incremental approach to delivering requirements throughout the project life cycle. At the core, agile projects should exhibit central values and behaviours of trust, flexibility, empowerment and collaboration.\nRead and watch the below: Read: The Agile Manefesto | Read: The 12 Agile Principles\nWatch: What is Agile?\nDefinition of Scrum Scrum (n): A framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum is:  Lightweight\n Simple to understand\n Difficult to master\n  Scrum is not a process, technique, or definitive method. Rather, it is a framework within which you can employ various processes and techniques.\nThe Scrum framework consists of Scrum Teams and their associated roles, events, artifacts (documents), and rules. Each component within the framework serves a specific purpose and is essential to Scrum’s success and usage.\nThe essence of Scrum is a small team of people. The individual team is highly flexible and adaptive. These strengths continue operating in single, several, many, and networks of teams that develop, release, operate and sustain the work and work products of thousands of people.\nWatch: Introduction to Scrum\n##Scrum Values When the values of commitment, courage, focus, openness and respect are embodied and lived by the Scrum Team, the Scrum pillars of transparency, inspection, and adaptation come to life and build trust for everyone. The Scrum Team members learn and explore those values as they work with the Scrum events, roles and artifacts.\nSuccessful use of Scrum depends on people becoming more proficient in living these five values. People personally commit to achieving the goals of the Scrum Team. The Scrum Team members have courage to do the right thing and work on tough problems. Everyone focuses on the work of the Sprint and the goals of the Scrum Team. The Scrum Team and its stakeholders agree to be open about all the work and the challenges with performing the work. Scrum Team members respect each other to be capable, independent people.\nWatch: SCRUM: Twice the Work, Half the Time\n"
},
{
	"uri": "/tech-department/syllabuses/online-learning-and-bootbamp/",
	"title": "Online Learning and bootcamp",
	"tags": [],
	"description": "",
	"content": " Month -1: Online Learning and Bootcamp During the application process, we ask prospective recruits to learn basic python with an introduction to data management and visualisation with pandas, numpy and matplotlib. In the screening process, they also complete aptitude (literacy, numeracy, logical thinking, problem solving, statistical understanding, and sequencing) and personality tests (grit, resilience, empathising and systemising, agreeableness, openness to new experience, emotional stability, conscientiousness and intellect/imagination). Those who perform well on the aptitude tests, are a good personality fit for work professionalism, and are able to learn new skills on their own, are invited for an interview, and a selection of interviewees are invited bootcamp.\nDuring bootcamp, the final stage of of Umuzi’s selection process, the applicants continue with online learning, presenting the results of their work at the end of the bootcamp. In addition to these technical challenges, we also have a series of teamwork challenges to learn how they communicate within a team and work under pressure; as well as individual tasks to assess ability to follow instructions, control impulsive reactions and plan actions. If the applicant performs well during bootcamp, they are invited to join Umuzi as a recruit.\n"
},
{
	"uri": "/tech-department/topics/apis/basics/",
	"title": "API basics",
	"tags": [],
	"description": "",
	"content": "Please read the following content:\n What is an API What is a RESTful API  You\u0026rsquo;ll also need to know a bit about JSON\n Intro to JSON Using JSON in JavaScript Using JSON in Python  The following tools are useful for manually playing with api:\n curl Postman  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/apis-with-node/",
	"title": "APIs and Node",
	"tags": [],
	"description": "",
	"content": " Build a restful API with node  "
},
{
	"uri": "/tech-department/projects/tdd/password-checker/part2/",
	"title": "Add logging to password checker",
	"tags": [],
	"description": "",
	"content": "In part one of this excercise you created two functions. Now you are going to upgrade that program by adding some logging capabilities.\n Whenever passwordIsOk returns true, log the following message  User password is ok  Otherwise:\nUser password is ok  The log level of these messages should be debug. Make sure that your messages get printed to the standard output / terminal / console.\nTake note, we aren\u0026rsquo;t actually logging the user\u0026rsquo;s password. In general you want to avoid logging sensitive information.\n Whenever an exception is raised by passwordIsValid then log the exact error message.   The log level should be error The log should be printed to the standard output / terminal / console Error logs should also be stored in a file called errors.log Your debug logs SHOULD NOT be inside the error.log file Make sure that you update your .gitignore so that the error.log file is not in your repo  Please take note: All your previous tests should all pass.\n"
},
{
	"uri": "/tech-department/projects/linux/advanced/",
	"title": "Advanced Linux challenges",
	"tags": [],
	"description": "",
	"content": " Task 1 User environment  Use echo to display Hello followed by your username. (use a bash variable!) Create a variable myName with a value containing your full name. Copy the value of $LANG to a new variable called $MyLANG. List all current shell variables. Create a nodejs/python script that fetch all created variable and prints/logs them out  Resources  https://dzone.com/articles/linux-environment-variables https://codeburst.io/how-to-create-shortcut-commands-in-the-terminal-for-your-mac-9e016e25e4d7  Task 2 Bash and basic scripting  Write a bash script that prints Welcome to my world! on the screen Modify the shell script from point (1) to include a variable. The variable will hold this valuee Welcome to my world! Store the output of the command hostname in a variable. Display This script is running on _. where _ is the output of the hostname command. Write a shell script to check to see if the file “file_path” exists. If it does exist, display “file_path passwords are enabled.” Next, check to see if you can write to the file. If you can, display “You have permissions to edit “file_path.””If you cannot, display “You do NOT have permissions to edit “file_path”” Write a shell script that displays man, bear, pig, dog, cat and sheep on the screen with each appearing on a separate line. Try to do this in as few lines as possible. Write a shell script that prompts the user for a name of a file or directory and reports if it is a regular file, a directory, or another type of file. Also perform an ls command against the file or directory with the long listing option. If that doesn\u0026rsquo;t make sense please try these on: ls --help and man ls Modify the previous script to that it accepts the file or directory name as an argument instead of prompting the user to enter it. Write a shell script that displays, This script will exit status 0. Be sure that the script does indeed exit with a 0 exit status. Write a shell script that accepts a file or directory name as an argument. Have the script report if it is reguler file, a directory, or another type of file. If it is a directory, exit with a 1 exit status. If it is some other type of file, exit with a 2 exit status.  Resources  https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php https://www.taniarascia.com/how-to-create-and-use-bash-scripts/  "
},
{
	"uri": "/tech-department/workshops/agile-recap/",
	"title": "Agile Recap",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;re just about to go onto your product teams. Well Done You!\nBefore you get cracking with your next Umuzi adventure we need to quickly recap what it means to be agile within the context of a dev team.\n"
},
{
	"uri": "/tech-department/workshops/agile-scrum/",
	"title": "Agile and Scrum",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/android/android-application-lifecycles/",
	"title": "Android Application Lifecycle",
	"tags": [],
	"description": "",
	"content": " The Android Application Lifecycle refers to how pages and the app handles navigation and the state of the app.\nThe various states in an App\u0026rsquo;s lifecycle can be utilised to maintain the state of the app you would like to keep whilst also allowing the app to clear non-required pages and data from memory to optimise performance.\nActivity Lifecycle Here is some documentation explaining each stage in the lifecycle and when it is called in an App.\nYou can also view this Video.\nFragment Lifecycle Fragments can be thought of as screens within a screen. A Fragment can take up a portion of the user interface on the screen.\nThese Fragments also have their own lifecycle that should be accounted for. You can read more about that here.\n"
},
{
	"uri": "/tech-department/topics/android/android-self-learning/",
	"title": "Android learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your Android development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nSome of our favourite Android resources across multiple mediums One of the most powerful mediums in getting started with Android development is online video courses/tutorials. What is extremely important is to code along with the videos. You can always rewind if you feel like you\u0026rsquo;ve missed something.\nUdacity Udacity consists of a wide range of videos spanning multiple programming languages and is free to sign up for. While there are paid courses, the free courses are more than enough to get you started.\nLook out for the following:\nKotlin bootcamp for programmers by Google.\nThe bootcamp might not be Android specific, but will assist with familiarising yourself with Kotlin and will help in getting to know the syntax and structure of the language.\nDeveloping Android apps with Kotlin by Google.\nAdvanced Android with Kotlin by Google.\nMake sure to start off with the simpler bootcamp courses before jumping into the advanced courses. These courses were designed by Google and provide videos along with documentation on each section.\nUdemy Similar to Udacity, Udemy consists of online courses. While most are paid courses, they have regular specials in which a course can be purchased for R100 - R200.\nThe complete Android Kotlin developer course.\nKotlin Android development masterclass.\nYoutube A simple search for \u0026ldquo;Kotlin android\u0026rdquo; on youtube will already show you multiple short tutorial videos, spanning from the simplest- to the most complicated- examples.\nSearch for Android Kotlin videos.\nAs powerful as youtube can be, it relies on one\u0026rsquo;s knowledge in knowing what to search for. The courses listed above can assist in gaining the required knowldge to tackle this problem.\nAndroid documentation When it comes to all things Android you can find most of what you need on the Android developer website.\nFor more information regarding User Interface design, Tutorialspoint and the Android developer website have some great pages that drill down into the various components and layouts.\n"
},
{
	"uri": "/tech-department/topics/android/ui-resources/",
	"title": "Android user interface resources",
	"tags": [],
	"description": "",
	"content": " When creating an Android application, the user experience plays a big role in the way a user experiences the app. These resources are to describe the various elements available for creating an Android apps user interface.\nAndroid UI controls Here is a list of various Android controls that can be used along with descriptions of each and some code samples.\nAndroid UI layouts When developing a screen on an application, the UI elements are placed inside layouts. Layouts are essentially containers for your controls.\nEach layout has it\u0026rsquo;s own characteristics when it comes to placing controls on the screen.\nYou can find information on the various Android layouts here.\nOne of the more newly developed and powerful layouts is a the ConstraintLayout.\nMaterial design Material design refers to the best practices that should be kept in mind when creating the various screens in your application.\nFor more extensive information on the topic, you can find various articles and documentation here.\nUdacity has a great free course on material design named: Material design for Android Developers, created by employees from Google.\nNote: For optimal performance, it is advised to refrain from nesting layouts as much as possible.\n"
},
{
	"uri": "/tech-department/topics/android/",
	"title": "Androids",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/android/",
	"title": "Androids",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/oop/animals/",
	"title": "Animals",
	"tags": [],
	"description": "",
	"content": "  PROJECTS: Animals Part 1. OOP basics   PROJECTS: Animals Part 2. Adding Tests   "
},
{
	"uri": "/tech-department/projects/oop/animals/part1/",
	"title": "Animals Part 1. OOP basics",
	"tags": [],
	"description": "",
	"content": " Project structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main └── java ├── Animal.java \u0026lt;-------- names are important ├── Cat.java \u0026lt;-------- names are important ├── Dog.java \u0026lt;-------- names are important ├── Home.java \u0026lt;-------- names are important └── MainProgram.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions This Challenge should test topics from your OOP knowledge\n Encapsulation Inheritance Polymophism Composition  In this challenge you will create 3 classes\n Super class called Animal Dog and Cat class which both extends Animal class (a dog is an animal and a cat is an animal) Dog and Cat class should only have 1 function, which is their own implementation of the sound() function. This is polymorphism a Home class. But we\u0026rsquo;ll talk about that later\u0026hellip;  // Java ? dog = new Dog() dog.eat() // -\u0026gt; 'Rax eats' dog.sounds() // -\u0026gt; 'Dog barks' ? cat = new Cat() cat.eat() // -\u0026gt; 'Stormy eats' cat.sounds() // -\u0026gt; 'Cat meows'  // Javascript var dog = new Dog(); dog.eat(); // -\u0026gt; 'Rax eat' dog.sounds();// -\u0026gt; 'Dog barks' var cat = new Cat(); cat.eat();// -\u0026gt; 'Stormy eats' cat.sounds();// -\u0026gt; 'Cat meows'  Now let\u0026rsquo;s add composition. Make a new class called Home. Lots of people have dogs and cats in their homes. Home should have a function called adoptPet that takes any Animal as an input. The new pet should be stored in the Home object in an array/list. The Home object should also have a function called makeAllSounds. It should work like this:\n// Java Home home = new Home() ? dog1 = new Dog() ? dog2 = new Dog() ? cat = new Cat() home.makeAllSounds() // this doesn't do anything home.adoptPet(dog1) home.makeAllSounds() // this prints: // Dog barks home.adoptPet(cat) home.makeAllSounds() // this prints: // Dog barks // Cat meows home.adoptPet(dog2) home.makeAllSounds() // this prints: // Dog barks // Cat meows // Dog barks  // Javascript var home = new Home(); var dog1 = new Dog(); var dog2 = new Dog(); var cat = new Cat(); home.makeAllSounds();// this doesn't give/return any result/data home.adoptPet(dog1); home.makeAllSounds(); // this prints : // Dog barks home.adoptPet(cat); home.makeAllSounds(); // this prints : // Dog barks // Cat meows home.adoptPet(dog2); home.makeAllSounds(); // this prints : // Dog barks // Cat meows //Dog barks  Up for a Challenge? This section is not compulsory. If you do this we\u0026rsquo;ll think you\u0026rsquo;re cool.\nAdd some functionality to adoptPet so that an error/exception gets raised if you try to adoptThe same pet twice\neg:\nhome.adoptPet(dog1) // totally ok home.adoptPet(dog1) // not ok at all  "
},
{
	"uri": "/tech-department/projects/oop/animals/part2/",
	"title": "Animals Part 2. Adding Tests",
	"tags": [],
	"description": "",
	"content": " In this challenge you will update your current Animals project and add unit tests to the project\nProject structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main | └── java | ├── Animal.java \u0026lt;-------- names are important | ├── Cat.java \u0026lt;-------- names are important | ├── Dog.java \u0026lt;-------- names are important | ├── Home.java \u0026lt;-------- names are important | └── MainProgram.java \u0026lt;-------- names are important └── test └── java ├── CatTest.java \u0026lt;-------- names are important └── DogTest.java \u0026lt;-------- names are important ... other logical things  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions You\u0026rsquo;ll be using JUnit.\n Create a class called AnimalTests Update Animal super class eats() function to return a String, \u0026ldquo;Food\u0026rdquo;. Update Dog class sounds() function to return a String, \u0026ldquo;Bark\u0026rdquo;. Update Cat class sounds() function to return a String, \u0026ldquo;Meow\u0026rdquo;.  // Java Dog dog = new Dog() dog.eats() // -\u0026gt; 'Food' dog.sounds() // -\u0026gt; 'Barks' Cat cat = new Cat() cat.eat() // -\u0026gt; 'Food' cat.sounds() // -\u0026gt; 'Meow'  Now let\u0026rsquo;s add our first JUnit test to our AnimalTests. The class should have the following methods TestDogSound(), TestDogEats(), TestCatSound() and TestCatEats().Each method should have the @Test tag placed above it. The tests should work as follows.\n// Java //Dog Tests Test -\u0026gt; Does dog eat Food should Pass Test -\u0026gt; Does dog eat food should Fail //Cat Tests Cat cat = new Cat(); Test -\u0026gt; Does cat Barkark should Fail Test -\u0026gt; Does cat Meow should Pass Test -\u0026gt; Does cat eat meat should Fail Test -\u0026gt; Does cat eat Food should Pass Test -\u0026gt; Does cat eat food should Fail  Up for a Challenge? This section is not compulsory. If you do this we\u0026rsquo;ll think you\u0026rsquo;re cool.\nAdd some functionality to TestDog() and TestCat() so that the tests aren\u0026rsquo;t case sensitive\neg:\nTest -\u0026gt; Does dog eat Food -\u0026gt; Pass Test -\u0026gt; Does dog eat food -\u0026gt; Pass  "
},
{
	"uri": "/tech-department/topics/apis/",
	"title": "Apis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/asserive-programming-tricks-for-pandas/",
	"title": "Assertive programming and Pandas",
	"tags": [],
	"description": "",
	"content": "Just talk about some basic things peeps might want to do\n assert that a column only has positive values assert dimensions are ok assert column names are as expected assert that there are no null values assert that there are no duplicate columns and row entries assert that index and target variable columns have correct data type  "
},
{
	"uri": "/tech-department/projects/basic-flow-control-katas-assertive/",
	"title": "Assertive programming kata",
	"tags": [],
	"description": "",
	"content": " These katas are a bit harder than the last bunch. Make use of assertions to help make sure that your code is doing the right thing, and to add readability.\nExercise: Morse code Create two functions:\nlettersToMorseCode morseCodeToLetters  eg:\nlettersToMoreseCode(\u0026quot;Hi there\u0026quot;) // should return // \u0026quot;.... .. / - .... . .-. .\u0026quot;  Include the following assertions in your code:\n assert that the output and input both have the same number of characters represented assert that there are the right number of spaces represented in the output  Make sure that when you do this, your code remains clean and DRY. DRY - it\u0026rsquo;s a thing. Google it.\nResources  https://en.wikipedia.org/wiki/Morse_code https://morsecode.scphillips.com/translator.html  Remarks Admittedly this kata is a little bit contrived. Assertions are great for adding runtime checks to values and adding documentation as code.\nFor a problem like this one, unit tests are more appropriate.\nUp for a challenge? Add unit tests to your code. Leave the asserions in there just so that we can see that you know how to hit the requirements we laid out. But if you have some passing tests as well that would be sweet.\n"
},
{
	"uri": "/tech-department/topics/python-specific/automated-testing-with-pytest/",
	"title": "Automated Testing in Python",
	"tags": [],
	"description": "",
	"content": " There are a many of different test frameworks and test runners that Python allows. The main ones people tend to use are\n unittest pytest  These are both great tools with pros and cons. We have chosen to teach pytest for our course. But don\u0026rsquo;t be scared of different frameworks!\nDifferent testing tools have different ways of achieving similar goals. Make sure you understand why we test, what to test and when to test.\nIf you end up working on a project that uses unnittest instead of pytest then use unittest. Eg: Django projects are traditionally tested using unittest instead of Pytest so there is a bunch of cool Django tooling around that, which is totally fine.\nRead and understand the following:\n https://github.com/shashikumarraja/pytest_tutorial https://automationpanda.com/2017/03/14/python-testing-101-pytest/ Writing Tests Improve your python understanding: Unit testing  And here are the pytest docs. The official documentation is a source of the latest and greatest straight-from-the-horses-mouth knowledge.\nVideos Pytest is the nicest python testing framework currently out there, but there aren\u0026rsquo;t so many videos on it, so here are some videos on unit testing in javascript (but they provide a great explanation of why and how you need to test your code) and unit testing with python\u0026rsquo;s unittest.\n Fun Fun Function: Unit testing in Javascript unittest  Pytest directory structure We will expect your project to follow industry-recognised best practices when you submit them to us.\nTake a look atthis repo. We\u0026rsquo;ll require that you follow this structure when you submit your work.\n"
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/automated-testing-pandas-and-numpy/",
	"title": "Automated Testing pandas and numpy",
	"tags": [],
	"description": "",
	"content": "Testing and data can get a little tricky. Check these out:\nAutomate your data analysis testing (Stephen Childs) https://www.youtube.com/watch?v=ovvU41ve1FQ\nhttps://penandpants.com/2014/10/07/testing-with-numpy-and-pandas/\nDatacamp course covering the use of Unit tests in Python for Data Science https://www.datacamp.com/courses/unit-testing-for-data-science-in-python\n"
},
{
	"uri": "/tech-department/projects/oop/bank_accounts/",
	"title": "Bank Accounts",
	"tags": [],
	"description": "",
	"content": " As usual: TDD please\npart 1: Bank Account A Bank Account has a balance, an interest rate and a monthly fee.\nFor example if a person has an interest rate of 12% (which is totally unrealistic but make the numbers easier) and they have R1000 in their bank account then they will receive (R1000 x 12% / 12) after one month of saving. That means they earned R10 in interest. Now if their monthly fee on that account is R50 then their final balance after 1 month is R1000+R10-R50 = R960.\n Create a class called BankAccount. it should be constructed with the necessary parameters described above. add a function to your bank account class called finishMonth(js) or finish_month(python). This function should update the balance accordingly The balance of a bank account can also change if a deposit or withdrawal is made. Create a function called deposit and another one called withdraw  part 2: Bank Create a class called Bank. A Bank contains many bank accounts. A bank associates each bank account with a 10 digit number known as a bank account number. In OOP, this is called encapsulation.\nCreate the following functions on your Bank class:\nJavaScript:\n withdraw(bankAccountNumber,amount) deposit(bankAccountNumber,amount) transfer(fromBankAccountNumber,toBankAccountNumber, amount)  Python:\n withdraw(bank_account_number,amount) deposit(bank_account_number,amount) transfer(from_bank_account_number,to_bank_account_number, amount)  Part 3: Customers This part is a little bit advanced. Stop and think before you write any code. Have a plan. Maybe even draw a picture of your plan\nCreate a class called Customer. A customer can be associated with multiple bank accounts. Each customer also has a secret password. The customer should be able to update their password through use of a setPassword(js) or set_password(python) function.\nWhenever money is taken out of a bank account then the relevent customer\u0026rsquo;s secret password must be checked. You don\u0026rsquo;t need a special password when depositing money.\nUpdate your Bank functions to be like this:\nJavaScript:\n withdraw(bankAccountNumber,amount,secretPassword) deposit(bankAccountNumber,amount) transfer(fromBankAccountNumber,toBankAccountNumber,amount,secretPassword)  Python:\n withdraw(bank_account_number,amount,secret_password) deposit(bank_account_number,amount) transfer(from_bank_account_number,to_bank_account_number,amount,secret_password)  If a password is required and the wrong one is provided then raise an error that says wrong password.\nFor now just keep it simple. Just store Customer\u0026rsquo;s passwords in plain text in a variable on the appropriate object. Of course in real life, password managment and storage is kinda tricky. Here\u0026rsquo;s a nice article from Mozilla that will give you some background on how to do it the right way.\n"
},
{
	"uri": "/tech-department/workshops/python-specific/basic-intro-to-oop/",
	"title": "Basic Intro to OOP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/basic-intro-to-oop/",
	"title": "Basic intro to oop with IntelliJ",
	"tags": [],
	"description": "",
	"content": "This is a live coding workshop. To pull it off you need a computer with intelliJ installed. Ideally you should have already started a gradle project before the workshop begins because it takes a little bit of time.\nThe following class hierarchy is useful for explaining this stuff:\n base class Car  constructor takes a colour position starts at 0 drive function increments position  Bakkie inherits from Car RaceCar inherits from Car  these are faster thn bakkies default colour   Cover the following topics:\n Java requires all executable code to be wtrapped in a class Difference between classes and objects How to instantite different objects, make 2 cars with different colours, chow that their attributes are independent Inheritance and overrides  Also be sure to cover clean coding best practices, there is a lot of kak on the internet\n Flat is better than nested readability counts reusability counts dont put your main method inside a class that you intend to instantiate dont put Bakkie inside the Car or RaceCar class. It gets its own file use sensible names. names matter  "
},
{
	"uri": "/tech-department/workshops/redux_intro/",
	"title": "Basic introduction to Redux",
	"tags": [],
	"description": "",
	"content": " Redux is  marketed as a state managment tool. It can be used to manage state an a whole lot more usually used with React or other frontend web framework concepts are similar to the Command Pattern. This is an OOP design pattern that unlocks a lot of stuff beyond simple state managment  Resources The basics:\n This tutorial is really good: https://redux.js.org/basics/basic-tutorial This logger middleware helps: https://github.com/LogRocket/redux-logger  If you want to start using redux with asyncronous code (eg ajax requests) then you\u0026rsquo;ll need to use another tool:\n for simple stuff: https://github.com/reduxjs/redux-thunk for complicated side-effect models something like this is probably better: https://github.com/redux-saga/redux-saga  Concepts There are a few concepts that are super important\nStore Lets say you are making a TODO application. This application has a beautiful frontend that automatically renders your todo items from a datastructure. Something like this:\nconst store = { todos : [ {title: \u0026quot;get groceries\u0026quot;, done: false}, {title: \u0026quot;call mom\u0026quot;, done: true}, {title: \u0026quot;learn Redux\u0026quot;, done: false}, {title: \u0026quot;walk dog\u0026quot;, done: false}, ] }  In redux, the store is immutable. We\u0026rsquo;ll see what that implies when we talk about reducers a little later.\nTools like React make it easy to take an application state and turn it into widgets but we wont get into that just yet. You can do this with pure vanilla JavaScript by looping over our todos and simply appending DOM elements.\nAction An action is also a JSON object. Here are some examples:\n{type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;} {type: \u0026quot;DELETE_TODO\u0026quot;, index: 2} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: true} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: false}  Given the example \u0026ldquo;store\u0026rdquo; we set up above can you see what effects these actions should have? What does it look like we are trying to do here?\nNow there is some weird language around this. If you want Redux to execute an action then you dispatch the action. Then Redux should update the store through use of a reducer (we\u0026rsquo;ll get to those soon).\nSo if we wanted Redux to actually add a thing to our todo list we would do something like:\ndispatch({type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;})  This is kinda a pain to write out so usually instead of doing thigs like this we make use of action creators. Eg:\nconst ADD_TODO = \u0026quot;ADD_TODO\u0026quot; function addTodo(title){ //action creator // validation maybe return {type: ADD_TODO, title: title} } dispatch(addTodo(\u0026quot;learn redux\u0026quot;))  Reducer Reducers are the things that execute actions on the state. Here is an example following from the above:\nconst initialState = { // note the use of const. This is immutable todos : [1,2,3], stuff : \u0026quot;things\u0026quot; } function theReducer(state = initialState, action){ // {type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;} switch(action.type){ case ADD_TODO: return { ...state, // we copy all the things using some ES6 syntax todos: [...state.todos, {title: action.title, done:false }] } // { // todos : [1,2,3,{type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;}], // stuff : \u0026quot;things\u0026quot; //} case DELETE_TODO: return { stuff } case SET_DONE: return { otherStuff } default: // nothing changes return state } }  A helloworld example We are using ES6 syntax\nBut what about KISS? KISS == Keep It Simple, Stupid\nThis does seem like a complicated way to do a simple thing\u0026hellip; Think about this:\n actions are objects. That means we can store them and track them in different ways. actions are executed in specific ways and have predictable results the hard \u0026ldquo;thinking\u0026rdquo; of your application is all held in reducers so that makes testing easy and consistent we have a history of every hange made to the state of an application  Look up the \u0026ldquo;Command Pattern\u0026rdquo; . Redux isn\u0026rsquo;t exactly the same but very similar. Therefore there are similar applications.\n Frontend development: different buttons, inputsand widgets dispatch different actions in a predictable way Actions can be grouped. Meaning we can dispatch one action that dispatches a whole lot of different actions Macro recording. We can record the actions a user takes so that we can replay them later Reducers can be in a seperate code-base. we can send actions over a network and dispatch them elsewhere, we can send the same action to multiple computers to allow parallel processing undo/redo functionality becomes trivial feedback: if a number of actions need to be completed in order to complete a large task then we can track the completion of those actions and update a progress bar Actions can be added to a task queue instead of being dispatched immediately transactional behavior: you can have an action like {type: TRANSACTION_BEGIN} and then at some later stage {type: TRANSACTION_ROLLBACK} can be used to undo all the changes that happened in the transaction  Industry Redux is mostly used in the context of React. It is used for frontend development. But there is so much more it could do.\n"
},
{
	"uri": "/tech-department/projects/linux/beginner/",
	"title": "Beginner Linux challenges",
	"tags": [],
	"description": "",
	"content": " Submission guidelines While you work through this project you will save your script commands in a number of files called shell scripts, name them by task and sub task number i.e. 1-2, they have the extension .sh. You\u0026rsquo;ll be handing those in later. In general we use a tool called Git and a platform called Github for project submissions but this will be covered later in the course.\nTask 1 : Basic Task Open a linux terminal. Now do the following from the command line.\n type in ls and press enter. What do you see? What does this mean? type in pwd and press enter. What do you see? What does this mean? Make a new directory called workspace then cd into your new directory type in ls and press enter. What do you see? What does this mean? Make a new file called README.md (you can use the touch command to do this) Make a copy of README.md, name your copy CHANGELOG.md  Resources  Linux basic commands  Task 2 : Absolute and Relative Paths Create an empty file named exercise.md and move this file to the /tmp directory, using a relative pathname. Then, delete this file using an absolute pathname.\nResources  Paths in linux Absolute and Relative Paths (video)  Task 3 : cat commands  Create 3 files namely umuzi.md, recruits.md and cohort.md. Fill all 3 files with contents of your choice. Maybe some nice poems about you MUB experience. Write a script that concatenates the content of umuzi.md, recruit.md, cohort.md and displays the result on the screen. Write a script that takes the content of umuzi.md, cohort.md and recruits.md to print/store the output into a new file named summary.md. use the command line to append the words \u0026ldquo;The End\u0026rdquo; to summary.md. Be careful not to overwrite the exiting contend  Resources  Standard File Streams (video) The cat commands  Task 4 : The locate command  Write a script to help you locate a file named umuzi Write a second script that will search for the same file and send the result of the search to a file named search_result.md  Resources  http://bit.ly/2GPWP9E http://bit.ly/2IUg2KH  Task 5 The locate command cont..  Create a file within Documents directory, add to is a file named pad.md change the working directory to Desktop, then create a folder and name it work copy pad.md to the currently working directory as pad_copy.md update the database used by locate by running locate updatedb. change the working directory to the previous one (cd -) use locate to find pad_copy.md  Note: for each instruction write a script and save it under this task\nTask 6 Find commands  Write a script to find all files ending with \u0026lsquo;pdf\u0026rsquo; on your computer Write a second command that takes the result of the previous search and copy into a folder of your choice. Write a command to display files that where modified today.  Resources  https://www.geeksforgeeks.org/find-command-in-linux-with-examples/ https://unix.stackexchange.com/questions/70455/how-to-run-find-exec-script  Task 7 Text editor  Using nano text editor create a file named my_bio.md Save the file and close the editor Create a folder named my_files and move my_bio.md within.  Resources  https://www.lifewire.com/beginners-guide-to-nano-editor-3859002  "
},
{
	"uri": "/tech-department/workshops/big-picture-web-dev/",
	"title": "Big Picture of Web Dev",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/first-personal-website/",
	"title": "Build your first personal website",
	"tags": [],
	"description": "",
	"content": " For the learnership you will create a website with your CV and a portfolio of your work. Create the website and host it on Github. You will be expected to keep your portfolio up to date throughout the learnership.\nThis portfolio is important because the Umuzi Plug team will make use of it when finding you work-experience gigs and/or full time employment. Please take your professional image seriously now.\nInstructions Create a personal website to showcase your talents and ambitions.\nThe content and information you choose to display is up to you. There should be some information about your skills, interests, and previous experience, as well as information on how to get in touch with you. Think about the user experience when designing your layout and navigation.\nThe HTML and CSS should be developed in a logical way with good naming conventions that would allow another developer to easily understand and build upon your code.\nYour web page files and folders should be organised and named in a logical manner.\nOnce you have finished your design and are satisfied with the style and content, upload the website to be hosted on GitHub Pages.\nRequirements:\n Website can be a single page or have multiple pages (the structure is up to you), but it must contain the following information:  About me Skills (Your tech stack: the languages and tools you use) Projects/Portfolio Contact (social media, email, phone, etc)  Website must be responsive to different screen sizes - use a mobile-first approach!  Use CSS Grid (see tutorials below) to design your site and make it responsive  Website must be developed using HTML and CSS Grid with a logical structure and naming conventions in your code Some basic JavaScript/Jquery should be integrated into the site in some way to make it more interactive and user-friendly Feel free to use icons, colours, pictures or organograms if you need to Create a board and make use of Trello which will assist you in breaking down your tasks  Links  How to make a GitHub Page : https://pages.github.com/ CSS Grid: https://scrimba.com/g/gR8PTE (Screencast tutorials) https://css-tricks.com/snippets/css/complete-guide-grid/ (more info) Building a Data Science Portfolio (https://www.dataquest.io/blog/build-a-data-science-portfolio/) Web Developer Portfolios to inspire you (https://medium.freecodecamp.org/15-web-developer-portfolios-to-inspire-you-137fb1743cae)  "
},
{
	"uri": "/tech-department/workshops/business-intelligence-tools/",
	"title": "Business intelligence tools",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/clean-code/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": "Watch this: Clean Code: Fundamentals, Episode 1. Clean Code by Uncle Bob (Robert C. Martin) . He literally wrote the book on clean code (and it\u0026rsquo;s a very good book). The guy is a legend.\n  TOPICS: General Clean Code Guidelines   TOPICS: Clean Code for Data Science   TOPICS: Clean Code For JavaScript   TOPICS: Clean Code for Java   "
},
{
	"uri": "/tech-department/topics/clean-code/kotlin/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": "Read through this documentation on the Android developers website regarding Kotlin best practices.\n"
},
{
	"uri": "/tech-department/workshops/clean-code/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": " “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~ Martin Fowler\n "
},
{
	"uri": "/tech-department/workshops/general-coding-best-practices/",
	"title": "Clean Code (language agnostic)",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/clean-code/java-script/",
	"title": "Clean Code For JavaScript",
	"tags": [],
	"description": "",
	"content": " Maintaining someone else’s code is not a smooth process. It takes time to observe the project ( such as the folder structure, naming, dependencies, scripts etc.), to find the pattern and develop the new feature in harmony and consistency with the existing code. Different developers use different styles which are derived from their different tastes. They may work on a project together or pick up someone else’s work. Which in both cases, having a common ground is essential.\nJavaScript Naming Conventions There is an introduction about JavaScript Naming Conventions here with examples, which gives you the common sense when it comes to naming variables, functions, classes or components in JavaScript. No one is enforcing these naming convention rules, however, they are widely accepted as a standard in the JS community.\nUse ESLint ESLint is a quality tool that inspects code and warns a developer about potential problems. It is available online and can also be integrated into several development environments, so errors will be highlighted when writing code. It also has rules that relate to better ways of doing things to help you avoid problems.\n"
},
{
	"uri": "/tech-department/topics/clean-code/data-science/",
	"title": "Clean Code for Data Science",
	"tags": [],
	"description": "",
	"content": " Code is read more often than it is written. Notebooks, especially, are made to be looked at. Assist yourself and others by keeping your code and notebooks neat!\nNaming conventions Naming conventions and other good python practices are listed in the PEP 8 Style Guide.\nAlso see these code quality best practices.\nThe Data Science Workflow For Data Science workflow best practices, please familiarise yourself with the cookiecutter data science project and read this description of how to organise your projects using atom and Jupyter on Medium\nAdvanced git for teams Here\u0026rsquo;s a good conceptualisation of how git works in a development team. There are different ways for team to work, but this TOPICS: [MISSING title or page]gives you a great introduction.\nYou can thank me later ;)\n"
},
{
	"uri": "/tech-department/topics/clean-code/java/",
	"title": "Clean Code for Java",
	"tags": [],
	"description": "",
	"content": " Code is read more often than it is written. Notebooks, especially, are made to be looked at. Assist yourself and others by keeping your code and notebooks neat!\nNaming conventions Naming conventions and other good Java practices are listed in the Java Documentation.\nAlso see these naming conventions. Although the information on this document has not been updated in ages, the content is still relevant to the conventions that are still used today.\nWriting good Java code Look at this section of this Java tutorial to acquaint yourself with best coding practices for Java.\nAdvanced git for teams Here\u0026rsquo;s a good conceptualisation of how git works in a development team. There are different ways for team to work, but this Atlassian Git Workflow article gives you a great introduction.\nYou can thank me later ;)\n"
},
{
	"uri": "/tech-department/topics/clean-code/python/",
	"title": "Clean Code for Python",
	"tags": [],
	"description": "",
	"content": " Tabs or Spaces 4 spaces == 1 tab\nSpaces are the preferred indentation method. There are not many serious open source project uses tabs in Python code, so it is recommended that use spaces. Python 3 DISALLOWS mixing the use of tabs and spaces for indentation. Using a code formatter will make your life way easier. We recommend using Black.\nImports  Imports should usually be on separate lines:   Yes: import os import sys No: import sys, os  It\u0026rsquo;s okay to say this though:\nfrom subprocess import Popen, PIPE   Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys.path):\nimport mypkg.sibling from mypkg import sibling from mypkg.sibling import example   However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:\n from . import sibling from .sibling import example  Standard library code should avoid complex package layouts and always use absolute imports. Implicit relative imports should never be used and have been removed in Python 3.\nWhen importing a class from a class-containing module, it\u0026rsquo;s usually okay to spell this:\nfrom myclass import MyClass from foo.bar.yourclass import YourClass  If this spelling causes local name clashes, then spell them explicitly:\nimport myclass import foo.bar.yourclass  and use myclass.MyClass and foo.bar.yourclass.YourClass.\n Wildcard imports (from  import *) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn\u0026rsquo;t known in advance).  When republishing names this way, the guidelines below regarding public and internal interfaces still apply.\nStrings In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. The recommended way of writing strings is by using f strings. They allow you to add variables into a string without using + to concatenate. That improves readability.\nNormal Strings:\n\u0026quot;Hi my name is \u0026quot; + name + \u0026quot; \u0026quot; + surname + \u0026quot; and I am part of \u0026quot; + company  F strings:\nf\u0026quot;Hi my name is {name} {surname} and I am part of {company}\u0026quot;  PEP 257 describes good docstring conventions. Note that most importantly, the \u0026ldquo;\u0026rdquo;\u0026rdquo; that ends a multiline docstring should be on a line by itself:\nNaming Conventions The naming conventions of Python\u0026rsquo;s library are a bit of a mess, so we\u0026rsquo;ll never get this completely consistent \u0026ndash; nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred.\nClass Names Class names should normally use the CapitalizedWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapitalizedWords convention used only for exception names and builtin constants.\nPackage and Module Names Python packages should have short, all-lowercase names, although the use of _underscores_ is discouraged. When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. _socket).\nFunction and Variable Names Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that\u0026rsquo;s already the prevailing style (e.g. threading.py), to retain backwards compatibility.\nConstants Constants are usually defined on a module level and written in UPPERCASE with underscores separating words. Examples include MAX_OVERFLOW and TOTAL.\nNames to Avoid Never use the characters \u0026lsquo;l\u0026rsquo; (lowercase letter el), \u0026lsquo;O\u0026rsquo; (uppercase letter oh), or \u0026lsquo;I\u0026rsquo; (uppercase letter eye) as single character variable names. In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use \u0026lsquo;l\u0026rsquo;, use \u0026lsquo;L\u0026rsquo; instead.\nComments Block Comments Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment). Paragraphs inside a block comment are separated by a line containing a single #.\nInline Comments Use inline comments sparingly.\nAn inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space. Inline comments are unnecessary and in fact distracting if they state the obvious. Don\u0026rsquo;t do this:\nx = x + 1 # Increment x  But sometimes, this is useful:\nx = x + 1 # Compensate for border  Documentation Strings Conventions for writing good documentation strings (a.k.a. \u0026ldquo;docstrings\u0026rdquo;) are immortalized in PEP 257.\n Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the def line. PEP 257 describes good docstring conventions. Note that most importantly, the \u0026ldquo;\u0026rdquo;\u0026rdquo; that ends a multiline docstring should be on a line by itself:   \u0026quot;\u0026quot;\u0026quot; this is the docstring for the module\u0026quot;\u0026quot;\u0026quot; module.py \u0026quot;\u0026quot;\u0026quot; this is not a docstring, this is a mistake\u0026quot;\u0026quot;\u0026quot; class Whatever: \u0026quot;\u0026quot;\u0026quot; classes can have docstrings too\u0026quot;\u0026quot;\u0026quot; def stuff( ...): \u0026quot;\u0026quot;\u0026quot;fnctions can have docstrings\u0026quot;\u0026quot;\u0026quot; def moar_Stuff(): \u0026quot;\u0026quot;\u0026quot;module level functions too\u0026quot;\u0026quot;\u0026quot;  "
},
{
	"uri": "/tech-department/topics/clean-code/xml/",
	"title": "Clean Code for XML",
	"tags": [],
	"description": "",
	"content": " A XML user interface can get quite nested and complicated, which is why it is very important to write clean and easy to read code.\nAdding an element or a layout Typically in XML you mark the end of an element in the following way:\n\u0026lt;Element\u0026gt;\u0026lt;/Element\u0026gt;  this is however only necessary in a situation in which you want to place another element inside this element. Usually used for layout elements.\nexample:\n``` \u0026lt;LayoutElement\u0026gt; \u0026lt;ViewElement /\u0026gt; //This now resides within the LayoutElement. \u0026lt;/LayoutElement\u0026gt; //This is then the closing tag. ```  When you want to add an element that does not contain any View Elements or Layout Elements it is best practise to close it in the following manner:\nexample:\n``` \u0026lt;ViewElement /\u0026gt; //Note how it does not require a closing tag. ```  Adding properties to a element When adding properties to an XML element, it is important to line up each property vertically and on a new line.\nexample:\n``` \u0026lt;ViewElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; Property3=\u0026quot;Value3\u0026quot; /\u0026gt; ```  Nesting elements To assist with readability, indentations are used to indicate that an element is within another element. Each element is indented once when inside a parent element.\nexample:\n``` \u0026lt;LayoutElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; \u0026gt; \u0026lt;ViewElement Property1=\u0026quot;Value1\u0026quot; Property2=\u0026quot;Value2\u0026quot; /\u0026gt; \u0026lt;/LayoutElement\u0026gt; ```  Note: Leave one new line between elements to assist with differentating elements.\nFor more information regarding XML best practices, you can read through this documentation.\n"
},
{
	"uri": "/tech-department/workshops/clean-code-for-web/",
	"title": "Clean Code for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/code-review/",
	"title": "Code Review Feedback Notes",
	"tags": [],
	"description": "",
	"content": "Information documented in this section can be used for a few different things:\n helping junior recruits and staff members learn what to look out for certain topics will come up here that should be turned into structured topics and workshops for future recruits we will be able to take learnings from here to refine the instructions given when giving assignments out  "
},
{
	"uri": "/tech-department/department-processes/cohort_standups/",
	"title": "Cohort morning standups",
	"tags": [],
	"description": "",
	"content": " Standups happen first thing in the morning. These will usually be run by junior facilitators\nBefore standup, the facilitator will  check the calenders and make sure they are familiar with upcoming events and deadlines check slack in case there are any important messages that should be conveyed to their groups. Eg: \u0026ldquo;only half the C23Zs have submitted their rocket-surgery assignments\u0026rdquo;  During standup, the facilitator will  attendance will be checked if anyone has missed a deadline then they will be verbally warned  "
},
{
	"uri": "/tech-department/projects/github-api-consume/",
	"title": "Consume Github API",
	"tags": [],
	"description": "",
	"content": " In this project you\u0026rsquo;ll make use of Github\u0026rsquo;s awesome API. We chose Github for this project because\n you are already familiar with it it has a nice frontend so you can access te api and see the results. This means you can play and experiment the api is solidly built and a lot of people use it  Instructions First, get familar with consuming apis from the command line:\n TODO  Once that is done then follow the instructions in your language of choice:\n Java Node Python  Resources  An introduction to curl using GitHub\u0026rsquo;s API.\n Github API official docs\n  "
},
{
	"uri": "/tech-department/contact-us/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for making Open Source Software a better place !\nTODO: fix shortcode so that it doesn\u0026rsquo;t break if no internet access\nghcontributors \u0026ldquo;https://api.github.com/repos/Umuzi-org/tech-department/contributors?per_page=100\u0026quot; %}}\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/cross-validation-and-simple-linear-regression/",
	"title": "Cross-validation &amp; Simple Linear Regression",
	"tags": [],
	"description": "",
	"content": " Key topics  Simple linear regression Residuals Overfitting and underfitting Cross-validation Root Mean Square Error  Background materials Regression  Introduction to Linear Regression Simple and Multiple Linear Regression in Python Crash Course Statistics: Regression Khan Academy Engageny Algebra Topic D, Lessons 14 – 18 (Modelling relationships with a line \u0026amp; Residuals)  Overfitting and underfitting  Coursera Video  Test/ training splits and cross-validation  Test/Train Splits and Crossvalidation in Python Tutorial Google ML Training and Test Sets Video  Assignment We will predict employee salaries from different employee characteristics (or features). We are going to use a simple supervised learning technique: linear regression. We want to build a simple model to determine how well Years Worked predicts an employee’s salary. Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary Metadata. You will need the packages matplotlib, pandas and statsmodels.\nSteps and questions  Split your data into a training and test set. Leave the test set for now. Examine the training data for missing and extreme values. Create histograms to show the distribution of the variables and a scatterplot showing the relationship between Years Worked and Salary. Are the data appropriate for linear regression? Is there anything that needs to be transformed or edited first?\n Using the statsmodels package and the training data, run a simple linear regression for Salary with one predictor variable: Years Worked.\n Does the model significantly predict the dependent variable? Report the amount of variance explained (R^2) and significance value (p) to support your answer. What percentage of the variance in employees’ salaries is accounted for by the number of years they have worked?  What does the unstandardized coefficient (B or \u0026lsquo;coef\u0026rsquo; in statsmodels) tell you about the relationship between Years Worked and Salary?\n What do the 95% confidence intervals [0.025, 0.975] mean?\n Calculate the expected salary for someone with 12 years’ work experience.\n Calculate the expected salary for someone with 80 years’ work experience. Are there any problems with this prediction? If so, what are they?\n We have only looked at the number of years an employee has worked. What other employee characteristics might influence their salary?\n  Now fit your model to your test set. DO NOT BUILD A NEW MODEL ON THE TEST SET! Simply use your existing, model, to predict salaries in the test set.\n How does your model compare when running it on the test set - what is the difference in the Root Mean Square Error (RMSE) between the training and test sets? Is there any evidence of overfitting?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/projects/dags-with-airflow/",
	"title": "DAGs with Airflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/dags-with-airflow/",
	"title": "DAGs with Airflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dom-events-with-vanilla-js/",
	"title": "DOM events with vanilla JavaScript",
	"tags": [],
	"description": "",
	"content": "To see a basic demo of various event handlers take a look here. This demo has three different index.html pages. Each of them attach event handlers to the different DOM elements in different ways.\n https://gomakethings.com/listening-for-click-events-with-vanilla-javascript/ https://gomakethings.com/why-event-delegation-is-a-better-way-to-listen-for-events-in-vanilla-js/ https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events https://www.khanacademy.org/computing/computer-programming/html-css-js/html-js-dom-events/v/making-webpages-interactive-with-events https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dom-manipulation-with-vanilla-js/",
	"title": "DOM manipulation with vanilla JavaScript",
	"tags": [],
	"description": "",
	"content": "Here are a few (maybe too many) good resources o DOM manipulation in vanilla JS. Learn enough to complete your excercises and please give us feedback (or pull requests) on this page if you think any improvements can be made.\n https://www.sitepoint.com/dom-manipulation-vanilla-javascript-no-jquery/ https://www.khanacademy.org/computing/computer-programming/html-css-js#html-css-js-intro https://javascript.info/dom-navigation You\u0026rsquo;ll notice a few tasks at the end of this. Please make sure you understand them. Actually do the exercises then take a look at the solutions. https://javascript.info/dom-navigation  "
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/",
	"title": "Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": " Assignments There are several assignments on this page for you to try. The first two create static dashboards in Google Data Studio and Plotly. The third assignments features live data that updates on a regular basis.\n EASY: Using Google Data Studio {% contentlink \u0026ldquo;projects/data-science-specific/dashboards/google_data_studio\u0026rdquo; %}}. You will need the tutorial in {% contentlink \u0026ldquo;topics/data-science-specific/google-data-studio\u0026rdquo; %}}.\n EASY: Using Plotly {% contentlink \u0026ldquo;projects/data-science-specific/dashboards/plotly_dashboards\u0026rdquo; %}}.\n HARD: Visualising live data with Plotly {% contentlink \u0026ldquo;projects/data-science-specific/dashboards/live_dashboards\u0026rdquo; %}}\n  "
},
{
	"uri": "/tech-department/workshops/intro-to-data-ethics/",
	"title": "Data Ethics",
	"tags": [],
	"description": "",
	"content": " The slides to the workshop on Data Ethics  "
},
{
	"uri": "/tech-department/topics/data-ethics-and-privacy/",
	"title": "Data Ethics and Privacy",
	"tags": [],
	"description": "",
	"content": " Software development and data science can be really powerful. And with great power come great responsibility, Uncle Ben was right.\nHere are some basic rules worth following:\n don\u0026rsquo;t ship bad code. Bugs can be pricey. Test test test read this  Law There are a few laws in place around the storage of sensitive information. Notably:\n PCI DSS if you are storing credit card information POPI if you are storing personal information  There is no need to memorize these laws. Just know what they exist. In general, if information in your care can be used by bad characters then:\n keep it safe check if there is a law or standard that applies to your situation don\u0026rsquo;t be evil. Don\u0026rsquo;t use the \u0026ldquo;I\u0026rsquo;m just doing my job\u0026rdquo; excuse if your employer insists that you do dodgy things.  Required reading  Ethical checklist for data science Five Principles of Ethical Data Science Data Science Association Code of Conduct  Podcast (Optional) Of ethics, checklists and data\n"
},
{
	"uri": "/tech-department/topics/data_validation_and_verification/",
	"title": "Data Validation",
	"tags": [],
	"description": "",
	"content": " Data validation Data validation means exactly what it sounds like, your program checks the data to make sure it meets some rules or restrictions. Validation and verification are two ways to check that the data entered into a computer is correct, because data entered incorrectly is of little use. There are many different data validation checks that can be done.\nWhy is data validation sooo important? Data validation is a vital part of any application, as it guarantees that a system works on clean, perfect and helpful data. for instance, you might need to ensure that passwords are no less than eight characters in length, or guarantee that usernames are unique. Characterizing acceptance rules makes structure taking care of much, much less demanding. Take Umuzi for instance, when people apply to Umuzi they sometimes provide invalid data. i.e, invalid ID numbers and cellphone numbers. Often we just need to make sure that whatever information is provided is in the right shape.\nValidation is important for a lot of reasons. One big reason is that a lot of data comes from people. People make mistakes, and not everyone is data literate or even computer literate enough to consistently create good data. Data capturers make mistakes, people mess up when filling in forms, people do strange things when interacting with websites and apps.\nSometimes computers make invalid data. This could be due to software errors or even hardware faults.\nTypes of validation There are a number of validation types that can be used to check the data that is being entered.\n   Validation type How it works Example usage       Check digit The last one or two digits in a code are used to check the other digits are correct Bar code readers in supermarkets use check digits     Format check Checks the data is in the right format A National Insurance number is in the form LL 99 99 99 L where L is any letter and 9 is any number.     Length check Checks the data isn\u0026rsquo;t too short or too long A password which needs to be six letters long     Lookup table Looks up acceptable values in a table There are only seven possible days of the week     Range check Checks that a value falls within the specified range Number of hours worked must be less than 50 and more than 0     Spell check Looks up words in a dictionary When word processing     Presence check Checks that data has been entered into a field In most databases a key field cannot be left blank      We check the data to make sure that the user did not make a mistake, accidentally or intentionally, which can prevent our program from functioning correctly or corrupt the data as this has security and data integrity implications.\nData verification Data Verification is a process that is performed to check data for accuracy and inconsistencies after the process of selecting, preparing, extracting, and transforming data either from a direct user or another process.\nMethods of verification There might be more methods of data verification in the world, these are the two most common methods of data verification:\n Double entry - entering the data twice and comparing the two copies. This effectively doubles the workload, and as most people are paid by the hour, it costs more too.\n Proofreading data - this method involves someone checking the data entered against the original document. This is also time-consuming and costly.\n  If you are familiar with any other methods of data verification, Feel free to contribute.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/data-visualisation/",
	"title": "Data Visualisation",
	"tags": [],
	"description": "",
	"content": " Data visualisation is a great way to quickly see what is going on in the data. There are many different ways to visualise data, but some basic principles that always apply are: - Is the graph easily readable? - Is this the appropriate graph for the type of data / information that I am trying to display? - Is the graph accurately representing the data? - What story am I trying to tell? Is the story clear from the graph? - Have I given the reader all the information they need to interpret this graph at a glance? Are the axes labeled, and if relevant, is there a legend and title?\nThis webiste shows some of the most frequently used types of graphs, and what data they are most suitable for. Below, we give a quick summary:\n Show the distribution of a single continuous variable: histograms Show the number of observations in a category: donut plots, tree plots, bar graphs Show averages or counts by category: bar graph Show average and distribution by category: box plot Show the relationship between two variables: scatterplots, line graphs Show changes over time: line graph (or a bubble chart if you have several variables)  Tutorials To get you introduced to data visualisation, complete the following tutorial(s):\nCompulsory: Go through the DataCamp course Introduction to Data Visualisation with Python.\nOptional: Complete Kaggle\u0026rsquo;s Data Visualisation: From Non-Coder to Coder.\nAdvanced: Making interactive graphs with Plotly Here is a great walk-through of different types of plots in Plotly with Cufflinks.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/",
	"title": "Data Visualisation Projects",
	"tags": [],
	"description": "",
	"content": " Background Make sure you have gone through at least one of the basic tutorials listed in TOPICS: Data Visualisation Assignment 1 Complete and submit PROJECTS: Evolution of Linux Visualisation .\nAssignment 2 Complete and submit PROJECTS: Financial Services Use in Tanzania . For your submission, create an html report to accompany your notebook in your repo.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/data-wrangling/",
	"title": "Data Wrangling",
	"tags": [],
	"description": "",
	"content": " Key concepts  merging data frames filtering data frames manipulating rows and columns  Tutorials  Intro to pandas and data manipulation here If you\u0026rsquo;d like more, complete the DataCamp skills track Data Manipulation with Python  Assignment Prerequisites You should be able to write basic functions and for loops for this assignment. You should also be familiar with merging, filtering and creating new columns in pandas.\nOptional: As far as possible, use functional programming techniques (map, reduce, apply) instead of loops when writing the functions below.\nFor example, to modify every column in a data frame (to get a percentage in this case), instead of writing:\nfor column in df: column = column/10*100 #get percentage  use:\ndef get_percentage(score): score/10*100 df.apply(get_percentage, axis = 1) #axis=1 applies the function to all columns  Instructions This data contains personality scores for recruits, plus the department they applied for.\n Import the dataset personality_scores.csv. Examine the data frame for duplicates (based on ID), and drop any duplicates that exist. Use an assert statement to check that the new data frame is the length of the unique entries of the original data frame.  Tip: An example assert statement is assert 2*20=40 and it\u0026rsquo;s a great way to check that your modification of the data was successful.\n Create new columns containing the total score of each of the personality test subscales. To do this, write a function (or functions) that will calculate the total score for each of the subscales (conscientiousness, emotional stability, openness to new experience, agreeableness, extraversion), as set out in scoring. In other words, for the conscientiousness total score, all items marked as belonging to \u0026lsquo;conscientiousness\u0026rsquo; should be summed.  The new data frame will look something like this:\n   I am always prepared I am easily disturbed I am exacting (demanding) in my work \u0026hellip; Conscientiousness Emotional Stability     (3, 5) (4, 5) (3, 5) \u0026hellip; 10 5   (3, 5) (4, 1) (3, 1) \u0026hellip; 6 1   (3, 5) (4, 3) (3, 3) \u0026hellip; 8 3     Import the data in departments.csv. Merge this data frame with the personality score data frame, keeping all applicants within the department data frame. Use an assert statement to check that the newly created merged data frame has the same amount of rows as the department data frame, and the expected number of columns.\n Filter the merged data frame so that you get only the applicants who scored less than 30 on emotional stability, conscientiousness AND agreeableness. Print the ID numbers and departments of these applicants to the screen, and also assign these applicants the tag \u0026ldquo;high_risk\u0026rdquo; in a new column. All other applicants get the tag \u0026ldquo;low_risk\u0026rdquo;\n Create a new data frame with a count of the number of low and high risk applicants within each department. Let each department be a separate column. In other words, the data frame should look something like this:\n     Risk Multimedia Coding Data     Low risk 150 123 239   High risk 40 15 22    "
},
{
	"uri": "/tech-department/topics/data-validation-and-quality-control/",
	"title": "Data validation and quality control",
	"tags": [],
	"description": "",
	"content": " Prevention first!  Design surveys and tools in such a way that minimises user error and measurement error  Inspect the data  Completeness:\n How complete is the data? It\u0026rsquo;s very important to differentiate between data that is missing and data that has a zero value! These mean very different things! QC: get count of missing observations QC: Are all important variables measured?  Measurement accuracy:\n Do the data represent the true value of what is being measured? Could be incorrect because of incorrect entry, unreliable measurement, incorrectly functioning/ broken machines, etc. QC: check that data are within allowable bounds (e.g. no percentages higher than 100%) QC: check measure reliability QC: check measure validity (e.g., compare measures that should be similar - the measure should not be biased or contaminated) QC: Visually inspect the data to see whether it looks as it should - i.e. is the mean, range and distribution what we would expect? Are there outliers? Documentation: Measurement imprecision should be noted in the documentation (e.g. the distance measure gives distance to the closest 100km)  Calculation accuracy: Are the calculation functions performing the correct calculations and are they working as they should?\n QC: unit tests to check that functions are working as they should QC: Visually inspect to see that the output matches what you would expect  Integrity:\n On storage, data values are standardized according to a data model and/or data type. All characteristics of the data must be correct – e.g. dates, integers. Data must stay secure and correct over its lifespan: data cannot be modified in an unauthorized or undetected manner. Minimise duplication of data Store the original, raw data separately from processed data   Know the data content and pipeline Individuals who know the data best are very important to successfully validating the data! Alternatively, get out on the ground and get to know the data process and content yourself!\nDocumentation An audit trail should always be available, i.e. how the data is collected, transformed and stored should be documented so that it is clear at which step of the process problems may have crept in.\nReferences Data quality assurance in data warehousing\nThe Challenges of Data Quality and Data Quality Assessment in the Big Data Era\n"
},
{
	"uri": "/tech-department/topics/data-infrastructure/",
	"title": "Data-infrastructures",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/",
	"title": "Data-science-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/",
	"title": "Data-science-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/database-comparison/",
	"title": "Database Comparison",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/sqlalchemy-migrations/",
	"title": "Database migrations with SQLAlchemy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/deadlines/",
	"title": "Deadlines",
	"tags": [],
	"description": "",
	"content": " If there is a deadline for any cohort then that deadline should be shared in the \u0026ldquo;tech deadlines\u0026rdquo; calender. To do this:\n create an event in your own calendar. name it in an informative way (name the assignment, name the part of the assignment, who is the deadline for? eg: C13 web) in the description of the event add any links, descriptions or requirements that might be useful invite the deadline calender to the event  Note: For the event to be accepted by the deadlines calender it has to have a duration. If your event is eg from 8:00 to 8:00 then it will be automatically rejected.\nClear instructions on how to submit the event should be included on the event. For example if it is a gnomio assignment then that should be stated. If the assignment makes use of the code submission form then a link to the form should be included.\nLate submissions The person who sets a deadline will check who submitted and who is outstanding.\nIf a recruit is then:\n send a slack message to each recruit who is late share a list of all late people with the rest of the tech team on slack? Or email? (should we have a specific channel?)  In the next cohort standup meeting:\n the recruits who submitted late will be verbally warned. They will need to submit their work by the next morning  If the recruit does not submit their work after being verbally warned then a senior tech manager will personally:\n email all the recruits who have missed their deadline (other managers should be CC\u0026rsquo;d). This counts as a WRITTEN WARNING have a meeting with the offending recruits. This can be a short meeting, and it can be a group meeting.  repeat offenders If a recruit gets 3 written warnings or 9 verbal warnings (or a combination, eg 1 written warning and 6 verbal warnings) then there will be a formal disciplinary hearing held by an HR representative. A senior tech manager will provide HR with all evidence.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/decision-trees/",
	"title": "Decision Trees",
	"tags": [],
	"description": "",
	"content": " Background material  Walk through the machine learning Kaggle tutorial Complete the DataCamp tutorial on Tree-Based Models  Assignment Use a decision tree model to predict customer churn (the percentage of customers that stopped using a company\u0026rsquo;s product or service during a certain time frame).\n Split your data into train and test sets. Get basic descriptive statistics for the training data and check for missing and incorrect or extreme values. Get scatterplots or heatmaps showing the relationship between the variables. What are the factors that predict user churn? Report the accuracy of your model on the training set and on the test set. How successful is the model - what is its sensitivity and specificity? What is the churn prevalence? How might prevalence affect the positive and negative predictive values of a test/model?  Find the data on Kaggle.\nMore information on decision trees Coursera: Decision Trees\n"
},
{
	"uri": "/tech-department/projects/oop/dice/",
	"title": "Dice",
	"tags": [],
	"description": "",
	"content": " Please follow TDD when implementing this code.\nPlease note: this code requires no frontend, there is no html, no gui. Make sure you can visualise the classes and objects in your head.\nPerfectly normal dice You’ve all seen dice before. A die (singular for dice) usually has 6 sides. Sometimes a Die can have a different number of sides. Eg you can get an 8 sided die, or a 20 sided die. Dice can be rolled, if you roll a 6 sided die then you will get an integer result between 1 and 6 inclusive (1,2,3,4,5 or 6). If you roll an 8 sided die then you will get an integer result between 1 and 8 inclusive ((1,2,3,4,5,6,7 or 8)\nA die has a value (eg if 1 dot is showing then the value is 1). When a die is rolled then it’s value randomly changes. A six sided die has a 1\u0026frasl;6 chance of landing on any of the sides.\nCreate a class called Die. It should have an attribute named sides. sides has to be an integer that is greater than 1. Give your class a function called roll. Roll should update an attribute named value.\neg:\n// JavaScript let die6 = new Die(6) die6.roll() let die20 = new Die(20) die20.roll() console.log(die6.value) // this would print a number between 1 and 6 inclusive console.log(die20.value) // this would print a number between 1 and 20 inclusive  # Python die6 = Die(6) die6.roll() die20 = new Die(20) die20.roll() print(die6.value) // this would print a number between 1 and 6 inclusive print(die20.value) // this would print a number between 1 and 20 inclusive  Weighted Dice Please extend your program with the following functionality.\nSometimes when dice are manufactured or altered so they are less than perfectly fair. These are called weighted or loaded dice.\nFor example we might have a weighted 6 sided die with the following probabilities of hitting various values:\n   Value Chance of landing on value     1 1\u0026frasl;7   2 1\u0026frasl;7   3 1\u0026frasl;7   4 1\u0026frasl;7   5 1\u0026frasl;7   6 2\u0026frasl;7    If we roll this die 700 times then cances are we\u0026rsquo;ll get 200 6s, and 100 of each of the other values.\nExtend the constructor of your class so that it has an optional parameter called probabilities. This would be an array of integers. The length of the array should be equal to the number of sides. If probabilities is left blank then the constructed Die instance should be fair.\n// JavaScript // looking at the data from the table above. this is how we would costruct the weighted die let dieDodgy6 = new Die(6,[1,1,1,1,1,2]) // we can create a perfectly fair die like this let die6 = new Die(6,[1,1,1,1,1,1]) // this is equivalent to let die6 = new Die(6)  # Python # looking at the data from the table above. this is how we would costruct the weighted die dieDodgy6 = Die(6,[1,1,1,1,1,2]) # we can create a perfectly fair die like this die6 = Die(6,[1,1,1,1,1,1]) # this is equivalent to die6 = Die(6)   If there are any negative numbers in the probabilities array then raise the error negative probabilities not allowed. If the sum of the numbers in the probabilities array is less than 1 then raise the error probability sum must be greater than 0 If the values passed in are not integers thenraise the error only integer values allowed  Create a function on your Die class called setProbabilities. This should take in an array and update the Die instance accordingly.\nAdd a function to your Die class called setProbabilities. This function should take in an array of integers.\nDice Factory Dice are made in a factory. A factory can only make one kind of die. Eg there could be a factory that only makes 6 sided dice, and another factory that only makes 20 sided dice.\nCreate a DiceFactory class. It should have a method called makeDie(js) or make_die(python) that outputs a single fair die instance\neg:\n// JavaScript let factory20 = new DiceFactory(20) let die20 = new factory20.makeDie() let anotherDie20 = new factory20.makeDie()  # Python factory20 = DiceFactory(20) die20 = factory20.make_ie() anotherDie20 = factory20.make_die()  This is a very somplified verion of the factory design pattern. Design patterns are cool you guys. Basically the idea behind this one is that some classes are hard to construct:\n sometimes it\u0026rsquo;s hard to decide what to construct sometimes the constructor has a lot of parameters sometimes the constructor parameters themselves are complicated to construct  A factory can be initialised to know how to construct a specific thing. Interacting with factory should be very simple.\n"
},
{
	"uri": "/tech-department/projects/distributed-workloads-with-zeromq/",
	"title": "Distributed workloads with ZeroMQ",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/django-migrations/",
	"title": "Django - exposing a REST api with a real database",
	"tags": [],
	"description": "",
	"content": "Expose a simple TODO list api using Django. Take a look at this first:\n https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/ https://realpython.com/django-migrations-a-primer/  This is about apis. Please don\u0026rsquo;t make a pretty frontend. Or even an ugly frontend. Just expose an api.\nHere is what you need to do:\n create a Django project (in a python3.7 venv) create some models and use them to set up a database. Make one model called TodoItem. Is should have a title and a description only turn the \u0026ldquo;admin\u0026rdquo; interface on and take a look around create some REST endpoints that allow a person to:  add a TODO item delete a TODO item edit a todo item list all TODO items   Next I want you to be able to update the models and see how that effects your database migrations.\nHint: If you find yourself deleting migration files: You are doing it wrong.\n Add a \u0026lsquo;done\u0026rsquo; boolean column to the TodoItem see how that effects your migrations update your REST endpoints accordingly  "
},
{
	"uri": "/tech-department/topics/linux/os-environmental-variables/",
	"title": "Environmental Variables",
	"tags": [],
	"description": "",
	"content": " This tutorial assumes that you are using some kind of bash derived shell. Open up your linux command prompt :)\nShell variables You have dealt with variables in your programming language of choice many times. Bash also has variables. You can declare them like this:\nFOO=BAR  To print your variable you can do this kind of thing:\necho $FOO  You can also use bash variables within other bash operations. Eg:\nROOT_DIR=/path/to/some/important/directory mkdir $ROOT_DIR nano $ROOT_DIR/something.yaml  Bash has a problem with whitespace. These wont work:\nFOO = BAR BAZ=The quick brown fox  But these work:\nFOO=BAR BAZ=\u0026quot;The quick brown fox\u0026quot; MEH='The quick brown fox'  try this out Open one two terminals.\nIn terminal 1:\necho $HELLO # when HELLO is not defined, this doesn't print anything HELLO=BAR # we define the variable and give it a value echo $HELLO # prints BAR  In termainal 2:\necho $HELLO # what does this do?  Scope Consider the following Python code:\na = 1 # at this point in the code: only `a` is available def foo(): b = 2 # at this point in the code: `a` and `b` are available, but not `c` def bar(): c = 3 # at this point in the code: `a`,`b` and `c` are all available # at this point in the code: only `a` is available  Or similarly, this is the JavaScript version:\na = 1 // at this point in the code: only `a` is available function foo(): b = 2 // at this point in the code: `a` and `b` are available, but not `c` function bar(): c = 3 // at this point in the code: `a`,`b` and `c` are all available // at this point in the code: only `a` is available  Look at where the different variables are allowed to be used. If a variable can be used then it is in scope. Otherwise it is out of scope.\nEnvironmental variables Environmental variables are shell variables that have a larger scope.\nDo this out in yout terminal:\n# first we are going to make a new shell script: echo \u0026quot;#\\!/bin/sh\\n\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo '--- start of my script ---'\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo FOO=\\$FOO\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo BAR=\\$BAR\u0026quot; \u0026gt;\u0026gt; my_script.sh echo \u0026quot;echo '--- end of my script ---'\u0026quot; \u0026gt;\u0026gt; my_script.sh # you can look at the new file you just created. ls -l | grep my_script # take note of the output. That -rw-rw-r-- part tells the operating system what actions are allowed. This file can be read and written cat my_script.sh # make the script executable chmod +x my_script.sh ls -l | grep my_script # the output is a little bit different now. x means executable  Great, now you can run the script like this:\n./my_script.sh  Expected output:\n--- start of my script --- FOO= BAR= --- end of my script ---  Ok, now paste these lines into your terminal one by one. Make sure you understand the output of my_script.sh at each point:\nFOO=1 ./my_script.sh # FOO is out of scope! export FOO ./my_script.sh # FOO is IN scope! export BAR=winning ./my_script.sh FOO=hello ./my_script.sh  Takeaway You can define variables in your shell (command prompt) and make those variables accessable from within programs that you run from that shell. Those programs could be bash scripts (like my_script.sh), or those programs can be written in Node or Python.\nstoring your environmental variables somewhere nice Open up a new shell. Make a new script called my_config.sh. Give it the following content:\n#!/bin/sh echo '--- setting up configurtion ---' export FOO=\u0026quot;/path/to/local/database/file.sqlite\u0026quot; BAR=\u0026quot;some other important configuration\u0026quot; echo '--- finished setting up configurtion ---'  Make it executable and try this out:\nexport FOO=xxxxxxxxx ./my_config.sh ./my_script.sh echo $FOO  Aaaand\u0026hellip; my_config.sh seems to have had no effect on FOO.\nNow try it this way:\nexport FOO=xxxxxxxxx source my_config.sh ### ./my_script.sh echo $FOO  When we use the source command then any variables exported by my_config.sh become environmental variables.\n.bashrc The default linux shell is called bash. Every time you open up a new bash shell the bash automatically sources a file in your home directory called .bashrc.\nDo the following in a terminal:\nls ~ -a | grep bashrc cp ~/.bashrc ~/.bashrc.backup ls ~ -a | grep bashrc  Now open .bashrc for editing however you want. You can just use nano if you dont want to leave the terminal.\nnano ~/.bashrc  Now paste the following at the top of the file:\necho \u0026quot;--- start of custom bashrc content ---\u0026quot; export FOO=\u0026quot;/path/to/local/database/file.sqlite\u0026quot; BAR=\u0026quot;some other important configuration\u0026quot; echo \u0026quot;--- end of custom bashrc content ---\u0026quot;  Save and exit. If you are using nano thenpress Ctrl + X, then y then enter\nNow open a new terminal. And make sure you unserstand the output of each of these lines:\necho FOO=$FOO echo BAR=$BAR ./my_script.sh  You can even put source commands within your .bashrc. Eg:\nsource /path/to/some/system/wide/configuration  Some of the more advanced python people might recognise this line:\nsource /usr/local/bin/virtualenvwrapper.sh  "
},
{
	"uri": "/tech-department/topics/java-specific/gradle-env-config/",
	"title": "Environmental variables and secrets with gradle",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/linux-evolution/",
	"title": "Evolution of Linux Visualisation",
	"tags": [],
	"description": "",
	"content": "Complete the DataCamp project Exploring the Evolution of Linux.\nOnce you have completed it, you can download your notebook file. Save this to a github repository and submit the link to your repo.\n"
},
{
	"uri": "/tech-department/topics/java-specific/exception-handling/",
	"title": "Exception Handling",
	"tags": [],
	"description": "",
	"content": " There are a number of things that can go wrong while a program is executing. Java enables you to handle exceptions so that you may recover from these problems. This is known as exception handling.\nExceptions in Java  What are Exceptions?\n Errors vs Exceptions in Java.\n Types of Exceptions  with examples.\n Best practices to handle Exceptions in Java.\n Worst pratices to handle Exceptions and more\u0026hellip;\n Advantages of using Exceptions.\n  "
},
{
	"uri": "/tech-department/projects/expose-a-simple-rest-api-for-game/",
	"title": "Expose a simple REST api for your game",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/express-js/",
	"title": "Express JS",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/projects/express-js/",
	"title": "ExpressJS",
	"tags": [],
	"description": "",
	"content": " Instructions You are required to create an API which will allow you to create a Playlist of your favorite musicians and their songs This should run on a node server at PORT 3090\nSection 1 This API should do the following 1. Add A new musician to the list 2. Edit an existing musician 3. Delete an existing musician from the list 4. List all the musicians on the Playlist 5. Sort the musicians alphabetically using query parameters(this will require a middleware in express) You have two choices as to where you can store these details option1: Use a JSON file to store the data option2: Use a database to store the data\nSection 2 In the same project folder you should: 1. Create a front-end(html page only - you will automatically fail if you use frameworks like Angular/React/Vue) the front-end should consume this API and it should look like the image attached 2. Test the API using jasmine and Request see examples here https://www.thepolyglotdeveloper.com/2017/08/unit-testing-node-js-application-jasmine-testing-framework/\nIf this is TOO fun (Optional)  Add an ability to Add/delete/list songs associated to each musician Add that to a new page, a route in the frontend which goes to localhost:3090/songs/:id  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/expressjs/",
	"title": "ExpressJs",
	"tags": [],
	"description": "",
	"content": " Introductory materials  Basic node server Express documentation Node.js \u0026amp; Express From Scratch [Part 1] - Intro \u0026amp; Environment Express, node overview Basic routing Static files  Middleware  Express Middleware More about middleware About bodyParser  "
},
{
	"uri": "/tech-department/projects/java-fileio-logging-errors/",
	"title": "File IO + Logging + Errors",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi. In this project you\u0026rsquo;ll just be storing and retrieving information from plain old txt files.\nInstructions Create the following functionality in a TDD way. And make sure that everything has the correct Exception handling and those exceptional cases should have tests as well. In an error occured it through\n Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a Text file. The file name should be named like this visitor_{their_full_name}.txt.  On a successful save, a log to the console should be made using log4j and the same when an error occurs;\nalice.save() # results in visitor_alice_cooper.txt bob.save() # results in visitor_bob_marley.txt charlie.save() # results in visitor_charley_sheen.txt  Notice that the full name used in the file is all lower-case and spaces are replaced by underscores.\n Create a function called load that takes in a name and then grabs a Visitor object from file. It should simply System.out.println the visitor.  On a successful read, a log to the console should be made using log4j and the same when an error occurs;\neg:\nalice.load(\u0026quot;Alice Cooper\u0026quot;) // prints out all of Alice's information bob.load(\u0026quot;Bob Marley\u0026quot;) // Same deal for good ol Bob  Resources https://www.w3schools.com/java/java_files_create.asp\nhttps://www.loggly.com/ultimate-guide/java-logging-basics/\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/data-visualisation/mobile-money-viz/",
	"title": "Financial Services Use in Tanzania",
	"tags": [],
	"description": "",
	"content": " Background The training dataset contains demographic information and what financial services are used by approximately 10,000 individuals across Tanzania. This data was extracted from the FSDT Finscope 2017 survey and prepared specifically for this challenge.\nEach individual is classified into four mutually exclusive categories:\n No_financial_services: Individuals who do not use mobile money, do not save, do not have credit, and do not have insurance Other_only: Individuals who do not use mobile money, but do use at least one of the other financial services (savings, credit, insurance) Mm_only: Individuals who use mobile money only Mm_plus: Individuals who use mobile money and also use at least one of the other financial services (savings, credit, insurance)  This dataset is the geospatial mapping of all cash outlets in Tanzania in 2012. Cash outlets in this case included commercial banks, community banks, ATMs, microfinance institutions, mobile money agents, bus stations and post offices. This data was collected by FSDT.\nInstructions:  Examine the dataset. Are there any missing observations or columns where the data do not seem valid?\n Get basic descriptive statistics for the dataset.\n Create appropriate graphs to visually represent the relationship between financial services accessed (non-mobile, mobile, both) and age, gender, marital status, land ownership and type of income.\n Create appropriate graphs to visually represent the relationship between how often mobile services are used and age, gender, marital status, land ownership and type of income.\n Create a map to visually explore geographic distribution of mobile services coverage with respect to type of income.\n What can you conclude about use of financial services in Tanzania? Which demographic and geographic factors are associated with mobile money use?\n  Variables The table below gives the variable names in the mobile money data file, with a description of the questions and a key to the answer values.\n   Variable ID Question Values     ID Unique respondent ID String   Q1 Age Number   Q2 gender 1 Male     2 Female   Q3 Marital status 1 Married     2 Divorced     3 Widowed     4 Single/never married   Q4 Highest level of education completed? 1 No formal education     2 Some primary     3 Primary completed     4 Post primary technical training     5 Some secondary     6 University or other higher education     7 Don’t know   Q5 Which of the following applies to you? Read out; Single response 1 You personally own the land/plot where you live     2 You own the land/plot together with someone else     3 A household member owns the land/plot     4 The land/plot is rented     5 You don’t own or rent the land     6 Don’t know   Q6 Do you personally own land (other than the land you live on) that you have land certificates of ownership for? 1 Yes     2 No   Q7 Do you personally own a mobile phone? 1 Yes     2 No   Q8_1 through Q8_11 Different people have different ways of getting money, please tell me how you get the money you spend?    Multiple mention possible     Q8_1 Salaries/wages 1 Yes     0 No   Q8_2 Money from trading/selling Anything you produce/grow/raise/make/collect with the intention of selling 1 Yes     0 No   Q8_3 Money from providing a service – i.e. such as transport, hairdressing, processing, hospitality services (food \u0026amp; accommodation) 1 Yes     0 No   Q8_4 Piece work/Casual labor/Occasional jobs 1 Yes     0 No   Q8_5 Rental income 1 Yes     0 No   Q8_6 Interest from savings, investments, stocks, unit trusts etc. 1 Yes     0 No   Q8_7 Pension 1 Yes     0 No   Q8_8 Social welfare money/grant from Government 1 Yes     0 No   Q8_9 Rely on someone else/others to give/send me money 1 Yes     0 No   Q8_10 Don’t get money – someone else pays my expenses 1 Yes     0 No   Q8_11 Other 1 Yes     0 No   Q9 Only for those who said they get a salary/wages. Who do you work for? -1 not applicable     1 Government     2 Private company/business     3 Individual who owns his own business     4 Small scale farmer     5 Commercial farmer     6 Work for individual/household e.g. security guard, maid etc.     7 Other   Q10 Only for those who said they get money from selling things – what kind of things do you MAINLY sell (get most money from)? -1 not applicable     1 Crops/produce I grow     2 Products I get from livestock     3 Livestock     4 Fish you catch yourself/aquaculture     5 Things you buy from others – agricultural products     6 Things you buy from others – non-agricultural products     7 Things you make (clothes, art, crafts)     8 Things you collect from nature (stones, sand, thatch, herbs)     9 Things you process (honey, dairy products, flour)     10 Other   Q11 Only for those who said they get money from providing a service – what kind of services do you MAINLY provide (get most money from)? -1 not applicable     1 Personal services (hairdressers, massage, etc.)     2 Telecommunications/IT     3 Financial services     4 Transport     5 Hospitality – Accommodation, restaurants, etc.     6 Information/research     7 Technical – mechanic, etc.     8 Educational/child care     9 Health services – traditional healer etc.     10 Legal services     11 Security     12 Other, specify   Q12 In the past 12 months, have you sent money to someone in a different place within the country or outside of Tanzania? 1 Yes     2 No   Q13 When did you last send money? -1 not applicable     1 Yesterday/today     2 In the past 7 days     3 In the past 30 days     4 In the past 90 days     5 More than 90 days ago but less than 6 months ago     6 6 months or longer ago   Q14 In the past 12 months, have you received money from someone in a different place within the country or from outside the country? 1 Yes     2 No   Q15 When did you last receive money? -1 not applicable     1 Yesterday/today     2 In the past 7 days     3 In the past 30 days     4 In the past 90 days     5 More than 90 days ago but less than 6 months ago     6 6 months or longer ago   Q16 In the past 12 months, how often did you use mobile money for purchases of goods and/or services? -1 not applicable     1 Never     2 Daily     3 Weekly     4 Monthly     5 Less often than monthly   Q17 In the past 12 months, how often did you use mobile money for paying your bills? -1 not applicable     1 Never     2 Daily     3 Weekly     4 Monthly     5 Less often than monthly   Q18 Literacy in Kiswhahili 1 Can read and write     2 Can read only     3 Can write only     4 Can neither read nor write     5 Refused to read   Q19 Literacy in English 1 Can read and write     2 Can read only     3 Can write only     4 Can neither read nor write     5 Refused to read   Latitude Approximate latitude Number   Longitude Approximate longitude Number   Mobile_money Do you use mobile money? 1 Yes     0 No   Savings Do you save? 1 Yes     0 No   Borrowing Do you borrow? 1 Yes     0 No   Insurance Do you have insurance? 1 Yes     0 No   Mobile_money_classification 0 no mobile money and no other financial service (saving, borrowing, insurance) 1 no mobile money, but at least one other financial service     2 mobile money only     3 mobile money and at least one other financial service    "
},
{
	"uri": "/tech-department/topics/clean-code/general/",
	"title": "General Clean Code Guidelines",
	"tags": [],
	"description": "",
	"content": " “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ― Martin Fowler\nObvious Function and Variable Names When you declare a variable, give it a name that describes what values or data it holds. When you declare a function, give it a name that describes what it does.\nExample of a bad function name:\nrun_process()  Example of a good function name:\nsort_files()  Bad variable name:\ndivs  Good variable name:\ncards  These names should be obvious and specific. Try to look at your code from the perspective of someone who has never seen it. They should be able to tell what it does just by reading it. Consider the next developer who will work on the code as your client. Name things according to exactly what they are and what they do. If you are struggling to name a function, it may be because your function does too many different things to give it a one simple descriptive name. Which brings us to the next point\u0026hellip;\nFunctions Should do One Thing The moment you find yourself struggling to describe what your function does in a simple sentence, your function may be too long or too busy. Describing your function should be easy. This is when you need to take the pieces of logic that do specific things in your and move them into another function. Try to keep your functions under 25 lines long.\nLet\u0026rsquo;s say you wrote a function that sorts files. Below is some pseudocode illustrating what a bad vs good functions structure would look like.\nBad File Sorting Function() some code that opens the folder some code that looks through the files attempts at finding the file some code that filters the results some code that sorts results some code that prints the result after the sorting some logic that closes the folder  Sort Files(folder) open the folder sort files in the folder return the sorted files Print Files(sorted folder) open the sorted folder print the files in the folder Good File Sorting Function() Sort Files(folder) Print Files(sorted folder)  As you can see, there is a lot going on in the Bad file sorting function, so it would be difficult to describe what it does in one sentence or to give it a name.\nDRY - Don\u0026rsquo;t Repeat Yourself Ideally functionality should be represented in a code-base exactly once. If you find yourself repeating certain values such as strings or numbers for example, rather save those values to variables. This also means that if the values change, you won\u0026rsquo;t have to change them update them again on every line where you\u0026rsquo;ve used them. You\u0026rsquo;ll only need to change them where you originally created and assigned them.\nThe same applies to functions.\nFlat is Better Than Nested If you are ever tempted to put a loop inside a loop\u0026hellip; etc. Don\u0026rsquo;t.\nFunctions are:\n* More explicit and specific about what they actually do than a loop inside a loop.\n* Easier to test than the inner-most loop of a 5 loop stack of spaghetti-code.\n* Easier to reuse.\n* Easier to document.\nIndentation, Alignment and Consistency Indent and align your code so that you can clearly see what code runs inside a particular loop or function. Indented code is easier to read and maitain.\nExample of Good Indentation\nGood File Sorting Function() Sort Files(folder) Print Files(sorted folder)  Example of Bad Indentation\nGood File Sorting Function() Sort Files(folder) Print Files(sorted folder)  In the above pseudo-code the \u0026ldquo;Sort Files\u0026rdquo; and \u0026ldquo;Print Files\u0026rdquo; function are actually called inside of the \u0026ldquo;Good File Sorting\u0026rdquo; function. They are a part of the \u0026ldquo;Good File Sorting\u0026rdquo; function. But without the indentation they all look like separate functions.\nBesides alignment your code needs to be consistent. If you use spaces for indentation use them on every line. Don\u0026rsquo;t use tabs in one line and spaces in another line. Rather just use spaces. You can set your IDE to indent using spaces as the default. There also plenty of code formatting and linting tools such as ESLint, Prettier, Black etc\u0026hellip; Do make use of them.\nCohesion and Loose Coupling Cohesion can be sort of summarized as: \u0026ldquo;Things that belong together should be together\u0026rdquo;. Your code (files or modules) should be organised in such a way that they do one thing. They should have a single responsibility. If you want to understand a piece of code then you shouldn\u0026rsquo;t have to travel to the far reaches of the code base, scrolling up and down forever in a single file to figure out how it works. So avoid writing code that contains a lot of random functions that don\u0026rsquo;t have an obvious effect and don\u0026rsquo;t be that person who writes files that have 200 lines of code.\nCoupling is about how much each component in your code base depends on other components. Loose coupling is making sure that if you change some code it doesn\u0026rsquo;t have any weird side effects that break other parts of your code base. Your code should be loosely coupled.\nDefensive Programming Defensive programming means anticipating things that could probably go wrong and coding to handle such situations or edge cases. The goal is to write code that can handle real life situations: e.g. invalid input from the user - the user inputs a number where your program requires a text string.\nIf you don\u0026rsquo;t code defensively your code might for example fail to complete its work but still run with no errors and act as if there is no problem. This leads to bugs that are difficult to find and fix after you\u0026rsquo;ve pushed your code. You can make use of exception or error messages for example to prevent your code from running if the input was invalid. So think about the edge cases. Assume that your user isn\u0026rsquo;t always going to follow the instructions or use your program as they were supposed. Then write your code in a way that anticipates and handles such misuse.\n"
},
{
	"uri": "/tech-department/projects/python-specific/file_io_kata/",
	"title": "Getting to know Python",
	"tags": [],
	"description": "",
	"content": " This little project aims to introduce you to some of the most important aspects of Python.\nFirst make sure that you have Python3.7 installed. There is a nice guide here\nNote You\u0026rsquo;ll need to submit your work as a git repo. Make sure your latest submission is in the master branch. And make sure your repo is public.\nYou will be expected to unit test your code. You can choose whichever test framework you like best. Pytest is quite nice and clean.\nIf you feel that you need extra resources or instruction to pull this off please just ask :)\nPlease do one step at a time, resist the temptation to read ahead.\nStep 1 Make this function work:\ndef list_all_js_function_names(path_to_js_file): \u0026quot;\u0026quot;\u0026quot; path_to_js_file is a path to a file on your hard drive This function will read the entire input file and then return a list of js function names as strings \u0026quot;\u0026quot;\u0026quot;  Here is an example of a javascript file: https://github.com/MihlaliNelana/CardGame/blob/master/CardGame/script/script.js\nExample:\nGiven\n// script.js function promptUser() { // line 2 var num = prompt(\u0026quot;Please enter number of squares...\u0026quot;); if (num != null) { document.getElementById(\u0026quot;demo\u0026quot;).innerHTML = \u0026quot;You want \u0026quot; + num + \u0026quot; number of squares...\u0026quot;; } } // line 8 Array.prototype.memory_card_shuffle = function(){ // line 9 var i = this.length, j, temp; while(--i \u0026gt; 0){ j = Math.floor(Math.random() * (i+1)); temp = this[j]; this[j] = this[i]; this[i] = temp; } } // line 17  Then:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return ['promptUser','Array.prototype.memory_card_shuffle']  What you should get out of this  practice unit testing get familiar with how functions work get familiar with file inputs practice (very) basic looping  Hints :) There is a lot to this function. It should be broken down a bit instead of doing everything in one go. Remember that we are doing TDD here, that\u0026rsquo;s test driven development. In TDD you try to write the most trivial test possible, then you make that test pass, then you refactor. Then repeat. Try to make sure that each test you write is as small and self-contained as possible while still being useful.\nHere are some ideas for some tests:\n test that given a one-line string, your function can detect whether or not it contains a function definition. eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; is a function definition \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; is not a function definition \u0026ldquo;foo.bar = function something(){\u0026rdquo; is a function definition  test that you can return the correct function name. Eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; the function name is fooo \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; there is no function defined here \u0026ldquo;foo.bar = function something(){\u0026rdquo; the function name is foo.bar   Then you\u0026rsquo;ll need to extend your code so that it can take a javascript file as input.\nResources  https://docs.python.org/3/howto/regex.html#using-regular-expressions https://www.w3schools.com/python/python_regex.asp  You\u0026rsquo;ll need to understand re.search to get this right\nAnd here is some file input/output (file io) documentation:\n https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files  Step 2 Upgrade the list_all_js_function_names function so that it also returns the start line number and end line number for the functions. Functions in Js are defined with the use of curly brackets.\nInstead of returning a list of strings, return a list of dicts.\nNow the function should work more like this:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return [ {'name':'promptUser', 'start_row':2, 'end_row':8}, {'name':'Array.prototype.memory_card_shuffle', 'start_row':9, 'end_row':17} ]  Note that functions can be defined inside functions.\nWhat you should get out of this  more advanced algorithmic thinking a little bit of practice with dictionaries  Step 3 TBA TODO\n"
},
{
	"uri": "/tech-department/projects/git-exercises/",
	"title": "Git Basic Exercises",
	"tags": [],
	"description": "",
	"content": " Introduction This little exercise will take you through the basic git mechanisms you need to know about in order to be productive. By the end of this exercise you\u0026rsquo;ll be able to create and manage your own git repos\nCreating and managing your own repo Note: you can do all of this stuff from the command line! You should be using linux. Open up a terminal and do the following:\nYour initial commit  Create a directory named git-basic-exercises cd into your new directory look at what\u0026rsquo;s inside using ls -a. It should be empty initialize your git repo using git init. Then check ls -a again. Can you spot the difference? check the status of your repo by typing git status type in touch README.md. This creates a new blank file. Then check ls -a and git status again. type in git log. The output should make sense to you Now add your readme file to your git staging area. Hint: use the git add command Then check your git status again. Can you see the difference? Try to unstage your file and check your git status again Ok, now for your first commit: Make sure your readme file is staged then type in git commit -m \u0026quot;initial commit\u0026quot; Your output should be something like this:  [master (root-commit) 2103b64] initial commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md  type in git log isn\u0026rsquo;t that nice? press q to exit  more commits!  type in nano README.md. This will open up a text editor. Type in some stuff and then press ctrl x to exit. Then y then enter. This will save your changes type in cat README.md. This will print your file to the console take a look at the git stats again and make sure you understand it commit your changes to your repo. Your commit should have the message \u0026quot;second commit\u0026quot; make some more changes to your readme and make a \u0026quot;third commit\u0026quot;  check this out  type in git log. You should see all your commits there. It should look something like this:  commit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Each commit has a \u0026ldquo;hash\u0026rdquo;. That\u0026rsquo;s the weird alphanumeric string thingy.\n Copy the commit hash for your second commit. You can just select it with your mouse and right click and choose \u0026lsquo;copy\u0026rsquo; press q to exit the log view. You should now be back at the terminal type in git checkout and then paste in the commit hash and press enter cat README.md It\u0026rsquo;s like going back in time git checkout master cat README.md Now we are up to date  You can jump to any commit using git checkout. You can checkout a branch, a commit hash, or a tag. We didn\u0026rsquo;t explore tags here.\nWhen you checkout a branch, you checkout the latest commit on that branch.\nbranching The real power of git is in branching. Branching is what allows big teams of developers to work on the same code base. Let\u0026rsquo;s explore branching a little bit.\n git branch This lists all your branches. Git makes a branch named master by default Now create a new branch called milkshake-flavours. git is not too restrictive when it comes to naming our branches. It\u0026rsquo;s generally best to choose a name that has something to do with what the branch is for. Our branch is about milkshakes type in git branch. Notice the little *. check out your new branch. type in git branch again and look at the *. Can you see what it means? Try switching between the different branches and see how hings change. Make sure you are on the milkshake-flavours branch then type in nano milkshakes.md and write fill in a few flavours. Mmmm. save and exit what does git status tell you? commit your new file with the message \u0026quot;added initial flavours\u0026quot; take a look at your git log again. It should make sense checkout your master branch. It\u0026rsquo;ll look a little different. Can you see why? from your master branch, create a new branch called history and check it out. If you say git log it should only have three commits type in history \u0026gt; history.txt. Can you guess what it does? commit your changes with the message \u0026quot;added history\u0026quot;. Take a look at the git log now checkout your milkshake branch and look at the git log. it should have your three master commits and your one milkshake commit make some arbitrary changes to the readme file and make a new commit with the message \u0026quot;random readme changes\u0026quot; checkout history again and cat README.md now on your history branch do the following:  rm README.md echo \u0026quot;booya\u0026quot; \u0026gt; README.md  You should know what these lines do. commit your changes. Use the commit message \u0026quot;rewrote readme\u0026quot; checkout master again  Just make sure we are still on track If you have followed along up until this point then your branches should look like this:\nType in:\ngit checkout master ls  this outputs:\nREADME.md  Check the log:\ngit log  this outputs something like:\ncommit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Now lets look at milkshake-flavours:\ngit checkout milkshake-flavours ls  You will see two files:\nmilkshakes.md README.md  And git log will look like:\ncommit d2559d9758f3ec0f7928f6cbef705c6fa9679edf (HEAD -\u0026gt; milkshake-flavours) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:25:07 2019 +0200 added initial flavours commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Finally history:\ngit checkout history ls  there should be two files:\nhistory.txt README.md  and git log outputs\ncommit 34025ac2b26accb7c5c18ec048a4982d3bae8909 (HEAD -\u0026gt; history) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:38:05 2019 +0200 rewrote readme commit b9e3c50fb65c7b2df0f09b921a15a7fc146e0bfb Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:36:04 2019 +0200 added history commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  merging Now we want to get the master up to date with all out changes. Let\u0026rsquo;s start with the milkshake branch\n merge milkshake-flavours into master\ngit checkout master git merge milkshake-flavours  Use ls and git log to see what this did\n merge history into master\n Use ls and git log to see what this did As you can see a whole lot of changes have been made to the master branch\n Now lets take a look at the other branches\ngit checkout history git log ... git checkout milkshake-flavours git log  These branches were not effected by the merge!\n  In general if we want to merge branch X into branch Y:\ngit checkout Y git merge X  This adds a commit to branch Y and doesn\u0026rsquo;t change branch X\n merge the master branch into history. Use git log to see whats up. checkout master again. git log again. Can you spot any differences?  GitHub  Go to Github.com (using your browser of choice) and create a new public repository using the user interface. Name it git-basic-exercises\n You will see a bunch of weird looking things. There is a section entitled \u0026ldquo;…or push an existing repository from the command line\u0026rdquo;. We have an existing repository and a command line. So this seems appropriate. Copy the commands from there and paste them into your terminal. this will push your changes to github.\n Refresh your browser. Cool eh?\n  Now you should see a little dropdown box on github that says \u0026ldquo;Branch: master\u0026rdquo;. Click there. your other branches aren\u0026rsquo;t available.\n Push your other branches to github. We want all branches to be listed  Pulling and remotes  You should still be inside the git-basic-exercises directory. Let\u0026rsquo;s get out of there. cd ../ Now let\u0026rsquo;s clone a repo. point your browser here: https://github.com/Umuzi-org/tech-department Now there is a friendly green button that says \u0026ldquo;Clone or download\u0026rdquo;. Click on it. You will see a url come up. Copy it. You will need to paste it into the terminal in a moment In your terminal type in git clone $THE_URL_YOU_JUST_COPIED. It should look something like this: git clone https://github.com/Umuzi-org/tech-department cd into the tech-department directory that was just created explore a little using git branch and git log type in git branch -a. This shows the remote branches try to checkout the branch called project/git-basic-exercises on your local computer. You can do it, you\u0026rsquo;ll need to figure out how type in git remote -v  Multiple Repos  While still in your newly created branch project/git-basic-exercises use git log to see the history. From your new branch called project/git-basic-exercisesnavigate back to your git-basic-exercises repo, use git log again to see the difference. Let\u0026rsquo;s go back to our home directory cd and make a new folder mkdir this-will-be-another-repo cd into this folder now use git init to initilise a new git repo here, you should get a message in terminal that says \u0026lsquo;Initialized empty Git repository in /home/$specific-path/this-will-be-another-repo/.git/\u0026rsquo; Type in touch README.md. This creates a new blank file. Stage then commit. Go back to your git-basic-exercises repo and use git log to check that you are in the right place and repo.  gitignore  Create a new file touch ignore-me.db Now use git status to see what is going on in your repo, you will see ignore-me.bd as an unstaged file. Now lets create a .gitignore file type nano .gitignore In this file type ignore-me.db save and exit your .gitignore file Now use git status you will notice that ignore-me.db is no longer an unstaged file and is no longer being tracked by github and .gitignore is being tracked. Create a new directory mkdir large-directory-that-should-be-local-only cd into this directory and create a readme.md file with some random text in Use cd .. to go back to your main directory and git status to see what is going on, you should now see your new folder as an unstaged change. Lets add this folder to .gitignore nano .gitignore and add /large-directory-that-should-be-local-only on a new line, save and close .gitignore Check git status again, .gitignore is going to be super useful later when you are submitting projects and need to keep your repos small and free from junk and irrelevant files.  gitignore best practices You should always gitignore the items in the below list:\n secrets like passwords and keys databases pycache/ node_modules/ temporary files and editor settings files eg .vscode/  Repo Best Practices Your repo should be all of the following:\n Files and folders in your repo should be named appropriately. Use names that make sense and relate to your projects i.e. simple-calculator Each project should be in its own repo There should be no junk/unnecessary file in your repos Your repos should be small (remember the use of .gitignore)  Going forward We just covered the basics here. Please make sure you understand this stuff. It\u0026rsquo;s super important. Git might seem like a weird theoretical thing to a lot of you. It might seem completely unrelated to the actual job of writing code. But it\u0026rsquo;s not. Git makes teamwork on dev teams possible. Without it we\u0026rsquo;d spend more time shouting at each other than writing useful code. So learn it. Be comfortable with it. When we start working in teams later on all will be made clear.\nIf you are curious now, spend some time googling git branching strategies. We use the feature branching strategy here. We\u0026rsquo;ll cover it in depth later on in the course.\n"
},
{
	"uri": "/tech-department/topics/git/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " What\u0026rsquo;s git all about? Git is an industry standard tool used for collaboration within teams. We teach it quite early on in our course because without it you will be fairly useless as a professional. Yes, it\u0026rsquo;s that important. The git book (below) has a better introduction.\nThe Git Book You don\u0026rsquo;t need to know absolutely everything about Git in order to start using it. We keep our git repos on Github so don\u0026rsquo;t worry about the server setup stuff.\nThe first three chapters will serve you well initially:\nhttps://git-scm.com/book/en/v2\nWhat we expect from you As you progress through this course you will have to write a lot of code. All your code will be submitted to us for review in the form of a git repo. You will be expected to be comfortable using git from the command line.\nGeneral best practices  make a separate repo for every project (we don\u0026rsquo;t want to have to sift through unrelated code when marking your work) make sure that you push your latest work before leaving the office every day if you are working on a team, make sure you pull the master branch often give your git branches meaningful and specific names give your commits meaningful messages  Github We use Github for keeping our code safe. Here is a little intro and here is the official cheat sheet.\nFor our data recruits https://www.datacamp.com/courses/introduction-to-git-for-data-science\nFun fact about our syllabus This site that you are looking at is a repo stored on git. This is cool because it means that you can fork it and make changes to our content. For example:\n if you find a video that was really useful in understanding a topic, then you can add a link to that video to our course material if you see a typo you can fix it If you think one of our projects can be explained better then you can add more explanation  Here is the repo, and this guide tells you a bit about what we ae looking for.\nContributing to our syllabus is not compulsory, but it would be appreciated :)\n"
},
{
	"uri": "/tech-department/workshops/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": "https://drive.google.com/open?id=1vnS8HYC89xMTOYj0vAWaAR36zaQvhA-o\nhttps://docs.google.com/presentation/d/1Uz9PX1A-bDlxEMDXjrTaGs588QrbVwDDMhPEmuY8WA4/edit#slide=id.p\nhttps://docs.google.com/presentation/d/1N6EeW3BE2r9CZDOSgT5dUBYX9-d8QT15_tA-9OtnIfI/edit#slide=id.p\n"
},
{
	"uri": "/tech-department/workshops/git-for-teamwork/",
	"title": "Git for Teamwork",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/data-science-specific/google-data-studio/",
	"title": "Google Data Studio",
	"tags": [],
	"description": "",
	"content": " Introduction Dashboarding is easy with Google Data Studio. Google Data Studio helps you import, manipulate and display your data in an easy to understand way. If you know Google Data Studio, you\u0026rsquo;ll also find other popular data analytics tools such as Power BI (Microsoft), Tableau and Qlikview easy to learn.\nThe slides for the data visualisation / business intelligence workshop can be found in: WORKSHOPS: Business intelligence tools What to consider when doing BI A part of data analysis that must not be taken for granted is how to convey the content correctly. This is where BI tools become extremely powerful. They focus on creating interactive dashboards to convey the data in a report-type fashion. The use of various elements helps you not just show the data but gives focus to the report and ‘tell a story’. Making it interactive allows you to generate insight and allows the audience to interrogate the data easily.\nThese a few things you should consider when making a dashboard:\n Does the report have a page title and graph titles? This allows the audience to understand what the dashboard is focused on rather than questioning you about every element. Are the graphs visible? Make sure the graphs not only contain the correct information but are also easy to read. This includes titles, colours, and the type of graph for the information. How many graphs are on the dashboard? Too many graphs can lose focus - too little may not tell the whole story. Ensure you know what you are building and what you want to show on the dashboard. Is there any interactivity that the dashboard can benefit from? Do you need filters that can help navigate the story? Can you use a graph to filter out another graph? These are aspects that usually come into question while you are building your report. Your ‘story’ may be spanned over multiple dashboards. Some dashboards have a single focus while others could continue a story from a previous dashboard especially if there is a lot to show. Make sure you can navigate easily to them and the audience knows this. Titles can really help how these two dashboards are linked. Look and feel is important. Make sure the colours are correct, background images, graph types, graph colours, labels etc. all work together to create a visually compelling report. Know your data. Use the tool to understand the data you have and how you can create new fields to enhance the information. This takes practice and experience and will come through design - sessions with peers and others. Future proofing is an underlying goal. Make sure your work isn’t temporary, it can be updated and enhanced to meet the needs of the future. This includes the processing mechanism of your data. It may not always come in the form you need. You must ensure you process your data correctly before you visualize it in order to convey the most value as easily as possible. This may also be easier if the data provided to you can include some other fields before your import, so that the ‘raw’ data file has the information in a more useable format. Understand your audience. It is important to make sure you design the report correctly for the users – so multiple design sessions and continuous testing is key to ensuring usability and a higher utilization rate.  These are just a few considerations when building a report and this list will grow as you gain more experience.\nGoogle Data Studio Documentation Documentation for using Google Data Studio can be found here. Thank you Darshik for providing this documentation!\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/google_data_studio/",
	"title": "Google Data Studio Assignment",
	"tags": [],
	"description": "",
	"content": " South African Open Cities The South African Cities Open Data Almanac has great data, but it is mostly sitting within pdfs and spreadsheets. We can visualise it!\n Choose at least 4 datasets to download from the State of Cities Report page. You can choose what information you would like to focus on (employment, energy, etc.). Import the data to Google Data Studio and create a 2-page dashboard showing the state of our cities. Open Data for Africa has a nice example of what such a dashboard could look like Remember to use graphs, tables and filters Include a heading on each page describing what is shown Styling and theme is important - keep it consistent Present your dashboard to the team. You will have to interpret the data - what trends do you see? Any areas for concern or optimism?  "
},
{
	"uri": "/tech-department/workshops/google-forms-like-a-boss/",
	"title": "Google forms like a boss",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/java-specific/gradle-and-intellij-project-structure/",
	"title": "Gradle and IntelliJ project submission structure",
	"tags": [],
	"description": "",
	"content": " When pushing your work to git it\u0026rsquo;s important to be intentional about what you are pushing. When you build your java project and/or run your tests then certain files get created automatically. We don\u0026rsquo;t want those files. We should be able to generate them ourselves whenever we want to.\nWhen you commit your code to git, you can tell git which files to ignore. You can do this though use of a .gitignore file. We\u0026rsquo;ve included a seriosly verbose gitignore file at the bottom of this document. Please just copy it and save it as a file named.gitignore in the root of your project.\nNow if you did this right from the start you should be able to do something like this:\ngit add . git commit -m \u0026quot;a useful and informative message\u0026quot; git push  Now let\u0026rsquo;s see if it all worked out. Try cloning your code yourself and see what git knows about:\ncd somewhere_nice git clone \u0026lt;your github repo\u0026gt; temporary_copy cd temporary_copy tree # you might need to: `sudo apt install tree`  This should output something neat and tidy. Eg from one of our many calculator projects you would see something that looks like this:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main │ └── java │ └── Calculator.java └── test └── java └── CalculatorTest.java  Now you can run these commands and they should work:\n ./gradlew build ./gradlew test  Troubleshooting If the directory structure that githb is tracking is huge and crazy looking then that\u0026rsquo;s because you committed things before adding .gitignore to your project. That\u0026rsquo;s totally ok! We can fix it like so:\ngit rm -r -cached . git add . git status # this should tell yu about a whole big pile of deleted files. This is expected git commit -m \u0026quot;cleaned up junk files\u0026quot; git push  Now take a look at what github knows about. Everything should be looking clean and tidy and if you clone your code it should just work.\nMassive and very thorough gitignore file Please copy this into your projects and save it as .gitignore:\n # Created by https://www.gitignore.io/api/java,gradle,intellij # Edit at https://www.gitignore.io/?templates=java,gradle,intellij ### Intellij ### # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839 # User-specific stuff .idea/ .idea/**/workspace.xml .idea/**/tasks.xml .idea/**/usage.statistics.xml .idea/**/dictionaries .idea/**/shelf # Generated files .idea/**/contentModel.xml # Sensitive or high-churn files .idea/**/dataSources/ .idea/**/dataSources.ids .idea/**/dataSources.local.xml .idea/**/sqlDataSources.xml .idea/**/dynamic.xml .idea/**/uiDesigner.xml .idea/**/dbnavigator.xml # Gradle .idea/**/gradle.xml .idea/**/libraries # Gradle and Maven with auto-import # When using Gradle or Maven with auto-import, you should exclude module files, # since they will be recreated, and may cause churn. Uncomment if using # auto-import. # .idea/modules.xml # .idea/*.iml # .idea/modules # *.iml # *.ipr # CMake cmake-build-*/ # Mongo Explorer plugin .idea/**/mongoSettings.xml # File-based project format *.iws # IntelliJ out/ # mpeltonen/sbt-idea plugin .idea_modules/ # JIRA plugin atlassian-ide-plugin.xml # Cursive Clojure plugin .idea/replstate.xml # Crashlytics plugin (for Android Studio and IntelliJ) com_crashlytics_export_strings.xml crashlytics.properties crashlytics-build.properties fabric.properties # Editor-based Rest Client .idea/httpRequests # Android studio 3.1\u0026#43; serialized cache file .idea/caches/build_file_checksums.ser ### Intellij Patch ### # Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721 # *.iml # modules.xml # .idea/misc.xml # *.ipr # Sonarlint plugin .idea/**/sonarlint/ # SonarQube Plugin .idea/**/sonarIssues.xml # Markdown Navigator plugin .idea/**/markdown-navigator.xml .idea/**/markdown-navigator/ ### Java ### # Compiled class file *.class # Log file *.log # BlueJ files *.ctxt # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package Files # *.jar *.war *.nar *.ear *.zip *.tar.gz *.rar # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml hs_err_pid* ### Gradle ### .gradle build/ # Ignore Gradle GUI config gradle-app.setting # Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored) !gradle-wrapper.jar # Cache of project .gradletasknamecache # # Work around https://youtrack.jetbrains.com/issue/IDEA-116898 # gradle/wrapper/gradle-wrapper.properties ### Gradle Patch ### **/build/ # End of https://www.gitignore.io/api/java,gradle,intellij  "
},
{
	"uri": "/tech-department/workshops/how-to-be-a-great-mentor/",
	"title": "How To Be A Great Mentor",
	"tags": [],
	"description": "",
	"content": "This is a run down of what it means to be a mentor and what we expect from you as a mentor.\n "
},
{
	"uri": "/tech-department/topics/how-the-internet-works/",
	"title": "How the internet works",
	"tags": [],
	"description": "",
	"content": " What is The Internet? The Internet is a massive network of networks, a networking infrastructure. It connects billions of computers and internet-enabled devices together globally, forming a network in which any device can communicate with any other device as long as they are both connected to the Internet. Information that travels over the Internet does so via a variety of languages known as protocols.\n The Internet and The Web (World Wide Web)? The World Wide Web, or simply Web, is a way of accessing information over the medium of the Internet and it is the most major application of internet technology today. It is an information-sharing model that is built on top of the Internet.\nThese days, we often just say \u0026ldquo;The Internet\u0026rdquo; when we refer to anything we access via a web browser or smartphone. However, the World Wide Web and the Internet aren\u0026rsquo;t the same thing. The Web uses a specific protocol called HTTP (hypertext transfer protocol), which is just one of the protocols used to transmit information over the Internet. For example, the Internet, not the Web, is also used for e-mail (which uses IMAP, POP and SMTP), instant messaging, peer-to-peer networks, and FTP (file transfer protocol). So the Web is just a portion of the Internet, albeit a large portion, but the two terms are not synonymous and should not be confused.\nHow does the Internet work?  https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work\n https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name\n https://dev.opera.com/articles/http-basic-introduction/\n https://dev.opera.com/articles/http-lets-get-it-on/\n https://dev.opera.com/articles/http-response-codes/\n  To learn more about how the Internet works, including SMTP, TCP, FTP, and DNS protocols, you are encouraged to read this document:\nhttps://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm\nWhat does the web look like?  The Web is a distributed information system It is made up of web pages (files/documents) These pages contain multimedia (text, images, video, etc) They are linked together via hyperlinks A website is a collection of web pages Websites are stored on computers called web servers A web browser is a piece of software that uses HTTP (hypertext transfer protocol) to retrieve and view web pages It’s able to do this by using a website’s uniform resource locator (URL) - which can be found in the address bar of a current page Secure web pages use encryption like HTTPS to protect themselves from eavesdroppers  Intranet vs. Extranet What is an intranet? An intranet is a private computer network based on the communication standards of the Internet. It is a smaller, private version of the internet that only members of an organization can access. Companies can create this kind of secure and manageable version of the Web to disseminate and share only the information relevant to their business. This can increase productivity as corporate knowledge becomes more accessible and the data is specific, monitored and accurate.\nWhat is an extranet? An extranet is a computer network that allows controlled access from the outside, for specific business or educational purposes. In a business-to-business context, an extranet can be viewed as an extension of an organization\u0026rsquo;s intranet that is extended to users outside the organization; usually partners, vendors, and suppliers, in isolation from all other Internet users. It provides access to needed services for channel partners, without granting access to an organization\u0026rsquo;s entire network.\nWhat can you do with an intranet or an extranet? Here are a few examples:\nDocument distribution  Reducing cost and improving timeliness of distributed information Exchange large volumes of data using Electronic Data Interchange (EDI) Provide a secure medium for the distribution of confidential information  Inter-company communication  Share product catalogs exclusively with trade partners Database access  Provide interactive services  Conduct company wide surveys Develop and use training programs Manage customer support portal  Collaborate with other companies Provide or access services provided by one company to a group of other companies, eg. training, online banking application managed by one company on behalf of affiliated banks\nIntranet and extranets have a wide variety of advantages but like with anything they have their downsides too. For example extranets can be expensive to implement and maintain, especially if hosted internally rather than by an application service provider (e.g. hardware, software, employee training costs), and their security can be a concern when hosting valuable or proprietary information. Keep this in mind when considering using them.\nWeb applications The internet has expanded since its inception and nowadays we use it in a wide variety of ways. You should be familiar with communication methods it has provided like email, instant messaging and voice/video calling. There is also a huge selection of interactive interfaces that operate entirely on the internet and make use of cloud technologies and handheld devices. These web applications range from online shopping to business accounting, health monitoring, gaming, and everything in between.\nWebmail The term Webmail (or Web-based email) is an email service offered by a company or Internet service provider through a website. Common examples are Gmail or Yahoo! Mail.\nWebmail is more often than not accessed through an email client rather than a web browser. For example iOS and Android devices both have native Mail applications that use the IMAP, POP and SMTP protocols to receive and send mail. You can also find other applications that will do the same. This is not a new technology and has existed almost since the advent of the Internet but it has become more commonly used with mobile phones. Its main advantage is that you can manage multiple webmails through one application and you can access your mail even when you’re offline.\nInstant messaging (IM) This is a form of communication over the web that offers quick transmission of text-based messages from sender to receiver. More advanced instant messaging allows enhanced modes of communication, such as live voice or video calling, video chat and inclusion of hyperlinks to media. Telegram, Whatsapp, iMessage and Facebook Messenger are examples of instant messaging.\nVoIP VoIP (Voice over Internet Protocol) is a set of technologies that enable voice calls to be carried over the Internet. Skype and Whatsapp Audio calls are examples of this.\nHow VoIP works The basic process involved in a VoIP call is as follows:\n Conversion of the caller’s analogue voice signal into a digital format Compression and translation of the digital signal into discrete Internet Protocol packets Transmission of the packets over the Internet or other IP-based network Reverse translation of packets into an analogue voice signal for the call recipient  What you need to make a VoIP call To make a VoIP call, the consumer user requires VoIP software and a connection to the Internet. The software will handle the call routing to make sure the call reaches the intended destination. The software can be installed on a variety of hardware devices including traditional telephone handsets (using an adaptor that plugs into the telephone), or on your computer or smartphone.\n"
},
{
	"uri": "/tech-department/how-to-contribute/",
	"title": "How to Contribute",
	"tags": [],
	"description": "",
	"content": " If you want to contribute content to this repo there are a few things you need to know.\nFirstly, this is a Hugo based web site. If you are contributing to the content of this site you will be editing markdown files. So you wont need to know too much about how Hugo works in order to be effective. If you need to figure out the mechanics of this thing, best read the Hugo docs.\nRoad-map So this repo is very much a work in progress. There are a few major tasks that need doing:\n the syllabus page needs to be completed  all the links need to point to actual content all that content needs to be marked as ready (more on this later)  many individual topics, workshops, projects etc can be refined and upgraded. Eg: if a recruit finds a tutorial on the internet that was really helpful in the completion of a project then they might want to add a link to that tutorial into the project description look, feel and functionality. We have the basics down, but it would be very nice to make this site look better and there are likely a few widgets that can be better.  First you need to get yourself set up You\u0026rsquo;ll notice a link to our GitHub repo in the menu on the left. See it? Cool. You\u0026rsquo;ll need to fork that.\nThere are installation instructions in the README.\nOnce you have made your changes then:\n Run the application on your local computer and look at the changes and make sure they are nice looking. Make a pull request. Your pull request should have a nice description of what you are trying to do If it looks like nobody has noticed your pull request then slack one of the tech team members. Feel free to remind us of your contribution  Don\u0026rsquo;t make any changes to the public/ directory This is really important. It might be tempting to you to write some HTML, js or css in there. Resist that temptation. This is a Hugo based website. This means that the public directory is generated auto-magically. Any changes you make within the public directory will be overwritten.\nIf you want to make changes to look and feel or basic site functionality This gets interesting. Basically, Hugo allows the use of themes. The theme we are using is called Hugo-theme-learn and you can find it inside the themes directory in this repo. So most of the visual elements you see when looking at this website is generated through use of that theme.\nIf you want to override anything about how the theme behaves (maybe changing a colour or layout, or adding a functionality) then DO NOT directly edit the theme files.\nIf you want to change how a theme behaves then you need to override that behaviour WITHOUT directly editing the theme.\nTake a look at this directory structure:\n. ├── archetypes ├── config.toml ├── content ├── install_Hugo.sh ├── layouts ├── LICENSE.md ├── public ├── README.md ├── resources ├── static └── themes └── Hugo-theme-learn ├── archetypes ├── CHANGELOG.md ├── exampleSite ├── i18n ├── images ├── layouts ├── LICENSE.md ├── netlify.toml ├── README.md ├── static ├── theme.toml └── wercker.yml  This is a summary of the directory structure of this application. You\u0026rsquo;ll notice that the structure of the theme is very similar to the structure of the repo as a whole. If you want to override a piece of the theme\u0026rsquo;s functionality then you need to find the file in the theme that defines that functionality, then make a file with an equivalent path in the main repo. This might sound weird but it\u0026rsquo;s pretty easy to get the hang of.\nHave an example:\nLet\u0026rsquo;s say we want to change what the menu looks like. You would do something like this:\ncp themes/Hugo-theme-learn/layouts/partials/menu.html layouts/partials/menu.html  Cool, so now we have two copies of menu.html. Make your changes to the new one.\n... ├── config.toml ├── layouts | └── partials | └── menu.html ### EDIT THIS ONE ... └── themes └── Hugo-theme-learn ├── layouts └── partials └── menu.html ### NOT THIS ONE ...  Nice eh?\nThe other thing to know is that Hugo is written in go. So these html files are actually go templates. So that\u0026rsquo;s a topic you can read about on your own. Go templates are used in lots of interesting places.\nThe syllabus index page When you are running the development server (Hugo serve) then you can see this page here. This is where each supported curriculum is outlined, week by week.\nTake a look at the contents of week 1.\nYou will notice that the links there have a pretty consistent format. Eg:\nWORKSHOPS: How to be a professional TOPICS: [TODO] Introduction to Linux PROJECTS: [TODO] Linux INTRO  If you look at the markdown file (\u0026lsquo;content/syllabuses/_index.md\u0026rsquo;) you can see that these links are generated by using the contentlink shortcode.\nEg: WORKSHOPS: How to be a professional (take a look at this page\u0026rsquo;s markdown and take a look at what happened above)\nThis shortcode does a few things:\n it makes the link work it checks the type of the linked to content and writes it down (eg: WORKSHOPS) it checks the title of the linked to content and writes it down (eg: How to be a professional) it (sometimes) adds a [TODO]. If the markdown file is marked as \u0026ldquo;ready\u0026rdquo; then the TODO wont show up.  Eg looking at workshops/how-to-be-a-professional. If the frontmatter looks like this:\n--- title: How to be a professional ready: true ---  Then the TODO wont show up.\nThis functionality is here just so that we can explicitly mark which content we are happy with so we can properly direct our efforts. Once the syllabus is ready as a whole then the TODO functionality will be removed.\nIf you want to make changes to the course content All of the content displayed on the website comes from the content directory. You\u0026rsquo;ll notice a bunch of different directories inside content, each of these directories has a purpose. Try to put your stuff in the right place.\nHere are a few major kinds of content:\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == deliverable  Let\u0026rsquo;s say you want to make a new TOPIC entitled \u0026ldquo;Intro to BeautifulSoup\u0026rdquo;. What you will need to do is this:\nCreate a new file here: content/topics/python-specific/intro-to-beautifulsoup.md. Then add come content and make sure to include a title in your frontmatter/metadata:\n--- title: Intro to Beautifulsoup --- Your content goes here. ## some heading blah blah blah  Once you have saved your file then you should be able to see it in the it in the menu panel on the left hand side of the website.\nAnd you can make a content link to your new file like this:\nUse content-link will look like this: TOPICS: [MISSING title or page]Advanced frontmatter So you know how to specify a title in your frontmatter, there are a few more things to know about.\n weight: this effects the order of things as they show up in the menu on the left-hand side of the screen. Menu items are sorted in ascending weight order pre: This is stuff that shows up before the title in the menu on the left ready: we spoke about this earlier  The only really compulsory thing is the title.\nHere is the frontmatter of the content/syllabuses/_index.md\n--- title: Syllabus pre: \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; weight: 1 ---   since the weight is 1 this item shows up as the first item in the menu on the left the menu item is rendered with HTML something like this: \u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt; Syllabus  Advanced folder structure If you wanted to create a new section with subsections then you would be able to do that too. Experiment a little bit if you need to. Basically do something like this:\n└── content/ └── topics/ ├── beautifulsoup/ ├── _index.md ├── intro.md ├── advanced.md ├── something_else/ ├── _index.md  You can also use this kind of folder structure if you want to include other resources in your markdown. For example a diagram or witty gif.\nWhat not to include Please don\u0026rsquo;t include large binary files in the repo. Just link to that sort of thing. This includes PDFs, presentations, videos and other documents.\n"
},
{
	"uri": "/tech-department/topics/how-to-ask-for-help-with-your-code/",
	"title": "How to ask for help with your code",
	"tags": [],
	"description": "",
	"content": " A big part of learning to be a programmer of any kind is knowing how to get help. This means knowing how to ask questions. Your questions should be short and clear. Your question should include all the information that is needed to answer the question. Practice asking good questions. It\u0026rsquo;s like a superpower. If you are easy to help then people will help you.\nThese also include: Where to ask good questions  Stackoverflow == TRUELY AMAZING Google Slack - All Slack questions should be addressed on the slack #tech-assist channel. If your issues are not addressed on the #tech-assist Channel, then run your issue with your specific department channel, then if it doesn\u0026rsquo;t help then run to your cohort mentors.  Characteristics of a good question: As a general rule of thumb: If you really want help then make it as easy as possible for people to help you. Empathise with the person who will help you. If they are left guessing or they have to ask a million follow up questions then that means you asked a bad-quality question.\n Ask on a bigger audience platform. (e.g Asking on the #tech-assist channel helps you get to a much bigger audience and possibly quick responses from your fellow Recruits, Managers and Alumni.) Be clear and not ambiguous. Your \u0026ldquo;helpers\u0026rdquo; should be able to understand the problem while reading an error message. Please don\u0026rsquo;t send screenshots, what you can do is use backtick symbols to represent in code form. Write full error messages. Be short and meaningful. Error messages should contain necessary information. Most of the time your helper is not willing to read a long story.  NB. IT IS YOUR RESPONSIBILITY TO HELP OTHERS WHEN AND IF YOU HAVE THE ANSWERS (Basically help and be helped).\nThings to note  In general, if your question text contains code or error message those things need to be formatted properly. It needs to not look like a jumbled mess of words and symbols. Different platforms have different ways of pulling this off. Slack uses the backtick symbol. And Stackoverflow does it it\u0026rsquo;s own way. Be aware of the tools and conventions of the platform you are using, then follow those conventions. A similar good way to use Google is when searching for something specific, try using quotes to minimize the guesswork for Google search. When you put your search parameters in quotes, it tells the search engine to search for the whole phrase.  "
},
{
	"uri": "/tech-department/workshops/how-to-be-a-professional/",
	"title": "How to be a professional",
	"tags": [],
	"description": "",
	"content": "This is a run down of what it means to be a professional and how we expect you to behave within the tech department.\n "
},
{
	"uri": "/tech-department/projects/android/incremental-counter/",
	"title": "Incremental Counter",
	"tags": [],
	"description": "",
	"content": " This project is an introduction to how the ui of an app communicates with the code in the associated activity.\nNote  You will make use of xml to create the ui and kotlin to handle events and logic. Use git: push your code every day. Maybe even a few times every day. If you don\u0026rsquo;t back up your work and something terrible happens to your computer then you will not be granted an extension. Make sure your commit messages make sense Be careful when naming your functions, variables and ui elements. Make sure they are clear and easily understandable.  When creating an element in xml, be sure to indicate in the name what kind of element this is.\nexample: When creating a button that\u0026rsquo;s purpose is to save the data on the screen, the name of the element can either be saveButton or btnSave.\nProject Description In this project you will create a screen containing 2 Buttons, a TextView and an EditText.\n The TextView will start with a default value of \u0026ldquo;0\u0026rdquo;. The EditText should accept an integer input. 1 Button will, when pressed increment the value of the TextView by the number in the input field. 1 Button will, when pressed decrement the value of the TextView by the number in the input field.  The app should handle situations where a user inputs a non-numerical value by displaying a popup message indicating to the user that the input data was incorrect.\n"
},
{
	"uri": "/tech-department/topics/python-specific/oop-for-python/",
	"title": "Intro OOP(Object-oriented Programming) for Python",
	"tags": [],
	"description": "",
	"content": " This is a reading presentation of Object-oriented Programming (OOP) for Python.\nNote This is an introduction, this is just to give you a clearer perspective on OOP.\nYoutube videos  Python OOP 1 - Classes and Instances Python OOP 2 - Class Variables Python OOP 3 - Classmethods and Staticmethods Python OOP 4 - Inheritance Python OOP 5 - Special (Magic/Dunder) Methods Python OOP 6 - Property Decorators  Reading Guttag. Introduction to Computation and Programming using Python. Chapter 8, Classes and Object Oriented Programming, p.90 - 110.\nSome Example Code The code below shows demonstrates composition and a little bit of inheritance. There is a lot more to be said about OOP.\n import random class Wheel: def __init__(self): self.tread = 1000 def still_ok(self): return self.tread \u0026gt; 0 def use(self, speed): self.tread -= random.random() * 10 * speed class Vehicle: # colour = \u0026#34;red\u0026#34; def __init__(self, color): self.color = color class Helicopter(Vehicle): pass class Car(Vehicle): has_fueltank = True def __init__(self, speed=1, wheels=4): print(f\u0026#34;entering constructor: {self} at address {id(self)}\u0026#34;) # super(Car,self).__init__(color=\u0026#34;red\u0026#34;) self.position = 0 self.speed = speed # self.wheels = [Wheel() for i in range(wheels)] self.wheels = [] for _ in range(wheels): self.wheels.append(Wheel()) print(\u0026#34;exiting constructor\u0026#34;) def drive_forward(self): print(\u0026#34;driving forwards\u0026#34;) self.position \u0026#43;= self.speed for wheel in self.wheels: wheel.use(self.speed) def needs_service(self): if self.position \u0026gt;= 10000: return True for wheel in self.wheels: if not wheel.still_ok(): return True return False  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-angular/",
	"title": "Intro to Angular",
	"tags": [],
	"description": "",
	"content": " Angular is an opensource Javascript Framework used to build dynamic mobile and desktop web applications using TypeScript/JavaScript and other languages.\nHistory In 2012 Google introduced a new Javascript Framework called AngularJS, the framework was written using pure Javascript and deloveloped using Model-View-Controller concept. The framework uses HTML as a templating language by extending HTML attributes with directives and linking the data to HTML with expressions, this makes possible quick development of dynamic webapps with source code that is easier to read, understand and maintain.\nAn example of creating a simple dynamic AngularJS web app :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div ng-app=\u0026#34;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;AngularJS web app\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Name: \u0026lt;input type=\u0026#34;text\u0026#34; ng-model=\u0026#34;name\u0026#34; placeholder=\u0026#34;What\u0026#39;s your name?\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p ng-bind=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   AngularJS is also known as Angular 1, in the following years after AngularJS was released google and the opensource community released a second version of AngularJS but they called it Angular 2, the suffix \u0026lsquo;JS\u0026rsquo; from AngularJS was removed and this has been so even now with the latest version of angular released being version 7. Angular 2 was a re-design of AngularJS not an increment of it, Angular 2 apps/code is not backward compartible to AngularJS apps/code, but they do share some of the concepts and philosophies except Angular has had more improvements and features added to it, while angularJS has remained at version 1.\nKnowledge of NodeJS and Typescript is necessary to develop Angular apps. Javascript can be used instead of Typescript but such a practice is not widely used and sometimes not recommended by some of Angular users/developers.\nYou can create an Angular app using this few commands below. Please ensure you have Nodjs installed on your system.\nOpen your CMD/Terminal and type :\n1  npm install -g @angular/cli    More about NPM/Node Package Manager, NPM commands.\n2  ng new my-dream-app    (a) Select (y) if you want angular to add routing and (N) if not. Introduction to angular Routing.\n(b) Select CSS or your preferred CSS preprocessor. Introduction to different types of css preprocessor.\n3  cd my-dream-app    List of commonly used CLI/Command Line Interface commands to navigate/create/modify files in an operating system.\n4  ng serve   Look for a line similar to this \u0026ldquo;Angular Live Development Server is listening on localhost:4200\u0026rdquo;, and open your browser to url localhost/27.0.0.1 include specified port, example: for me I would open the browser and type \u0026ldquo;localhost:4200\u0026rdquo; and I will see Angular app webpage. To understand files produced, structure and their purpose look here.\nTo improve the app further\nAdd new components.\nAdd Angular Material.\nAdd Angular dependancies.\nRun and watch tests.\nBuild for production.\nAngular Features and Benefits  Create desktop installable app using same code for Linux, windows, Mac.\n Build native mobile apps using Cordova, Ionic, Nativescript, etc.\n Develop high perfomance Native like Progressive web apps.\n More features and benefits here.\n  Angular introductory resources Angular home.\nAngular documentation.\nAngular tutorial.\nAngular CLI documentation.\n"
},
{
	"uri": "/tech-department/topics/intro-to-css-architecture/",
	"title": "Intro to CSS architecture",
	"tags": [],
	"description": "",
	"content": " CSS Architecture and the Three Pillars of Maintainable CSS State of the art in CSS: a closer look at CSS architecture systems How to Organize Your CSS with a Modular Architecture (OOCSS, BEM, SMACSS)  "
},
{
	"uri": "/tech-department/workshops/intro-to-css-architecture/",
	"title": "Intro to CSS architecture",
	"tags": [],
	"description": "",
	"content": " The followings are to be demonstrated and addressed during the workshop\n Why the need to organize our CSS Separation of Concerns (what is it ?) Modular Architecture  Resources   TOPICS: Intro to CSS architecture   "
},
{
	"uri": "/tech-department/topics/intro-to-docker/",
	"title": "Intro to Docker and Docker-compose",
	"tags": [],
	"description": "",
	"content": " What is Docker\nSet up In this section we\u0026rsquo;ll get docker set up on your computer. Then we\u0026rsquo;ll use it to run a mysql server. This is cool because:\n you can use mysql without having to actually install mysql the same technique will work for running any other database (or many other applications) once docker is installed. This means you can play and experiement with different tools without much of a fuss  Install docker For Ubuntu:\n https://docs.docker.com/install/linux/docker-ce/ubuntu/ https://docs.docker.com/install/linux/linux-postinstall/  For Mint:\n follow these instructions https://docs.docker.com/install/linux/docker-ce/ubuntu/ then when it is time to call add-apt-repository rather do this: sudo add-apt-repository \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo \u0026quot;$UBUNTU_CODENAME\u0026quot;) stable\u0026quot; https://docs.docker.com/install/linux/linux-postinstall/  For Mac:\nhttps://docs.docker.com/docker-for-mac/install/\nNow install docker-compose https://docs.docker.com/compose/install/\nCreate a docker-composition file Make a file called docker-compose.yaml. This is where you specify what containers you want to run and how you want them \u0026ldquo;constructed\u0026rdquo;. Paste the following into the file:\n version: \u0026#34;3.3\u0026#34; services: postgres: image: postgres:9.6 environment: - POSTGRES_USER=user - POSTGRES_PASSWORD=pass - POSTGRES_DB=db volumes: - ./gitignore/postgresql:/var/lib/postgresql/data ports: - 5432:5432 adminer: image: adminer restart: always ports: - 8080:8080  Now open up a terminal and cd into the directory containing the docker compose file then say docker-compose up\nThis launches two containers. One for postgresql, and one for adminer. Adminer is a simple web based gui that you can use to interact with different databases. You\u0026rsquo;ll be able to see this UI at http://localhost:8080\nAlternatively: Mysql composition You can run a mysql composition like this one\n version: \u0026#34;3.1\u0026#34; services: db: image: mysql command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: rootpass MYSQL_USER: user MYSQL_PASSWORD: pass MYSQL_DATABASE: db adminer: image: adminer restart: always ports: - 8080:8080  What\u0026rsquo;s the difference? Postgresql is more of an industry standard than Mysql. But they are both great tools.\nAdvanced topics If you want to use Docker containers in production then there are a bunch of extra things you need to know about. Some of these concepts are pretty deep but you don\u0026rsquo;t need to be an expert in order to use them.\nVolumes If you are running a container that needs to store data (like a database) and you want to make sure that you don\u0026rsquo;t lose that data if the container dies (or gets explicitly killed) then you need to use volumnes. Basically a volume is like a linux \u0026ldquo;link\u0026rdquo; or windows \u0026ldquo;shortcut\u0026rdquo;. It maps a totally normal directory/folder on your computer (your computer is the host) to a directory within the container. When the container tries to store something in the directory then that data appears in the host directory.\nNow if the container completely disappears the data still exists.\nOne use case for this behavior is upgrading. Let\u0026rsquo;s say you are running mysql:8.0. Your compose file will initially contain something like this\n db: image: mysql:8.0 volumes: /my/own/datadir:/var/lib/mysql  To upgrade, you can simply do the following:\n kill the docker composition Edit the compose file to say something like this:   db: image: mysql:8.0.17 volumes: /my/own/datadir:/var/lib/mysql  Now just docker-compose up and you have upgraded your mysql version. Easy peasy. And the same thing can be done for many other applications.\nAnother use case of volumes is of course backing up your data or movving your database to a new computer. Can you figure out how?\nports I\u0026rsquo;m not going to get into the definition of a port here. We\u0026rsquo;ll just talk about how to configure them. Remember how we accessed the adminer gui on port 8080 a second ago? Adminer exposes port 8080 by default.\nTry editing your docker compose file to contain this:\n adminer: image: adminer restart: always ports: - 9090:8080 ###### see how this line changed?  Now restart your composition.\nTry out these links:\n http://localhost:8080 http://localhost:9090  creating your own docker images Prerequisites: It would be really useful if you were comfortable with Bash.\nhttps://docs.docker.com/get-started/part2/\n"
},
{
	"uri": "/tech-department/topics/java-specific/intro-to-junit/",
	"title": "Intro to JUnit",
	"tags": [],
	"description": "",
	"content": " Unit testing is hella important. Basically if your code doesn\u0026rsquo;t have a solid suite of tests that run and pass then it won\u0026rsquo;t be accepted into a larget codebase. This becomes important if you ever want to work productively on a team. Seriously, the only people who don\u0026rsquo;t have tests on their code are dinosaurs and noobs.\nSo test your code.\nBut what does that mean? How do you do it? The first thing you\u0026rsquo;ll need to understand is unit testing.\nWe\u0026rsquo;ll be usng JUnit to write our unit tests.\nGo forth and learn.\nResources This is a great tutorial. It\u0026rsquo;ll take you from zero to hero. Please make sure you understand all of JUnit. (Except the stuff about Ant and Eclipse)\nAnd here are some videos for you:\n https://www.youtube.com/watch?v=D2SiQest2nE\u0026amp;list=PLK7KNOA7vbPN5Y3HcsdmB7GKfnpWQpv0L https://www.youtube.com/watch?v=sQ4KgrxGQSc\u0026amp;list=PLqq-6Pq4lTTa4ad5JISViSb2FVG8Vwa4o\u0026amp;index=4  "
},
{
	"uri": "/tech-department/workshops/intro-to-presentation/",
	"title": "Intro to Presentation",
	"tags": [],
	"description": "",
	"content": "Link to the slides: https://docs.google.com/presentation/d/1gictqI99Sn58VNwbCTB2H1X_u8osahXT_3j97ATLuAo/edit?usp=sharing\n"
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-react/",
	"title": "Intro to React",
	"tags": [],
	"description": "",
	"content": " Official Intro - This tutorial doesn’t assume any existing React knowledge. Introduction to the React by FreeCodeCamp - React, created by Facebook, is an open-source JavaScript library for building user interfaces. It is used to create components, handle state and props, utilize event listeners and certain life cycle methods to update data as it changes.   Other useful links\n  Intro to Redux - The only introduction to Redux (and React-Redux) you’ll ever need All things React - Top 50 React Articles for the Past Year (v.2019)  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-vue/",
	"title": "Intro to Vue",
	"tags": [],
	"description": "",
	"content": " What is? Vue.js is an Model View viewmodel javascript framework that has different optional tools for building user interfaces and single page applications. Vue.js allow you to extend basic HTML with html attributes called directives which adds extra functionality to the html. This directives are provided by Vue.js by default or can be defined by user.\nVue.js Directives\nIn Vue.js a directive is a type of token/indentifier that tells vue.js code to do something to the DOM/Documet Object Model.\nDirective simple syntax :\n1  \u0026lt;html-element prefix-directive=\u0026#34;expression\u0026#34;\u0026gt;\u0026lt;/html-element\u0026gt;   Usage example\n1  \u0026lt;h1 id=\u0026#39;heading1\u0026#39; v-text=\u0026#39;heading_1\u0026#39;\u0026gt;\u0026lt;/h1\u0026gt;   This can also be written using double braces as placeholders for output data like : 1 2 3  \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt; {{ heading_1 }} \u0026lt;/h1\u0026gt;   In the first example looking at [ v-text=\u0026lsquo;heading_1\u0026rsquo; ], the prefix \u0026lsquo;v\u0026rsquo; is default similar to AngularJS \u0026lsquo;ng\u0026rsquo; its purpose is to tell Vue.js library that the HTML attribute is Vue.js attribute. The \u0026lsquo;text\u0026rsquo; part of the \u0026lsquo;v-text\u0026rsquo; is the directive and its meant to tell Vue.js that it should change textContent of the HTML element, with what \u0026lsquo;heading_1\u0026rsquo; expression presents/contains. The same goes for the second example except for example 2 \u0026lsquo;heading_1\u0026rsquo; is directly defined whithin HTML heading attribute textContent area. Some of the directives are v-if, v-el, v-pre, v-on, v-ref, v-transition, etc.\nComparison Simple examples to show usage of Vue.js and normal html alternative.\n1) Add text to heading 1 :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt;{{ heading_1 }}\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#heading1\u0026#39;, data: {heading_1: \u0026#39;Vue.js\u0026#39;} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   new Vue() creates an instance of a Vue.js object. \u0026lsquo;el\u0026rsquo; object key expects its value to be an \u0026lsquo;id\u0026rsquo; of an html element and the \u0026lsquo;data\u0026rsquo; key, value should be data that will be applied to the specified vue.js expression whithin the html code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#39;heading1\u0026#39;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;heading1\u0026#39;).innerHTML= \u0026#39;Vue.js\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \n2) Write input box reply to the dom :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;my_name\u0026#34;\u0026gt; \u0026lt;p\u0026gt;What is your name? : {{ reply }}\u0026lt;/p\u0026gt; \u0026lt;input v-model=\u0026#34;reply\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#my_name\u0026#39;, data: {reply: \u0026#39;\u0026#39;} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   The \u0026lsquo;v-model\u0026rsquo; directive binds the value of HTML elements to application data, and updates the dom when any changes occur. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;What is your name? : \u0026lt;span id=\u0026#34;my_name\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; id=\u0026#39;reply_box\u0026#39; onkeyup=\u0026#39;show_reply()\u0026#39;\u0026gt; \u0026lt;script\u0026gt; function show_reply(){ document.getElementById(\u0026#39;my_name\u0026#39;).innerHTML=document.getElementById(\u0026#39;reply_box\u0026#39;).value; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \n3) Show items list :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;!-- Vue.js --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;ingredients in coffee_reciepe\u0026#34;\u0026gt; {{ ingredients }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#app\u0026#39;, data: { coffee_reciepe: [\u0026#39;water\u0026#39;,\u0026#39;sugar\u0026#39;,\u0026#39;milk\u0026#39;] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   The \u0026lsquo;v-for\u0026rsquo; directive loops through array of items. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;!-- html and javascript --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Vue.js\u0026lt;/h2\u0026gt; \u0026lt;ul id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var coffee_reciepe = [\u0026#39;water\u0026#39;,\u0026#39;sugar\u0026#39;,\u0026#39;milk\u0026#39;]; var ingredient_item_list = \u0026#39;\u0026#39;; coffee_reciepe.forEach(function(ingredient){ ingredient_item_list = ingredient_item_list + \u0026#39;\u0026lt;li\u0026gt;\u0026#39; + ingredient + \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;; }); document.getElementById(\u0026#39;app\u0026#39;).innerHTML = ingredient_item_list; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \nResorce links Vue.js Guide.\nVue.js api.\nComponents basics .\nTemplate syntax .\nVue.js cli.\nVue.js examples .\n"
},
{
	"uri": "/tech-department/topics/functional-programming-intro/",
	"title": "Intro to functional programming",
	"tags": [],
	"description": "",
	"content": " This week is all about higher-order functions: map, reduce and filter. We\u0026rsquo;ll also see what the fuss about lazy evaluation and list comprehension is.\nBackground Material  Learn Functional Python in 10 Minutes Fun Fun Functions: Functional Programming: These videos show functional programming in Javascript, but they contain great explanations. Watch all the videos in the series. Great resource on map, filter and reduce  "
},
{
	"uri": "/tech-department/topics/basic-architecture-concepts/",
	"title": "Intro to software architecture",
	"tags": [],
	"description": "",
	"content": " Software architecture is a pretty vast topic. This here is just scratching the surface.\nSeparate display logic from data logic If your data and your gui get all mixed up then things get very hard to test. Here\u0026rsquo;s an approach you might consider:\n Think what your data should look like. What is the shape of it? These things shouldn\u0026rsquo;t know about HTML. For example, if you were writing a game server (with no front-end at all) then these data structures should be valid. Of course you would be setting up these structures and interactions in a TDD manner Figure out how your data will change. What are the inputs? What are the effects on the data? At this point we still haven\u0026rsquo;t considered drawing any pictures. Now for some display code. Here\u0026rsquo;s a pretty good example adapted from one of your predecessors. This code comes from a project to do with a 10-pin bowling scoring system:  function drawPlayerDetails(player) { document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + player.name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + player.totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + player.pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + player.score + \u0026quot;]\u0026quot;; }  This function does one thing, and it does that thing well and intuitively.\nSome oop resources  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6 SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design  "
},
{
	"uri": "/tech-department/workshops/intro-to-ncit/",
	"title": "Introdction to NCIT curriculum",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/topics/python-specific/intro-to-apis/",
	"title": "Introduction to APIs",
	"tags": [],
	"description": "",
	"content": " https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask\n https://realpython.com/api-integration-in-python/\n  "
},
{
	"uri": "/tech-department/topics/intro-to-ajax/",
	"title": "Introduction to Ajax",
	"tags": [],
	"description": "",
	"content": "Ajax Tutorial\n"
},
{
	"uri": "/tech-department/topics/linux/intro-to-bash/",
	"title": "Introduction to Bash and the terminal",
	"tags": [],
	"description": "",
	"content": "Try this out.\n http://conqueringthecommandline.com/book/basics (Command line bootcamp)[http://rik.smith-unna.com/command_line_bootcamp/] http://korflab.ucdavis.edu/bootcamp.html https://drive.google.com/drive/folders/1Y_MkM737c1GHIuu9oM0AxAAoskms9maP?usp=sharing  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-css/",
	"title": "Introduction to CSS",
	"tags": [],
	"description": "",
	"content": " CSS is defined by w3schools as a language that describes style of an HTML document. CSS dictates the look and feel of a web page.\nCSS foundation The followings form the foundation of CSS:\n Inline CSS Internal CSS External CSS CSS Selectors (Element,Class,ID,Fonts \u0026amp; Colors) Box model Fonts and how to integrate them.  CSS basics  Learn CSS in 5 minutes - A tutorial for beginners\n More CSS\n  "
},
{
	"uri": "/tech-department/workshops/intro-to-css/",
	"title": "Introduction to CSS",
	"tags": [],
	"description": "",
	"content": " There are two great days in a person\u0026rsquo;s life\n the day they are born and the day they discover why.   Topics to be discussed in this workshop can be found here TOPICS: Introduction to CSS "
},
{
	"uri": "/tech-department/topics/design-patterns/",
	"title": "Introduction to Design Patterns",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/dotenv-module/",
	"title": "Introduction to Dotenv module",
	"tags": [],
	"description": "",
	"content": " Description  Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env.\n  We can either set the environment through application code, or we can use a tool to set an environment for us. A common application level tool is dotenv which allows us to load environment variables from a file named .env. Configs should have a separate file of their own and not hosted within the code repository. Having a separate config file makes it easy to update the config values without touching the actual code base. Having separate file eliminates the need for re-deployment of your applications when you change certain values in your config files. In other words, configs belong in the environment as variables, not in the application, you should be able to move it to another environment without having to touch the source code.  How do I use dotenv?  Create project directory and name it whatever you want. cd into the directory you created and run ``` npm init -y npm install dotenv  - Create a .env file and add your configurations.  //.env\nBASE_URL=https://umuzi.org API_KEY=000FBAA4558FF565851A3E104017AB1A SERVER_PORT=3000 USER=umuziadmin OBJ={key1:\u0026ldquo;value1\u0026rdquo;, key2:\u0026ldquo;value2\u0026rdquo;,key3:\u0026ldquo;value3\u0026rdquo;,key4:\u0026ldquo;value4\u0026rdquo;} BOOL=true NUM=123456 STRING= Dumela Lefatshe ARRAY=[1,2,3,4,5,6]\n #### \u0026amp;nbsp; Usage - You can access your configuration from your code like this.  //index.js\nrequire(\u0026lsquo;dotenv\u0026rsquo;).config();\nconst url = process.env.BASE_URL; const apiKey = process.env.API_KEY; const port = process.env.SERVER_PORT; const user = process.env.USER; const obj = process.env.OBJ; const boolean = process.env.BOOL; const number = process.env.NUM; const string = process.env.STRING; const null1 = process.env.NULL; //be careful with reserved words const undefined1 = process.env.UNDEFINED; const array = process.env.ARRAY;\nconsole.log(url); console.log(apiKey); console.log(port); console.log(user); //lol, this one seems to return the name of pc owners. console.log(obj); console.log(number); console.log(string); console.log(boolean); console.log(null1 == null ? true : false); console.log(array);\n What if you need this environment variables in multiple places? If you do reference the variables everywhere that you need them it could make refactoring and maintenance more difficult than if they are in one place. #### \u0026amp;nbsp; You can use a Javascript config file to get around this.  //config.js\nrequire(\u0026lsquo;dotenv\u0026rsquo;).config();\nmodule.exports = { url : process.env.BASE_URL, apiKey : process.env.API_KEY, port : process.env.SERVER_PORT, user : process.env.USER, obj : process.env.OBJ, boolean : process.env.BOOL, number : process.env.NUM, string : process.env.STRING, null1 : process.env.NULL, undefined1 : process.env.UNDEFINED, array : process.env.ARRAY };\n Now you can import this configs from any place in your code.  //index.js, doSomething.js, anotherJsFile.js, etc\nconst configs = require(\u0026lsquo;/path/to/js/config/file\u0026rsquo;);\nconsole.log(configs.url); console.log(configs.apiKey); console.log(configs.user); console.log(configs.obj);\n##### What’s the value in this technique? - it is easy - clarity on how all environment variables are being mapped - you can rename variables to more readable properties - you can add other configuration properties from non-environment variables ## \u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; OR Dotenv has the option of preloading the environment variables outside your code. Preload your variables and eliminate the code that reads the .env file from your code base. Less code is fewer lines that could break or be maintained. ![alt text](https://imgflip.com/s/meme/Roll-Safe-Think-About-It.jpg) This technique removes any need for code that uses require on dotenv. This includes the ``` dotenv.config()``` or ``` require('dotenv').config() ``` code mentioned previously in this article. You can run your node app using the — require ( -r ) command line option to preload dotenv. The following command will preload all environment variables from the file .env using dotenv and make them available in your app.  node -r dotenv/config server.js\nNow you can access all environment variables in the .env without requiring dotenv in your code, use ```process.env.NAME_OF_VARAIBLE``` to access the variables. ## Best practices \u0026gt; Be careful to add .env to your .gitignore file and commit that change before you add your .env. Otherwise, you run the risk of committing an early version of your .env to source control. Your .env file contains very sensitive information (your app key at the very least). You do not want this in version control where everybody can see this information and possibly use it to attack your site. Think about database information which might be stored in there or email keys or passwords. Furthermore it is likely that the information which you use in your .env file also needs to change between environments so you will need to change values anyways.  //.gitignore\n.env\n #### Sharing your .env file The best practice on this matter is add a ```.env-example``` file in your repo to give a general outline of configuration available to developers but using dummy data as values to your variables.  //.env-example\nBASE_URL=https://dummy.url.com API_KEY=dummyApiKeyHere SERVER_PORT=dummyPort USER=dummyAdminName OBJ={dummyKey1:\u0026ldquo;dummyvalue1\u0026rdquo;, dummyKey2:\u0026ldquo;dummyValue2\u0026rdquo;,dummyKey3:\u0026ldquo;dummyValue3\u0026rdquo;,dummyKey4:\u0026ldquo;dummyValue4\u0026rdquo;} BOOL=true NUM=123456 STRING=DummyString ARRAY=[\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;,\u0026ldquo;dummy\u0026rdquo;]\n **Do not include this file in.gitignore```**\nResources https://www.npmjs.com/package/dotenv\nhttps://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa\nhttps://medium.com/chingu/protect-application-assets-how-to-secure-your-secrets-a4165550c5fb\nhttps://projectricochet.com/blog/importance-code-separation-and-why-we-use-git-workflow-managing-different-environments\n"
},
{
	"uri": "/tech-department/workshops/intro-to-express/",
	"title": "Introduction to Express js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/intro-to-gradle-with-intellij/",
	"title": "Introduction to Gradle",
	"tags": [],
	"description": "",
	"content": " What is gradle According to Gradle Inc, Gradle is an open-source build automation tool that is designed to be flexible enough to build almost any type of software.Here are the five things you need to know about gradle.\nGradle was chosen by Google as the official build tool for Android. Find out why.\nWhy we need a build tool Build tools are programs that automate the creation of executable applications from source code. Building incorporates compiling, linking and packaging the code into a usable or executable form. In small projects, developers will often manually invoke the build process.\nJava Build Tools  Ant Gradle Maven  Read up on the major differences between the following Java Build Tools Gradle vs Maven\nYour first Gradle application  Open Project Wizard, in the left-hand pane select Gradle. In the right-hand pane, IntelliJ IDEA automatically adds a project SDK (JDK) and a default option Java in the Additional Libraries and Frameworks area. Click next. On the next page of the wizard let\u0026rsquo;s specify ArtifactId as test.project which basically is the name of our project. We can use the default information in the version field. Unless we plan to deploy our project in some Maven repository we don\u0026rsquo;t need to specify a GroupId. Click next. In the Project tool window open the src folder. Right-click the main directory then the java subdirectory and from the list select New | Java Class. In the Create New Class dialog specify the name of your Java Class as Gradle and click OK. Add the following code in your Java Class  public class Gradle{ public static void main(String[] args){ String gradle = \u0026quot;Introduction to Gradle!\u0026quot;; System.out.println(gradle); } }   In the editor, in the left gutter, press icons toolwindows toolWindowRun svg and select Run \u0026lsquo;HelloGradle.main()\u0026rsquo;.  "
},
{
	"uri": "/tech-department/topics/apis/graphql/",
	"title": "Introduction to GraphQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/intro-to-jupyter-notebook/",
	"title": "Introduction to Jupyter Notebooks",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Environment Download and install miniconda on your machine. This will install python and the conda package manager for python. NB Make sure that you set the python path! Setting the path will allow you to simply type python into the terminal to open python.\nYou also want to install the following packages:\n jupyter-notebook numpy pandas matplotlib seaborn scipy scikit-learn  You can install packages by typing conda install name-of-package, e.g. conda install numpy.\nTo launch a new jupyter instance (kernel), open up a new terminal, navigate to the directory in which you want to be and type jupyter notebook(and press enter). A new jupyter kernel will open in your browser. You can now open an existing notebook (*.ipynb) or create a new notebook.\nWhen you are done, click \u0026lsquo;Close and Halt Kernel\u0026rsquo; or press Ctrl+C twice to shut down the kernel from the terminal.\nAssignment Complete the (Nobel Prize Winner assignment)[http://somewhere.nice] and upload it to Github. You will need to create a Github account if you do not already have one.\nYou may want to go through DataCamp\u0026rsquo;s Python Programming track to get the basic skills you will need to complete the assignment.\nSupporting Material  Python For Data Science Cheat Sheets Jupyter Notebook Keyboard Shortcuts Basic Python 3 Programming for Scientists  TOPICS: Jupyter notebooks best practices   "
},
{
	"uri": "/tech-department/topics/linux/intro-to-linux/",
	"title": "Introduction to Linux",
	"tags": [],
	"description": "",
	"content": "Linux is an operating system (much like windows is an operating system). Linux started of as one nerd\u0026rsquo;s hobby but quickly grew in fame. Linux is free, it\u0026rsquo;s source code is freely available, and it is created, developed and used by a large community\n Intro to linux mint: https://www.youtube.com/watch?v=HhHu-1glWps post install guide 1: https://gitlab.com/prelude-open-source/mint-post-install-guide post install guide 2: https://fossbytes.com/things-to-do-after-installing-linux-mint  If you are one of our Python cohorts you\u0026rsquo;ll need to get Python 3.7 installed alongside Python2.7.\n"
},
{
	"uri": "/tech-department/workshops/intro-to-linux/",
	"title": "Introduction to Linux: Live demo",
	"tags": [],
	"description": "",
	"content": " Linux Ubuntu or Mint will be demonstrated to the recruits. Demonstrate:\n Command line navigation versus gui based navigation basic command-line commands, man and \u0026ndash;help how to install software, and why it\u0026rsquo;s cool use of sudo (and why o be careful about that) creating a file in the command line and visually seeing it come up in the gui how to set up keyboard shortcuts launching Python and Node from the command line  Prerequisites for speaker Whoever is doing ths workshop should be familiar with th excercises given to recruits. Questions will come up, you should be able to answer them.\n  PROJECTS: Linux challenges   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/introduction-to-node/",
	"title": "Introduction to Node",
	"tags": [],
	"description": "",
	"content": " https://codeburst.io/getting-started-with-node-js-a-beginners-guide-b03e25bca71b https://docs.npmjs.com/about-packages-and-modules https://www.w3schools.com/nodejs/nodejs_npm.asp https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc  "
},
{
	"uri": "/tech-department/workshops/node-and-sql/",
	"title": "Introduction to Node and SQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/intro-to-asserive-programming/",
	"title": "Introduction to assertive programming",
	"tags": [],
	"description": "",
	"content": " You\u0026rsquo;ve all heard of \u0026ldquo;defensive driving\u0026rdquo;, right? When driving a car you do certain things if you want to stay alive. You maintain a safe following distance, you check your mirrors and blind spot, you watch your speed. And why do you do that?\nBecause mistakes happen. Sometimes the road is bad, sometimes there\u0026rsquo;s a cow in the road, sometimes the other drivers on the road are inatentive. Sometimes you are inattentive.\nOk. Now let\u0026rsquo;s talk about code. Code is written by humans for humans. Humans are prone to human error. Humans make mistakes all the time, there will be typos, off-by-one errors, assumptions and all sorts of weird nonesense.\nAssertive programming is one way to do defensive programming. It has loads of benefits.\nFirst consider the following code:\nassert refund_amount \u0026gt; 0, f\u0026quot;refund amound needs to be positive, this is invalid {refund_amount}\u0026quot;  This is written in Python, but other languages have their own way of doing the same kind of stuff. Basically what this does is raise/throw an Exception/Error when a certain condition is not met. The error message is nice and descriptive.\nThis is good for a few different things:\n sanity checking around human error and input validation these assertions are useful as documentation  Also, in general, the earlier you find a problem the cheaper it it to fix. This is a fact of life. Seriously.\nIn terms of coding, let\u0026rsquo;s talk a bit more about the refund_amount assertion. Imagine a piece of software that is all about shopping. Occasionaly users require refunds. What might happen if somehow a negative refund amount slips into the system? It might show up as something weird on a frontend and make the end users distrust the system, then the backend devs will blame the frontend devs, maybe the accounting system will be negatively effected (of course the frontend devs will be blamed for this too, at least for a little while), the refund wont be paid to the user on time, and lotd of other aweful nasty stuff.\nThat one little line of code prefents all sorts of crazy stuff from happening in the code.\nAssertions save lives!\nResources This excellent article talks about the benefits of failing fast and loudly: https://www.martinfowler.com/ieeeSoftware/failFast.pdf\nThis discussion on Stackoverflow is about where assertions are inappropriate. It makes use of heavy wordds like public methods and stuff like that. Basically a shortcut to doing this right is thinking about who is going to see your error message and how the error message will be useful to them. https://stackoverflow.com/questions/13832487/why-should-assertions-not-be-used-for-argument-checking-in-public-methods\nJava Resources  https://www.geeksforgeeks.org/assertions-in-java/  "
},
{
	"uri": "/tech-department/topics/intro-to-pair-programming/",
	"title": "Introduction to pair programming",
	"tags": [],
	"description": "",
	"content": " What is it? Pair programming is when you get two (or three) programmers to work on the same piece of code on the same computer. Only one person is coding at a time and the rest of the people are being helpful in some way.\nBut why? Think about what can happen if you have multiple brains working on the same problem. There are lots of benefits.\n the coders can all leverage their own problem-solving strengths to solve the same problem, so the problem will get solved well the coders will learn from each other! You get to grow and help your peers grow. How cool is that? the coders catch each others mistakes and assumptions before they get into the code base  This wonderful article gives a bit more detail on the benefits of pair programming.\nHow to do it Pair programming works best if everyone gets a turn at the keyboard, team member roles get mixed around, and communication is prioritized. There are a few different approaches to getting this right:\nPing Pong This kind of pair programming works best when there is a natural cadence to the coding process. Eg: Alice writes a little function, then Bob writes a little functio, etc.\nThis works suuuper well when it comes to Test Driven Development (we cover TDD later in the course)\nDriver-navigator Basically in this form, one person is the driver (they drive the computer), and the other person gets to direct their efforts. The driver is writing all the code so they get to ask questions and suggest corrections if they think something is a bad idea.\nUnstructured In the absence of a plan, this tends to happen. It sounds like a terrible idea at first (if you fail to plan, you plan to fail) but it can work pretty well in some situations.\n if the coding pair is evenly matched if the coding pair already know how to work together if the pair have compatible styles of communication and code  While you are still learning how to do this well, rather stick to one of the other styles.\nHow to do it well  take turns. Set a timer if you have to try to communicate constantly and clearly. Communication can be hard but it can also be a super-power. Use this oppertunity to practice your communication skills always be learning. Everyone has something to teach you. If you feel frustrated by your partner\u0026rsquo;s coding abilities then use this opportunity to learn how to explain yourself better (this skill will serve you well). Teamwork is really really important in life so learn how to team. you should all understand every line of code. You should be in agreement that the code is good quality and clean  Extra reading https://medium.freecodecamp.org/want-to-be-a-developer-you-should-probably-be-pair-programming-2c6ec12c4866\n"
},
{
	"uri": "/tech-department/topics/intro-to-unit-tests-with-mocha/",
	"title": "Introduction to unit tests with Mocha",
	"tags": [],
	"description": "",
	"content": " https://github.com/dwyl/learn-tdd https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/ https://codeburst.io/javascript-unit-testing-using-mocha-and-chai-1d97d9f18e71 https://mochajs.org/ https://medium.com/@williamjoshualacey/unit-testing-with-mocha-fda6a6f360c6 https://blog.logrocket.com/a-quick-and-complete-guide-to-mocha-testing-d0e0ea09f09d  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-web-design/",
	"title": "Introduction to web design",
	"tags": [],
	"description": "",
	"content": " There is a lot to be said about web design. Before you can get into it you need some basic tools.\nYou will need to have basic familiarity of HTML and CSS if you want to make anything that looks good. Focus on understanding the basics for now.\nGuidelines User interfaces are for users. Think about your users and how they will interact with your work.\n Make sure your front-end is discoverable. What would a new user think to do when they arrive for the first time? Make sure that your front-end is learnable. If you need your users to take novel actions make sure that the users can remember how to do those actions later. The user is always right. If a user gets confused by your website then it means that your website is confusing. Swallow your pride and accept criticism Always have an escape strategy. If a user clicks on a button and navigates somewhere strange, they should be able to go back Don\u0026rsquo;t use too many colors. And remember that some of your users will be color-blind be consistent make sure that the most important parts of your site look important. Make them big, put them at the top. Guide your users to interact with the right components Make desired actions easy. Imagine two e-commerce sites with a similar style, selling similar items. On site A the user needs to click the mouse 10 times to make a purchase, on site B the user needs to click the mouse 3 times to make a purchase. Site B will make more sales. KISS. Don\u0026rsquo;t do this Familiarity breeds trust. If your website looks familiar then people will take it seriously https://www.orbitmedia.com/blog/web-design-standards/ https://www.pagecloud.com/blog/web-design-guide  Responsive design A responsive web site is one that changes shape so that it looks and feels good on many different devices. Since cellphones are so powerful and ubiquitous these days it is usually considered best practice to design your site in a \u0026ldquo;mobile first\u0026rdquo; way. This means that you should first make sure that your site works well on a phone, then you make sure it works well on larger devices.\nThese links will teach you the basics\n https://www.w3schools.com/html/html_responsive.asp https://www.w3schools.com/css/css_rwd_intro.asp  Accessibility  A developer\u0026rsquo;s guide to web design for non-designers  Principles of design  design-101-for-developers 7 principles of design for coders https://www.w3.org/WAI/fundamentals/accessibility-intro/  "
},
{
	"uri": "/tech-department/topics/java-specific/jdbc-templates/",
	"title": "JDBC templates",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/",
	"title": "JS and Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/code-review/may-review-c13-c14f/",
	"title": "JS code review May 2019",
	"tags": [],
	"description": "",
	"content": " Use the git From the command line. Seriously. For all further projects forever.\nThe next person who gives us a drag and drop upload will be shamed with a bell.\nTake pride in your work There are some pieces of feedback that were given before that were not incorporated into your code. It makes the review process a pain in the neck because I like to keep my code review comments DRY.\nTo learn as much as you can from this feedback:\n make your work excellent don\u0026rsquo;t copy from tutorials you found on the internet, make sure you know how to make it work yourself  You are here to learn. So learn.\nLearn your technical skills and learn to produce like a professional\n your code should work if there is a front-end it should not be a complete mess. A lot of the time we don\u0026rsquo;t need something beautiful. But don\u0026rsquo;t give us something un-usable and did I mention git?  Obvious comments Obvious comments shouldn\u0026rsquo;t be left in the code. It just means there is more stuff to read, it doesn\u0026rsquo;t add value:\n /** * this contructor initialises variables and the variables are called by functions below */ constructor(totalTime, cards) {\u0026lt;!-- --\u0026gt;  Ideally:\n code should be self-documenting. Meaning, your code should be so obvious that comments aren\u0026rsquo;t even necessary if comments are required then that is OK, but don\u0026rsquo;t say obvious things.   /** * this contructor does constructor like things in order to allow my code to execute in an object orientated manner. */ constructor(totalTime, cards) {  Mixing UI and data This is a common thing that happens a lot. Should have spoken about it more before but\u0026hellip;\nThink about your project as a number of layers. You have a data and logic layer, this holds information about\u0026hellip;information. It doesn\u0026rsquo;t care about HTML. It doesn\u0026rsquo;t KNOW about HTML.\nThen there is the UI layer stuff. It generates DOM elements from the data. And it triggers data-layer functionality based on DOM events.\nYou\u0026rsquo;ll get to play with this concept more soon.\nThings to know about: Loose coupling\nLabelling your code with your name isn\u0026rsquo;t necessary. We have Git /** Michael: codeblock ends**/ //_________________________________________This is where Wandile's Edits starts__________________________________________________  Git can tell us the exact commit that made the change on every line of code. So we have all the info we can eat.\nDon\u0026rsquo;t leave junk lying around Usually it\u0026rsquo;s bad to leave stuff like this in your codebase:\n // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection);  Looooong comments  let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */  These tend to get out of date. It\u0026rsquo;s better to just have self-documenting code.\nFunctions should be short and have one purpose Let\u0026rsquo;s take a moment to appreciate\nfunction loadCards() { // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection); /**Michael: added the array created dynamically with users input**/ let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */ /******* ranNums *******/ while (i--) { j = Math.floor(Math.random() * (i+1)); ranNums.push(nums[j]); nums.splice(j,1); }; /* Create an HTML section and add the class memory-game to section. * */ /******* section *******/ let section = document.createElement(\u0026quot;section\u0026quot;); section.classList.add(\u0026quot;memory-game\u0026quot;); /* store the filenames of all the images that will be used in the game in an array. **/ let cards = [\u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;]; console.log(\u0026quot;WE're about to go in...\u0026quot;); /**Michael: set card length to the value of the users input.**/ cards.length = userLevel; /* for-loop to load and shuffle cards. **/ for (let index = 0; index \u0026lt; cards.length; index++) { /** create a div then add to the div; a class named memory-card as well as a dataset of the card's filename **/ let cardDiv = document.createElement('div'); cardDiv.classList.add(\u0026quot;memory-card\u0026quot;); cardDiv.dataset.card = cards[ranNums[index]]; /** create an image tag then add to the tag a class named front and the source of the image **/ let frontImage = document.createElement(\u0026quot;img\u0026quot;); frontImage.classList.add(\u0026quot;front\u0026quot;); frontImage.src = cards[ranNums[index]]; /** make the image tag as a child of the div **/ cardDiv.appendChild(frontImage); /** create an image tag then add to the tag a class named back and the source of the image **/ let backImage = document.createElement(\u0026quot;img\u0026quot;); backImage.classList.add(\u0026quot;back\u0026quot;); backImage.src = \u0026quot;img/umuzi_logo.png\u0026quot;; /** make the image tag as a child of the div **/ cardDiv.appendChild(backImage); /** make the meomry-card div a child of the memory-game div **/ section.appendChild(cardDiv); } /** once all cards have been loaded, add div memory-game a child of section **/ document.body.appendChild(section); console.log(cards); cardSelector() var sectionId = document.getElementsByTagName(\u0026quot;section\u0026quot;)[0].setAttribute(\u0026quot;id\u0026quot;, \u0026quot;memory-game\u0026quot;); };  If you try to explain the low level functionality of a functions and you end up saying: \u0026ldquo;it does x, and it does y, and it does z, but only if q, until the condition w\u0026rdquo;. Stop. Just stop.\nPay attention to naming conventions even when naming files and directories Bk.js ?  If working with web, make sure your slashes are in the right direction: const cardPack = [\u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;]  This game only works on windows. Seriously, what URL looks\\like\\this?\nfunky indenting function loadGame(selection) { if (document.getElementById('gameDisplay').hasChildNodes()) { document.getElementById(\u0026quot;gameDisplay\u0026quot;).removeChild(gameDisplay.childNodes[0]); } //The arrays that store all the URLs to picks and the dataset names const cardPack = [...stuff for (var i = 0; i \u0026lt; selection * 2; i++) {  inconsistent indenting is hard to follow JUST USE PRETTIER (demo with Bk.js)  caPitalisatopn Matters  var Section = document.createElement('section')  Be consistent. It makes your code easier to work with.\nnames should be meaningful Can anyone guess what this means?\nfunction IncreaseCards(selection) {  Do they get bigger? Does the number of cards increase? None of the above.\nCall a hammer a hammer. Call a nail a nail. Etc\nOne git repo one project Don\u0026rsquo;t put arbitrary things that have nothing to do with each other in the same repo. What does a memory game have to do with bowling?\nIf it walks like a loop and quacks like a loop, try using a loop  frame1.innerHTML = game.frameScore['1'] frame2.innerHTML = game.frameScore['2'] frame3.innerHTML = game.frameScore['3'] frame4.innerHTML = game.frameScore['4'] frame5.innerHTML = game.frameScore['5'] frame6.innerHTML = game.frameScore['6'] frame7.innerHTML = game.frameScore['7'] frame8.innerHTML = game.frameScore['8'] frame9.innerHTML = game.frameScore['9'] frame10.innerHTML = game.frameScore['10']  frames = [frame1,frame2, etc] then loop...  there are still memory games that are js embedded in HTML Take some pride in your work. You are here to learn. Pursue excellence.\nFlat is better than nested \t} else { function flip2Back(){ var tile_1 = document.getElementById(memory_tile_ids[0]); var tile_2 = document.getElementById(memory_tile_ids[1]); tile_1.style.background = 'url(tile_bg.jpg) no-repeat'; tile_1.innerHTML = \u0026quot;\u0026quot;; tile_2.style.background = 'url(tile_bg.jpg) no-repeat'; tile_2.innerHTML = \u0026quot;\u0026quot;; memory_values = []; memory_tile_ids = []; } setTimeout(flip2Back, 700); }  The technical term for this kind of thing is: ugly\nInitialise arrays the simple way var cards = []; ... cards[22]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[23]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[24]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[25]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[28]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[29]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[30]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[31]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[32]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; cards[33]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; ... even more stuff  I made a typo above, can you see it?\nComments should be useful for the next person reading the code //To randomise the positions of the cards on the board --\u0026gt; Learnt this syntax on ES6(Call right after creating function)  Sometimes if you are doing something novel it is good to talk about it a bit, something I often do in my code is:\n// the following is based on https://something.cool/I/found complicated_code_begins_here()  Loose coupling  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples\n https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6\n SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\n  Model-view One way to make complicated logic easier to test and understand and more portable is to have a clear separation of concerns. Think of it as a bunch of layers.\nCreate a bunch of code that is all about describing data. This is frontend-agnostic. Then have a visual layer that ties into that and makes your data visible and accessible.\nThis is an example of loose-coupling\nTDD specific  your tests should be small and specific. Gigantic tests should not  some code just isn\u0026rsquo;t self documenting. In these cases add documentation Eg:\n scores(){ this.updateTotals(); if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.secondRoll[this.index].innerHTML = 0; if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.index \u0026lt; 9){ //one strike if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); //two strikes if ((this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10) \u0026amp;\u0026amp; (this.firstRoll[this.index - 1].innerHTML == 10)) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //three strikes if (this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //spare if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; Number(this.firstRoll[this.index - 1].innerHTML) != 10 \u0026amp;\u0026amp; (Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) == 10)) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); this.frameScore[this.index].innerHTML = Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); this.totalScore[0].innerHTML = Number(this.frameScore[0].innerHTML); if (this.index \u0026gt;= 1) this.updateTotals(); } else if (this.index == 9) { this.secondRoll[9].innerHTML = Math.floor(Math.random() * this.pins + 1); this.thirdRoll[0].innerHTML = Math.floor(Math.random() * this.pins + 1); } }  I shouldn\u0026rsquo;t have to read the body of the function to know what it does. The name and optional documentation should be enough. What would be a better name for this function?\nYour tests are not your application Don\u0026rsquo;t put the specrunner in your index.html file. Imagine you are building this for a client. They care about bowling. You care about doing a good job. The test runner and test results are not client-facing.\nPlay by the rules If this is a TDD project then do it in a test driven way. There are big parts of many people\u0026rsquo;s codebases without tests at all. Eg: if the manner in which players take turns in the game has some complexity, maybe it would be good to test the logic that chooses whose turn it is?\nUntested code is a form of technical debt.\nAlso, we give you these exercises for a reason. If we are playing chess then the easiest way to win might be to drop-kick your opponent but that\u0026rsquo;s not the point. If you have a TDD assignment then figure out how you can use your tests to inform the structure of your code, and figure out how to write testable code.\nHTML in JS Try make it tidy at least. Use one notation at a time. Care about indentation and readability.\ndocument.getElementById(\u0026quot;currentNext\u0026quot;).innerHTML = `\u0026lt;strong\u0026gt;Round: \u0026lt;/strong\u0026gt; ${Player.list[showPlayer].round - Player.list[showPlayer].numOfStrikes + 1} Throw#: ${Player.list[showPlayer].throw+1}` + \u0026quot;\u0026lt;div id='\u0026quot; + Player.list[showPlayer].name + \u0026quot;'\u0026gt;\u0026lt;strong\u0026gt;Current Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[showPlayer].name + \u0026quot; - \u0026quot; + Player.list[showPlayer]. totalScore + \u0026quot; points\u0026quot; + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Next Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[nextPlayer].name + \u0026quot; - \u0026quot; + Player.list[nextPlayer]. totalScore + \u0026quot; points\u0026lt;/div\u0026gt;\u0026quot;;  A cool example of separating concerns This function is all about drawing a picture of some details. It is in no way concerned with calculating those details. It just shows them. This function does only one thing, and it does that one thing well.\nfunction showDetails(player) { console.log(\u0026quot;Show details for \u0026quot; + Player.list[player -1].name); document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + Player.list[player - 1].score + \u0026quot;]\u0026quot;; }  (Nice one Axel)\nThis idea is at the core of modern js frontend frameworks. Exciting things are on the horizon for you guys.\nnames people function getPos() {  FTW?\nok this is just a bit strange  this.addPlayer = (playerName = new Player()) =\u0026gt; { this.players.push(playerName); }  What is playerName suposed to be here. A string or an object?\n"
},
{
	"uri": "/tech-department/topics/jasmine-spies/",
	"title": "Jasmine Spies",
	"tags": [],
	"description": "",
	"content": " Spying on JavaScirpt Methods using Jasmine Jasmine is made for unit testing. Unit tests are supposed to test only one component of your application. A component can be a function, an object, a module, basically everything self-contained that acts like a black box to the outside world. You usually want to avoid that your unit tests fail because another component failed. That’s why you want to test your components in isolation as much as possible.\nFor example, you may not want to send data to another server in your unit tests or you don’t want to manipulate a page’s DOM. But you want to make sure that the components which are responsible for these tasks get called correctly. How do we do this?\nOne of the primary aims of unit testing is to isolate a method or component that you want to test and see how it behaves under a variety of circumstances. These might include calls with various arguments - or even none at all, - or whether it calls other methods as it should. Unfortunately, many methods and/or objects have dependencies on other methods and/or objects, such as network connections, data sources, files, and even previously executed methods. This is where mocks come in. A mock is a fake object that poses as the real McCoy in order to satisfy the inherent dependency(ies) without having to go through the overhead of creating the real object.\nIn Jasmine, mocks are referred to as spies. There are two ways to create a spy in Jasmine: spyOn() can only be used when the method already exists on the object, whereas jasmine.createSpy() will return a brand new function:\n//spyOn(object, methodName) where object.method() is a function spyOn(obj, 'myMethod') //jasmine.createSpy(stubName); var myMockMethod = jasmine.createSpy('My Method');  Using the SpyOn() method As mentioned above, spyOn() can only be used when the method already exists on the object.\nFor simple tests, this is your best bet.\nThe test cases all feature the following Person class. It has a couple of attributes,\na getter and setter for the name, and two public methods:\nclass Person { //default variables let _age = 0, _name = 'John Doe'; constructor(name, age) { this._name = name | _name; this._age = age | _age; } //Getters and setters this.getName = function() { return this._name; } this.setName = function( name ) { this._name = name; } this.getAge = function() { return this._age; } this.setAge = function( age ) { this._age = age; } //Public methods this.addBirthday = function() { this_age++; } this.toString = function() { return 'My name is \u0026quot; + this.getName() + \u0026quot; and I am \u0026quot; + this.getAge() + \u0026quot; years old.'; } }  Say that we want to verify that the toString() method was calling getName(). We would instantiate the Person as usual, but before calling toString(), we would call spyOn(), passing in the person instance and the name of the method that we want to spy on (\u0026lsquo;getName\u0026rsquo;).\nWe can then call jasmine matchers to see what happened. The simplest test is to check that getName() was in fact called:\ndescribe(\u0026quot;Person toString() Test\u0026quot;, function() { it(\u0026quot;calls the getName() function\u0026quot;, function() { //Creating person instance var testPerson = new Person(); //Creating a spy to test on spyOn(testPerson, \u0026quot;getName\u0026quot;); //Calling the function and the using matchers to check whether it has been called testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); });  But that\u0026rsquo;s just the beginning. We can run other tests on our spied function, such as what arguments it was called with.\nA spy only exists in the describe or it block in which it is defined, and will be removed after each spec.\nThere are special matchers for interacting with spies. This syntax has changed for Jasmine 2.0. The toHaveBeenCalled() matcher will return true if the spy was called. The toHaveBeenCalledWith() matcher will return true if the argument list matches any of the recorded calls to the spy.\nConversely, we can test that the function was called without any parameters by calling toHaveBeenCalledWith() without a value:\ndescribe(\u0026quot;Person toString() Test\u0026quot;, function() { var testPerson; beforeEach( function() { testPerson = new Person(); foo = { setBar: function(value) { bar = value; } }; } ); afterEach ( function() { testPerson = undefined; } ); it(\u0026quot;calls the getName() function\u0026quot;, function() { spyOn(testPerson, \u0026quot;getName\u0026quot;); testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); it(\u0026quot;Method getName() was called with zero arguments\u0026quot;, function() { // Ensure the spy was called with the correct number of arguments // In this case, no arguments expect(testPerson.getName).toHaveBeenCalledWith(); }); it(\u0026quot;tracks that the spy was called\u0026quot;, function() { spyOn(foo, 'setBar'); foo.setBar(123); expect(foo.setBar).toHaveBeenCalled(); }); it(\u0026quot;tracks all the arguments of its calls\u0026quot;, function() { spyOn(foo, 'setBar'); foo.setBar(123); expect(foo.setBar).toHaveBeenCalledWith(123); }); });  Creating Our Own Spy Method Sometimes, it may be beneficial to completely replace the original method with a fake one for testing. Perhaps the original method takes a long time to execute, or it depends on other objects that aren\u0026rsquo;t available in the test context. Jasmine lets us handle this issue by creating a fake method using jasmine.createSpy(). Here\u0026rsquo;s how to substitute a fake getName() for the real one:\ndescribe(\u0026quot;Person toString() Test with Fake getName() Method\u0026quot;, function() { it(\u0026quot;calls the fake getName() function\u0026quot;, function() { //Create new person instance var testPerson = new Person(); //Create own jasmine fake methid testPerson.getName = jasmine.createSpy(\u0026quot;getName spy\u0026quot;); //Test if the fake method is called instead of the original being called testPerson.toString(); expect(testPerson.getName).toHaveBeenCalled(); }); });  Unlike spyOn(), creating a fake method circumvents the original method so that it is not called during tests.\nUnderstanding Spies By default a spy will only report if a call was done without calling through the spied function (i.e the function will stop executing), but you can change the default behavior using these method.\n and.callThrough(): call through the original function, and.returnValue(value): return the specified value, and.callFake(fn): call the fake function instead of the original one, and.throwError(err): throw an error, and.stub(): resets the default stubbing behavior.  References An Introduction to Jasmine Unit Testing.\nSpy on JavaScript Methods Using the Jasmine Testing Framework\nSpies in Isolation\nSpying On JavaScript methods using Jasmine\n"
},
{
	"uri": "/tech-department/topics/jasmine-unit-tests/",
	"title": "Jasmine Unit testing",
	"tags": [],
	"description": "",
	"content": " Jasmine is a unit testing framework we like a lot. Techically it\u0026rsquo;s a Behavior Driven Development (BDD) framework.\nGetting started Getting set up (the noob method) There are a few different ways to get started with Jasmine. Let\u0026rsquo;s go with the technically simplest one first:\nDownload the latest Jasmine release from here: https://github.com/jasmine/jasmine/releases. Unzip the stuff. Now replace the src with your own code and replace the specs with your own tests.\nEdit index.html so that it refers to your code.\nTo run the tests just open index.html in your browser.\nGetting set up (like a boss) Open up a terminal. Now execute each of the following commands:\nmkdir my_jasmine_goodies cd my_jasmine_goodies npm init npm add jasmine npx jasmine init npx jasmine examples  Take a moment to Google npm and npx if these concepts are new to you.\nNow, in your editor of choice (vscode, subline, atom\u0026hellip;), open up package.json. There should be something that looks like this:\n\u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; },  Edit it to look like this:\n\u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;jasmine\u0026quot; },  To run your tests you can now just do this:\nnpm test  Base your project structure off the example code that jasmine created for you.\nLinkz  The official tutorial is very thorough: https://jasmine.github.io/tutorials/your_first_suite  Advanced topics Now that you have the basics down, here are a few more advanced ways to use Jasmine.\nTesting the DOM Say you have some code that does some DOM manipulation. There are tools that exit that make this pretty straight-forward.\nnpm add jsdom  Now\n var jsdom = require(\u0026#34;jsdom\u0026#34;); function winning() { // This is the function under test. Put it somewhere that makes sense and \u0026#34;require\u0026#34; it here document.getElementById(\u0026#34;booya\u0026#34;).innerHTML = \u0026#34;so cool\u0026#34;; } describe(\u0026#34;FooFighters\u0026#34;, function() { beforeEach(function() { // make a fake DOM to interact with const dom = new jsdom.JSDOM(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;body id=\u0026#34;booya\u0026#34;\u0026gt;initial\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;); global.document = dom.window.document; global.window = dom.window; global.navigator = dom.window.navigator; }); it(\u0026#34;updates dom\u0026#34;, function() { expect(global.document.getElementById(\u0026#34;booya\u0026#34;).innerHTML).toBe(\u0026#34;initial\u0026#34;); winning(); // call the function that updates the dom expect(global.document.getElementById(\u0026#34;booya\u0026#34;).innerHTML).toBe(\u0026#34;so cool\u0026#34;); }); });  Spies Spies (often referred to as mocks in other languages and tools) are used to allow a kind of dependency injection within your tests. Here is a basic example of how it works:\n class Thing { constructor() { this.a = \u0026#34;some initial value\u0026#34;; } setA(newA) { this.a = newA; } } describe(\u0026#34;Spies\u0026#34;, function() { it(\u0026#34;doesn\u0026#39;t do surprising things\u0026#34;, function() { var o = new.Thing(); expect(o.a).toBe(\u0026#34;some initial value\u0026#34;); o.setA(\u0026#34;x\u0026#34;); expect(o.a).toBe(\u0026#34;x\u0026#34;); }); it(\u0026#34;mocks\u0026#34;, function() { var o = new Thing(); spyOn(o, \u0026#34;setA\u0026#34;); // spy on the function expect(o.a).toBe(\u0026#34;some initial value\u0026#34;); o.setA(\u0026#34;x\u0026#34;); // o.setA has been replaced with a spy o.setA(\u0026#34;x\u0026#34;); o.setA(\u0026#34;x\u0026#34;); o.setA(\u0026#34;x\u0026#34;); expect(o.setA).toHaveBeenCalledTimes(4); // we can check how many times it was called. // we can even check what arguments were passed to this function // setA now has no side effect expect(o.a).toBe(1); }); });  Of course this is just the tip of the ice berg. But it gives a a basic intro. Spies are detailed in the official tutorial.\nSpy on the filesysytem Use this. The official docs are nice.\nhttps://github.com/tschaub/mock-fs\nClick events Sometimes you\u0026rsquo;ll want to make sure that click events are fired as and when they shoud be. The following resources should help with that:\n https://stackoverflow.com/questions/48872864/testing-for-click-event-with-jasmine/50375478 https://www.htmlgoodies.com/beyond/javascript/js-ref/testing-dom-events-using-jquery-and-jasmine-2.0.html  "
},
{
	"uri": "/tech-department/topics/java-specific/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/java-dev-environment-setup/",
	"title": "Java Dev environment setup",
	"tags": [],
	"description": "",
	"content": " In this little tutorial we\u0026rsquo;ll walk through the process of getting your dev environment ready for Java. We use a number of different tools, you\u0026rsquo;ll need to get them all set up.\nJava SDK First install openJDK\nsudo apt install openjdk-11-jdk  Try it out Now let\u0026rsquo;s take it for a spin.\nMake a file called HelloWorld.java that looks like this:\npublic class HelloWorld { public static void main(String[] args) { String greeting = \u0026quot;Hello World!\u0026quot;; System.out.println(greeting); } }  Now open up a terminal and cd into the directory containing your new file. Now do this:\nls | grep HelloWorld javac HelloWorld.java ls | grep HelloWorld  You should notice a new file called Java.class. The javac command compiles the java source code into bytecode.\nNow run the following command in your terminal:\njava HelloWorld  It should print Hello World! to the terminal. You just ran the bytecode.\njshell This is another way of interacting with Java. It gets installed automatically when you install the JDK (JDK == Java Development Kit). Type the following at the command line:\njshell  Now you can type in Java statements and they\u0026rsquo;ll just get executed immediately.\n| Welcome to JShell -- Version 11.0.4 | For an introduction type: /help intro jshell\u0026gt; \u0026quot;Can I get a whoop whoop!\u0026quot;.length() $1 ==\u0026gt; 24 jshell\u0026gt; $1 * 2 $2 ==\u0026gt; 48 jshell\u0026gt; int foo=42 foo ==\u0026gt; 42   use the Tab key to access auto-completion. Eg: Type \u0026ldquo;Ti\u0026rdquo; then press Tab and see what happens You can press Ctrl+d to exit the shell.  IntelliJ This will be your Integrated Development Environment (IDE). Anything you can do with IntelliJ you can also do from the command line and a plain ol text editer. The reason we us an IDE is because most of industry uses one.\nIf you are running Ubuntu or Mint you can just install it like this:\nsudo snap install intellij-idea-community --classic  Otherwise take a look here for full installation instructions: https://www.jetbrains.com/help/idea/installation-guide.html. Please note, we will be using the \u0026ldquo;community\u0026rdquo; version.\nTry it out  Open IntelliJ select File -\u0026gt; New Project Select Java press Next a couple of times, give your project a sensible name (eg HelloWorld) click \u0026lsquo;Finish\u0026rsquo;  Now let\u0026rsquo;s make a class file:\n select File \u0026gt; New \u0026gt; Java Class name yuor class HelloWorld and select Class edit the new file so it looks like this (this should seem very familiar)  public class HelloWorld { public static void main(String[] args) { String greeting = \u0026quot;Hello World!\u0026quot;; System.out.println(greeting); } }   save your changes (Ctrl+s). On a side note, keyboard shortcuts are your friend. Learn them.  Now let\u0026rsquo;s run the code: select Run \u0026gt; Run \u0026gt; HelloWorld\nYou should see something like this appear on the bottom of the screen:\n/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -javaagent:/snap/intellij-idea-community/177/lib/idea_rt.jar=32781:/snap/intellij-idea-community/177/bin -Dfile.encoding=UTF-8 -classpath /home/sheena/IdeaProjects/HelloWorld/out/production/HelloWorld HelloWorld Hello World! Process finished with exit code 0  "
},
{
	"uri": "/tech-department/topics/java-specific/file-io/",
	"title": "Java File IO",
	"tags": [],
	"description": "",
	"content": " It\u0026rsquo;s all good and well writing programs that a user can interact with, and programs that print stuff out to the screen. But that has limited usefulness. Serious programs generally have some form of data persistence.\nBasically programs often need to store data, or access stored data. And there are a lot of different ways to make that happen.\nFor now we\u0026rsquo;ll be focusing on reading and writing files.\nResources:  https://www.w3schools.com/java/java_files.asp a gentle introduction to file io https://www.tutorialspoint.com/java/java_files_io.htm this one is a bit less gentle https://docs.oracle.com/javase/tutorial/essential/io this one is very thorough, and the offical docs are practically always the best place to find the latest and greatest info  "
},
{
	"uri": "/tech-department/projects/java-specific/generics/",
	"title": "Java Generics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/generics/",
	"title": "Java Generics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/java-specific/logging/",
	"title": "Java Logging with Log4j",
	"tags": [],
	"description": "",
	"content": " Please make sure you read and understand this before moving forward: TOPICS: Logging Ok, so now you know about what logging is and why we do it, we\u0026rsquo;re going to dig a bit more into some specific details about how to do this stuff in Java.\nInstalling Log4j We are using IntelliJ and Gradle. This means we have a specific way of including Log4j in our projects.\nThe first thing you need to do is make sure you have added Log4j as a dependency on your project. Take a look here and here to see how to add Log4j to your project.\nNow make a new project and log some stuff:\nimport org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class MainProgram { private static final Logger logger = LogManager.getLogger(MainProgram.class.getName()); public static void main(String[] args){ logger.debug(\u0026quot;Hello this is a debug message\u0026quot;); logger.info(\u0026quot;Hello this is an info message\u0026quot;); logger.warn(\u0026quot;Hello this is a warning message\u0026quot;); logger.error(\u0026quot;Hello this is an error message\u0026quot;); logger.fatal(\u0026quot;Hello this is a fatal message\u0026quot;); // some languages call this level \u0026quot;critical\u0026quot; } }  If you run this then you\u0026rsquo;ll see some of the messages get logged to the standard output. But you\u0026rsquo;ll also see an error message.\nIntlliJ will show you an error message that says \u0026ldquo;ERROR StatusLogger No Log4j 2 configuration file found. Using default configuration (logging only errors to the console), \u0026hellip;\u0026rdquo;\nNow make a new file in the resources firectory and name it log4j2-test.properties. Here\u0026rsquo;s what it should look like:\nappender.console.name = STDOUT appender.console.type = Console appender.console.layout.type = PatternLayout appender.console.layout.pattern = %d | %c: %m%n rootLogger.level = debug rootLogger.appenderRef.stdout.ref = STDOUT  Save it and run your program again. Now all the logs should show up with some fancy formatting.\nConclusion We just scratched the surface here. Try use logging for now on instead of just System.out.println. In industry you\u0026rsquo;ll have to get used to logging things in a thoughtful way.\nResources  The official docs Info on log layout patterns Config properties syntax  "
},
{
	"uri": "/tech-department/topics/java-specific/oop-basics/",
	"title": "Java OOP basics resources and readings",
	"tags": [],
	"description": "",
	"content": " What is Object Oriented Programming?\nFour main OOP priciples in java OOP is really powerful. There\u0026rsquo;s a lot worth knowing. Make sure that you understand these foundational concepts and everything else will come pretty easily.\nAbstraction == focusing on the necessary details In Object-oriented programming, abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.\nAn every day example of abstraction is driving a car. When you turn on the ignition you just turn a key, the car does a whole lot of things under the hood. The starter motor and carberator is abstracted. You don\u0026rsquo;t need to know how that stuff works in order to work a car.\nIn Java there is a thing called an Abstract Class. This is not to be confused with the principle of abstraction. You can achieve abstraction without using abstract classes. A lot of people get these concepts mixed up.\n abstraction = hiding implementation details abstract classes = classes that are not meant to be instantiated  Abstraction can be achieved through use of abstract classes. Or just regular classes.\nTake a look at (this discussion)[https://softwareengineering.stackexchange.com/questions/230401/confused-about-the-definition-of-abstraction-in-oop] for a bit more info\nEncapsulation == hiding details Encapsulation is known as data-hiding. Basically in OOP in Java you can choose what parts of your objects are exposed for use, and which are under the hood. If we think about cars again, the steering wheel and gear lever are exposed to you, but then the fuel injection system is hidden away.\nIn coding terms this means that objects may be able to communicate with one another but are restricted to access some of the object\u0026rsquo;s components directly. Publicly accessible methods are generally provided in the class so-called accessors and mutators.)\nRead more on encapsulation.\nThe following Java code shows how Encapsulation can be implemented:\nclass Employee{ //private data member private String name; // you can't just access this whenever you want. public void setName(String employeeName){ // this is the only way to update the name. Yo can put validation logic in here if you want. Eg if the employeeName has naughty words in it then raise an exception. this.name = employeeName; } //getter method for name public String getName(){ return name; } } class Main{ public static void main(String args[]) { //creating instance of the encapsulated class Employee e = new Employee(); //setting value in the name member e.setName(\u0026quot;Mbali\u0026quot;); //getting value of the name member System.out.println(e.getName()); } }  Abstraction vs Encapsulation\nInheritance Inheritance can be thought of an an \u0026ldquo;is a\u0026rdquo; relationship.\nThe following Java code shows how Inheritance can be implemented. In this example we have a superclass called Vehicle. a Bakkie is a Vehicle, and a Beatle is a Vehicle. So both these child classes do vehivle things and have vehicle attributes, but layer on a bit of extra behavior.\n//superclass class Vehicle { void printType(){ System.out.println(\u0026quot;I am a Vehicle\u0026quot;); } } class Beatle extends Vehicle { //Override method @Override void printType() { //call method in super class super.printType(); System.out.println(\u0026quot;I am a Beatle\u0026quot;); } } class Bakkie extends Vehicle { //Override method @Override void printType() { //call method in super class super.printType(); System.out.println(\u0026quot;I am a Bakkie\u0026quot;); } } class Main{ public static void main(String[] args) { //Create a car object Beatle beatle = new Beatle(); //call method beatle.printType(); } }  To learn how @Override actually works, check (this)[https://www.baeldung.com/java-override] out\nPolymorphism Polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word \u0026ldquo;poly\u0026rdquo; means many and \u0026ldquo;morphs\u0026rdquo; means forms. So polymorphism means many forms.\nThere are two types of polymorphism in Java: compile-time polymorphism and run-time polymorphism. We can perform polymorphism in java by method overloading and method overriding. Read more.\nMethod overriding Refer back to the inheritance stuff above. We used overriding there.\nOverriding a method is when a method in the subclass has the same name and method signature as a method in the superclass. When overriding a method you are not allowed to make the method more private.\nThe following Java code shows how overriding can be implemented:\npublic class Fruit { public void print() { System.out.println(\u0026quot;I am a fruit\u0026quot;); } } class Apple extends Fruit { //Override method @Override public void print() { System.out.println(\u0026quot;I am an Apple\u0026quot;); } } class Main{ public static void main(String[] args) { //Create an animal object Fruit fruit = new Fruit(); //Create horse object Apple apple = new Apple() fruit.print(); //call method apple.print(); } }  Method overloading Overloading a method is when a method in the subclass has the same name but the method signature is different from the method in the superclass.Read more\nThe following Java code shows how overloading can be implemented:\nclass Calculate{ public int product (int x, int y) { return (x * y); } // Overloaded. This product method takes three int parameters public int product(int x, int y, int z) { return (x * y * z); } // Overloaded. This product method takes two double parameters public double product(double x, double y) { return (x * y); } } class Main { public static void main(String args[]) { Calculate prod_object = new Calculate(); System.out.println(prod_object.product(10, 20)); System.out.println(prod_object.product(10, 20, 30)); System.out.println(prod_object.product(10.5, 20.5)); } }  The danger of accidental overloading public class Machine { public boolean equals(Machine obj){ return true; } } public class MainProgram { public static void main(String[] args){ Object first = new Machine(); Object second = new Machine(); Machine third = new Machine(); Machine fourth = new Machine(); System.out.println(first.equals(second)); // returns false System.out.println(third.equals(fourth)); // returns true } }  This is because every class in Java inherits from a base Object class. And so a Machine is an Object. And Object.equals means something very specific.\nImportant links  Read more to gain further understanding on OOP concepts. Here is another useful link. Java oops concepts by Java T Point. Access modifiers explained Implements veresus Extends More on overloading versus overriding  Super cool advanced stuff The true power of OOP comes from the interaction between objects. There are some pretty common patterns to how OOP gets used in industry. These patterns are called \u0026ldquo;Design Patterns\u0026rdquo;. Take a look at this.\n"
},
{
	"uri": "/tech-department/projects/java-specific/",
	"title": "Java Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/java-specific/",
	"title": "Java Specific Workshops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/java-specific/collections/",
	"title": "Java collections",
	"tags": [],
	"description": "",
	"content": "This project assumes you have gone through the reading for both data structures as well as collection, but for a quick recap for the purpose of this project:\nJava has a collection framework that gives us a list of classes which help us effeciently deal with objects, one of these is called a dequeue/deque(double-ended queue). A deque is magical because it allows us to add or remove anything from either the front(head) or back(tail) of the queue.\nYou can implement a Deque by using either a LinkedList of an ArrayDeque class. For example\nDeque queue = new LinkedList\u0026lt;\u0026gt;(); or Deque queue = new ArrayDeque\u0026lt;\u0026gt;();  Now for the FUN part\u0026hellip; Project time\nintNumber = 9 // Number of integer in the set subArraySize = 3 // Size of the subArray to consider queue = 6 2 6 8 3 7 1 4 4 // integer sample  You have to print out the maximum number of unique integers among all possible adjacent subarrays of size subArraySize\nExample of the project\nInput\nintNumber = 9 subArraySize = 3 queue = 6 2 6 8 3 7 1 4 4  Output\n3\nExplanation\nr1 =\u0026gt; (6 2 6) = Has 2 unique numbers r2 =\u0026gt; (2 6 8) = Has 3 unique numbers r3 =\u0026gt; (6 8 3) = Has 3 unique numbers r4 =\u0026gt; (8 3 7) = Has 3 unique numbers r5 =\u0026gt; (3 7 1) = Has 3 unique numbers r6 =\u0026gt; (7 1 4) = Has 3 unique numbers r7 =\u0026gt; (1 4 4) = Has 2 unique numbers  So the highest number of unique integer in a subArray is 3\nIf your code is correct it should return these outputs for these inputs\nInput #1\nintNumber = 8 subArraySize = 4 queue = 2 2 2 2 2 2 2 2  Output\n1  Input #2\nintNumber = 10 subArraySize = 3 queue = 7 5 5 7 5 5 7 5 5 6  Output\n 2  HAVE FUN!!\n"
},
{
	"uri": "/tech-department/topics/java-specific/collections-and-datastructures/",
	"title": "Java collections and data structures",
	"tags": [],
	"description": "",
	"content": " Till now I am sure you have heard that the computer has storage either RAM or disk, which it uses to store information we care about. As people we care about a lot of things meaning a lot of information being stored and effeciently enough for us to get access to it without any hassles.\nComputers use this effecient storing of data to allow us to get information quickly with the help of data structures\nTake for example the differences between a binary tree and array\nResource https://opensourceforu.com/2015/06/data-structures-made-easy-with-java-collections/\nhttps://www.geeksforgeeks.org/data-structures/\nhttps://www.geeksforgeeks.org/linked-list-vs-array/\n"
},
{
	"uri": "/tech-department/projects/java-specific/data-structures/",
	"title": "Java data structures",
	"tags": [],
	"description": "",
	"content": "Game Time\nIn this project we are going to create a GAME!!! fun right, its called Conway Game of life\nHow This game works\nInitially, there is a grid (yours should be 10 * 10) with some cells which may be alive or dead. Our task is to generate the next generation of cells based on the following rules:\n Any live cell with fewer than two live neighbors dies, as if caused by under population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by overpopulation. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.  You will need to show in your console the initial state (input) and next generation\n(+) - Dead Cell\n(#) - Alive Cell\nInput\n/ + + # + + +\n/ + + # # # +\n/ + + + + + +\nNext generation\n/ + + # + + +\n/ + + # # + +\n/ + + + # + +\nYou should have a test for all the rules above but you can also add more test if you want.\n"
},
{
	"uri": "/tech-department/topics/java-specific/java-self-learning/",
	"title": "Java learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your Java development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nour favorate resources (so far) Please note, this document is alive. It is likely to change over time as we learn more about how best to learn Java. If you have any suggestions about how to make this page (or any page) better then please let us know! And if you have any opinons on the materials listed below please let us know as well!\nLearn Java the Hard Way This book looks like it will be very useful. We are keen to get your opinion on how good it is before buying a million copies.\nPlease download and work through the free samples and tell us what you think :)\nIt doesn\u0026rsquo;t cover absolutely everything we need to cover but it lays a very solid foundation.\nUnfortunately the author is working from a windows machine so the command-line stuff is a little strange. We\u0026rsquo;ll be using bash and IntelliJ instead of PowerShell and Notepad++.\nJava Syntax guide This is just a reference, it doesn\u0026rsquo;t explain absolutely everything\nCodeWars This is a nice tool that lets you practice your coding skills. We have found it very useful for our other syllabuses.\nUdemy This course will take you through all the basics of java\nTutorialsPoint This one has a lot of great info but expects you to have some coding experience already.\nhttps://www.tutorialspoint.com/java\nother resources under consideration  Java Overview Code Gym: You are a young robot who is learning some Java from some insensitive aliens\u0026hellip; Head First Java: This book is nice because it is thorough and weird. It\u0026rsquo;s not one of those boring text books. Unfortunately this book is a bit old so not all of it is appropriate:\n outdated and useless JUST SKIP Ch. 17 - last half of the chapter teaches Java Web Start(This was deprecated in Java 9, we’re on Java 11 at the time of me writing this) Ch. 18 - Part of this chapter talks about RMI, absolute legacy that you’ll only find in systems that are 15 - 20 years old. Parts that are outdated but not useless Ch 12 -15 - These chapters teach a small amount of Java Swing (quite outdated) to build projects. They are still full of useful information because the point is not to teach Swing, but to learn about Java core and just use Swing to make a very simple GUI. The Swing that you learn is quite minimal.  Core Java Volume 1. This is up to date with Java 11.\n  "
},
{
	"uri": "/tech-department/topics/java-specific/project-submission-requirements/",
	"title": "Java project submission requirements",
	"tags": [],
	"description": "",
	"content": " As a junior developer working on a team of professionas, your code will always have to conform to a certain shape. You will always need to write code that plays nicely with the code and mechanisms that are in place.\nFor all your Java projects you will need to make sure that your code conforms to the following:\nBuild.Gradle We are using JUnit 5. And some of our automations depend on how JUnit 5 logs its successes.\nPlease open up your build.gradle. Make sure that you have the JUnit5 dependencies listed below.\ndependencies { testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1' // your project dependencies }  Then paste this into your build.gradle file.\ntest { useJUnitPlatform( testLogging { events \u0026quot;passed\u0026quot;, \u0026quot;skipped\u0026quot;, \u0026quot;failed\u0026quot; } ) }  Now if you run your unit tests and everything passes (which they should before you submit your work) then you will get a bit of extra output about your passing tests.\nDirectory structure Please see this: TOPICS: Gradle and IntelliJ project submission structure "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/template-engines/",
	"title": "JavaScript template engines",
	"tags": [],
	"description": "",
	"content": " About javascript template engines (Short explanation) More on Javascript templates  "
},
{
	"uri": "/tech-department/workshops/javascript-specific/",
	"title": "Javascript-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/js-and-node-specific/",
	"title": "Js-and-node-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/jupyter-notebooks-best-practices/",
	"title": "Jupyter notebooks best practices",
	"tags": [],
	"description": "",
	"content": " Why use a notebook? Working alone  Keep track of your thoughts Make sketch notes Add links to resources to review later Example notebook: https://danielfrg.com/blog/2013/03/kaggle-bulldozers-basic-cleaning/  Working in a team  For code review For colleagues to contribute to your notebook To write a report on your models As a tutorial guide To communicate with external clients/entities/blog Example notebook:  https://www.kaggle.com/burhanykiyakoglu/predicting-house-prices   Tips for effective and efficient use of (jupyter) notebooks for data science projects Follow standard coding practices:  Provide comments and documentation to your code Stick to a consistent naming scheme! Use meaningful names: answers_to_score is clearer than score_ans, which is clearer than score_1! Group code in a manner that allows anyone to follow the modelling process, e.g. data exploration (summary statistics, distributions, bar graphs, scatter plots), data transformation (outlier detection, counting \u0026amp; dropping/replacing NaN, renaming columns/rows etc), modelling and model evaluations (model scores and error) Limit length of code lines Refactor (restructuring) code whenever necessary to keep it simple  Make it easy for other to follow and improve your work  Have an author name and contact details in case someone wants to ask for clarity The notebook should be a standalone document that does not require someone to have to know about the problem being solved or in-depth knowledge of the algorithms. This will help others follow your thought processes and understand the data transformation/data analysis being done and why certain techniques are being used, since multiple techniques exist Tell the story: e.g. describe the problem being solved and how the model will solve that problem Summarise the data\u0026rsquo;s statistical characteristics (to show that your data cleaning will not introduce artefacts or new features, and to show that the data are appropriate for the model(s) you use). This includes showing the variables\u0026rsquo; distribution and central tendency, as well as amount of available data. Exploratory techniques for summarizing data should be used before you start formal modeling and can help development of more complex statistical models \u0026amp; to eliminate or sharpen potential hypotheses about the world that can be addressed by the data. You will almost always want to see graphs of variable distributions, relationships between variables and missing data patterns. Provide enough rationale for each coding task being carried out (you will find this information useful when you read your own notebooks later) Critique your own model, this will help pre-empt and address shortcomings of your model and avoid loss of confidence in your model by others  General tips  Keep cells of your notebook simple: don\u0026rsquo;t exceed the width of your cell Make sure that you don\u0026rsquo;t put too many unrelated functions in one cell. It\u0026rsquo;s neater to import all packages in the first code cell of your notebook Ensure graphics can display inline (use matplotlib inline magic commands \u0026amp; semicolons)  "
},
{
	"uri": "/tech-department/projects/data-science-specific/k-means-clustering/",
	"title": "K-Means Clustering",
	"tags": [],
	"description": "",
	"content": " Introduction K-Means clustering is an unsupervised learning technique used in processes such as market segmentation, document clustering, image segmentation and image compression. Usually we do K-Means clustering to:\n Understand the structure of the data, and group similar observations. Cluster the data into subgroups and then do different predictions on the different subgroups. If we think that subgroup behaviours differ substantially, then we will get more accurate models by making separate models for each subgroup, than one model for all groups.\n  Tutorials  EDA and K-Means example K-Means Clustering: Algorithm, Applications, Evaluation Methods, and Drawbacks  Assignments Easy clustering assignment: Flower features Data: Iris species\n Use K-Means cluster analysis to cluster different iris species. Make an elbow plot and/or use silhouette analysis to find the optimal number of clusters.\n What are the factors that differ between different iris species?\n Create a plot of the clusters.\n  Optional clustering assignment: Whisky clusters Data: Whisky Reviews\nCluster whisky types by reviewers\u0026rsquo; scores. Use the elbow or silhouette method to find the optimal number of clusters. Describe the main differences between the cluster - what are the factors that differ between differently rated whisky clusters?\n"
},
{
	"uri": "/tech-department/projects/basic-flow-control-katas/",
	"title": "Level 1 programming katas",
	"tags": [],
	"description": "",
	"content": " These Exercises are here to help you test out and demonstrate your knowledge of the basic flow control mechanisms and syntax for your language. These Exercises are relevent whether you are doing Java, JavaScrupt, Python, Kotlin or any other modern language.\nPlease follow best practices when doing this work!\n Use git: push your code every day. Maybe even a few times every day. If you don\u0026rsquo;t back up your work and something terrible happens to your computer then you will not be granted an extension. Make sure your commit messages make sense Be careful about how you name your functions and variables. Be consistent. Be clear. Call it what it is. Any fool can write code that a machine can understand, professionals write code that people understand.  Note The Exercises below are meant to be language-agnostic. If we use the word print in an Exercise description then we mean output it to the terminal/console/stdout. We dont mean print to a printer, and we dont want a gui. These Exercises just spit out some text.\nExcercise: Hello Write a function named hello, it needs to take in a string as an argument. The function should work like this:\neg: hello(\u0026quot;Tshepo\u0026quot;) should output\nHello Tshepo!  Exercise: check if a number is even Write a function named even_or_odd or evenOrOdd. Your function should take an integer and print in the work \u0026ldquo;even\u0026rdquo; or \u0026ldquo;odd\u0026rdquo;\nPlease be careful what name you choose to use. Different programming languages have different conventions.\neg, if the input is 3 then the output is \u0026ldquo;odd\u0026rdquo;. If the input is 4 then the output is \u0026ldquo;even\u0026rdquo;\nExercise: Draw a square Write a function, name it square. It takes in an integer and then prints out a square using the hash character.\neg square(2) should output\n## ##  eg square(4) should output\n#### #### #### ####  Exercise: Draw a right handed triangle eg triangle(2) should output\n# ##  eg triangle(4) should output\n# ## ### ####  Exercise: Draw an isosceles triangle eg isosceles(2) should output\n # ###  eg isosceles(4) should output\n # ### ##### #######  Exercise: find the longest string Write a function that takes in an arra/list of strings and then prints out the longest one\neg: longest([\u0026quot;the\u0026quot;,\u0026quot;quick\u0026quot;,\u0026quot;brown\u0026quot;, \u0026quot;fox\u0026quot;, \u0026quot;ate\u0026quot;, \u0026quot;my\u0026quot;, \u0026quot;chickens\u0026quot;])\nshould output\nchickens  If there are multiple longest strings then print them all.\neg:\nlongest([\u0026quot;once\u0026quot;, \u0026quot;upon\u0026quot;, \u0026quot;a\u0026quot; \u0026quot;time\u0026quot;])\nshould output\nonce upon time  Exercise: combine two lists/arrays Write a function that combines two lists by alternatingly taking elements and prints the result\neg combine([11,22,33], [1,2,3]) should output\n [11,1,22,2,33,3]  Exercise: Frame some text Write a function that takes a list of strings an prints them, one per line, in a rectangular frame.\neg: frame([\u0026quot;Write\u0026quot;,\u0026quot;good\u0026quot;,\u0026quot;code\u0026quot;,\u0026quot;every\u0026quot;,\u0026quot;day\u0026quot;]) gets printed as:\n********* * Write * * good * * code * * every * * day * *********  Next Steps Well done for getting this far! These excercises practiced some really fundamental skills. You should be familiar with some loops, if statements, comparisons, and the syntax of functions. But even though we have hit the end of this project there is a LOT left for you to learn and practice.\nMake sure you really understand all the code you wrote here. You can\u0026rsquo;t build a house without a foundation. You need a solid foundational skills so you can be a pro!\nSo keep practicing. Practice in your free time, practice if you are ahread of schedule with one of your projects, practice if you need a break from another task. Push yourself and be awesome! You can even practice with a pen and paper if you don\u0026rsquo;t have access to a computer at home.\nRemember that you are here to become a professional! Professionals take ownership of their own learning and skills, and professionals help the people around them to become successful.\nHere are some resources you can use to continue this journey:\n https://adriann.github.io/programming_problems.html : this has lots of cool little excercises. They\u0026rsquo;re mostly pretty small, you could do a few every day if you wanted to. Even one per day would be a winner https://www.codewars.com: you should know about this already, it\u0026rsquo;s legit!  Have fun :)\n"
},
{
	"uri": "/tech-department/department-processes/linkz/",
	"title": "Linkz",
	"tags": [],
	"description": "",
	"content": " Calendars  Umuzi tech events FOR RECRUITS Umuzi Tech deadlines  Forms  code review code submission events attendance form? TODO  "
},
{
	"uri": "/tech-department/projects/linux/",
	"title": "Linux challenges",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/live_dashboards/",
	"title": "Live Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": "Watch the sessions on Dashboarding with Notebooks to help you create a dashboard with Jupyter Notebooks and Plotly.\nWrite a script that will get the latest figures data from ReliefWeb\u0026rsquo;s Crisis Figures on a daily basis. The Latest Figures dataset contains information on the world\u0026rsquo;s most pressing humanitarian crises. The data, curated by ReliefWeb\u0026rsquo;s editorial team based on its relevance to the humanitarian community, is updated daily.\nCreate interactive graphs showing the number of People in Need and People Targeted for Assistance by country.\n"
},
{
	"uri": "/tech-department/workshops/python-specific/live-code-python-intro/",
	"title": "Live code python intro",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/javascript-specific/live-code-javascript-intro/",
	"title": "Live code: introduction to JS",
	"tags": [],
	"description": "",
	"content": "Demonstrate:\n F12 in the browser Use of vs code terminal  Talk a little about the history of JS:\n started off in the browser only was kak, became lekker now the backend\u0026hellip;  "
},
{
	"uri": "/tech-department/workshops/java-specific/live-code-java-intro/",
	"title": "Live coding: Introduction to Java",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": " Through the development process logging helps us evaluate computation which we might be uncertain about, or show us what is happening during runtime where we have little control. Its like a third eye helping us see things that we might otherwise finding very difficult to see.\nWhat? Logging is basically getting your program to write stuff down. You are already familiar with printing things out to the console or screen, logging is like that but on steroids.\nBasically when a program runs in a production environment, logs let us keep track of what it is doing over time. A log is a series of messages that get printed or sent somewhere. They might be stored in a file, or sent over a network to a special logging service, or (during development) you might want to just see log messages on your screen.\nWhy? Because a running program can be super opaque. Sometimes thing break in really interesting ways and logs can be used to understand what actually happened that led up to this breakage. Sometimes logs need to be in place for generating metrics about system performance. Sometimes logs are used to understand security breaches.\nSometimes logs are just useful for a developer making some changes to a system. A dev can watch the log messages roll in and get a clear picture of what the code is doing.\nLog levels Log messages come in a few different flavours called levels. Basically each log message is given a level (either implicitly or explicitly) and those levels mean different things. The different log levels tend to be pretty consistent between languages.\nThere are the main levels:\n debug: info for devs, these shouldn\u0026rsquo;t be logged on a production environment info: this veries. Basically there are usually a few different stakeholders involved in a project. These logs should add clarity without being overwhelmingly noisy warn: something is looking kinda weird error: oh crap. Some error or exception has happened critical or fatal: This is serious, immediate action required  As an analogy, if you shout \u0026ldquo;DONT TOUCH THAT!\u0026rdquo; to a three year old about to put their hand on a stove then that might be a critical message. And if you say \u0026ldquo;I\u0026rsquo;m going to the shop\u0026rdquo; then that might be an info message. And if you say \u0026ldquo;I\u0026rsquo;m going to the shop to buy cigaretts\u0026rdquo; then that might be an error message.\nTwo major use cases for log levels are:\n deciding which logs should be generated. Eg: In your production environment you wont want to see any debug logs. But when you are developing then you do want to see them taking different actions on messages of different levels: eg: if there is an warn log message then create a ticket on the bugtracker, and if there is a critical log message then sound the alarms.  In your language Different languages have different tooling that you can use to manage logs. To continue learning about logs, please follow the appropriate link below:\n  TOPICS: Logging in Node and JS   TOPICS: Java Logging with Log4j   TOPICS: [TODO] Logging in Python   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/logging/",
	"title": "Logging in Node and JS",
	"tags": [],
	"description": "",
	"content": "Please make sure you read and understand this before moving forward: TOPICS: Logging Why we would like to log\n Quick debugging of unexpected behavior during development Browser-based logging for analytics or diagnostics Logs for your server application to log incoming requests, as well as any failures that might have happened Optional debug logs for your library to assist the user with issues Output of your CLI to print progress, confirmation messages or errors  The most basic form of logging in javascript is console logging\nThe console object provides access to the browser\u0026rsquo;s debugging console and though it might differ from browser to browser they\u0026rsquo;re a set of functions common to all see more features here\nconsole.log('Logging in Node and JS');  Log Levels\nBut, as you know, there are multiple ways and places one can log to, like output logs in a file or on a reporting tool or intecepting a request to the backend. For such activities you might need more than just console.logging. Lucky for us Node provides a few options for this.\n Middleware  Expressjs  Packages such as:  Winston Node-Loggly Morgan Retrace agent for server logs   Resources for reading\n https://www.twilio.com/blog/guide-node-js-logging https://stackify.com/node-js-logging/  "
},
{
	"uri": "/tech-department/topics/python-specific/logging/",
	"title": "Logging in Python",
	"tags": [],
	"description": "",
	"content": "Please make sure you read and understand this before moving forward: TOPICS: Logging "
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/",
	"title": "Logistic regression",
	"tags": [],
	"description": "",
	"content": " Background material Sensitivity and specificity\nUnderstanding ROC curves with Python\nAssignment 1 Complete and submit a copy of PROJECTS: Predict credit card approvals .\nAssignment 2 Complete and submit PROJECTS: Predict survival on the Titanic . or your submission, create an html report to accompany your notebook in your repo.\n"
},
{
	"uri": "/tech-department/projects/memory-game-modern/",
	"title": "Memory Game: rebuild using a modern web frontend framework",
	"tags": [],
	"description": "",
	"content": " Prerequisites You should have already completed this: PROJECTS: Memory game in vanilla js You should also have some solid TDD skills.\nYou need to be familiar with either AngularJs or React.\nInstructions Part 1: MVP Create an MVP memory game using Angular or React. Follow a TDD procedure.\n The game should draw a grid with 6 columns and 5 rows The cards in the game should be randomized When the game finishes then display a message on the screen that says \u0026ldquo;Congratulations! You are done!\u0026rdquo; There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game  Part 2: Count-down  Draw a timer widget on the screen. It should start off showing 2 minutes and count down to zero The color of the timer should be green initially the timer should turn orange after one minute has passed the timer should turn red when there are 30 seconds left on the clock when the timer runs out:  flip all the cards over to reveal what is underneath display a message saying \u0026ldquo;Sorry! You lost the game\u0026rdquo;. There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game   Part 3: Winning stats When the user wins the game then the congratulations message should include:\n the number of turns taken (1 turn == 2 clicks) the amount of time taken  Part 4: ExpressJs  Serve your game using ExpressJS (as static content) Connect a MongoDB database expose the following json api endpoints:  POST update_score: This should accept a json object like this {name:\u0026quot;a string\u0026quot;, time: number of seconds, turns: number of turns taken}. This endpoint must update the database GET leaderboard/time: This should return the top 10 fastest people to win the game GET leaderboard/turns: This should return the top 10 people to win the game using the fewest clicks   Part 5: Ajax  When the game starts then the user will need to enter their name\n Whenever a user successfully wins the game then:\n their score should be stored in MongoDB updated through use of the update_score endpoint the two leaderboards should be fetched and displayed on the page If the current user is on a leaderboard then they should be highlighted  Whenever a player loses the game\n display the two leaderboards   "
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/",
	"title": "Memory game in vanilla js",
	"tags": [],
	"description": "",
	"content": " Here is an example of a memory game: http://dkmgames.com/memory/pairsrun.php\nInstructions Create a Memory game MVP. Requirements:\n Take a moment to google MVP. If you add unnecessary features we\u0026rsquo;ll ask you to remove them make use of simple dom elements, no fancy graphics needed or canvas stuff a single player can play the game board is a pre-defined size board allows one set of symbols or images to be randomly hidden  Build your game in a TDD manner. If you don\u0026rsquo;t include tests in your final submission you will be held back and you will be expected to start over.\nResources  https://www.w3schools.com/js/js_htmldom.asp  TOPICS: Intro to software architecture  Please take note of the section on DOM testing in this document: TOPICS: Jasmine Unit testing   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/mongodb/",
	"title": "MongoDB and JavaScript",
	"tags": [],
	"description": "",
	"content": " https://goalkicker.com/MongoDBBook/ https://www.w3schools.com/nodejs/nodejs_mongodb.asp https://zellwk.com/blog/crud-express-mongodb/  "
},
{
	"uri": "/tech-department/topics/python-specific/mongodb/",
	"title": "MongoDB and Python",
	"tags": [],
	"description": "",
	"content": " https://www.mongodb.com/blog/post/getting-started-with-python-and-mongodb: The official \u0026ldquo;getting started\u0026rdquo; guide https://docs.mongodb.com/manual/tutorial/getting-started/: something a bit more in depth https://realpython.com/introduction-to-mongodb-and-python/: a nice tutorial from the folks at RealPython  "
},
{
	"uri": "/tech-department/projects/data-science-specific/multivariate-linear-regression/",
	"title": "Multivariate Linear Regression",
	"tags": [],
	"description": "",
	"content": " This week is all about one-hot encoding and multiple regression.\nBackground materials  Robust One-Hot Encoding in Python Emulating R Regression Plots in Python Statsmodels Regression Plot Building and evaluating models. Test/Train Splits and Crossvalidation  Assignment We will predict employee salaries from different employee characteristics (or features). Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary metadata.csv. You will need the packages matplotlib / seaborn, pandas and statsmodels.\nSteps and questions  Split your data into a training and test set. Create scatterplots, histograms, and a descriptive statistics table of the variables of interest. Do any of the variables need to be transformed to be able to use them in a linear regression model? Which variables seem like good predictors of salary? One-hot encode the variable Field into three dummy variables, using HR as the reference category. You can use pandas\u0026rsquo; get_dummies() function for this. Produce a correlation matrix comparing the relationship of salary to the predictor variables. Is there any multicollinearity or other problems that may be a problem in the multiple regression? Use multiple linear regression to predict salary from all the variables in the training dataset. Interpret the standardised coefficients given in the statsmodels output. What are the most important features when predicting employee salary? Calculate the standardised residuals (resid()) and standardised predicted values (fittedvalues()). Plot the residuals versus the predicted values using seaborn\u0026rsquo;s residplot with fitted values as the x parameter, and the dependent variable as y, specify lowess=True.  Are there any problems with the regression?  Now run your model on the test set. How does your model compare when running it on the test set - what is the difference in the Root Mean Square Error (RMSE) between the training and test sets? Is there any indication that the model has been overfit or does it seem like a reasonably good model?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/natural-language-processing/",
	"title": "Natural Language Processing",
	"tags": [],
	"description": "",
	"content": " Natural Language Processing, or NLP, is used to analyse, visualise, and predict natural language. That is, languages that developed naturally, such as isiZulu, English or Spanish (but not Java or C#).\nVideos and Readings Watch the following videos as an introduction to Natural Language Processing in Python: - Introduction to NLP - Data cleaning and text-preprocessing in Python - Exploratory data analysis and word clouds in Python - Sentiment analysis with TextBlob in Python\nThe code from the videos can be found here.\nThe videos are a great introduction to the basic NLP analysis pipeline. They go through how to do NLP with the packages NLTK and TextBlob. However, we will be using spaCy as that is most often used in industry. For documentation on spaCy commands, see spaCy\u0026rsquo;s website and RealPython.\nTerms to know Natural Language Processing has its own set of terms that you should know to be able to talk about it. At the end of this topic, you should know what the following terms mean:\n Tokenization Corpus Document-Term Matrix Stop words Bag-of-words Lemmatization Bi-grams Word cloud Named Entity Recognition  "
},
{
	"uri": "/tech-department/projects/data-science-specific/natural-language-processing/",
	"title": "Natural language processing",
	"tags": [],
	"description": "",
	"content": "The contents of the State of the Nation Address (SONA) for every year dating back to 1990 is available on the South African Government website. This gives us a great opportunity to look at the priorities and challenges have faced over time, and the focus points for the various presidents over this time.\n Create a corpus from the English-language text for the SONAs dating back to 2000. Save them with the speaker information and date for later analysis. Where there is more than one SONA per year, get both.\n Use NLTK to create a document-term matrix from the text. To do this, the text should be:\n in lowercase with punctuation and numbers removed (tip: use regular expressions)\n tokenized and lemmatized\n without stop words\n in a matrix\n Examine the most frequently removed terms in each speech. You may need to add additional stop words that are said very often, such as \u0026ldquo;South Africa\u0026rdquo; and \u0026ldquo;country\u0026rdquo;. If a word occurs in the top 10 words in each SONA, add it to the stop words list.\n How do the speeches compare in terms of complexity and length? How many speeches are there per president? On average, which presidents use the most unique words and which presidents use the most words?\n Create word clouds to visualise the speeches for each president. What are the main issues that they talked about during their presidency?\n Use TextBlob to do sentiment analysis of the SONAs. Get the polarity and subjectivity for each SONA and visualise the changes in polarity and subjectivity over time. Also create a graph of the average polarity and subjectivity by president. Do you notice any patterns?\n How have focus areas and sentiment in the SONAs changed over the last twenty years in South Africa? Are there clear changes in focus areas between different presidents?\n  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Wikipedia.org defines Node.js as an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user\u0026rsquo;s web browser.\nThe article below unfold the following points\n What is Node.js Why Node js Node installation process Asynchronous vs Synchronous  Resources  Understanding the basics of Node.js  "
},
{
	"uri": "/tech-department/workshops/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Resources related to this topic can be found here  TOPICS: Node   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/javascript-dev-environment-setup/",
	"title": "Node setup",
	"tags": [],
	"description": "",
	"content": " This is a guide to help lab assistants setup a local JavaScript environment.\nStep 1 – Add Node.js PPA sudo apt-get install curl curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash - Or sudo apt-get install curl curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -  Step 2 – Install Node.js on Ubuntu sudo apt-get install nodejs  Step 3 – Check Node.js and NPM Version After installing node.js verify and check the installed version.\nnode -v  v13.0.1 or the latest version\nAlso, check the npm version\nnpm -v  6.12.0 the latest version\n"
},
{
	"uri": "/tech-department/projects/nodejs/",
	"title": "Nodejs Challenges",
	"tags": [],
	"description": "",
	"content": "These are NodeJS challenges. Your main focus here is to make sure your Node code is good. You will not be evaluated on the prettiness of your frontend. Your frontend just needs to work.\n  PROJECTS: Node \u0026amp; File IO   PROJECTS: Node \u0026amp; mongoDB assignment OR PROJECTS: Node \u0026amp; SQL assignment   PROJECTS: Express, forms and templates   PROJECTS: Expose a JSON API   PROJECTS: Add a little Ajax   "
},
{
	"uri": "/tech-department/workshops/nodejs-intro-to-socketio/",
	"title": "Nodejs intro to socketIO",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/oop/",
	"title": "OOP Excercises",
	"tags": [],
	"description": "",
	"content": "Here are a few oop challenges for you. If you are new to OOP then it would make sense to do these in the following order:\n  PROJECTS: Person   PROJECTS: Dice   PROJECTS: Bank Accounts   Please note: these excercises have no mention of frontend, gui, dom, html or any other stuff like that. You should be able to prove to yourself that your classes work just through use of unit tests. You should be able to interact with your classes from the command line.\n"
},
{
	"uri": "/tech-department/projects/oop-for-data-science/",
	"title": "OOP for data science",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/js-and-node-specific/basic-intro-to-oop/",
	"title": "OOP in JS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/oop-basics/",
	"title": "OOP in JS and Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/team-onboarding/",
	"title": "Onboarding - What the team needs to know and access",
	"tags": [],
	"description": "",
	"content": " This is a guide to the Tech Department and how it works. It contains contact details, important links to documents we use and software that are useful.\nGeneral Ground Rules  Arrive before 9:00 and ensure you are up to date on recruit activities and any announcements you may have for stand-up Don\u0026rsquo;t be late for workshops - if you commit to doing a workshop ensure it happens and start on time. Deep work days - Staff that need to are allowed to take work from home 1 day per week - The team needs to be notified in advance via slack with at least one day prior notice. Your responsibilities are yours to handle - should you be unable to deal with one of them arrange someone to cover for you and ensure that it gets done.  What recruits need to know Firstly, read through DEPARTMENT-PROCESSES: What You Need To Know (as a recruit) Syllabus Find the tech repo with all (or at least most) curriculum documents, assignments, processes and deadlines here: https://umuzi-org.github.io/tech-department/\nSlack Please check your slack messages first thing in the morning (before stand-up) and regularly throughout the day (at least 3 times per day).\nChannels to join:\n #tech-team - contains communication all management discussions for tech team #deadlines - communications on deadline setting and changes #surprise_and_invisible_work - reporting on and trying to track work that takes up time but is not widely known #tech-assist - helping with tech problems #umuzi_coders - all coders #umuzi_data - all data scientists #meetups-and-events - info about meetups etc that are happening relevant cohort channels (e.g. c14-data, c13_data)  Personnel: Pay, Leave, Medical Aid, Computers Hloni Letuka\nhloni.letuka@umuzi.org\nSocial Media and Communication Sarah Lawson\nsarah.lawson@umuzi.org\nLeave Request Approval Sheena OConnell\nsheena.oconnell@umuzi.org\nRegular meetings: Daily stand ups with recruits at 9am.\nDaily tech meeting / check-in with tech facilitators and managers at 3:30pm on Mondays and 4pm every other day.\nProcesses for Umuzi tech managers when new staff join:  Get Umuzi email. Add to Slack and WhatsApp Add to Github staff team: https://github.com/orgs/Umuzi-org/teams/ and required repos Add to Trello boards Add to Datacamp (Data hires) Go through recruit project submission, code review, contributing to the tech department repo and specific product contributions (as relevant)   Cohort Leaders:  A cohort leader is the junior staff member that is put in charge of a specific cohort, you can find the allocations and responsibilities: here  Mentorship Here\u0026rsquo;s what you have to know about the role of a Mentor, what is expected from both you and your Mentees: WORKSHOPS: How To Be A Great Mentor Code review: General process here\nCode submission form to get the link to recruit submissions\nCode review form to complete\nMore info on what to look for in code review\n"
},
{
	"uri": "/tech-department/makeumuzibetter/",
	"title": "Online Learning and bootcamp",
	"tags": [],
	"description": "",
	"content": "A recruit’s journey includes a three-week programme called #MakeUmuziBetter (MUB). Recruits from all departments form small cross-functional teams to tackle issues at Umuzi - anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\n"
},
{
	"uri": "/tech-department/projects/tdd/password-checker/",
	"title": "Password Checker",
	"tags": [],
	"description": "",
	"content": "  PROJECTS: password-checker   PROJECTS: Add logging to password checker   "
},
{
	"uri": "/tech-department/projects/oop/person/",
	"title": "Person",
	"tags": [],
	"description": "",
	"content": " Project structure Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main └── java ├── Person.java \u0026lt;-------- names are important └── MainProgram.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions Please follow TDD when implementing this code if you have covered TDD in your course.\nCreate a class called Person which defines the generic data and functionality of a human.\nA class is a collection of attributes and functions. Different languages use different terminology for these things, but the bacic concepts are the same.\nGive your Person class should have the following attributes:\n name age gender interests. This is a list or array of strings  Give your Person class a hello function:\nExample usage:\n// JavaScript: let person = new Person('Ryan',30,'male',['being a hardarse','agile', 'ssd hard drives'] ) let greeting = person.hello() console.log(greeting)  # Python person = Person('Ryan',30,'male',['being a hardarse','agile', 'ssd hard drives'] ) greeting = person.hello() print(greeting)  // Java Person person = new Person( \u0026quot;Ryan\u0026quot;,30,\u0026quot;male\u0026quot;, new String[] {\u0026quot;being a hardarse\u0026quot;, \u0026quot;agile\u0026quot;, \u0026quot;ssd hard drives\u0026quot;}) String greeting = person.hello() System.out.println(greeting)  This should output:\nHello, my name is Ryan and I am 30 years old. My interests are being a hardarse, agile and ssd hard drives.  In OOP this is known as abstraction. We created a simple model of a more complex thing. We only represent the attributes and functionality that we need.\nWhen an object instance is created from a class, the class\u0026rsquo;s constructor function is run to create it. This process of creating an object instance from a class is called instantiation — the object instance is instantiated from the class. person is an instance of Person\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/plotly_dashboards/",
	"title": "Plotly Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": " Tutorials  Create a Plotly Dashboard in under 10 minutes (Easy) Create a dashboard with Pusher and Flask (Advanced)  Assignment In the Mobile Money Data Visualisation Assignment, you created graphs to display the relationship between the type of financial services accessed (non-mobile, mobile, both), how frequently these services were accessed, and socio-demographic information about the users (gender, land ownership type of income, and so forth). Create a Plotly dashboard of the 3-5 most informative graphs from this assignment.\nYour dashboard should be both visually appealing and informative.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/credit-card-approvals/",
	"title": "Predict credit card approvals",
	"tags": [],
	"description": "",
	"content": " Instructions Complete and submit the DataCamp project Predicting credit card approvals.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/logistic-regression/titanic/",
	"title": "Predict survival on the Titanic",
	"tags": [],
	"description": "",
	"content": " Instructions Use a logistic regression model to find the factors that were most important in predicting survival on the Titanic.\n Load the train and test datasets. Get basic descriptive statistics for the training data and check for missing and incorrect values. Replace missing values if this makes sense to do. What are the factors that predict survival? (i.e. which variables significantly predict survival, p \u0026lt; 0.05) Create a classification report and confusion matrix of predicted and observed values. What is the accuracy, sensitivity and specificity of the model on the (a) training and (b) test data? Plot a Receiver Operating Characteristic (ROC) curve on the test data. What is overdispersion?  "
},
{
	"uri": "/tech-department/topics/python-specific/oop-basics/",
	"title": "Python OOP basics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/kafka/",
	"title": "Python and Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/kafka/",
	"title": "Python and Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/mongo/",
	"title": "Python and MongoDB",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/spark/",
	"title": "Python and Spark",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/spark/",
	"title": "Python and Spark",
	"tags": [],
	"description": "",
	"content": " As a Data Engineer, you will be required to process large data sets for various reasons. In this fast paced world, the rate at which you carry out the processing matters and as a result, there exits various tools which help Data Engineers process large datasets quickly. Apache Spark is an open-source general-purpose distributed processing system used for big data workloads.\nApache Spark is written in Scala and can be integrated with Python, Scala, Java, R, SQL languages.\nBut what does that mean? Do you have to use Scala or Java?\nThe answer is a simple no. Fortunately for us, PySpark enables us to work with Spark in Python. PySpark is the Python API written in python to support Apache Spark.\nGo forth and learn.\nResources This is a good tutorial to get you started with PySpark. It\u0026rsquo;ll take you from zero to hero.\nThere is also a YouTube tutorial on Apache Spark.\nPick the one you\u0026rsquo;re comfortable with or even both if you can.\n"
},
{
	"uri": "/tech-department/topics/python-specific/python-backend-dev-environment-setup/",
	"title": "Python backend dev environment setup",
	"tags": [],
	"description": "",
	"content": " What you need This page is here to help you get set up on your local machine. These are very important tools we use at Umuzi and eventually at the workplace.\nInstallations Setting up your environment needs you to to install a bunch of stuff. A good programmer knows their stuff, knows what they are installing and doesn\u0026rsquo;t just jump into code. You will need the following:\n VScode: Visual Studio Code is an IDE developed by Microsoft for Windows, Linux and macOS. An integrated development environment is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of at least a source code editor, build automation tools, and a debugger. What makes an IDE so useful is the I: integrated. You could use just about anything for a development environment and many people use a variety of basic, individual programs in place of an IDE but an integrated environment gives you the ability to do everything in a single editor.\n python3.7: You will need to install the latest version of python3.7.* . Why Python? because it\u0026rsquo;s friggin awesome. You can use Python for developing desktop GUI applications, websites and web applications. Also, Python, as a high level programming language, allows you to focus on core functionality of the application by taking care of common programming tasks.  How to run things on the terminal The terminal is an interface in which you can type and execute text based commands. It can be much faster to complete some tasks using a Terminal than with graphical applications and menus. Another benefit is allowing access to many more commands and scripts. A common terminal task of installing an application can be achieved within a single command, compared to navigating through the Software Centre or Synaptic Manager. Press Ctrl + Alt + T to open the terminal when using Ubuntu/Linux-mint\nRunning Python There are 2 ways of running python that you should care about right now. The first way is pretty easy. Just open up a terminal end enter the command python3. This will open up a thing called a REPL. Basically it lets you just type in python commands and then it executes things. This is really useful if you just want to quickly calculate something or try out a piece of code.\nOf course if you\u0026rsquo;ve written some awesome code you would want to save it somewhere so you can run it whenever you want. For now let\u0026rsquo;s assume you don\u0026rsquo;t know your way around linux (if you do, that\u0026rsquo;s cool. But for now we\u0026rsquo;ll keep it simple). Try this out:\n Open up a text editer and make a file that looks like this: print(\u0026quot;Welcome to Umuzi!\u0026quot;) Save the file as hellp.py in your home directory (directory means folder). Now open up a terminal and type in python3.7 hello.py  Running programs  After installing from the terminal some programs can allow you to open them from the terminal. So instead of navigating everywhere in your computer you can just type the alias of that program. e.g. Since we installed VScode on our machines, a simple way to open it is to go into the terminal and type in code. code is an alias created by the terminal as a short cut for the program. You can also open up a terminal and type in code hello.py. This opens your file in VScode.  You can also open up a whole directory in vscode (this is really useful when you start working on real stuff). Try this out in a terminal:\n mkdir python_practice # this command makes a new directory mv hello.py python_practice/hello.py # this moves the file you made before  You could achieve the stuff above ^^ by using the graphical user interface (the file browser) but where\u0026rsquo;s the fun in that?\nNow execute this: code python_practice\n"
},
{
	"uri": "/tech-department/projects/python-specific/",
	"title": "Python projects",
	"tags": [],
	"description": "",
	"content": "The projects in this folder are specific to the Python programming language.\nUnless otherwise stated, please use Python3.7+. Python2.7 is considered legacy Python.\nAlso, if your project calls for you to install external packages from a package manager, please consider using virtualenv.\n"
},
{
	"uri": "/tech-department/topics/python-self-learning/",
	"title": "Python self-learning",
	"tags": [],
	"description": "",
	"content": "You are expected to spend your free time upgrading your Python skills. Here are some resources for you:\n Learn Python Real Python CodeWars  "
},
{
	"uri": "/tech-department/workshops/python-specific/",
	"title": "Python-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/regular-expressions/",
	"title": "Regular Expression Resources",
	"tags": [],
	"description": "",
	"content": " A regular expression, regex or regexp (sometimes called a rational expression) is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for \u0026ldquo;find\u0026rdquo; or \u0026ldquo;find and replace\u0026rdquo; operations on strings, or for input validation. \u0026ndash; wikipedia\nRegular expressions are very useful. We use them to:\n validate user input url matching: If you are working with any kind of web backend technology you will come across this extracting and cleaning data And many many other things  It\u0026rsquo;s not worth memorizing this stuff, but you should understand it.\nGeneral Regular Expressions  Video: Best of Fluent 2012: /Reg(exp){2}lained/: Demystifying Regular Expressions  Python Regular expressions  https://www.w3schools.com/python/python_regex.asp - Introduction to Regular Expression. https://docs.python.org/3/library/re.html - Python has a built-in package called re, which can be used to work with Regular Expressions.  Javascript Regular Expressions  https://www.w3schools.com/js/js_regexp.asp  Java Regular Expressions  https://www.javatpoint.com/java-regex  "
},
{
	"uri": "/tech-department/projects/tdd/resturaunt/",
	"title": "Resturaunt menu system",
	"tags": [],
	"description": "",
	"content": " Create an OOP program that can be used to represent and manage a resturaunt\u0026rsquo;s menu.\n The menu contains items Each item can come in different sizes, the sizes have different prices. Eg you might want to order a small pizza or a large pizza Items have names and descriptions Items have different categories (eg: pizzas, hamburgers, drinks) Item\u0026rsquo;s can have different tags. Eg vegetarian, vegan, chef\u0026rsquo;s choice, new, spicey  Different kinds of people need to interact with the menu in different ways: - everyone needs to be able to view the menu - The resturaunt manager needs to be able to add/edit/delete everything on the menu\nCan you think of any other people who might want to interact with the menu? And how they might interact?\nInstructions 1. Draw the class hierarchy Before you start writing any code, draw a picture of your classes and how they interact. Are you making use of inheritance? What Objects contain other objects? You will be expected to be able to explain your class hierarchy so please take care.\nIf you are running linux then there\u0026rsquo;s a simple tool called dia that is quite useful for these kinds of diagrams. sudo apt install dia.\n2. Code the class hierarchy Then code up your class hierarchy. Note that at this point in the process there is no functionality exposed. There is no frontend or user interface. The only functions you have are constructors.\nIf you are doing this in JS then this program\n3. Resturaunt Manager functions Create the functionality that the resturaunt manager would need. This functionality should be developed in a TDD way.\nThe following functionality should be exposed: - create/delete/list/edit categories - create/delete/list/edit tags - create/delete/list/edit menu items\nThis functionality will eventually be accessable through a user interface. Take some time to think abou that user interface. How would a manager want to interact with it? How will these functions get called? What information will be required at each point?\n4. Now for the Customers  Customers should be able to create orders An order is composed of a bunch of menu items (or specific sizes) menu items can be added to the order at any point\n menu items can be removed from the order at any point\n   Update your class diagrams to show this new information Code the necessary classes Create the following functions:  order_instance.add_item(???) order_instance.remove_item(???) order_instance.get_total_price()   Additional Resources   TOPICS: Intro to software architecture   "
},
{
	"uri": "/tech-department/projects/sql/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": " NCIT Units 114048 \u0026amp; 114049 Background reading You should be familiar with:\nTOPICS: SQL Installation:  We are using Postgres Instead of installing Postgres on your computer, you can launch it with a docker composition follow TOPICS: Intro to Docker and Docker-compose for steps to run Postgres in the container. MySQL is nice and lot\u0026rsquo;s of people use it in industry, but it doesn\u0026rsquo;t actually implement standard SQL, it sort of does it\u0026rsquo;s own thing a bit. Postgres is a much more standard DB, and industry loooooves it  Instructions Part 1: Creating a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n Create a database called \u0026ldquo;Umuzi\u0026rdquo;.\n Create the following tables in the Umuzi database:\n Customers Employees Orders Payments Products  Create a primary key for each table with auto-increment (make sure you correctly specify the data types, e.g. the ID field should be int).\n Create foreign keys so that every ID in the order table references an existing ID in the tables referenced (e.g., ProductID, EmployeeID, etc).\n INSERT the records in the tables below into the table you created in step 2.\n Document what information is stored in your database. Be sure to say what information is kept in what table, and which keys link the records between tables.\n  Customers Table    CustomerID (int) FirstName (varchar50) LastName (varchar50) Gender (varchar) Address (varchar200) Phone (int 10) Email (varchar100) City (varchar20) Country (varchar50)     1 John Hibert Male 284 chaucer st 084789657 john@gmail.com Johannesburg South Africa   2 Thando Sithole Female 240 Sect 1 0794445584 thando@gmail.com Cape Town South Africa   3 Leon Glen Male 81 Everton Rd,Gillits 0820832830 Leon@gmail.com Durban South Africa   4 Charl Muller Mal 290A Dorset Ecke +44856872553 Charl.muller@yahoo.com Berlin Germany   5 Julia Stein Female 2 Wernerring +448672445058 Js234@yahoo.com Frankfurt Germany    Employees Table    EmployeeID (int) FirstName (varchar50) LastName (varchar50) Email (varchar100) JobTitle (varchar20)     1 Kani Matthew mat@gmail.com Manager   2 Lesly Cronje LesC@gmail.com Clerk   3 Gideon Maduku m@gmail.com Accountant    Orders Table    OrderId (int) ProductID (int) PaymentID (int) FulfilledByEmployeeID (int) DateRequired (datetime) DateShipped (datetime) Status (varchar20)     1 1 1 2 05-09-2018  Not shipped   2 1 2 2 04-09-2018 03-09-2018 Shipped   3 3 3 3 06-09-2018  Not shipped    Payments Table    CustomerId (int) PaymentID (int) PaymentDate (datetime) Amount (decimal)     1 1 01-09-2018 R150.75   5 2 03-09-2018 R150.75   4 3 03-09-2018 R700.60    Products Table    ProductId (int) ProductName (varchar100) Description (varchar300) BuyPrice (decimal)     1 Harley Davidson Chopper This replica features working kickstand, front suspension, gear-shift lever R150.75   2 Classic Car Turnable front wheels, steering function R550.75   3 Sports car Turnable front wheels, steering function R700.60    Part 2: Querying a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n SELECT ALL records from table Customers.\n SELECT records only from the name column in the Customers table.\n Show the name of the Customer whose CustomerID is 1.\n UPDATE the record for CustomerID = 1 on the Customer table so that the name is \u0026ldquo;Lerato Mabitso\u0026rdquo;.\n DELETE the record from the Customers table for customer 2 (CustomerID = 2).\n Select all unique statuses from the Orders table and get a count of the number of orders for each unique status.\n Return the MAXIMUM payment made on the PAYMENTS table.\n Select all customers from the \u0026ldquo;Customers\u0026rdquo; table, sorted by the \u0026ldquo;Country\u0026rdquo; column.\n Select all products with a price BETWEEN R100 and R600.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where country is \u0026ldquo;Germany\u0026rdquo; AND city is \u0026ldquo;Berlin\u0026rdquo;.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where city is \u0026ldquo;Cape Town\u0026rdquo; OR \u0026ldquo;Durban\u0026rdquo;.\n Select all records from Products where the Price is GREATER than R500.\n Return the sum of the Amounts on the Payments table.\n Count the number of shipped orders in the Orders table.\n Return the average price of all Products, in Rands and in Dollars (assume the exchange rate is R12 to the Dollar).\n Using INNER JOIN create a query that selects all Payments with Customer information.\n Select all products that have turnable front wheels.\n  "
},
{
	"uri": "/tech-department/topics/intro-to-relational-databases/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": "Complete the DataCamp Intro and Intermediate SQL courses:\n Intro to SQL for data science Intermediate SQL  "
},
{
	"uri": "/tech-department/projects/java-specific/hello-sql-and-java/",
	"title": "SQL + Java Helloworld",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/sql-and-python/",
	"title": "SQL and Python",
	"tags": [],
	"description": "",
	"content": "Python can be used to interface with SQL. To give you an idea of what can be done, complete the Datacamp skill track Importing \u0026amp; Cleaning Data with Python: https://www.datacamp.com/tracks/importing-cleaning-data-with-python\n"
},
{
	"uri": "/tech-department/department-processes/workshops_and_events/",
	"title": "Scheduling workshops and events",
	"tags": [],
	"description": "",
	"content": " This is specifically for workshops that are compulsory for specific cohorts and optional for others. Eg: This is allowed \u0026ldquo;Introduction to Unit testing with Jasmine, Compulsory C14B, All welcome\u0026rdquo;.\nProcess for staff members:\n Create the event on your personal umuzi calendar. Say who should be there. Include a useful description as much as possible, even links to materials if appropriate Invite the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar  if your event doesn\u0026rsquo;t clash with anything on the tech events calendar it will automatically be accepted if it DOES clash then it will automatically be rejected   This automation is set up on purpose. For the most part we should never make a recruit from any cohort unwelcome in any internal workshop or event. So they should not clash.\nUpdating events Workshops can be rescheduled at least a day in advance. If a workshop is happening TODAY then the time should be considered immutable. Because we don\u0026rsquo;t mess our recruits around. And because we want to demonstrate good time management and planning skills so that the recruits can learn good habits from us.\nTo reschedule an event simply update the event in your own calendar (if you set the event up in the first place)\nClashes Be mindful of how events get automatically rejected if they clash. If you put an event on this calendar then it should make sense in that context.\nScheduling External workshops and events (eg: meetups)  Post a link to the event in the slack channel #meetups-and-events Put the event on the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar Attach a form where recruits can sign up to attend (so that transport can be organized etc) (TODO) tell te recruits about when they need to fill in the form by, what\u0026rsquo;s the maximum number of people who can go etc  "
},
{
	"uri": "/tech-department/syllabuses/web-dev-short-course/self-study/",
	"title": "Self Study",
	"tags": [],
	"description": "",
	"content": "For the most part the web-dev short course is based on projects. Recruits are expected to walk away with a solid understanding of many topics. While projects are underway, the recruits are expected to work their way through the followingt material:\n Command-line bootcamp: This will get you up to speed with the basics of terminal usage: http://rik.smith-unna.com/command_line_bootcamp/ Intro to linux presentation: https://docs.google.com/presentation/d/1dhj1-p9Ufl4ilSy_Nu8sw-kuNVWkSvhp0dn5KGo9TyY/edit Sheena\u0026rsquo;s awesome linux mint post-install guide: https://gitlab.com/prelude-open-source/mint-post-install-guide (you can skip the parts about python, virtualenv, pip) There is a website called stackoverflow that is completely amazing. You can ask tech questions there and they will get answered by kind and knowledgeable strangers. So long as you ask proper questions: https://stackoverflow.com/help/how-to-ask This is the Git book.. Git is great. long live the git. https://git-scm.com/book/en/v2 Git should be installed by default on linux mint. We\u0026rsquo;ll be using github a lot. And this book is way too big. If you get familiar with chaplets 1-3 it will serve you well  You can also continue with the FreeCodeCamp syllabus on your own time. Ideally you will be pretty familiar with this stuff: Free Code Camp\n Javascript Algorithms And Data Structures Certification: Basic JavaScript Javascript Algorithms And Data Structures Certification: ES6 Javascript Algorithms And Data Structures Certification: Debugging Javascript Algorithms And Data Structures Certification: Basic Data Structures Javascript Algorithms And Data Structures Certification: Basic Algorithm Scripting Javascript Algorithms And Data Structures Certification: Object Oriented Programming\n Responsive Web Design Certification: HTML and HTML 5\n Responsive Web Design Certification: Basic CSS\n Front End Libraries Certification: Bootstrap\n Front End Libraries Certification: jQuery\n  "
},
{
	"uri": "/tech-department/projects/semitone-challenge/",
	"title": "Semitone Challenge",
	"tags": [],
	"description": "",
	"content": " This is a multi-step project designed to level up many different skills.\nWe want to see the following skills demonstrated in different parts of this project:\n code structure functions loops conditions datatypes operators DOM maipulation  This project should be completed in a TDD way. This includes writing unit tests around the DOM!\nOk\u0026hellip;so WTF is a semitone? I\u0026rsquo;m glad you asked. Take a look at these links:\n https://www.justinguitar.com/guitar-lessons/the-note-circle-bc-152 https://www.justinguitar.com/guitar-lessons/note-circle-with-a-jam-buddy-mt-106  What we want to do is build a simple application that a musician can use to test their music theory skillz.\nIn the second video, Justin talks about a game that you can play with a jam buddy. Your buddy picks two notes from the note circle and tells them to you, then you tell your buddy how many semi-tones seperate those notes. That is basically what we are building here.\nThe final goal is to have a program that outputs two notes from the note circle and then allows the user to enter a number. The program needs to be ablt to tell the user if they chose the correct number or not.\nFor those of you studying web dev, you will be expected to build a simple user interface for this thing using vanilla js. For those of you studying Python you can make a command-line utility that does this.\n  PROJECTS: semitone difference - basic algorithm   PROJECTS: Make a simple GUI   PROJECTS: Advanced algorithm   PROJECTS: A gui that is more...awesome   Useful content   TOPICS: Jasmine Unit testing   "
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/",
	"title": "Sqlalchemy",
	"tags": [],
	"description": "",
	"content": "  TOPICS: [TODO] Sqlalchemy Basics   TOPICS: [TODO] Sqlalchemy migrations with Alembic   "
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/basics/",
	"title": "Sqlalchemy Basics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy/migrations/",
	"title": "Sqlalchemy migrations with Alembic",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/data-science-specific/statistical-thinking/",
	"title": "Statistical Thinking",
	"tags": [],
	"description": "",
	"content": " Background material  Crash Course Statistics: Measures of Spread Crash Course Statistics: Plots, Outliers and Justin Timberlake Crash Course Statistics: Correlation Doesn’t Equal Causation  Tutorials Complete the DataCamp courses Statistical Thinking in Python Part 1 and Statistical Thinking in Python Part 2.\nAssignment Instructions In the next series of challenges, we will predict employee salaries from different employee characteristics (or features). We ask employees working in four different fields to state their salary and some background information.\nImport the data salary.csv to a Jupyter Notebook. You will need the packages matplotlib, seaborn, pandas and statsmodels. A description of the variables is given in Salary metadata.csv.\nQuestions  How many responders are there? Are there any missing values in any of the variables? What is the lowest salary and highest salary in the group? What is the mean salary for the sample? Include the standard error of the mean. What is the standard deviation for the years worked? What is the median salary for the sample? What is the interquartile range for salary in the sample? How many men are there in the sample? How many women are there in the sample? Present this information in a table. How many women are executives compared to men? Create a histogram for the variable Salary. Examine the histogram and describe the distribution for Salary. Create a bar graph to show the different average salaries of men and women. (Bonus: Add error bars to the bars showing the 95% confidence interval). What does the graph tell you about the difference between men and women’s salaries? Create a scatterplot with seaborn showing the relationship between Years Worked and Salary (don’t forget to insert a trend line).  What is the relationship between Years Worked and Salary? Describe any patterns in the scatterplot. Do you notice any unusual/extreme values that do not fit the general trend? If you see any unusual values, briefly describe them (Who are they? In what way are they different?)  Using the pearsonr function from the scipy.stats package, calculate the Pearson correlation coefficient (and its corresponding p value) to determine the nature of the relationship between Years Worked and Salary. See help(pearsonr) for help on this function.  Interpret the size and direction of the correlation statistic. Is the relationship statistically significant? Report the appropriate statistic(s) to support your answer.   "
},
{
	"uri": "/tech-department/topics/java-specific/string-and-number-manipulation/",
	"title": "Strings and numbers in Java",
	"tags": [],
	"description": "",
	"content": " In Java there are multiple ways to manipulate both strings and numbers to work in a manner that is required. These methods can play a vital role in the business logic of a system.\nFor example: Say you have a list of 100 books and you need to provide the functionality to search for a book. Without being able to manipulate a String the user would always have to search for the full title of a book and ensure that every letter\u0026rsquo;s case, matches that of the title.\nJava has built in methods to assist with just these kinds of situations.\nManipulating Strings  Concatenating Strings.\n Appending Number values to Strings.\n Determine the total number of characters in a String.\n How to alter the case of a String.\n Finding the position of a character in a word/sentence.\n Comparing 2 Strings to check for similarities.\n Substituting new values into a String.\n Splitting up sentences/words into multiple parts.\n Remove empty spaces from the start and end of Strings.\n Formatting Strings to a desired output. Example: for currency, converting 23.21 into R23.21.\n  On the other hand, being able to manipulate numbers is critical to most systems.\nManipulating Numbers  Convert negative values to positive values.\n Rounding a number up or down.\n Get the Highest/Lowest number, between 2 numbers.\n Calculate X to the power of Y.\n Generate a Random number.\n Get the Remainder/Modulus of 2 numbers.\n  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/super-basic-intro-to-node/",
	"title": "Super basic intro to Node",
	"tags": [],
	"description": "",
	"content": " Most people are introduced to JavaScript in the context of a web browser. JS adds smarts to HTML and CSS.\nJS is a proper programming language so it can do a whole lot more than that. Basically it doesn\u0026rsquo;t need to interact with a website in order to work. You can use it on the \u0026ldquo;back-end\u0026rdquo;. It can be used to interact with filesystems and databases and all sorts of other things.\nWhen JS is running on the backend it\u0026rsquo;s usually referred to as Node. Node is really a \u0026ldquo;runtime environmnet\u0026rdquo; that can execute JS code.\nTry type this into a terminal:\nnode  Now type\nvar greeting = \u0026quot;hello world\u0026quot;; console.log(greeting);  So you see you can execute JavaScript code right there in your terminal and it just works (assuing you have node installed).\nNow save the helloworld code above to a file named hello.js. You can execute this whenever you want to by saying node hello.js in a terminal. Or rather node /path/to/hello.js if you are in a different location.\npackage managers Now one of the really super cool things about node is npm.\ntodo:\n talk about npm, show how to get started, install something and use it talk about .gitignore and node_modules  "
},
{
	"uri": "/tech-department/topics/unit-testing/tdd-horrors/",
	"title": "TDD Horrors",
	"tags": [],
	"description": "",
	"content": " These are all the most common TDD problems recruits tend to come across, read and make sure you didn\u0026rsquo;t make any of these or any mistakes at all.\n Write tests. Recruits in the past have done the mistake of not writing tests for TDD assignments, make sure you avoid this weird mistake. Always write tests for your TDD projects. Please make sure you understand .gitignore, please don\u0026rsquo;t add your node_modules to git. Name your files according to what is inside them Avoid making tests depend on each other. Making test dependent on each other is the perfect path to pain, expense, fragility, and complication. Pay attention to failure messages. Make each failure message as helpful for diagnosis as you can. Do not skimp on the refactoring. It is the refactoring that will keep your code (including the tests) easy to understand and change Naming conventions: in general, be careful with your naming conventions. make sure your naming convention consistent, names should be more descriptive. Name your files properly and according to what\u0026rsquo;s inside them. Keep good directory structure and delete all junk files. Avoid messy indentation (install prettier). Test for errors/exception, sometimes code is supposed to throw an error or raise an exception. In these cases your tests should make sure that the error happens as it should, your tests need to use the following syntax:\nJavascript:\nexpect(...).toThrow()  Python:\nwith pytest.raises([ErrorType])...  Python peeps DO NOT Define a test case(testing function) inside a function.\n  def test_something(): def totally_valid_test(): assert add(1,20,5) == 26 def another_test(): assert add(1,23,5) == 29  Note: Nice thing about the pytest module is that it removes the need for boilerplate code. so the following code would work:\nfrom module import add # tests start here. def test_add_two_values(): assert add(1,2) == 3 def test_add_multiple_values(): assert add(1,2,3,4) == 10   Test cases should focus on one functionality and one functionality only.  Python example:\nDo not do this:\ndef test(self): assert add(1,2,3,4) == 10 assert multiply(1,2,3) == 6  Do this instead:\n# test add function. def test_add_two_values(self): assert add(1,2) == 3 def test_add_multiple_values(self): assert add(1,2,3,4,5,6) == 21 assert add(2,3,4,5) == 14 def test_multiply_two_values(self): assert multiply(1,2) == 2 def test_multiply_multiple_values(self): assert multiply(1,2,4) == 8  Javascript example:\nDon\u0026rsquo;t do this:\ndescribe('Test one', () =\u0026gt; { it('Should add', () =\u0026gt; { let sum = add(1, 23, 5); expect(sum).toBe(29); }) it('Should multiply', () =\u0026gt; { let prod = multiply(1, 23); expect(prod).toBe(23); }) })  Each Function should have it\u0026rsquo;s own describe object_\nDo this:\ndescribe('add()', () =\u0026gt; { it('Should add [what exactly?]', () =\u0026gt; { let sum = add(1, 23, 5); expect(sum).toBe(29); }) }) describe('multiply()', () =\u0026gt; { it('Should multiply [what exactly?]', () =\u0026gt; { let prod = multiply(1, 23); expect(prod).toBe(23); }) })   Javascript: Test strings are there to be descriptive:\n eg:  Do: it(\u0026quot;can/should multiply [what exactly?]\u0026quot;)\nDon\u0026rsquo;t: it(\u0026quot;multiply\u0026quot;)\n Incomplete projects:\n Always make sure that your projects are complete. Submitting Incomplete projects looks, BAD! to both an employer and Code reviewers, so don\u0026rsquo;t submit incomplete projects, it\u0026rsquo;s bad for your reputation. If you do not have tests, for your TDD project, then your project is incomplete.  TDD tests fail:\n Failing tests aren\u0026rsquo;t bad during development, but make sure your all tests pass when you submit your project.  Documentation on how to setup and test the code:\n Make use of README.md, requirements.txt files, collaborators shouldn\u0026rsquo;t guess/remember how to setup all the dependencies for your project, document all the necessary processes please.  Clean code base. Need I say more?\n Dirty.  Javascript:\n// Testing if the Error Checks throw //var sixSided = new Dice(6,[1,\u0026quot;gdfdf\u0026quot;]); var sixSided = new Dice(6,[1,6,5,-16]); //console.log(sixSided.rollDice());  Python:\n# I was thinnking about This # Then I did this but it didn't work. so I left # And then, it came to me, eureka! die6 = Dice(6) # Since it works, there's no need to clean it.   Clean.  Javascript:\nvar sixSided = new Dice(6,[1,6,5,-16]);  Python:\ndie6 = Dice(6)   Remove useless stuff, it serves no purpose. so get rid of it.\n One test: writing one test to test everything is a bad idea, you need to separate it into multiple tests that test one and thing only.  Some useful Readings  Common mistakes in TDD  TOPICS: Unit testing (language agnostic concepts)   TOPICS: Clean Code   "
},
{
	"uri": "/tech-department/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/",
	"title": "Test Driven Development",
	"tags": [],
	"description": "",
	"content": " The exercises in this section can be done in any language. The aim is to have working logic, not a beautiful user interface. You will be expected to demonstrate your working code and also to build on lessons you have already learned.\n if you know OOP please use it where it is appropriate write clean code (it will be reviewed by your peers and by senior staff) use Git from the command line. This is a suuuper important skill in industry have fun :) (but not too much)  There are a few exercises here. Try the ones marked as easy first.\nReads  Here is a quick read on the most common TDD pitfalls: TOPICS: TDD Horrors   "
},
{
	"uri": "/tech-department/topics/test-driven-development/",
	"title": "Test Driven Development",
	"tags": [],
	"description": "",
	"content": " By now you should know a bit about what a unit test is na dwhy we do them. The next question is: when should we do them? Do we write our unit tests after we write our code or before?\nTest driven development is a methodology in which tests are written before the code. This probably seems a little bit strange. Because it is. But it has a lot of advantages.\nThe basic algoorithm you follow in TDD is the same no matter what language you are writing in. Here it is:\nRED -\u0026gt; GREEN -\u0026gt; REFACTOR -\u0026gt; repeat until victory!\n RED means: Step 1 is to write a test. The test should fail GREEN means: Write some code so that your test passes REFACTOR means: Look critically at your code. Is it DRY and cohesive? do the names make sense? Is it kak or is is lekker. Make it lekker and make sure your tests still pass. VICTORY: Beautiful code that works  There\u0026rsquo;s a lot more to be said about it than that. And there are a lot of intricacies and frustrations that you are going to bump into. YOu\u0026rsquo;re going to be doing a lot of this.\nResources  https://www.guru99.com/test-driven-development.html This is really good. But it glosses over the REFACTOR phase of TDD. ALways refactor. Always. https://www.youtube.com/watch?v=H4Hf3pji7Fw https://www.youtube.com/watch?v=3vuW4lFdAxc  This video is about BDD. Which is even cooler than tdd. https://www.youtube.com/watch?v=VS6EEUVZGLE\nExample This is written in Java. But if you aren\u0026rsquo;t learning Java, eg if you are writing Python or JS instead, don\u0026rsquo;t be scared! Once you know one language then many others are pretty straight-forward to pick up.\nhttps://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\n"
},
{
	"uri": "/tech-department/topics/tech-terminology/",
	"title": "The Tech Landscape Terminology",
	"tags": [],
	"description": "",
	"content": " The tech landscape is vast with interconnected technologies that comprise backend, frontend and database functionalities. These technologies vary, ranging from languages, frameworks, IDEs, databases and platforms.\nLanguages A programming language is essentially a set of instructions given to a computer to produce various kinds of output. They are used to implement algorithms. Different languages have different syntax. In Web development, the frontend has 3 essential languages.\nFrameworks and Libraries Frameworks and libraries are reusable code that has been written by someone else and packaged. They help save you time when coding as the main aim for them is to solve common problems that other developers have faced and solved. Most frameworks are open source, which means anyone can import them into their code and use them.\nRead more on The difference between Frameworks and Libraries\nTools A tool is a program that developers use to create, debug, maintain or support other programs and applications. These are usually simple programms that can be combined to accomplish a task. Some basic tools include source code editors, and compilers or interpreters. Tools are often excuted from the command line.\nA tool that is widely used in development is Git read more, which is a version-control tool. It is used to track changes in the source code during the development process.\nDatabases A database is basically a structure that enables the storage, retrieval, manipulation and updating of data.\nIDEs Integrated Development Environment(IDE) is a software suite that consolidates basic tools that a developer needs to write and test code. An IDE can consist of a Text Editor (for writing the actual code), a debugger (to detect and fix errors) and code libraries (to make coding faster and easier).\nPlatforms A platform is any hardware or software that is used to execute or host software, application or service. The most popular ones include Heroku, Amazon Web Services (AWS), Microsoft Azure and Google Cloud Platform.\nA widely used platform in Tech is Github watch for more info. It is a code hosting platform for version-control and collaboration. It is an online service to which developers who use Git can connect, upload and download resources. There are also alternatives to Github like GitLab, Bitbucket,Beanstalk and a whole lot others.\nNew to Git and Github? Here\u0026rsquo;s a tutorial to help you get started.\nCloud Computing The practise of using a network of remote servers hosted on the Internet to store, manage, and process data, rather than a local server or a personal computer.\nThere are three types of Cloud Computing:\nSaaS (Software as a Service) It uses the internet to deliver applications. The applications are managed by 3rd party vendors to their users. Most SaaS applications run through a web browser, hence they don’t require downloading or installation. Examples: Google Apps \u0026amp; Dropbox\nPaaS (Platform as a Service) Also known as Cloud Platform Services. They provide cloud components to certain software while being used mainly for applications. PaaS delivers a framework for developers that they can build upon and use to create customized applications. All servers, storage, and networking can be managed by the enterprise or a third-party provider while the developers can maintain management of the applications. Examples: AWS Elastic Beanstalk, Windows Azure, Heroku, Force.com, Google App Engine\nIaaS (Infrastructure as a Service) Cloud infrastructure services, known as Infrastructure as a Service (IaaS), are made of highly scalable and automated compute resources. IaaS is fully self-service for accessing and monitoring computers, networking, storage, and other services. IaaS allows businesses to purchase resources on-demand and as-needed instead of having to buy the hardware outright. Examples: DigitalOcean, Linode, Rackspace, Amazon Web Services (AWS), Cisco Metapod, Microsoft Azure, Google Compute Engine (GCE)\nVirtual Machines These are software computers that provide the same functionality as a physical computer. They run on a physical computer, they behave like a separate computer system. VMs can run applications and operating software like a physical computer would. They are used to perform specific tasks that are risky to run on a host environment like accessing virus-infected data or testing an operating system. There different virtual machines for different operating systems namely: Mac, iOS, Android, Linux, VMware and Ubuntu. There are also virtual machines for Python and Java.\nContainer A container is a method for packaging applications and other dependencies so that it can be run in isolation from other processes. There are different types of container software. They include Docker, Apache Mesos, rkt (rocket) and Kubernetes.\nWeb Development Web development is the work involved in building websites, web apps and social media services, for the internet or private network (intranet). It can be broken down into specific specializations, namely: Frontend (Client facing side, Backend (server-side) or Fullstack (specializes in both). Web development is like a machine and the specializations are like different parts of the machine.\nThese parts have different technologies that comprise languages, frameworks, libraries and Databases and IDEs which make development possible.\nMore on how Frontend and Backend work together\nLanguages:  HTML (Hypertext Markup Language) Read more CSS (Cascading Style Sheet) Read more Javascript Read more NodeJS read more SQL read more  Frameworks:  Express read more React read more Bootstrap read more  Databases:  MongoDB read more mySQL read more  IDEs:  Visual Studio Code download here Atom download here Sublime Text download here  System Development (Mobile Development) Systems Development is the process of defining, designing, testing and implementing new software.\nLanguage  Java read more Kotlin (Android) read more Swift (iOS) read more  Build Tool:  Gradle read more  IDE:  IntelliJ Download here XCode (iOS) download here Android Studio download here  Database:  Firebase read more Sqlite read more Core Data read more Realm read more  Data Science \u0026amp; Engineering Data Science is the study of data, it combines domain expertise, programming skills, mathematics and statistics to extract meaningful information from data. Data engineering is an aspect of data science. It focuses on the practical application of data collection and analysis.\nLanguages:  Python read more  Frameworks and Libraries:  Django read more Flask read more Pandas read more TensorFlow read more scikit-learn read more NumPy read more NLTK read more matplotlib read more Seaborn read more  IDE:  Jupyter Notebook download here  Databases:  PostgreSQL download here  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dotenv/",
	"title": "The dotenv module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/time-managment/",
	"title": "Time Management",
	"tags": [],
	"description": "",
	"content": "TODO: which one?\nhttps://docs.google.com/presentation/d/1gRAGqSma21RkbnfoCO2KM565EfGCf9m4ZuJ9S7mcyFc\nhttps://docs.google.com/presentation/d/1gOBA6zen5jre1DxCKRU9zHpVDFh2n8yPMXw2STCOkCw\n"
},
{
	"uri": "/tech-department/",
	"title": "Umuzi Tech Department",
	"tags": [],
	"description": "",
	"content": " Umuzi Tech Department This website/repo is the source of truth around what and how we teach here in Umuzi\u0026rsquo;s tech department. Let me show you around:\nIf you want to contribute to this repo Take a look at the contribution guide guide. This guide will tell you basically how this application works and will give you info on what a good pull request looks like.\nIf you are a recruit This here is basically how we work.\nIf you want to see the entire syllabus (as it currently exists) then take a look here. What you see in this section is constantly evolving based on feedback from you and from industry.\nIf you think anything we have in here can be improved upon we would love to know! You can even make a pull request. If we merge your stuff then you will show up on out credits page. Cool, eh?\nIf you are a staff member You are probably looking for our department processes documentation. Take a look here.\nIf you are interested in getting in touch with Umuzi Hi friend, we would love to meet you. Check out our contact page for more info\n"
},
{
	"uri": "/tech-department/projects/basic-unit-test-mocks-kata/",
	"title": "Unit test mocks and spies kata",
	"tags": [],
	"description": "",
	"content": "This basic project should demonstrate mocks/spies.\n asssert that a function gets called assert that a function is called a specific number of times with specific arguments  "
},
{
	"uri": "/tech-department/topics/unit-testing/",
	"title": "Unit testing (language agnostic concepts)",
	"tags": [],
	"description": "",
	"content": "The following videos use JavaScript to demonstrate and explain some key concepts around unit testing. Even if JS is not your vibe these are worth watching.\n Lesson 1: Why Unit Testing Lesson 2: Your first tests Lesson 3: Test Runners. This discussion on test runners mentions a bunch of JS stuff. But there are still many language agnostic concepts that are worth knowing about. Examples of Python test runners are unittest and pytest.  If you are actually doing JS then it\u0026rsquo;s worth watching the rest of this series of videos.\n"
},
{
	"uri": "/tech-department/workshops/intro-to-unit-testing-with-jasmine/",
	"title": "Unit testing Introduction",
	"tags": [],
	"description": "",
	"content": "..* (A brief introduction to unit testing.) \n..* (A brief introduction to Jasmine) \n"
},
{
	"uri": "/tech-department/workshops/js-unit-tewsting/",
	"title": "Unit testing Introduction",
	"tags": [],
	"description": "",
	"content": "A brief introduction to unit testing\n"
},
{
	"uri": "/tech-department/topics/unit-testing/mocks-and-spies/",
	"title": "Unit testing with mocks and spies",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/",
	"title": "Unit-testings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/fetch/",
	"title": "Using the fetch api",
	"tags": [],
	"description": "",
	"content": " Fetch  "
},
{
	"uri": "/tech-department/projects/validating-user-input-for-web/",
	"title": "Validating user input for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/virtual-envs/",
	"title": "Virtual Environments",
	"tags": [],
	"description": "",
	"content": "and os.environ\n"
},
{
	"uri": "/tech-department/topics/web-dev-self-learning/",
	"title": "Web Dev learning materials",
	"tags": [],
	"description": "",
	"content": " You are expected to spend your free time learning and practicing your web development skills. Here are some resources for you. Different people tend to prefer different resources because they support different styles of learning.\nYou should know HTML, CSS and JavaScript (including ES6 syntax).\nBasics  FreeCodeCamp: This one is great if you\u0026rsquo;ve never coded before. It holds your hand through the whole process W3Schools: This is also very friendly for beginners but teaches things in a more exploratory way MDN - Most comprehensive javascript reference guide on the internet. CodeWars: Practice makes perfect JS re-introduction - Compact introduction covering types, variables, operators, control structures, functions and closures. Hacker Rank - Practice coding, prepare for interviews, and get hired. Simplified JavaScript Jargon - Glossary which explains all the buzzwords from the JavaScript eco system.   Once you have the basics down then you need to start learning ES6, this is a more modern version of JavaScript and has a few new concepts.\n  Exploring ES6 - Good introduction with in-depth chapters. Exploring ES2016 and ES2017 - Follow up of »Exploring ES6«. Setting up ES6 - Explains how to set up ES6 projects that are transpiled to ES5. ES6 Overview - Bullet point overview including in-depth articles. ES6 Katas - Learn ES6 by solving unit test online. Practical ES6 - eBook with practical examples and advices. 30 seconds of code - Useful ES6 snippets that you can understand in 30 seconds or less.   We find the following bits and pieces really useful. Make sure you really understand this stuff:\n  Classes - Javascript Classes description and use cases. Arrow functions - Arrow functions description and use cases. let - let description and use cases. const - const description and use cases. Modern JavaScript Cheatsheet - Helps developers with basic knowledge to get familiar with modern codebases. ECMAScript Language Specification - The standard JavaScript is based on. Only for very advanced learners. Spread Operator - ... Spread Operator description and use cases. Ternary Operator - ? Ternary Operator description and use cases.  "
},
{
	"uri": "/tech-department/topics/web-frontend/",
	"title": "Web Frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/web-scraping/",
	"title": "Web scraping with Python",
	"tags": [],
	"description": "",
	"content": "Python\u0026rsquo;s beautifulsoup package is great for web-scraping. See the documentation at beautifulsoup.\nAn example of using web-scraping for a data project is I was looking for a house, so I built a web scraper in Python!.\n"
},
{
	"uri": "/tech-department/projects/data-science-specific/webscraping/",
	"title": "Webscraping Assignment",
	"tags": [],
	"description": "",
	"content": " Use the packages requests and beautifulsoup to get the text from the Wikipedia page on Energy in South Africa.\n Get only the information from the Overview table \u0026lsquo;Energy in South Africa\u0026rsquo;. Loop through the rows and columns of the table to get the data into a list. Turn the list into a pandas data frame with the table headings (as given in Wikipedia) as the column names.\n Plot energy production and export between 2004 and 2012 in a line graph. Remember to label your axes clearly and to provide a legend and title.\n Plot C02 emissions between 2004 and 2012. Remember to label your axes clearly and to provide a legend and title.\n  "
},
{
	"uri": "/tech-department/projects/data-science-specific/dashboards/webscraping_plus_dashboards/",
	"title": "Webscraping and Live Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": " Use beautifulsoup and regular expressions (regex) to scrape the data of provincial dam levels from the Department of Water and Sanitation.\nCreate a dashboard with graphs showing the current and previous week\u0026rsquo;s dam levels by province, and compare it to the water levels from the previous year. Your dashboard should update weekly (in other words, you can\u0026rsquo;t just copy and paste this week\u0026rsquo;s data to your notebook).\nThink about  What type of graph will show this information best? Do all graphs have clearly understandable headings, axis labels and (if applicable) legends?  "
},
{
	"uri": "/tech-department/department-processes/what-recruits-need-to-know/",
	"title": "What You Need To Know (as a recruit)",
	"tags": [],
	"description": "",
	"content": " This is a guide to the Tech Department and how it works. It contains contact details, important links to documents we use and software that are useful.\nGround Rules In order to be efficient and productive we have some ground rules: You are expected to be at your desk most of the time between 9am and 5pm (barring lunch)\n Don\u0026rsquo;t be late for workshops. Don\u0026rsquo;t be late for standup. Don\u0026rsquo;t be disruptive and noisy in the work area, this is a place for focus. Submit your projects on time via the link in the repo. Submit high quality work and do your best.  Daily Tech Events These happen everyday and are compulsory for everyone to attend.\nStand up This is how we begin our day, announcements are shared and we discuss anything that hinders progress.\n Every morning at 09:00  After Lunch Event handled by Tech Facilitators\nThis is a daily compulsary after lunch event. There are a variety of events we will be doing with you in orer to improve your coding, interpersonal and presentation skills . There is a Schedule that specifies who will present on which day.\n Everyday after lunch at 13:30  Tech Meetups Handled by Singi\nAt least once a month (usually more) we attend a meetup. We get to learn on what\u0026rsquo;s new in the tech world, learn more on the technology and languages we already know. Meetups are free, no cost to you.\nHere\u0026rsquo;s a link to the Meetup Form for RSVPing Use the form to RSVP for transport (which we provide).\nCommunication Communication is a crucial part of the department and also encourages productivity. We use:\nSlack This is the most important platform for communication. There are various slack channels for different purposes. The sole purpose is to administer communication between recruits and the tech staff:\n To get feedback from managers. To share relevant material and opportunities with fellow recruits. To get departmental and cohort specific announcements.  Make sure you check your slack at least 3 times a day.\nWhy is slack important?\n Slack (and tools like slack) are industry standards. So start developing good habits now Our staff are not always in the office, sometimes work happens off site. But communication should still happen  Emails For any official communication and setting up meetings, events and workshops. Check your emails at least once a day.\nWhatsApp groups For communication within cohorts and the mighty Coding Department WhatsApp group for the whole department.\nNCIT Material \u0026amp; Assessments As you will be doing assessments for your National Certificate in Information Technology - Systems Development The material and assessments are found on Gnomio. This is where you will also submit these assessments\nImportant Spreadsheets, Forms and Calendars (I suggest you bookmark these)  Coding \u0026amp; Data Programme Outline This spreadsheet is the source of truth, make sure to check it regularly. The tech staff updates the spreadsheet once per week, usually on Monday afternoon.\n Deadline Calendar This is where every date for submission is posted. It corresponds with the dates that are in the Program Outline.\n Tech Events Calendar That all tech events are scheduled on. This is where yu will find dates for Workshops, Talks and Meetups. Check this everyday.\n Leave Request Form This is to be completed for any leave requested or taken.\n Disciplinary Policy | Code Of Conduct | Sexual Harassment Policy These are the Umuzi policies please read through them and familiarise yourseld with them.\n Leave Policy [TODO]\n To help us improve our content please review or rate by clicking here If you have any queries, these are the people to contact:\n  Tech/Curriculum Questions  Kii, Singi, Tshepo, Makakole, Johan  NCIT  Ryan  Password Management  Tshepo  Databases, Surveys, Recruit(ment) Data  Sheena  CV Builder  Dibwe  Recruitment Portal  Sheena  Junior Tech Facilitators Scrum Masters\n @Kii - Mhlanganisi Kii Gxobole - mhlanganisi.gxobole@umuzi.org @Tshepo - Tshepo Modise - tshepo.modise@umuzi.org  Web Development:\n @Johan - Johan Khanye - johan.khanye@umuzi.org  Data:\n @Singi - Singita Ngobeni - singita.ngobeni@umuzi.org @Makakole - Makakole Mafane - owen.mafane@umuzi.org @Johan - Johan Khanye - johan.khanye@umuzi.org  Senior Staff Web Development:\n @dibwe - Dibwe Kalangu - dibwe.kalangu@umuzi.org  Data:\n @Webster - Webster Gova - webster.gova@umuzi.org  Department Heads  @sheena - Sheena O’Connell - sheena.oconnell@umuzi.org  Softwares to use Text Editors These are all good. Choose your favorite\n Visual Studio Code - https://code.visualstudio.com/download Atom - https://atom.io/ Sublime Text - https://www.sublimetext.com/3  Time Management \u0026amp; Project Management tool  Trello, https://trello.com/ Rescue Time,https://www.rescuetime.com/  Useful android apps  https://play.google.com/store/apps/details?id=org.withouthat.acalendar https://play.google.com/store/apps/details?id=com.Slack https://play.google.com/store/apps/details?id=com.trello  "
},
{
	"uri": "/tech-department/workshops/what-to-put-on-a-cv/",
	"title": "What to Put On A CV",
	"tags": [],
	"description": "",
	"content": "This is a rundown on how to make a proper CV.\n "
},
{
	"uri": "/tech-department/topics/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/choosing-a-task-queue/",
	"title": "ZeroMQ versus RabbitMQ versus Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/code-review/",
	"title": "code review process",
	"tags": [],
	"description": "",
	"content": " General Process  Recruits get given some project instructions. Like this: PROJECTS: simple-calculator part 1  You\u0026rsquo;ll notice there is a link at the top of the project instructions. Peeps follow that link to submit their work The code submissions show up in a https://docs.google.com/spreadsheets/d/1jIWBgfh4PbZU0KpBQi_hTjSFK74CRkTQtoEcvJ1V0uA/edit#gid=2104739812\u0026amp;fvid=1123262740. This is stored on the Tech Dept Drive, send a message on the tech-team channel if you don\u0026rsquo;t have access You\u0026rsquo;ll notice if you scroll to the left there is a column entitled \u0026ldquo;INITIAL REVIEWER\u0026rdquo;, if you are intending to review someone\u0026rsquo;s code then you need to put your name in this column To review the code you need to make sure you understand the project instructions, clone the code, make sure it works, make sure the tests cover everything they should cover, and comment on things like good coding practices. We are currently working on some automations around this stuff but for now that\u0026rsquo;s what needs to happen If you are unsure about what kind of code quality we are looking for, take a look here for some ideal answers: https://github.com/Umuzi-org/automark-project-config Look at the PRs as well, there\u0026rsquo;s a lot of good stuff there. If you need assistance you can ask for help on the tech-team channel and someone will jump in. Now fill this in with comments about the code review: Code review google form Communicate with effected parties. Tell the recruit your feedback. If there is a RED FLAG and you need some help dealing with this recruit then let us know on the tech-team channel.  The projects that are worth reviewing first are these (in order).\n  PROJECTS: simple-calculator part 1   PROJECTS: Password Checker   PROJECTS: string-calculator   PROJECTS: simple-calculator part 2   PROJECTS: Person   PROJECTS: Dice   PROJECTS: Bank Accounts   Also, be a perfectionist. We want our recruits to write beautiful code\nGoals We have a few goals for code review:\n We need to keep track of who has submitted code and who hasn\u0026rsquo;t. deadlines should be taken seriously by recruits which means that WE need to take them seriously We need to know what the recruits need. If they need help then we need to help them quickly. If disciplinery action is needed then we should act fast Code review aids in knowledge sharing within our team Code review is a useful skill that should be taught to recruits  Process and Roles When deadlines are set up then a few different staff members are assigned different roles. This will be done by populating columns in the (mighty) Coding and Data program outline spreadsheet.\nThe roles are as follows:\ndeadline-tracker:  checks that people have submitted in time keeps track of excuses for late submissions and acts with good judgment can adjust deadlines if needed. MUST tell the project owner about any adjustments issues verbal warnings for late submissions (fills out the verbal warning form as needed)  junior reviewers:  performs first and possibly second review completing the code review form listed above under general process. explicitly alerts senior reviewer about any RED FLAGs immediately (send a message on slack) if the reviewer is unhappy with the code but thinks that they can assist then they need to: send the recruit a summary of the problems that need to be fixed and an expected time frame (eg: fix by the end of tomorrow) inform the deadline-tracker review the re-submitted code or find another junior reviewer to do so  senior reviewer:  make sure that the junior reviewers understand the project submission requirements ahead of time deal with any RED FLAGs on a case by case basis re-review a few random code bases that various junior reviewers are happy with get a summary of common problems that came up in the review and update documentation as needed and/or create a workshop as needed ideally start reviewing as soon as possible in order to catch any problems that come up in the junior review process use the same code review form that the junior reviewers use send any problems found to all other reviewers involved and the recruit  MUSTs, SHOULDs and whatnots  every piece of code submitted by any recruit MUST be reviewed by a staff member OR by a recruit that has proven themselves at least once when a recruit submits code then they MUST receive their initial review comments by the end of the following day. If the cohort is large then the day after that is acceptable deadline-tracker SHOULD be a junior facilitator  Using our recruits to help with code review TODO. I think they should use the same code review form?\n Let a recruit review a few code submissions and let a junior or senior staff member check their work keep track of what recruits are good at code review and then dont require staff members to double check their work so much senior reviewers are in charge of making sure that juniors understand instructions junior reviewers are in charge of making sure that recruits understand instructions  "
},
{
	"uri": "/tech-department/projects/python-consuming-an-api-with-requests/",
	"title": "consuming APIs with the requests module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/build-rest-api-with-db/",
	"title": "create a REST api to interact with actual database",
	"tags": [],
	"description": "",
	"content": "project\n"
},
{
	"uri": "/tech-department/projects/python-specific/expose-rest-api-simple/",
	"title": "expose a simple JSON rest api",
	"tags": [],
	"description": "",
	"content": " Instructions Part 1: Data layer  Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{some_number}.json. The number part of the file name should be automatically generated as you save the visitor. eg:  alice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json   Create a function called load that takes in a number and returns a Visitor object that was saved to file.  eg:\nalice = load(1) bob = load(2)   Make sure that this kind of functionality works appropriately  alice = Visitor(...stuff) alice.save() # creates a file alice.age = 93 alice.save() # DOES NOT create a file. This updates the original file  This should also work:\nbob = load(2) bob.comments = \u0026quot;great personality\u0026quot; bob.save() # should update visitor_2.json  Part 2: Expose JSON api Use Flask to expose the following functionality:\n create a new Visitor in the database delete a single Visitor from the database delete all Visitors view all Visitors view a single Visitor update a single Visitor  Something to think about Imagine that your api is hosted somewhere on the internet and is very popular. Lots of people are using it.\n What might happen if many people access the \u0026ldquo;create visitor\u0026rdquo; functionality at the same time? what might happen if many people ty to update the same visitor at the same time? what might happen if someone deletes all the visitors while someone else is trying to create a new one?  A lot of really weird bugs can creep in. This class of error is generally referred to as a race condition. There are tools and techniques that exist to help deal with this kind of thing. In general it\u0026rsquo;s good to keep race conditions in mind whenever dealing with processes that access data in parallel.\nResources  Python and JSON Official Python tutorial Official Flask tutorial  "
},
{
	"uri": "/tech-department/projects/tdd/factorials/",
	"title": "factorials",
	"tags": [],
	"description": "",
	"content": " Write a script with a function called calculate_factorial that takes a number and returns its factorial.\nIn a separate file, write some tests that prove that your code works.\nJavascript instructions  Name your script factorial.js Use jasmine to test your code  Python instructions  Name your script factorial.py Use pytest to test your code  Steps:  Think about which tests you want to do to test that the factorial function works. Write the tests first (before creating the function). Test an empty function called factorial - it should fail the tests Add code for returning the factorial of a number - it should pass for numbers \u0026gt;= 1 Add code for dealing with zero - should pass unit test for zero and for numbers \u0026gt;= 1 Add code for dealing with negative numbers Add code for dealing with non-numeric input  Make sure you use Github to keep track of your progress.\nReferences: Factorial Numbers\n"
},
{
	"uri": "/tech-department/topics/linux/",
	"title": "linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/collection/",
	"title": "lots and lots of tdd katas",
	"tags": [],
	"description": "",
	"content": "http://codingdojo.org/kata/\n"
},
{
	"uri": "/tech-department/topics/optimizations-and-big-o/",
	"title": "optimizations and big-O",
	"tags": [],
	"description": "",
	"content": " Here are a few good resources on Big O and optimization. Learn enough to understand what Big O is, when and why do we implement it and please give us feedback (or pull requests) on this page if you think any improvements can be made.\nReadings  Big O Notation Article Some more material - Stack Overflow Big O Notation Cheatsheet  Make sure you checkout the Big O Cheat sheet, It\u0026rsquo;ll give you an understanding on the performance of different data structures(Arrays, Stacks, Queues\u0026hellip; etc) that you use on a daily.\nVideos  Big O in 5 minutes Big O in depth Big O and Time Complexity  "
},
{
	"uri": "/tech-department/projects/tdd/password-checker/part1/",
	"title": "password-checker",
	"tags": [],
	"description": "",
	"content": " Set up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support -jasmine.json - password_is_valid_spec.js - password_is_ok_spec.js \u0026gt;src - password_checker.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── password_checker the package under test │ └── password_checker.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory ├── test_password_is_valid.py └── test_password_is_ok.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Java The code you push to git should have the following structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main | └── java | └── PasswordChecker.java \u0026lt;-------- names are important └── test └── java └── ???.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: [TODO] Java project submission requirements Instructions Implement the following function by following a TDD methodology:\n// Javascript: passwordIsValid(password)  // Java: passwordIsValid(password)  # Python: password_is_valid(password)  password_is_valid will check if the password meets a few different conditions. If one of the below conditions is not met then the relevant error/exception should be thrown/raised. Your error/exception message should match one of the following conditions exactly (word-for-word).\n password should exist password should be longer than than 8 characters password should have at least one lowercase letter password should have at least one uppercase letter password should at least have one digit password should have at least one special character  In the case of (6) above, a special character is a character that is on the keyboard but is not a number or letter. Eg { % \u0026amp; * \u0026quot; ' etc\nNext, implement a function called password is ok:\n// Javascript: passwordIsOk(password)  // Java: passwordIsOk(password)  # Python: password_is_ok(password)  If the given password meets at least three of the conditions listed above then this function should return true, otherwise it should return false.\nAdd a feature: the password is never OK if conditions 1 and 2 are not met.\nJS Resources  JS Errors Errors and Jasmine  Python Resources  Python Errors Exceptions and Pytest  Java Resources  https://howtodoinjava.com/junit5/expected-exception-example/  "
},
{
	"uri": "/tech-department/topics/python-specific/",
	"title": "python specific resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/recursive_search/",
	"title": "recursive search",
	"tags": [],
	"description": "",
	"content": " This should be written following a TDD process. Remember that this means: RED, GREEN, REFACTOR. The refactor part of this is very very important.\nYou have a data structure like this:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR }, { name: \u0026#34;workspace\u0026#34;, type: DIR }, { name: \u0026#34;house_cats.mp4\u0026#34;, type: FILE }, { name: \u0026#34;house_cats.txt\u0026#34;, type: FILE } ] };  This represents a directory structure with files and directories. (directory == folder)\nPart 1  Write a function that returns a list/array of all .mov files. Call this function find_all_movs Write a function that returns a list/array of all .mp4 files. Call this function find_all_mp4s Write a function that returns a list/array of all cat videos (mp4 and mov files that have the word \u0026ldquo;cat\u0026rdquo; in their name). . Call this function find_all_cat_videos  You will notice that there is a lot of repetition in the functionality you implemented. Each of these functions need to visit every FILE in the directory structure and then check if that file matches the search criteria.\nNow consider te following:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR, children: [ { name: \u0026#34;horror\u0026#34;, type: DIR, children: [ { name: \u0026#34;really_awful_cats.mp4\u0026#34;, type: FILE } ] }, { name: \u0026#34;adventure\u0026#34;, type: DIR, children: [ { name: \u0026#34;adventure_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;adventure_dogs.mov\u0026#34;, type: FILE } ] }, { name: \u0026#34;tragedy\u0026#34;, type: DIR, children: [{ name: \u0026#34;a sad story about cats.md\u0026#34;, type: FILE }] } ] }, { name: \u0026#34;workspace\u0026#34;, type: DIR, children: [ { name: \u0026#34;grumpy_cats.mp4\u0026#34;, type: FILE } ] } ] };  Directory structures usually have some depth. Directories have sub directories. Sub directories also contain stuff.\nPart 2 make sure find_all_movs,find_all_mp4s,find_all_cat_videos work with nested directory structures.\nHINT: you\u0026rsquo;ll be using a technique called \u0026ldquo;recursion\u0026rdquo; here. play with it a little bit. The just of it is: You can call a function from within itself. Play with this a little bit\nfunction my_recursive_function(i){ console.log(i) ; if (i \u0026gt; 100) // this terminates the recursion return my_recursive_function(i + 1); // this does the recursion }  "
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part1/",
	"title": "simple-calculator part 1",
	"tags": [],
	"description": "",
	"content": " The objective of this project is to build a calulator that can perform multiplication and addition on multiple integers. Do not build a front-end (UI). Complete this project by using a TDD approach.\nThe basic TDD approach is as follows:\n RED: Write tests. It should fail initially because there isn\u0026rsquo;t any code that it is testing. GREEN: Write code to make the tests pass. REFACTOR: Make sure code is understandable and clean.  Remember to make sure your tests still pass after refactoring it.\nSet up environment JavaScript: Use Jasmine to test your code. Please do not use the SpecRunner html file to test your code. Run Jasmine on the terminal.\n  TOPICS: Jasmine Unit testing . Look under the heading: Getting set up (like a boss) for instructions to set up.  After setting up Jasmine on the terminal, please ensure that your directory has the following:\n A src folder that has a file called:\n simple_calculator.js \u0026lt;\u0026mdash;- this is where you will implement all your functionality.  A spec folder that has a file called:\n simple_calculator_spec.js \u0026lt;\u0026mdash;- this is where you will put your tests.   Your directory structure should look like this:\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - simple_calculator_spec.js \u0026gt;src - simple_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── simple_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Java You\u0026rsquo;ll be using IntelliJ, Gradle and JUnit to pull this off.\nCreate a class named Calculator. All your methods should be static methods that return integers. Eg:\n public static int add(....  Please make sure that you make proper use of gitignore. We don\u0026rsquo;t want your junk files. The git repo you give us should have a file hierarchy that looks like this:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── settings.gradle └── src ├── main │ └── java │ └── Calculator.java \u0026lt;-------- names are important └── test └── java └── CalculatorTest.java \u0026lt;-------- names are important  Please refer to the following to find out more: TOPICS: Gradle and IntelliJ project submission structure 1. Create an add function that can add two integers Create a function called add that works like this:\nadd(1,2) // should return 3 add(-1,-1) // should return -2  2. Modify the add function so that it can add multiple integers. The add function should now behave like this:\nadd(1,2,3,4,5) // should return 15 add(1,2) // should still return 3 add(-1,-1) // should still return -2  Please note that your function should NOT expect an array or list of numbers, for example:\nadd([1,2,3,4])  This is NOT what we are looking for. If you have square brackets inside your round brackets, you are doing it wrong. The same will apply for the multiply function you will build in the next section.\n3. Create a multiply function that can multiply two integers Create a function called multiply that works like this:\nmultiply(1,3) // should return 3 multiply(-1,3) // should return -3  4. Modify the multiply function so that it can multiply multiple integers. The multiply function should now behave like this:\nmutilply(1,2,3,4,5) // should return 120 multiply(1,3) // should still return 3 multiply(-1,3) // should still return -3  "
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part2/",
	"title": "simple-calculator part 2",
	"tags": [],
	"description": "",
	"content": " This a continuation of PROJECTS: simple-calculator part 1 . If you haven\u0026rsquo;t done that yet then please do. At this point you should have a well tested add and multiply function.\nThis exercise will require a little OOP knowledge. Brace yourself.\nSet up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - string_calculator_spec.js \u0026gt;src - string_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── simple_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Introducing the calculator class Update your tests so that they expect the add and multiply functions to be part of a class. Now make those tests pass.\nFor now on this document will just describe the features we need the Calculator to have. You need to figure out the tests and implementation yourself.\nNote This is an extension of PROJECTS: simple-calculator part 1 . In other words, previously implemented functionality should still work.\n# this should still work calculator_instance.add(3,5) # should return 8 calculator_instance.multiply(30,2) # should return 60 # and multiple arguments should work too calculator_instance.add(3,5,2) # should return 10  The multiply functionality should also still work.\nRemember the last result The calculator should have a function called last that returns the last result. Example usage:\ncalculator_instance.add(1,2) calculator_instance.last() # should return 3  Use the last result in other calculations The add and multiply functions should allow \u0026quot;LAST\u0026quot; as a parameter.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.multiply(\u0026quot;LAST\u0026quot;,5) # should return 15  Memory Slots Allow the calculator to remember more stuff by implementing a set_slot function. The set_slot function should take a single number as an argument. That argument is called the slot number. Also implement get_slot for getting the value from a memory slot. Neither get_slot or set_slot should effect the output of last.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.set_slot(1) calculator_instance.get_slot(1) # should return 3 calculator_instance.add(10,20) calculator_instance.set_slot(2) calculator_instance.get_slot(2) # should return 30 calculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300  Allow the use of memory slots and LAST as arguments The add and multiply functions should allow memory slots as parameters. If we were using memory slot 5 as an argument then we would represent it like this \u0026quot;SLOT_5\u0026quot;.\nExample usage: Following from the previous example:\ncalculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300 (just like before) # THE FOLLOWING FUNCTIONALITY SHOULD WORK calculator_instance.add(\u0026quot;LAST\u0026quot;,10) # should return 310 (= 300 + 10) calculator_instance.add(\u0026quot;SLOT_1\u0026quot;,5) # should return 8 (= 3 + 5) calculator_instance.multiply(\u0026quot;SLOT_2\u0026quot;,2) # should return 60 (= 30 * 2)  "
},
{
	"uri": "/tech-department/projects/tdd/string-calculator/",
	"title": "string-calculator",
	"tags": [],
	"description": "",
	"content": " Set up your environment Javascript Please test your code using jasmine.\nYour directory structure should look like this.\n \u0026gt;node_modules \u0026lt;---- make sure this is in your .gitignore \u0026gt;spec \u0026gt; support - jasmine.json - string_calculator_spec.js \u0026gt;src - string_calculator.js - package.json  Python Your project is expected to be completed using pytest. You are expected to follow industry best practices in all things. This means that you need to have a directory structure that is in good shape. Please name your files and folders like this:\n├── string_calculator the package under test │ └── calculator.py ├── requirements.txt installation requiremnts ├── setup.py installation script for the package under test └── tests all package tests go in this directory └── test_calculator.py  Please take a look at this topic to see an explanation of the required directory structure. TOPICS: Automated Testing in Python Instructions Before you commence, first read through TOPICS: Data Validation . Upon completion, read through TOPICS: Regular Expression Resources .\nPlease note that this project should be done in a TDD manner.\n1. Create an add function that can handle up to two integers passed in as a string. Create a function called add() that takes in a string as a parameter and behaves in the following way:\nadd(\u0026quot;\u0026quot;) // should return 0 add(\u0026quot;1\u0026quot;) // should return 1 add(\u0026quot;1,1\u0026quot;) // should return 2  Note: The output that the function returns should be an integer and not a string.\n2. Modify the add function to handle multiple integers. add(\u0026quot;1,2,3,4\u0026quot;) // should return 10 add(\u0026quot;\u0026quot;) // should still return 0 add(\u0026quot;1\u0026quot;) // should still return 1 add(\u0026quot;1,1\u0026quot;) // should still return 2  As you keep adding more functionality to your code always make sure that the previous functionality you implemented still works flawlessly. Keep this in mind as you continue to modify your code.\n3. Modify the add function so that it can handle new lines between integers. add(\u0026quot;1\\n2,3\u0026quot; ) // should return 6  4. Modify the add function so that it can handle different delimeters. Delimiters will be specified in the following manner:\n \u0026rdquo;//[delimiter]\\n[numbers…]\u0026rdquo;, the default delimiter will be in the beginning of the string just before a new line character (\u0026rdquo;\\n\u0026rdquo;).For example:  add(\u0026quot;//;\\n1;2\u0026quot;) // should return 3 add(\u0026quot;//4\\n142\u0026quot;) // should return 3  In the first case, the default delimiter is: \u0026ldquo;;\u0026rdquo;.\nIn the second case, the default delimiter is: \u0026ldquo;4\u0026rdquo;.\n5. Modify the add function so that it can handle negative integers. If a negative number is passed into the add function it should throw this exception: \u0026quot;negatives not allowed\u0026quot;\nThe exception should contain a list of all the negative integers that were passed into the add function.\nFor example:\nadd(\u0026quot;-1,-2,3,4\u0026quot;) // should throw the following: 'ERROR: negatives not allowed -1,-2'  6. Modify the add function so that it ignores integers greater than or equal to 1000. add(\u0026quot;//;\\n1000,1;2\u0026quot;) // should return 3  7. Modify the add function so that it can support delimiters of any length As long as the string passed in satisfies this format, \u0026ldquo;//[delimiter]\\n[integers\u0026hellip;]\u0026ldquo;, which was explained above. The add function should be able to handle it. For example:\nadd(\u0026quot;//***\\n1***2***3\u0026quot;) // should return 6  8. Modify the add function so that it is able to support different delimiters of any length As long as the string passed into the add function follows this format, \u0026ldquo;//[delim1][delim2]\\n[integers\u0026hellip;]\u0026ldquo;, the add function should be able to handle it:\nFor example:\nadd(\u0026quot;//[:D][%]\\n1:D2%3\u0026quot;) // should return 6 add(\u0026quot;//[***][%%%]\\n1***2%%%3\u0026quot;) // should return 6 add(\u0026quot;//[(-_-')][%]\\n1(-_-')2%3\u0026quot;) // should return 6 add(\u0026quot;//[abc][777][:(]\\n1abc27773:(1\u0026quot;) // should return 7  9. Modify the add function so that it can handle invalid input. If the string passed in is invalid, your code should be able to detect this and throw an error.\nHint: A valid string input follows these formats:\n- \u0026quot;integer,integer,integer\u0026quot; e.g \u0026quot;1,2\u0026quot; or \u0026quot;1,2,3,4\u0026quot; - \u0026quot;integer \\n integer,integer e.g \u0026quot;1\\n2,3\u0026quot; - \u0026quot;//delimiter \\n integer delimiter integer\u0026quot; e.g \u0026quot;//;\\n1;2\u0026quot; - \u0026quot;//[delimiter][delimiter]\\n integer delimiter integer\u0026quot; e.g \u0026quot;//[\\*][%]\\n1\\*2%3\u0026quot;  If the string doesn\u0026rsquo;t abide by any of these formats, it should be considered invalid.\nadd(\u0026quot;//;\\n1000;1;2;\u0026quot;) // should throw the following: 'ERROR: invalid input' add(\u0026quot; //;\\n1000,1;2\u0026quot;) // should throw the following: 'ERROR: invalid input' add(\u0026quot;1,2,3//;\\n1000,1;2\u0026quot;) // should throw the following: 'ERROR: invalid input'  why is this important?  If you\u0026rsquo;re wondering to yourself, \u0026ldquo;Why is this sooo important!?\u0026rdquo; take a look at TOPICS: Data Validation   "
},
{
	"uri": "/tech-department/projects/tdd/bowling/",
	"title": "ten-pin bowling scoring system",
	"tags": [],
	"description": "",
	"content": " Take Note This is a Test Driven Development Project. Please follow a test driven methodologies. That means that you write your test code first!\nThe basic idea of TDD is to write the test code before you write any actual code. So you write a test (which will fail) then you write the code that will make the test pass.\nWhen you submit your code (on Github people!) then your tests MUST BE included in your code base.\nIn a professional setting, untested code is incomplete code.\nIn general: Follow recognized best practices around whatever language and test framework you are using. Eg: consistent naming conventions of functions, test files and literally everything else. Literally.\nAlso this is a team project. Do this in groups of two following a TDD ping-pong approach as described here: WORKSHOPS: [MISSING title or page]Instructions Write a software system for keeping track of bowling scores. You can read about traditional 10 pin bowling scoring here.\nPlease put your tests in a directory named \u0026ldquo;tests\u0026rdquo; unless the testing framework you are using follows some other convention.\nProject Description Gameplay This project is more about data, tests and algorithms than html. It needs a WORKING frontend but don\u0026rsquo;t spend too much time making it beautiful. Here is how it will work:\n As the game starts the user will be allowed to enter the names of the players eg \u0026ldquo;Uncle Bob Martin\u0026rdquo; and \u0026ldquo;Ada Lovelace\u0026rdquo; The user then chooses to start the game The user should be able to see the scores of all the players at all times. This includes scores for individual throws and frames, and their total scores The user should be able to see whose turn it is The user should be able to submit the number of pins hit on each throw. One by one. Eg, it\u0026rsquo;s Uncle Bob\u0026rsquo;s turn, so he throws and misses everything. The user submits a 0. The user interface shows that Bob\u0026rsquo;s score is unchanged and it\u0026rsquo;s still his turn. Bob throws again and hits 2 pins, the user submits a 2 and Bob\u0026rsquo;s score is updated and it\u0026rsquo;s still his turn. He throws again and misses. The user enters a 0. We now see that it is Ada\u0026rsquo;s turn. She throws and hits all the pins because she is awesome. The user enters a 10. Ada\u0026rsquo;s score is updated. Now it\u0026rsquo;s Bob\u0026rsquo;s turn again. Get it?  Notes about frontends For those of you doing this in JS: Your user interface will be a web page.\nFor those of you completing this in Python, don\u0026rsquo;t get too fancy. Python is usually considered to be bad t user interfaces so it\u0026rsquo;s really not worth learning a python frontend framework at this point. Just use the terminal. Take a look here for some details.\nAnd everyone: Always remember KISS.\nMore Outputs We should be able to see at any point in time:\n the total score of any player the \u0026ldquo;leaderboard\u0026rdquo; of the current game (who is in first place, second, third etc) the points any person accumulated during a single turn (aka frame) how many turns are left who\u0026rsquo;s turn is it now? whose turn is it next?  Please don\u0026rsquo;t PLEASE DO NOT IMPLEMENT A FANCY GUI. We don\u0026rsquo;t care to see the bowling pins or the ball, we don\u0026rsquo;t care about physics.\nResources and things to know This is not a simple project. To build something awesome you should be aware of a few architectural concepts.\n  TOPICS: Intro to software architecture   "
}]