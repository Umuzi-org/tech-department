[
{
	"uri": "/tech-department/syllabuses/data-engineering/",
	"title": "Data Engineering",
	"tags": [],
	"description": "",
	"content": " Data Engineering: Job Description Data Engineers can Extract, Transform and Load data from many different sources to create unified data warehouses that enable the Data Scientists to build business-relevant analyses and make important business decisions. Data Engineering: Programme\nTECHNICAL Basic Linux / Authentication security Object-Oriented Python Basic SQL Relational DB\nComputer Science Time and Space complexity Data Structuring\nExtraction REST APIs Databases SaaS API (e.g. Google Forms, FB, etc.) Web scraping\nData Transformation Advanced SQL, Python [Using Intermediate Queues (Kafka, RabbitMQ)] Data transformation at scale\nData Loading (My)SQL, DB schema Architecture / DB schema\nOptional extras: Deploy/write / launch micro-services e.g. using Docker Cloud services (AWS, Azure, etc) Web frameworks (Django, Flask)\n"
},
{
	"uri": "/tech-department/syllabuses/data-science/",
	"title": "Data Science",
	"tags": [],
	"description": "",
	"content": " Data Science Programme Summary Using computer science and applied statistics, data scientists find valuable patterns where other people just see noise. Harvard Business Review says Data Scientist is \u0026ldquo;The Sexiest Job of the 21st Century,\u0026rdquo; and we agree. It’s a rare combination of interesting challenges and high-value opportunities. Data skills are a superpower, and with great power comes great job responsibilities. Our data scientist learn basic mathematics, programming, data extraction and manipulation, and data analysis and interpretation skills.\nPrerequisites  English literacy Matric maths (not maths literacy) No specific technical prerequisites, except a strong aptitude for coding and statistics, as well as a strong motivation to challenge oneself and learn new things, assessed through Umuzi’s rigorous application process Ability to work in an agile, human-centred way.  Duration  160 hours of training in HCD and Agile through the Umuzi workshops and crash course 1360 hours of subject-specific, technical training over 8 months at Umuzi proper 3 months of full-time work experience with Umuzi’s world-class employer-partners  Cost  100% free for learners Learners receive a stipend for living costs Employer partners sponsor the training costs and stipends  Data Science Curriculum Content Statistics  Basic algebra Survey design Hypothesis testing Distributions, central tendency and variation Effect sizes and confidence intervals Modelling data: basic regression, classification and clustering techniques Interpreting graphs and models  Programming  Functions, variables, data types Object-oriented programming Functional programming Test driven development Debugging Exposure to scientific libraries such as numpy, pandas, statsmodels, scikit-learn, matplotlib, seaborn Exposure to creating reports with Jupyter Notebooks and dashboards (e.g. with Dash) Using version-control software, individually and as part of a team  Data extraction and transformation  Importing, cleaning and manipulation of data Interacting with APIs Relational database management and quality control Data visualisation in Python and Tableau / Google Data Studio  Professional skills and methodologies  Human centred design thinking Agile and scrum methodology Time management and productivity Presentation skills  Tech Stack  Linux, Python, MySQL, Google Data Studio, HTML5, CSS, Git  "
},
{
	"uri": "/tech-department/syllabuses/product-teams/",
	"title": "Product Teams",
	"tags": [],
	"description": "",
	"content": "Product teams are teams of no more than 6 recruits guided by a product owner (Umuzi staff). The teams use the Scrum methodology to build real-world, web-based products. Recruits learn additional frameworks (e.g., Django) and packages as needed for the products.\nAn example of a current product is Umuzi’s online application process. In the past, Umuzi has used a combination of Google Forms and other, off-the-shelf, tools, to create an online application process for applicants. Now, under the leadership of Umuzi’s Data Science and Web Development managers, a team of Umuzi recruits is developing a custom solution which will allow applicants to apply to Umuzi, complete a variety of online learning and tests, enable managers to easily sort candidates by results, and automatically handle communications with the candidates. It’s through real builds like this that recruits put their learning into practice. Additional learning In addition to the curriculum listed above, the recruits participate in workshops given by industry professionals and Umuzi staff. Generally there are 2-3 workshops each month. Topics include time management, public speaking, networking, preparing for technical interviews, introduction to new frameworks, tech trends, etc.\nRecruits are also encouraged to attend industry meetups, conferences, and hackathons. On average, recruits attend 1 meetup/conference per month and 1-2 hackathons during their time at Umuzi.\n"
},
{
	"uri": "/tech-department/syllabuses/web-dev-long/",
	"title": "Web Dev full course",
	"tags": [],
	"description": "",
	"content": " Web Development: Job Description A web developer is someone who designs and implements modern, responsive websites and webapps. They must be strong at technical web development skills (full-stack Javascript, CSS and HTML, and associated libraries and frameworks); have strong visual and design skills; and strong modern engineering methodologies (including Git and Agile).\nWeb Development: Programme TECHNICAL Languages:  HTML CSS Modern JavaScript  Frameworks:  Node.JS/Express JQuery Bootstrap, CSS grid React or Angular Mocha  Databases:  MongoDB MySQL  Other stuff  REST APIs Git Linux  PROFESSIONAL  Human Centred Design Agile  "
},
{
	"uri": "/tech-department/syllabuses/home-study-web-dev-prep/",
	"title": "Web Dev home study",
	"tags": [],
	"description": "",
	"content": "If you want to get into one of our web-dev courses it would be best if you do some preparation on your own.\nFree Code Camp\n Javascript Algorithms And Data Structures Certification: Basic JavaScript Responsive Web Design Certification: HTML and HTML 5 Responsive Web Design Certification: Basic CSS Javascript Algorithms And Data Structures Certification: ES6 Javascript Algorithms And Data Structures Certification: Debugging Javascript Algorithms And Data Structures Certification: Basic Data Structures Javascript Algorithms And Data Structures Certification: Basic Algorithm Scripting Javascript Algorithms And Data Structures Certification: Object Oriented Programming Front End Libraries Certification: Bootstrap Front End Libraries Certification: jQuery  "
},
{
	"uri": "/tech-department/syllabuses/web-dev-short-course/",
	"title": "Web Dev short course",
	"tags": [],
	"description": "",
	"content": "Our web dev short course is a compressed and extra-high intensity version of ouw web-dev long course. The major difference between these courses is: - web dev short is 6 months long in total - this course is not NCIT certified\nBasically we focus on getting students coding and teaming as soon as possible.\n"
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/intro/",
	"title": "Memory game",
	"tags": [],
	"description": "",
	"content": " Here is an example of a memory game: http://dkmgames.com/memory/pairsrun.php\nInstructions Create a Memory game MVP. Requirements:\n Take a moment to google MVP. If you add unnecessary features we\u0026rsquo;ll ask you to remove them make use of simple dom elements, no fancy graphics needed or canvas stuff a single player can play the game board is a pre-defined size board allows one set of symbols or images to be randomly hidden  Build your game in a TDD manner. If you don\u0026rsquo;t include tests in your final submission you will be held back and you will be expected to start over.\nResources   TOPICS: Intro to software architecture   "
},
{
	"uri": "/tech-department/projects/nodejs/file-io/",
	"title": "Node &amp; File IO",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi. In this project you\u0026rsquo;ll just be storing and retrieving information from plain old json files.\nInstructions Create the following functionality in a TDD way.\n Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{some_number}.json. The number part of the file name should be automatically generated as you save the visitor. eg:  alice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json   Create a function called load that takes in a number and returns a Visitor object that was saved to file.  eg:\nalice = load(1) bob = load(2)  Resources  Accessing the file system JSON: Make sure you understand everything up to the end of \u0026ldquo;JSON Arrays\u0026rdquo;  "
},
{
	"uri": "/tech-department/syllabuses/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " We support a few different technical learning paths. Data Science, Data Engineering and Web Dev. What follows below is a week-by-week breakdown of these courses. This is all on one page because our various courses have enough in common that it makes sense to keep then synchronized.\nA note on Umuzi’s formal qualification and accreditation Umuzi is a registered training provider with MICT SETA. Our National Certificate IT (Systems Development) (NCIT) qualification is a learnership requirement (i.e. Umuzi’s employer partners can therefore recognize their training and stipend spend as part of their skills development budgets). We work hard to both meet the National Certificate requirements and deliver a practical and relevant learning experience (which are not always well aligned) however, we firmly believe the most important part is the practical application of learning rather than merely meeting the unit standard requirements. Below we refer to the formal NCIT requirements e.g. NCIT01: Business and technology.\nTerminology This is a living document and there are a few things that need to be fleshed out:\n as far as possible each bullet point that describes a piece of our syllabus should be marked as a WORKSHOP, TOPIC or PROJECT. Or exercise??\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == you know EXERCISE == like a project but no deliverable. Something the recruits should do to practice on their own  we need to make sure all the NCIT requirements have been dealt with before hitting the summative assessment\n the syllabus is really long. There is a lot to cover so that has effects on Product teams. There are decisions to be made there.\n  Week -1: Bootcamp This is the final step of our interview process. If applicants get through the bootcamp then they are accepted as Umuzi recruits and go on with the rest of the program.\nWe start off by introducing the applicants to the development environment and resources that they\u0026rsquo;ll be using. Then they get to work.\n WEB_DEV:  Use FreeCodeCamp. Start off with JavaScript Algorithms And Data Structures Certification (300 hours) JS challenges are given  DATA_SCI:   TOPICS: Introduction to Jupyter Notebooks  DataCamp intro to Python  DATA_ENG:  Introduction to Python (resource to be selected) https://www.datacamp.com/courses/intro-to-python-for-data-science/?utm_source=learnpython_com\u0026amp;utm_campaign=learnpython_tutorials# https://www.learnpython.org/ Python coding challenges given   Week 0: Make Umuzi Better A recruit’s journey starts with a one week programme called #MakeUmuziBetter. Recruits from all departments form small cross-functional teams to tackle issues at Umuzi\u0026ndash;anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\nNCIT assessments We get a few NCIT assessments out of the way during MUB.\n NCIT 03: Conducting research and user interviews NCIT 04: reporting NCIT 05: Research presentation  Week 1: Linux and soft skills In this week, everyone gets to know their way around linux.\n ALL:  Department ice-breaker  WORKSHOPS: How to be a professional  Introduction to NCIT curriculum  WORKSHOPS: Introduction to Linux   TOPICS: Introduction to Linux   PROJECTS: [TODO] Linux challenges INTRO  TOPICS: Introduction to Bash and the terminal    Week 2: Git and personal portfolio Recruits learn a bit about how to build an online presence. Recruits submit their work using Git from the very beginning of their course.\n ALL:\n  TOPICS: Git Basics  Q\u0026amp;A Git basics  PROJECTS: Git Basic Exercises   WORKSHOPS: [TODO] Intro to CSS architecture   WORKSHOPS: What to Put On A CV   PROJECTS: [TODO] Build your first personal website - Introduction  NCIT 13: Version control (GIT) for teamwork\n  Week 3: Finish portfolio project The recruits finish off their portfolios. From this point forward they are expected to keep their portfolios up to date on their own time.\n  WORKSHOPS: Clean Code (language agnostic)   PROJECTS: [TODO] Development of a Portfolio website - Deadline  Week 4: Research and Survey Design  ALL_DATA:\n  PROJECTS: [TODO] data-validation-with-python-and-regex   WEB_DEV:\n  TOPICS: Regular Expression Resources   DATA_SCI:\n  WORKSHOPS: Survey design   WORKSHOPS: Google forms like a boss   TOPICS: How to ask the right questions    Week 5: Some specific skills  DATA_SCI:\n  TOPICS: Data Visualisation   DATA_ENG: Get as far as possible with the following exercises. We\u0026rsquo;ll continue later\n  TOPICS: Unit testing (language agnostic concepts)   TOPICS: Automated Testing in Python   PROJECTS: simple-calculator part 1   PROJECTS: password-checker   PROJECTS: string-calculator   PROJECTS: [TODO] Getting to know Python   WEB_DEV:\n  TOPICS: Introduction to web design    Week 6: The Internet and Ethics in tech  ALL:\n  TOPICS: How the internet works   TOPICS: Data Ethics and Privacy   DATA_SCI:\n  WORKSHOPS: Data Ethics   NCIT 07: History of the Internet\n NCIT 08: Web design for business\n NCIT 09: Building an online business\n NCIT 14: Pseudocode and documentation\n  Week 7: Tech in Business and Honing fundamental skills  ALL:\n Coding katas in language of choice. Or catch up for those who have fallen behind on anything.  TOPICS: [TODO] The terminology of the tech landscape   NCIT 01: Business and technology\n NCIT 02: Ethics and Professionalism in IT\n NCIT 06: Workshop: Giving and receiving constructive feedback\n  Week 8 \u0026amp; 9 \u0026amp; 10:  DATA_SCI:\n  TOPICS: Unit testing (language agnostic concepts)   TOPICS: Automated Testing in Python   TOPICS: Automated Testing pandas and numpy   TOPICS: Data Wrangling   PROJECTS: simple-calculator part 1   PROJECTS: password-checker   PROJECTS: string-calculator   TOPICS: Intro to functional programming   DATA_ENG:\n  TOPICS: Intro to functional programming  WEB_DEV:\n  TOPICS: Unit testing (language agnostic concepts)   WORKSHOPS: [TODO] Introduction to unit tests with Jasmine   PROJECTS: simple-calculator part 1   PROJECTS: simple-calculator part 2   PROJECTS: password-checker   PROJECTS: string-calculator   TOPICS: Intro to functional programming   NCIT 16: Test-driven development\n  Week 11 \u0026amp; 12  WEB_DEV:\n  TOPICS: DOM manipulation with vanilla JavaScript   PROJECTS: [TODO] Memory game INTRO  DATA_SCI:\n  TOPICS: Statistical Thinking   DATA_ENG:\n  TOPICS: [TODO] Introduction to APIs   PROJECTS: expose a simple JSON rest api    Week 13 \u0026amp; 14: OOP  NCIT 15: Object-oriented programming\n DATA_SCI\n  TOPICS: [TODO] Intro OOP(Object-oriented Programming) for Python   PROJECTS: [TODO] OOP in Python   DATA_ENG\n  TOPICS: [TODO] Intro OOP(Object-oriented Programming) for Python   PROJECTS: [TODO] OOP in Python   WEB_DEV\n  PROJECTS: [TODO] OOP in Js   WORKSHOPS: [TODO] Node   PROJECTS: Nodejs Challenges   TOPICS: [TODO] Introduction to Node   PROJECTS: Node \u0026amp; mongoDB assignment INTRO   Week 15: ALL:\n  TOPICS: [TODO] Environmental Variables   TOPICS: [TODO] Intro to Docker   ALL_DATA:\n  TOPICS: [TODO] Virtual Environments   WEB_DEV:\n  TOPICS: [TODO] The dotenv module   PROJECTS: Express, forms and templates   Week 16 \u0026amp; 17: Introduction to SQL All recruits will do this\n  WORKSHOPS: [TODO] Introduction to Node and SQL   TOPICS: SQL and Python   TOPICS: Data validation and quality control  NCIT 17: Assignment: Create MySQL database with employee and product tables\n DATA_SCI: PROJECTS: SQL    Week 18 \u0026amp; 19  NCIT 18: Input \u0026amp; Output\n DATA_SCI:\n  TOPICS: Web scraping with Python   TOPICS: Dashboard Assignment   DATA_ENG:\n  TOPICS: Cross-validation \u0026amp; Simple Linear Regression   PROJECTS: [TODO] create a REST api to interact with actual database   WEB_DEV:\n  PROJECTS: Expose a JSON API    Week 20: NCIT bits and pieces  WEB_DEV:\n  PROJECTS: Add a little Ajax   ALL:\n  WORKSHOPS: [TODO] Intro to Agile   WORKSHOPS: [TODO] Agile and Scrum   TOPICS: [TODO] optimizations and bigO   NCIT 19: Search and sort techniques\n DATA_SCI: PROJECTS: [TODO] Assignment: Search and sort techniques   NCIT 10: Agile project management\n NCIT 11: Agile meetings\n NCIT 12: Boolean algebra, logic\n  Week 21: NCIT bits and pieces MUB must happen before this point.\nALL:\n NCIT Summative assessment  Week 22:  DATA_SCI:   TOPICS: Cross-validation \u0026amp; Simple Linear Regression   DATA_ENG:   TOPICS: [TODO] MongoDB and Python   WEB_DEV:   TOPICS: MongoDB and JavaScript   ALL:   TOPICS: [TODO] Database Comparison    Week 23  DATA_SCI:   TOPICS: Multivariate Linear Regression   DATA_ENG:   TOPICS: [TODO] DAGs with Airflow   WEB_DEV: select one of the following:   TOPICS: [TODO] Intro to Angular   TOPICS: [TODO] Intro to React   TOPICS: [TODO] Intro to Vue    Week 24  DATA_SCI:   TOPICS: Decision Trees   WEB_DEV:  continue with frontend web framework  DATA_ENG:   PROJECTS: [TODO] consuming APIs with the requests module   TOPICS: [TODO] Introduction to GraphQL    Week 25  DATA_SCI:   TOPICS: Logistic regression   DATA_ENG:   TOPICS: [TODO] Sqlalchemy and Alembic   WEB_DEV:   WORKSHOPS: [TODO] Nodejs intro to socketIO   WORKSHOPS: [TODO] Node Sync/Async   WORKSHOPS: [TODO] Basic introduction to Redux    Week 26  DATA_SCI:\n  TOPICS: K-Means Clustering   DATA_ENG:\n  TOPICS: [TODO] ZeroMQ versus RabbitMQ versus Kafka   PROJECTS: [TODO] Distributed workloads with ZeroMQ   ALL:\n  WORKSHOPS: [TODO] Git for Teamwork   WORKSHOPS: [TODO] Agile Recap    "
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/code-review-deadline/",
	"title": "Code review",
	"tags": [],
	"description": "",
	"content": "  “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~ Martin Fowler\n You will be paired up with someone else. You will be expected to review each other\u0026rsquo;s code. This need not follow formal code review processes, you can just sit next to each other and chat if you want.\nAny constructive feedback should be incorperated into the code. By the end of this process each game should have fewer bugs (if there were any to begin with) and be generally more human-readable.\nEach of you should take note of what you learned in this process.\n what makes code easy to work with what makes code hard to work with any weird bugs or inefficiencies that could hae been avoided notable technology choices anything else?  note Be kind and respectful, even when giving feedback on cray-cray spagetti code. This process can be frustrating and it can be painful to hear people critisize your work. Just remember, the point of this process is to learn.\nsubmission Check on slack\n"
},
{
	"uri": "/tech-department/projects/nodejs/mongo/",
	"title": "Node &amp; mongoDB assignment",
	"tags": [],
	"description": "",
	"content": " You are required to create a back-end service that will help capture basic information about prospective students who come to inquire here at Umuzi.\ndatabase setup  Create a database and name it UmuziProspects Create a collection inside the database and name it Visiter. The collection must contain the following fields :   id: This should be automatically generated by MongoDB visitor name visitor\u0026rsquo;s age date of visit time of visit name of the person who assisted the visitor comments  functionality Create a single index script with the following functions:\n addNewVisitor. This should save the Visitor into the database list all visitors. This should return an array of all the visitor names and ids delete a visitor update a visitor view one visitor: given a visitor\u0026rsquo;s id, return all information about that visitor delete all visitors  NOTE You will be expected to properly test your code. You can use whatever testing framework you want. If you use something that isn\u0026rsquo;t taught at Umuzi please justify your choice (if you found something cool we might incorporate it into the syllabus)\nResources TOPICS: MongoDB and JavaScript "
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/code-review-workshop/",
	"title": "Code Review Workshop",
	"tags": [],
	"description": "",
	"content": "Once your first deadline is met you will have developed some opinions about what good (and bad) code looks like. And of corse the senior staff members have their own opinions.\nIn this session: Senior staff members will highlight a few common problems and some outstanding results. You will also each be given a chance to tell us something you learned.\n"
},
{
	"uri": "/tech-department/topics/",
	"title": "Topics",
	"tags": [],
	"description": "",
	"content": "A topic is a collection of learning materials that the recruit can go through on their own.\n"
},
{
	"uri": "/tech-department/workshops/",
	"title": "Workshops",
	"tags": [],
	"description": "",
	"content": "A workshop is an interactive session that includes at least one Umuzi staff member. These will often be presentations, demonstrations or Q\u0026amp;A sessions.\nThis section includes all the references and explanations needed to put on a workshop.\n"
},
{
	"uri": "/tech-department/projects/nodejs/express-forms/",
	"title": "Express, forms and templates",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\ncreate a basic html form Create an HTML form. This form will (eventually) be used to create Visitor fields in your mongo database. Your form should have the following fields:\n visitor name your name (name of the person who assisted the visitor) visitor\u0026rsquo;s age date of visit time of visit comments  use express to host the form as a static resource Create a basic express.js application and serve your form as a static file\nThe url should be http://localhost:[YOUR_PORT]/new_visit\nsubmit the form There should be a submit button on the form. When the user submits the form then the following should happen:\n The form data will be collected and your addNewVisitor function will be called in order to save the visitor details into your database The user should then be redirected to a page that says: \u0026ldquo;Thanks for the info! The following was saved to the database:\u0026ldquo;. This page should display the information that was saved, as well as the id of the new Visitor instance.  Make use of the pug template engine to render the \u0026ldquo;Thank you\u0026rdquo; page\nResources   TOPICS: ExpressJs   TOPICS: JavaScript template engines   TOPICS: Using the fetch api   "
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/configurable-grid-size-deadline/",
	"title": "configurable grid size",
	"tags": [],
	"description": "",
	"content": " Implement the following user story on your code-review-buddy\u0026rsquo;s game:\nAs a user I want to be able to choose the dimensions of the grid each time I play the game. For example I might want to play on a 2x2 grid or a 3x2 grid.\nUse Git! At this point you should be comfortable with using Git from the command line.\nMake a Git branch for your new work and make sure to push your latest code atleast daily. You should submit your work as a pull request on your buddy\u0026rsquo;s repo, your buddy will review your code before merging it using Github\u0026rsquo;s code-review tooling.\nQuestions about Git? Please ask one of our junior facilitators first. If they can\u0026rsquo;t help then ask one of the senior managers.\nWhy Git? Git makes a lot of people uncomfortable. If you are struggling to see the point then examine the fact that the software engineering industry as a whole sees the point. If you work in a professional software development team then Git is something you will need to use.\n"
},
{
	"uri": "/tech-department/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": " Units of work with strict deadlines to be completed alone or in groups\nProjects have three parts:\nPROJECT INTRO This is when the project is given to the recruits. Everything is explained, they are pointed at useful resources and clear instructions, and they are told the deadline.\nPROJECT DEADLINE This is when the projects are due. Umuzi staff members will now review the code to give feedback.\nFor code projects The recruits need to provide evidence that they got another recruit to review their work, and that they reviewed another recruits work prior to the deadline.\nThe recruit is expected to submit code and documentation in the form of a git repo. All git, coding, testing and documentation best practices that the course has covered thus far need to be adhered to.\nPROJECT CODE REVIEW Once the staff members have reviewed code projects then a code review session will be held. This is a kind of workshop where an Umuzi staff member will present on the project submissions.\n If anyone did something awesome then highlight that If there is a common misconception or mistake then highlight that highlight any subtle lessons that should have been learned get feedback from the recruits, Q\u0026amp;A get a few of the recruits to explain parts of their code and approaches to the group  If anyone submitted nonesense - either they were sloppy or they just didn\u0026rsquo;t get it, then don\u0026rsquo;t make them the center of attention. Pull them aside after the code review and have a private discussion. This should happen after the group code review session because that way they will see the standard of the group as a whole and possibly be motivated to conform.\n"
},
{
	"uri": "/tech-department/projects/nodejs/api/",
	"title": "Expose a JSON API",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\nInstructions Use Express to expose the following JSON endpoints.\n /addNewVisitor: create a new Visitor in the database /deleteVisitor:id: delete a single Visitor from the database /deleteAllVisitors: delete all Visitors /viewVisitors: view all Visitors /viewVisitor:id: view a single Visitor /updateVisitor:id: Update a single Visitor  Resources   TOPICS: API basics   TOPICS: APIs and Node   "
},
{
	"uri": "/tech-department/projects/nodejs/ajax/",
	"title": "Add a little Ajax",
	"tags": [],
	"description": "",
	"content": " There is no need to create a new git repo for this code submission. This is a continuation of your previous work.\na new static resource Create a new HTML static web page just like the form page you made before. You can even copy-paste your form\u0026rsquo;s html here. Usually copy-pasting pieces of code is a bad idea, this time it\u0026rsquo;s ok.\nServe your new page from the following url: http://localhost:[YOUR_PORT]/single-page-app\nform submissions The submit button should make an AJAX call to the addNewVisitor. It should not redirect the user to any kind of \u0026ldquo;thank you\u0026rdquo; page\nlist existing visitors Create an html table on the same page (on your single page app). Use an ajax call to /viewVisitors to populate the table\ndelete visitors, and update the table Add a \u0026ldquo;delete\u0026rdquo; button to each line of the table. When the user clicks \u0026ldquo;delete\u0026rdquo; then\n make a request to /deleteVisitor:id and delete that visitor update the information displayed in the table  Also make sure that if you create any new visitors then they are visible in the table\nResources   TOPICS: Introduction to Ajax   "
},
{
	"uri": "/tech-department/ncit/",
	"title": "NCIT Index",
	"tags": [],
	"description": "",
	"content": "In order to hit our NCIT requirements, recruits need to hit a variety of outcomes. Over the course of our syllabus the following assessments are completed:\nTODO: fill this in with links to all the assessments and extra readings. Just links are ok for now. We can eventually just turn the readings into TOPICs and link to those.\n"
},
{
	"uri": "/tech-department/department-processes/",
	"title": "Department Processes",
	"tags": [],
	"description": "",
	"content": " In order to make sure our department is as effective, efficient and scalable as possible we need a few ground rules. The documents contained in this section aim to help us do our jobs better. If anything in here gets in the way of progress, if anything starts to smell like useless bureaucracy, then it should be revised or removed.\nThese are living documents. They are up for debate, and will be added to over time.\nA few things to think about  what can we do better? what should we stop doing? what do we value that is not expressed in our priorities and processes? what in this document should change? how can we stimulate better knowledge sharing between cohorts? how can we stimulate better accountability?\n how about live-coding workshops. Having senior team members run those can be very useful, empowering and encouraging junior team members to do them would be very powerful\n how can we best use and educate our strategist recruits who are helping our tech department as a \u0026ldquo;product\u0026rdquo;?\n How can we scale better? Umuzi will grow\n what will the tech department look like if we triple in size? How can we remain effective and keep our signal to noise ratio good? how will we onboard new team members so that they can be effective from day 1? what if we open another Umuzi studio? How do we ensure that the lessons we learn here can be copy-pasted into a new environment? And how will we make sure that lessons learned by staff in those new environments are available to everyone on the team?  how can we do nitty gritty annoying tasks (eg: attendance) better?\n  "
},
{
	"uri": "/tech-department/workshops/agile-scrum/",
	"title": "Agile and Scrum",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/1jkpl8EZBzvX3zKnWEyX7LKlbGcIocYkxTDIGmT42S8A\nhttps://docs.google.com/presentation/d/1Qr66MxmoiV-3-ZiSj5Ro_B8QneKOfC8UAp0DCfDOdoA\n"
},
{
	"uri": "/tech-department/workshops/git-for-teamwork/",
	"title": "Git for Teamwork",
	"tags": [],
	"description": "",
	"content": " PREREQUISITES:  workshop/git-basics  TODO\n"
},
{
	"uri": "/tech-department/projects/how-to-submit-your-project/",
	"title": "How to submit your project",
	"tags": [],
	"description": "",
	"content": " How to submit your project Create a repo on github. The repo name should be: \u0026ldquo;umuzi-project-[the project description filename without the extension]\u0026ldquo;. Eg: if you are completing the project described in \u0026ldquo;basic-website-frontend-events.md\u0026rdquo; then you should name your github repo: \u0026ldquo;umuzi-project-basic-website-frontend-events\u0026rdquo;\nAll coding projects will be submitted as git repos. You are expected to use git properly, you will be penalised if you only have one gigantic commit or if your commit messages are nonesense.\nThere should be a clear README that describes how to launch your program. Maybe a script needs to be run, maybe an index.html needs to be opened in a browser. Tell us what we need to do.\nOnce your code is all neat and tidy in git then post a link to the #project-submissions channel on slack.\nTODO: should we use older cohorts to review code before we do? It\u0026rsquo;ll be good practice for them but might effect deadlines\n"
},
{
	"uri": "/tech-department/workshops/interviewing-sucessfully/",
	"title": "Interviewing sucessfully",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/16FMMbvXrrNBOS3RJfG0-CHERvlldaiY7pq_i3cs4S_c\n"
},
{
	"uri": "/tech-department/workshops/intro-to-agile/",
	"title": "Intro to Agile",
	"tags": [],
	"description": "",
	"content": "Project management with Trello (first intro to Agile and Scrum methodologies)\nTODO\n"
},
{
	"uri": "/tech-department/workshops/intro-to-node-and-friends/",
	"title": "Introduction to Node and Friends",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/1dtrsWOWjoA9A9nTmznCkdYz0oRK6O76jXRINp0tzjrQ\n"
},
{
	"uri": "/tech-department/workshops/intro-to-development-tools-and-environment-for-web/",
	"title": "Introduction to development environment for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/nodejs-async-vs-sync/",
	"title": "Node Sync/Async",
	"tags": [],
	"description": "",
	"content": "https://docs.google.com/presentation/d/19ppsjmkKAvJcasK_BnjptTUfF4KQwaInDKVkhK1b6vA\n"
},
{
	"uri": "/tech-department/projects/oop-in-js/",
	"title": "OOP in Js",
	"tags": [],
	"description": "",
	"content": " Assignment 1: Basics Assignment Description\nCreate a class called Person which defines the generic data and functionality of a person. Now as we know there are a lot of things involved with a Person e.g (age,gender,their address, height, shoe size, passport number, etc). but in this case we are only interested in showing their name, age, gender, and interests, and we also want to be able to write a short introduction about them based on this data, and get them to say Hello. This is known as abstraction in OOP ,creating a simple model of a more complex thing, which represents its most important aspects in a way that is easy to work with for our program\u0026rsquo;s purposes.\nRemember! From your Person class, you will create object instances — objects that contain the data and functionality defined in the class.\nE.g) Class: Person Name Surname Age Gender Interests: an array of activities/interests Full Name: returns the person’s Name + Surname Greeting: “Hello I’m +Name!”\nObject: FirstPerson Name: Nosipho Surname: Masondo Age: 8 Gender: Female Interests: Dancing,Singing Greeting: “Hello I’m Nosipho”\nObject: SecondPerson Name: Thando Surname: Ngwane Age:16 Gender: Male Interests: playing games,drawing Method: I am Thando Ngwane I am 16 and my interests are playing games and and drawing.\nWhen an object instance is created from a class, the class\u0026rsquo;s constructor function is run to create it. This process of creating an object instance from a class is called instantiation — the object instance is instantiated from the class.\nIn JavaScript we use special functions called constructor functions to define objects and their features.They are useful because you\u0026rsquo;ll often come across situations in which you don\u0026rsquo;t know how many objects you will be creating; constructors provide the means to create as many objects as you need in an effective way, attaching data and functions to them as required.\nI hope this information is useful!\n\u000cAssignment 2: Dice You’ve all seen dice before. A die (singular for dice) usually has 6 sides, but can have more. Eg 20 sided dice are a thing.\nA die has a value (eg if 1 dot is showing then the value is 1). When a die is rolled then it’s value randomly changes. A six sided die has a ⅙ chance of landing on any of the sides.\nA weighted die is less random. A weighted die has a higher chance of landing on a specific number (or specific numbers).\nDraw a class diagram to represent the above Write the code\nDice are made in a factory. A factory can only make one kind of die. Eg there could be a factory that only makes 6 sided dice, and another factory that only makes 20 sided dice.\nFactories are imperfect, sometimes there are manufacturing flaws. Every factory has a possibility of creating a weighted die by mistake.\n Create a DiceFactory class. It should have a method called makeDie that outputs a single die instance  Since dice factories are imperfect, their outputted dice need to be tested. A dice tester can test one die at a time. It tests the die by rolling it a bunch of times and checking that the results are properly random. A dice tester can only test one kind of die, for example one dice tester might only test 6 sided dice, and another might only test 20 sided dice.\n Write a class to represent a DiceTester. It should have a method called testDie that has a single die as an input and returns True if the die is fair. If the wrong kind of Die is input then the DiceTester should be able to detect that and log an error.  \u000cAssignment 3: Compound interest A Bank Account has a balance, an interest rate and a monthly fee.\nFor example if a person has an interest rate of 12% (which is totally unrealistic but make the numbers easier) and they have R1000 in their bank account then they will receive (R1000 x 12% / 12) after one month of saving. That means they earned R10 in interest. Now if their monthly fee on that account is R50 then their final balance after 1 month is R1000+R10-R50 = R960.\nThe balance of a bank account can also change if a deposit or withdrawal is made. Money can also be transferred between bank accounts.\nA bank account also has a type, for example Cheque, Savings or Credit Card. Bank accounts belong to People. One person can own multiple bank accounts.\nA bank account also has a number that uniquely identifies it within the bank. If I wanted to transfer money from my bank account to yours then all I should need is your bank account number.\nDraw a UML diagram that depicts all the classes described above Write code to match your UML\n"
},
{
	"uri": "/tech-department/projects/oop-in-python/",
	"title": "OOP in Python",
	"tags": [],
	"description": "",
	"content": " Tutorial: Feeling unsure about how to approach the assignment? Here is a quick online tutorial to get you introduced to classes.\nAssignment 1. Rolling multi-sided dice Description of the task A normal die (the singular of dice) is a cube, and each face shows a number from one to six. Some games employ nonstandard dice that may have fewer (e.g. four) or more (e.g. thirteen) sides. Let’s design a general class MSDie to model multi-sided dice. We could use such an object in any number of simulation or game programs. Each MSDie object will know two things:\n How many sides it has Its current value  When a new MSDie is created, specify how many sides it will have (e.g n). The die can be operated on through three provided methods: roll, to set the die to a random value between 1 an n, exclusively; setValue, to set the die to a specific value (i.e cheat); and getValue to see what current value is.\nSteps  Use the skeleton script msdie.py. Create class MSDie with attributes number of sides and value. Create class methods for rolling the die, getting the value of the die and setting the value of the die.  Assignment 2. Dice roller widget Build an application that displays and rolls a pair of six-sided dice. Display the buttons graphically and provide two buttons, one for rolling and one for quitting the program. Break the application down into the following programs:\nBuilding the Button The buttons you will be using are not the modern ones that have a 3D look and feel. So the best that can be done, is to find out where the mouse clicked after the click has already been done. The buttons will be rectangular regions in a graphic window where user clicks can influence the behaviour of the running application. Create a class, Button in the script button.py, containing the following:\n Constructor - This initialises all the instance variables. Create a button in a window. Specify the window in which the button will be displayed, the location/size of the button, and the label that will be on the button. Activate - Set the state of the button to active. Deactivate - Set the state of the button to inactive. Clicked - Indicate when the button is clicked. If the button is active, this method will determine if the point clicked is inside the button region. The point will have to be sent as a parameter to the method. getLabel - Return the label string of the button. This is provided so that we can identify a particular button.  Building Dice The purpose of this class is to display the value of a die in a graphical fashion. The face of the die will be a square (via Rectangular) and the pips (i.e. the dots on the die) will be circles. Create a class, DieView, in the script dieview.py containing the following:\n Constructor - Create a die in a window. Specify the window, the center point of the die, and the size of the die as parameters. setValue - Change the view to show a given value. The value to display will be passed as a parameter. HINT: The main thing in DieView is turning various pips “on” and “off” to indicate current value of the die.  The Main Program This script, roller.py, imports the Button and DieView classes from their respective modules. It creates the application window, draws the interface widgets, defines an event and can close the window. The program should get mouse clicks and process them until the user clicks Quit.\nAssignment 3: Dice Poker RULES OF THE GAME  The player starts with \\$100. Each round costs \\$10 to play. This amount is subtracted from the player’s money at the start of the round. The player initially rolls a completely random hand (i.e., all the five dice are rolled). The player gets two chances to enhance the hand by rerolling some or all of the dice. At the end of the hand, the player’s money is updated according to the following payout schedule:     Hand Pay     Two Pairs 5   Three of a Kind 8   Full House 12   Four of a Kind 15   Straight 20   Five of a Kind 30    Explanation of the scoring Two pairs is two sets of pairs, for example two threes and two eights in the same hand. A Full House is a pair and a Three of a Kind in the same hand. Four of a kind is four of the same card, such as four eights. A straight is five numbers in order. So this can be 12345 or 23456. Five of a kind are five of the same number (all sixes for example).\nInstructions Build a Dice Poker game according to the game rules above. Ultimately, we want this program to present a nice graphical interface. Our interaction will be through mouse clicks. The interface should have the following characteristics:\n The current score (amount of money) is constantly displayed. The program automatically terminates if the player goes broke. The display may choose to quit at appropriate points during play. The interface will present visual cues to indicate what is going on at any given moment and what the valid user responses are.  This class has to implement these operations:\n Constructor - Create the initial collection. Roll - Assign a random value to some subset of the dice while maintaining the current value of others. Value - return the current values of the five dice. Score - return the score for the dice.  "
},
{
	"uri": "/tech-department/topics/git/version-control-and-scrum/",
	"title": "Version Control &amp; Scrum using Trello &amp; Github",
	"tags": [],
	"description": "",
	"content": " Scrum roles  Team Member Developers, designers, and anyone who\u0026rsquo;s doing that actual production of work. Responsible for working with the Product Owner to break down tasks \u0026amp; reach completion on different ticket items. Scrum Master The facilitator of the scrum process. If this person is doing their job right, the team becomes independent over time. Product Owner The stakeholder for the product. This person is in charge of deciding what the MVP, and different versions of the product look like. They are also responsible for ensuring the backlog is in correct order.  Scrum Meetings Planning  When: At the beginning of the sprint What: The team commits to a set of tickets for the sprint that they think they can complete. Why: Gives a goal to work towards, ensures that there is a select pool of tickets that the team can then have the freedom to choose as they please.  Storytime  When: As needed. 2-3+ sprint\u0026rsquo;s worth of tickets should be in the backlog at all times. What: The team hashes out different story point from the product manager, converting them into tickets that are an appropriate size with unambiguous requirements. Why: So every ticket is clear on what needs to be accomplished.  Review  When: At the end of every sprint What: Team demos all work done for an audience including, but not limited to, stakeholders \u0026amp; team members Why: It\u0026rsquo;s not only nice to show off work, but it ensures that everything is actually working in harmony.  Retro  When: After the end of every sprint What: The team, with the intention of improving the scrum process, covers the following issues together What went well What went poorly What can be done to improve Why: The scrum process should be adaptable to the organization\u0026rsquo;s needs. This also allows all members of the team to participate and own the process.  Standup  When: Every day What: Team answers following questions in order - What did I do to advance the team\u0026rsquo;s goals in the sprint yesterday? - What is impeding me from working on the team\u0026rsquo;s goals for this sprint? All other discussions are tabled for smaller groups afterwards Why: Helps to adapt to problems that come up, and to initiate conversation about different topics.  General issue board procedure Every time you move a ticket from one column to another, you are unassigning yourself. A ticket in the done column is reassigned to the person who did the development work on it. Comment on the tickets as a form of taking notes \u0026amp; passing on explanations from one person to another. Attach all resources to the ticket whether they are points of reference, design documents, etc. Name the tickets so there is no confusion as to what is being accomplished. Add every requirement to the checklist, and be specific. Check off requirements as you finish work on them in development.\nBacklog Items in the backlog represent the conceived work for the team over the next 2-3+ sprints. Before items are able to be moved into the \u0026ldquo;To Do\u0026rdquo; column, they need to be looked over by the team during the \u0026ldquo;Storytime\u0026rdquo; meeting to make sure that the objectives are clear. Various labeling/measuring can take place on these tickets, like adding the feature they\u0026rsquo;re associated with, the estimated work hours to complete the feature, and more.\nTo Do Tickets in to-do are in the queue for the team\u0026rsquo;s current sprint. The team commits to completing a given amount of tickets in the coming sprint during the \u0026ldquo;Planning\u0026rdquo; meeting.\nDeveloping Tickets moved to developing are being actively worked on by the person assigned to them.\nGit Action Before any coding occurs, pull down the latest version from \u0026ldquo;origin/master\u0026rdquo;. Then, after coding is finished, create a new branch with a name corresponding to your ticket. Commit, push to origin, and create a pull request in Github.\nCode Review Tickets in code review are having their associated code (or design) reviewed. A team member will look at the pull request on Github and see that the code is well formed, doesn\u0026rsquo;t have obvious bugs, and accomplishes what it set out to do. If necessary, changes are suggested, and the ticket is sent back to development.\nGit Action If the code passes review, the pull request is approved and the branch is merged into master.\nQuality Assurance Tickets in quality assurance are being checked to make sure the user experiences what the ticket was set out to accomplish. If there\u0026rsquo;s bugs or missing functionality, send it back to development. ####Git Action Pull the merge commit from origin/master for testing.\nDone: Tickets here are done.\n"
},
{
	"uri": "/tech-department/workshops/survey-design/",
	"title": "Survey design",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/syllabuses/online-learning-and-bootbamp/",
	"title": "Online Learning and bootcamp",
	"tags": [],
	"description": "",
	"content": " Month -1: Online Learning and Bootcamp During the application process, we ask prospective recruits to learn basic python with an introduction to data management and visualisation with pandas, numpy and matplotlib. In the screening process, they also complete aptitude (literacy, numeracy, logical thinking, problem solving, statistical understanding, and sequencing) and personality tests (grit, resilience, empathising and systemising, agreeableness, openness to new experience, emotional stability, conscientiousness and intellect/imagination). Those who perform well on the aptitude tests, are a good personality fit for work professionalism, and are able to learn new skills on their own, are invited for an interview, and a selection of interviewees are invited bootcamp.\nDuring bootcamp, the final stage of of Umuzi’s selection process, the applicants continue with online learning, presenting the results of their work at the end of the bootcamp. In addition to these technical challenges, we also have a series of teamwork challenges to learn how they communicate within a team and work under pressure; as well as individual tasks to assess ability to follow instructions, control impulsive reactions and plan actions. If the applicant performs well during bootcamp, they are invited to join Umuzi as a recruit.\n"
},
{
	"uri": "/tech-department/topics/apis/basics/",
	"title": "API basics",
	"tags": [],
	"description": "",
	"content": "Please read the following content:\n What is an API What is a RESTful API  You\u0026rsquo;ll also need to know a bit about JSON\n Intro to JSON Using JSON in JavaScript Using JSON in Python  The following tools are useful for manually playing with api:\n curl Postman  "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/apis-with-node/",
	"title": "APIs and Node",
	"tags": [],
	"description": "",
	"content": " Build a restful API with node  "
},
{
	"uri": "/tech-department/workshops/agile-recap/",
	"title": "Agile Recap",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;re just about to go onto your product teams. Well Done You!\nBefore you get cracking with your next Umuzi adventure we need to quickly recap what it means to be agile within the context of a dev team.\n"
},
{
	"uri": "/tech-department/topics/apis/",
	"title": "Apis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/search-and-sort/",
	"title": "Assignment: Search and sort techniques",
	"tags": [],
	"description": "",
	"content": " Searching refers to looking for a specific data point (e.g., a number) in a data structure. Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order, such as numerical (1234…) or alphabetical (abcd…) order. Search and sort algorithms differ in efficiency, so it is important to know how they work.\nReadings  Sorting and Searching Algorithms Interactive Python: Sort and Search  Videos  Binary Search Insertion Sort Selection Sort Bubble Sort Merge Sort Quick Sort Sorting Algorithms Benchmark Comparison  Assignment  Use the following sorted list of words to perform a binary search:     index value     0 babka   1 baklava   2 cheesecake   3 cupcake   4 danish   5 eclair   6 funnelcake   7 kringle   8 lamington   9 profiterole   10 sopaipilla   11 strudel   12 tiramisu   13 torte   14 turnover    a) What sequence of 'middle' values are compared to the target when performing a binary search with target doughnut? b) What sequence of 'middle' values are compared to the target when performing a binary search with target tiramisu?   For the list below, a) show the series of steps taken by the Bubble Sort algorithm while sorting this list. b) show the series of steps taken by the Selection Sort algorithm while sorting this list.     index 0 1 2 3 4 5 6 7     value 9 20 6 10 14 8 60 11     The three search algorithms have varying run times, with the unsorted sequential search being the least efficient and the binary search being the most efficient (among the three).\na) Modify the code for the seq_search.py (for unsorted lists), seq_search_ordered.py and binary_search.py to count the number of elements checked during the search. b) Using your instrumented code for the three search algorithms, perform the following searches, and report the number of elements checked by each algorithm for each search (i.e. you will report nine results in total - for each of the 3 searches below, you will report the results from the 3 different search algorithms).\ni. Search for the value 9 in the following array: A = [6, 19, -3, 5, 12, 7, 21, -8, 25, 10, 0, 28, -6, 1, 33, 18, 9, 2, -13, 43] ii. Search for the value 11 in the following array: A = [6, 19, -3, 5, 12, 7, 21, -8, 25, 10, 0, 28, -6, 1, 33, 18, 9, 2, -13, 43] iii. Search for the value 11 in the following array: A = [6, 19, -3, 5, 12, 7, 21, -8, 25, 10, 0, 28, -6, 1, 33, 18, 9, 2, -13, 43, -15, 4, 22, 38, -5, 13, 23, -11, 29, -20, 41, 31, -23, 35, 40, 14, 8, -18, 16, 36]  Using a random number generator, create a list of 50 integers and a list of 1000 integers. Perform a benchmark analysis using merge sort, quick sort, bubble sort and selection sort (algorithm are given) on each of the lists. For each list, what is the difference in execution speed between the different sorting techniques?\n  "
},
{
	"uri": "/tech-department/topics/python-specific/automated-testing-with-pytest/",
	"title": "Automated Testing in Python",
	"tags": [],
	"description": "",
	"content": " There are a many of different test frameworks and test runners that Python allows. The main ones people tend to use are\n unittest pytest  These are both great tools with pros and cons. We have chosen to teach pytest for our course. But don\u0026rsquo;t be scared of different frameworks!\nDifferent testing tools have different ways of achieving similar goals. Make sure you understand why we test, what to test and when to test.\nIf you end up working on a project that uses unnittest instead of pytest then use unittest. Eg: Django projects are traditionally tested using unittest instead of Pytest so there is a bunch of cool Django tooling around that, which is totally fine.\nRead and understand the following:\n https://github.com/shashikumarraja/pytest_tutorial https://automationpanda.com/2017/03/14/python-testing-101-pytest/ Writing Tests Improve your python understanding: Unit testing  And here are the pytest docs. The official documentation is a source of the latest and greatest straight-from-the-horses-mouth knowledge.\nVideos Pytest is the nicest python testing framework currently out there, but there aren\u0026rsquo;t so many videos on it, so here are some videos on unit testing in javascript (but they provide a great explanation of why and how you need to test your code) and unit testing with python\u0026rsquo;s unittest.\n Fun Fun Function: Unit testing in Javascript unittest  "
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/automated-testing-pandas-and-numpy/",
	"title": "Automated Testing pandas and numpy",
	"tags": [],
	"description": "",
	"content": "Testing and data can get a little tricky. Check these out:\nAutomate your data analysis testing (Stephen Childs) https://www.youtube.com/watch?v=ovvU41ve1FQ\nhttps://penandpants.com/2014/10/07/testing-with-numpy-and-pandas/\n"
},
{
	"uri": "/tech-department/workshops/redux_intro/",
	"title": "Basic introduction to Redux",
	"tags": [],
	"description": "",
	"content": " Redux is  marketed as a state managment tool. It can be used to manage state an a whole lot more usually used with React or other frontend web framework concepts are similar to the Command Pattern. This is an OOP design pattern that unlocks a lot of stuff beyond simple state managment  Resources The basics:\n This tutorial is really good: https://redux.js.org/basics/basic-tutorial This logger middleware helps: https://github.com/LogRocket/redux-logger  If you want to start using redux with asyncronous code (eg ajax requests) then you\u0026rsquo;ll need to use another tool:\n for simple stuff: https://github.com/reduxjs/redux-thunk for complicated side-effect models something like this is probably better: https://github.com/redux-saga/redux-saga  Concepts There are a few concepts that are super important\nStore Lets say you are making a TODO application. This application has a beautiful frontend that automatically renders your todo items from a datastructure. Something like this:\nconst store = { todos : [ {title: \u0026quot;get groceries\u0026quot;, done: false}, {title: \u0026quot;call mom\u0026quot;, done: true}, {title: \u0026quot;learn Redux\u0026quot;, done: false}, {title: \u0026quot;walk dog\u0026quot;, done: false}, ] }  In redux, the store is immutable. We\u0026rsquo;ll see what that implies when we talk about reducers a little later.\nTools like React make it easy to take an application state and turn it into widgets but we wont get into that just yet. You can do this with pure vanilla JavaScript by looping over our todos and simply appending DOM elements.\nAction An action is also a JSON object. Here are some examples:\n{type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;} {type: \u0026quot;DELETE_TODO\u0026quot;, index: 2} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: true} {type: \u0026quot;SET_DONE\u0026quot;, index: 1, done: false}  Given the example \u0026ldquo;store\u0026rdquo; we set up above can you see what effects these actions should have? What does it look like we are trying to do here?\nNow there is some weird language around this. If you want Redux to execute an action then you dispatch the action. Then Redux should update the store through use of a reducer (we\u0026rsquo;ll get to those soon).\nSo if we wanted Redux to actually add a thing to our todo list we would do something like:\ndispatch({type: \u0026quot;ADD_TODO\u0026quot;, title: \u0026quot;pay rent\u0026quot;})  This is kinda a pain to write out so usually instead of doing thigs like this we make use of action creators. Eg:\nconst ADD_TODO = \u0026quot;ADD_TODO\u0026quot; function addTodo(title){ //action creator // validation maybe return {type: ADD_TODO, title: title} } dispatch(addTodo(\u0026quot;learn redux\u0026quot;))  Reducer Reducers are the things that execute actions on the state. Here is an example following from the above:\nconst initialState = { // note the use of const. This is immutable todos : [1,2,3], stuff : \u0026quot;things\u0026quot; } function theReducer(state = initialState, action){ // {type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;} switch(action.type){ case ADD_TODO: return { ...state, // we copy all the things using some ES6 syntax todos: [...state.todos, {title: action.title, done:false }] } // { // todos : [1,2,3,{type: ADD_TODO, title: \u0026quot;buy hats\u0026quot;}], // stuff : \u0026quot;things\u0026quot; //} case DELETE_TODO: return { stuff } case SET_DONE: return { otherStuff } default: // nothing changes return state } }  A helloworld example We are using ES6 syntax\nBut what about KISS? KISS == Keep It Simple, Stupid\nThis does seem like a complicated way to do a simple thing\u0026hellip; Think about this:\n actions are objects. That means we can store them and track them in different ways. actions are executed in specific ways and have predictable results the hard \u0026ldquo;thinking\u0026rdquo; of your application is all held in reducers so that makes testing easy and consistent we have a history of every hange made to the state of an application  Look up the \u0026ldquo;Command Pattern\u0026rdquo; . Redux isn\u0026rsquo;t exactly the same but very similar. Therefore there are similar applications.\n Frontend development: different buttons, inputsand widgets dispatch different actions in a predictable way Actions can be grouped. Meaning we can dispatch one action that dispatches a whole lot of different actions Macro recording. We can record the actions a user takes so that we can replay them later Reducers can be in a seperate code-base. we can send actions over a network and dispatch them elsewhere, we can send the same action to multiple computers to allow parallel processing undo/redo functionality becomes trivial feedback: if a number of actions need to be completed in order to complete a large task then we can track the completion of those actions and update a progress bar Actions can be added to a task queue instead of being dispatched immediately transactional behavior: you can have an action like {type: TRANSACTION_BEGIN} and then at some later stage {type: TRANSACTION_ROLLBACK} can be used to undo all the changes that happened in the transaction  Industry Redux is mostly used in the context of React. It is used for frontend development. But there is so much more it could do.\n"
},
{
	"uri": "/tech-department/projects/first-personal-website/",
	"title": "Build your first personal website",
	"tags": [],
	"description": "",
	"content": " For the learnership you will create a website with your CV and a portfolio of your work. Create the website and host it on Github. You will be updating your portfolio throughout the learnership.\nBrief: Create a Personal Website Summary: Create a personal website to showcase your talents and ambitions and to let the world know more about you. In the future, this will be the website you send to potential employers, so it should have the ability to show a portfolio of your best work.\nDetails: The content and information you choose to display is up to you. There should be some information about your skills, interests, and previous experience, as well as information on how to get in touch with you. Think about the user experience when designing your layout and navigation.\nThe HTML and CSS should be developed in a logical way with good naming conventions that would allow another developer to easily understand and build upon your code.\nYour web page files and folders should be organised and named in a logical manner.\nOnce you have finished your design and are satisfied with the style and content, upload the website to be hosted on GitHub Pages.\nRequirements:\n Website can be a single page or have multiple pages (the structure is up to you), but it must contain the following information:  About me, Skills (Your tech stack: the languages and tools you use), Projects/Portfolio, and Contact (social media, email, phone, etc)  Website must be responsive to different screen sizes - use a mobile-first approach!  Use CSS Grid (see tutorials below) to design your site and make it responsive  Website must be developed using HTML and CSS Grid with a logical structure and naming conventions in your code Some basic JavaScript/Jquery should be integrated into the site in some way to make it more interactive and user-friendly Submit a link to the completed website on your cohort’s Slack channel Feel free to use icons, colours, pictures or organograms if you need to. Create a board and make use of Trello which will assist you in breaking down your tasks.  Links  How to make a GitHub Page : https://pages.github.com/ CSS Grid: https://scrimba.com/g/gR8PTE (Screencast tutorials) https://css-tricks.com/snippets/css/complete-guide-grid/ (more info)  "
},
{
	"uri": "/tech-department/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/clean-code/",
	"title": "Clean Code",
	"tags": [],
	"description": "",
	"content": " “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~ Martin Fowler\n "
},
{
	"uri": "/tech-department/workshops/general-coding-best-practices/",
	"title": "Clean Code (language agnostic)",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "/tech-department/topics/data-science-specific/clean-code/",
	"title": "Clean Code for Data Science",
	"tags": [],
	"description": "",
	"content": " Code is read more often than it is written. Notebooks, especially, are made to be looked at. Assist yourself and others by keeping your code and notebooks neat!\nNaming conventions Naming conventions and other good python practices are listed in the PEP 8 Style Guide.\nAlso see these code quality best practices.\nThe Data Science Workflow For Data Science workflow best practices, please familiarise yourself with the cookiecutter data science project and read this description of how to organise your projects using atom and Jupyter on Medium\nAdvanced git for teams Here\u0026rsquo;s a good conceptualisation of how git works in a development team. There are different ways for team to work, but this Atlassian Git Workflow article gives you a great introduction.\nYou can thank me later ;)\n"
},
{
	"uri": "/tech-department/workshops/clean-code-for-web/",
	"title": "Clean Code for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/code-review/",
	"title": "Code Review Feedback Notes",
	"tags": [],
	"description": "",
	"content": "Information documented in this section can be used for a few different things:\n helping junior recruits and staff members learn what to look out for certain topics will come up here that should be turned into structured topics and workshops for future recruits we will be able to take learnings from here to refine the instructions given when giving assignments out  "
},
{
	"uri": "/tech-department/department-processes/cohort_standups/",
	"title": "Cohort morning standups",
	"tags": [],
	"description": "",
	"content": " Standups happen first thing in the morning. These will usually be run by junior facilitators\nBefore standup, the facilitator will  check the calenders and make sure they are familiar with upcoming events and deadlines check slack in case there are any important messages that should be conveyed to their groups. Eg: \u0026ldquo;only half the C23Zs have submitted their rocket-surgery assignments\u0026rdquo;  During standup, the facilitator will  attendance will be checked if anyone has missed a deadline then they will be verbally warned  "
},
{
	"uri": "/tech-department/contact-us/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for making Open Source Software a better place !\nTODO: fix shortcode so that it doesn\u0026rsquo;t break if no internet access\nghcontributors \u0026ldquo;https://api.github.com/repos/Umuzi-org/tech-department/contributors?per_page=100\u0026quot; %}}\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/cross-validation-and-simple-linear-regression/",
	"title": "Cross-validation &amp; Simple Linear Regression",
	"tags": [],
	"description": "",
	"content": " Key topics  Simple linear regression Residuals Overfitting and underfitting Cross-validation Root Mean Square Error  Background materials Regression  Introduction to Linear Regression Simple and Multiple Linear Regression in Python Crash Course Statistics: Regression Khan Academy Engageny Algebra Topic D, Lessons 14 – 18 (Modelling relationships with a line \u0026amp; Residuals)  Overfitting and underfitting  Coursera Video  Test/ training splits and cross-validation  Test/Train Splits and Crossvalidation in Python Tutorial Google ML Training and Test Sets Video  Assignment We will predict employee salaries from different employee characteristics (or features). We are going to use a simple supervised learning technique: linear regression. We want to build a simple model to determine how well Years Worked predicts an employee’s salary. Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary Metadata. You will need the packages matplotlib, pandas and statsmodels.\nSteps and questions  Split your data into a training and test set. Leave the test set for now. Examine the training data for missing and extreme values. Create histograms to show the distribution of the variables and a scatterplot showing the relationship between Years Worked and Salary. Are the data appropriate for linear regression? Is there anything that needs to be transformed or edited first?\n Using the statsmodels package and the training data, run a simple linear regression for Salary with one predictor variable: Years Worked.\n Does the model significantly predict the dependent variable? Report the amount of variance explained (R^2) and significance value (p) to support your answer. What percentage of the variance in employees’ salaries is accounted for by the number of years they have worked?  What does the unstandardized coefficient (B or \u0026lsquo;coef\u0026rsquo; in statsmodels) tell you about the relationship between Years Worked and Salary?\n What do the 95% confidence intervals [0.025, 0.975] mean?\n Calculate the expected salary for someone with 12 years’ work experience.\n Calculate the expected salary for someone with 80 years’ work experience. Are there any problems with this prediction? If so, what are they?\n We have only looked at the number of years an employee has worked. What other employee characteristics might influence their salary?\n  Now fit your model to your test set. DO NOT BUILD A NEW MODEL ON THE TEST SET! Simply use your existing, model, to predict salaries in the test set.\n How does your model compare when running it on the test set - what is the difference in the Root Mean Square Error (RMSE) between the training and test sets? Is there any evidence of overfitting?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/topics/data-infrastructure/dags-with-airflow/",
	"title": "DAGs with Airflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dom-manipulation-with-vanilla-js/",
	"title": "DOM manipulation with vanilla JavaScript",
	"tags": [],
	"description": "",
	"content": "Take a look at this awesome resource:\nhttps://javascript.info/dom-navigation\nYou\u0026rsquo;ll notice a few tasks at the end of this. Please make sure you understand them. Actually do the exercises then take a look at the solutions.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/dashboards/",
	"title": "Dashboard Assignment",
	"tags": [],
	"description": "",
	"content": " Tutorials  Create a Plotly Dashboard in under 10 minutes (Easy) Create a dashboard with Pusher and Flask (Advanced)  Assignment Watch the sessions on Dashboarding with Notebooks. Use one of the updating data sources referred to in the Kaggle sessions to create a dashboard with Jupyter Notebooks and Plotly (or, if you are feeling up to the task, Flask).\nYour dashboard should be both visually appealing and informative.\nBONUS POINTS: Use beautifulsoup to scrape live data off a website. Make a dashboard from this data. Example: I was looking for a house, so I built a web scraper in Python!\n"
},
{
	"uri": "/tech-department/workshops/intro-to-data-ethics/",
	"title": "Data Ethics",
	"tags": [],
	"description": "",
	"content": " The slides to the workshop on Data Ethics  "
},
{
	"uri": "/tech-department/topics/data-ethics-and-privacy/",
	"title": "Data Ethics and Privacy",
	"tags": [],
	"description": "",
	"content": " Software development and data science can be really powerful. And with great power come great responsibility, Uncle Ben was right.\nHere are some basic rules worth following:\n don\u0026rsquo;t ship bad code. Bugs can be pricey. Test test test read this  Law There are a few laws in place around the storage of sensitive information. Notably:\n PCI DSS if you are storing credit card information POPI if you are storing personal information  There is no need to memorize these laws. Just know what they exist. In general, if information in your care can be used by bad characters then:\n keep it safe check if there is a law or standard that applies to your situation don\u0026rsquo;t be evil. Don\u0026rsquo;t use the \u0026ldquo;I\u0026rsquo;m just doing my job\u0026rdquo; excuse if your employer insists that you do dodgy things.  Required reading  Ethical checklist for data science Five Principles of Ethical Data Science Data Science Association Code of Conduct  Podcast (Optional) Of ethics, checklists and data\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/data-visualisation/",
	"title": "Data Visualisation",
	"tags": [],
	"description": "",
	"content": " Tutorials Go through the DataCamp course Introduction to Data Visualisation with Python, or if you want to fast-track, complete Kaggle\u0026rsquo;s Data Visualisation: From Non-Coder to Coder\nAssignment 1 Once you have completed the course, complete the DataCamp project Exploring the Evolution of Linux.\nAssignment 2 Complete the data visualisation assignment on Financial Services Use in Tanzania\nAdvanced: Here is a great walk-through of different types of plots in Plotly with Cufflinks.\nSubmission Create a repo on Github to complete this assignment. Start a new notebook and commit your notebook changes to Github. Once you are done, create an html report from the notebook.\nReferences Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/data-wrangling/",
	"title": "Data Wrangling",
	"tags": [],
	"description": "",
	"content": " Key concepts  merging data frames filtering data frames manipulating rows and columns  Tutorials  Intro to pandas and data manipulation here If you\u0026rsquo;d like more, complete the DataCamp skills track Data Manipulation with Python  Assignment Prerequisites You should be familiar with data wrangling, unit testing, and functional programming techniques to complete this assignment. As far as possible, use functional programming techniques (map, reduce, apply) instead of loops when writing the functions below.\nFor example, to get modify every column in a data frame (to get a percentage in this case), instead of writing:\nfor column in df: column = column/10*100  use:\ndef get_percentage(score): score/10*100 df.apply(get_percentage, axis = 1)  Instructions This data contains personality scores for recruits, plus the department they applied for.\n Read in the dataset personality_scores.csv in this repo. Examine the data frame for duplicates (based on ID), and drop any duplicates that exist. Assert that the new data frame is the length of the unique entries of the original data frame.\n Write functions that will (1) convert the answer on each of the personality test questions to a number, as set out in scoring, and (2) calculate total scores for each of the subscales (conscientiousness, emotional stability, openness to new experience, agreeableness, extraversion). As you are doing this, first create unit tests that will test that the functions work as they should.\n  In other words, the new data frame will look something like this:\n   I am always prepared I am easily disturbed I am exacting (demanding) in my work \u0026hellip; Conscientiousness Emotional Stability     (3, 5) (4, 5) (3, 5) \u0026hellip; 10 5   (3, 5) (4, 1) (3, 1) \u0026hellip; 6 1   (3, 5) (4, 3) (3, 3) \u0026hellip; 8 3     Create a function/functions that takes in subscale total, and for each subscale, creates a new column called \u0026ldquo;{subscale_name}_interpretation\u0026rdquo; (e.g., conscientiousness_interpretation) and applies the labels \u0026ldquo;low\u0026rdquo;, \u0026ldquo;medium\u0026rdquo;, or \u0026ldquo;high\u0026rdquo; according to a person\u0026rsquo;s score on that subscale. Cut-off scores corresponding to the low, medium and high groups can be found in scoring.md. Again, write a unit test before creating this function that tests whether the generate_score_interpretation function works.\n Read in the data in departments.csv and merge this data frame with the personality score data frame, keeping all applicants within the department data frame. Assert that the newly created merged data frame has the same amount of rows as the department data frame, and the expected number of columns.\n Create histograms of personality scores by department. You may need to clean some of the department names.\n Filter the merged data frame so that you get only the ID numbers of applicants who score \u0026ldquo;low\u0026rdquo; on emotional stability, conscientiousness or agreeableness. Print the ID numbers and departments of these applicants to the screen, and also assign these applicants the tag \u0026ldquo;high_risk\u0026rdquo; in a new column.\n Create a new data frame with a count of the number of applicants in the low risk group within each personality subscale and department. Let each department be a separate column, and each personality subscale be a separate row. In other words, the data frame should look something like this:\n     Subscale Multimedia Coding Data     Extraversion 50 23 39   Agreeableness 40 85 91   Conscientiousness 49 100 72    Tip: It\u0026rsquo;s easiest to put the data wrangling code in a plain python file and then use py.test for the unit testing. Alternatively, you can run your notebook from the command line and install a plugin to enable py.test to read notebook files. For more, see Testing Jupyter Notebooks.\n"
},
{
	"uri": "/tech-department/topics/data-validation-and-quality-control/",
	"title": "Data validation and quality control",
	"tags": [],
	"description": "",
	"content": " Prevention first!  Design surveys and tools in such a way that minimises user error and measurement error  Inspect the data  Completeness:\n How complete is the data? It\u0026rsquo;s very important to differentiate between data that is missing and data that has a zero value! These mean very different things! QC: get count of missing observations QC: Are all important variables measured?  Measurement accuracy:\n Do the data represent the true value of what is being measured? Could be incorrect because of incorrect entry, unreliable measurement, incorrectly functioning/ broken machines, etc. QC: check that data are within allowable bounds (e.g. no percentages higher than 100%) QC: check measure reliability QC: check measure validity (e.g., compare measures that should be similar - the measure should not be biased or contaminated) QC: Visually inspect the data to see whether it looks as it should - i.e. is the mean, range and distribution what we would expect? Are there outliers? Documentation: Measurement imprecision should be noted in the documentation (e.g. the distance measure gives distance to the closest 100km)  Calculation accuracy: Are the calculation functions performing the correct calculations and are they working as they should?\n QC: unit tests to check that functions are working as they should QC: Visually inspect to see that the output matches what you would expect  Integrity:\n On storage, data values are standardized according to a data model and/or data type. All characteristics of the data must be correct – e.g. dates, integers. Data must stay secure and correct over its lifespan: data cannot be modified in an unauthorized or undetected manner. Minimise duplication of data Store the original, raw data separately from processed data   Know the data content and pipeline Individuals who know the data best are very important to successfully validating the data! Alternatively, get out on the ground and get to know the data process and content yourself!\nDocumentation An audit trail should always be available, i.e. how the data is collected, transformed and stored should be documented so that it is clear at which step of the process problems may have crept in.\nReferences Data quality assurance in data warehousing\nThe Challenges of Data Quality and Data Quality Assessment in the Big Data Era\n"
},
{
	"uri": "/tech-department/topics/data-infrastructure/",
	"title": "Data-infrastructures",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/",
	"title": "Data-science-specifics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/database-comparison/",
	"title": "Database Comparison",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/deadlines/",
	"title": "Deadlines",
	"tags": [],
	"description": "",
	"content": " If there is a deadline for any cohort then that deadline should be shared in the \u0026ldquo;tech deadlines\u0026rdquo; calender. To do this:\n create an event in your own calendar. name it in an informative way (name the assignment, name the part of the assignment, who is the deadline for? eg: C13 web) in the description of the event add any links, descriptions or requirements that might be useful invite the deadline calender to the event  Note: For the event to be accepted by the deadlines calender it has to have a duration. If your event is eg from 8:00 to 8:00 then it will be automatically rejected.\nClear instructions on how to submit the event should be included on the event. For example if it is a gnomio assignment then that should be stated. If the assignment makes use of the code submission form then a link to the form should be included.\nLate submissions The person who sets a deadline will check who submitted and who is outstanding.\nIf a recruit is then:\n send a slack message to each recruit who is late share a list of all late people with the rest of the tech team on slack? Or email? (should we have a specific channel?)  In the next cohort standup meeting:\n the recruits who submitted late will be verbally warned. They will need to submit their work by the next morning  If the recruit does not submit their work after being verbally warned then a senior tech manager will personally:\n email all the recruits who have missed their deadline (other managers should be CC\u0026rsquo;d). This counts as a WRITTEN WARNING have a meeting with the offending recruits. This can be a short meeting, and it can be a group meeting.  repeat offenders If a recruit gets 3 written warnings or 9 verbal warnings (or a combination, eg 1 written warning and 6 verbal warnings) then there will be a formal disciplinary hearing held by an HR representative. A senior tech manager will provide HR with all evidence.\n"
},
{
	"uri": "/tech-department/topics/data-science-specific/decision-trees/",
	"title": "Decision Trees",
	"tags": [],
	"description": "",
	"content": " Background material  Walk through the machine learning Kaggle tutorial Complete the DataCamp tutorial on Tree-Based Models  Assignment Use a decision tree model to predict customer churn (the percentage of customers that stopped using a company\u0026rsquo;s product or service during a certain time frame).\n Split your data into train and test sets. Get basic descriptive statistics for the training data and check for missing and incorrect or extreme values. Get scatterplots or heatmaps showing the relationship between the variables. What are the factors that predict user churn? Report the accuracy of your model on the training set and on the test set. How successful is the model - what is its sensitivity and specificity? What is the churn prevalence? How might prevalence affect the positive and negative predictive values of a test/model?  Find the data on Kaggle.\nMore information on decision trees Coursera: Decision Trees\n"
},
{
	"uri": "/tech-department/projects/portfolio-website/",
	"title": "Development of a Portfolio website",
	"tags": [],
	"description": "",
	"content": "with HTML5, CSS and bootstrap\nTODO\n"
},
{
	"uri": "/tech-department/projects/distributed-workloads-with-zeromq/",
	"title": "Distributed workloads with ZeroMQ",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/linux/os-environmental-variables/",
	"title": "Environmental Variables",
	"tags": [],
	"description": "",
	"content": "environmental variables, source and export, bashrc\n"
},
{
	"uri": "/tech-department/projects/expose-a-simple-rest-api-for-game/",
	"title": "Expose a simple REST api for your game",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/expressjs/",
	"title": "ExpressJs",
	"tags": [],
	"description": "",
	"content": " Introductory materials  Basic node server Express documentation Node.js \u0026amp; Express From Scratch [Part 1] - Intro \u0026amp; Environment Express, node overview Basic routing Static files  Middleware  Express Middleware More about middleware About bodyParser  "
},
{
	"uri": "/tech-department/projects/python-specific/file_io_kata/",
	"title": "Getting to know Python",
	"tags": [],
	"description": "",
	"content": " This little project aims to introduce you to some of the most important aspects of Python.\nFirst make sure that you have Python3.7 installed. There is a nice guide here\nNote You\u0026rsquo;ll need to submit your work as a git repo. Make sure your latest submission is in the master branch. And make sure your repo is public.\nYou will be expected to unit test your code. You can choose whichever test framework you like best. Pytest is quite nice and clean.\nIf you feel that you need extra resources or instruction to pull this off please just ask :)\nPlease do one step at a time, resist the temptation to read ahead.\nStep 1 Make this function work:\ndef list_all_js_function_names(path_to_js_file): \u0026quot;\u0026quot;\u0026quot; path_to_js_file is a path to a file on your hard drive This function will read the entire input file and then return a list of js function names as strings \u0026quot;\u0026quot;\u0026quot;  Here is an example of a javascript file: https://github.com/MihlaliNelana/CardGame/blob/master/CardGame/script/script.js\nExample:\nGiven\n// script.js function promptUser() { // line 2 var num = prompt(\u0026quot;Please enter number of squares...\u0026quot;); if (num != null) { document.getElementById(\u0026quot;demo\u0026quot;).innerHTML = \u0026quot;You want \u0026quot; + num + \u0026quot; number of squares...\u0026quot;; } } // line 8 Array.prototype.memory_card_shuffle = function(){ // line 9 var i = this.length, j, temp; while(--i \u0026gt; 0){ j = Math.floor(Math.random() * (i+1)); temp = this[j]; this[j] = this[i]; this[i] = temp; } } // line 17  Then:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return ['promptUser','Array.prototype.memory_card_shuffle']  What you should get out of this  practice unit testing get familiar with how functions work get familiar with file inputs practice (very) basic looping  Hints :) There is a lot to this function. It should be broken down a bit instead of doing everything in one go. Remember that we are doing TDD here, that\u0026rsquo;s test driven development. In TDD you try to write the most trivial test possible, then you make that test pass, then you refactor. Then repeat. Try to make sure that each test you write is as small and self-contained as possible while still being useful.\nHere are some ideas for some tests:\n test that given a one-line string, your function can detect whether or not it contains a function definition. eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; is a function definition \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; is not a function definition \u0026ldquo;foo.bar = function something(){\u0026rdquo; is a function definition  test that you can return the correct function name. Eg:\n \u0026ldquo;function fooo(bar){\u0026rdquo; the function name is fooo \u0026ldquo;a = foo(\u0026lsquo;hi there\u0026rsquo;)\u0026rdquo; there is no function defined here \u0026ldquo;foo.bar = function something(){\u0026rdquo; the function name is foo.bar   Then you\u0026rsquo;ll need to extend your code so that it can take a javascript file as input.\nResources  https://docs.python.org/3/howto/regex.html#using-regular-expressions https://www.w3schools.com/python/python_regex.asp  You\u0026rsquo;ll need to understand re.search to get this right\nAnd here is some file input/output (file io) documentation:\n https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files  Step 2 Upgrade the list_all_js_function_names function so that it also returns the start line number and end line number for the functions. Functions in Js are defined with the use of curly brackets.\nInstead of returning a list of strings, return a list of dicts.\nNow the function should work more like this:\nlist_all_js_function_names(\u0026quot;/path/to/script.js\u0026quot;) # this should return [ {'name':'promptUser', 'start_row':2, 'end_row':8}, {'name':'Array.prototype.memory_card_shuffle', 'start_row':9, 'end_row':17} ]  Note that functions can be defined inside functions.\nWhat you should get out of this  more advanced algorithmic thinking a little bit of practice with dictionaries  Step 3 TBA TODO\n"
},
{
	"uri": "/tech-department/projects/git-exercises/",
	"title": "Git Basic Exercises",
	"tags": [],
	"description": "",
	"content": " Introduction This little exercise will take you through the basic git mechanisms you need to know about in order to be productive. By the end of this exercise you\u0026rsquo;ll be able to create and manage your own git repos\nCreating and managing your own repo Note: you can do all of this stuff from the command line! You should be using linux. Open up a termanal and do the following:\nYour initial commit  Create a directory named git-basic-exercises cd into your new directory look at what\u0026rsquo;s inside using ls -a. It should be empty initialize your git repo using git init. Then check ls -a again. Can you spot the difference? check the status of your repo by typing git status type in touch README.md. This creates a new blank file. Then check ls -a and git status again. type in git log. The output should make sense to you Now add your readme file to your git staging area. Hint: use the git add command Then check your git status again. Can you see the difference? Try to unstage your file and check your git status again Ok, now for your first commit: Make sure your readme file is staged then type in git commit -m \u0026quot;initial commit\u0026quot; Your output should be something like this:  [master (root-commit) 2103b64] initial commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md  type in git log isn\u0026rsquo;t that nice? press q to exit  more commits!  type in nano README.md. This will open up a text editor. Type in some stuff and then press ctrl x to exit. Then y then enter. This will save your changes type in cat README.md. This will print your file to the console take a look at the git stats again and make sure you understand it commit your changes to your repo. Your commit should have the message \u0026quot;second commit\u0026quot; make some more changes to your readme and make a \u0026quot;third commit\u0026quot;  check this out  type in git log. You should see all your commits there. It should look something like this:  commit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Each commit has a \u0026ldquo;hash\u0026rdquo;. That\u0026rsquo;s the weird alphanumeric string thingy.\n Copy the commit hash for your second commit. You can just select it with your mouse and right click and choose \u0026lsquo;copy\u0026rsquo; press q to exit the log view. You should now be back at the terminal type in git checkout and then paste in the commit hash and press enter cat README.md It\u0026rsquo;s like going back in time git checkout master cat README.md Now we are up to date  You can jump to any commit using git checkout. You can checkout a branch, a commit hash, or a tag. We didn\u0026rsquo;t explore tags here.\nWhen you checkout a branch, you checkout the latest commit on that branch.\nbranching The real power of git is in branching. Branching is what allows big teams of developers to work on the same code base. Let\u0026rsquo;s explore branching a little bit.\n git branch This lists all your branches. Git makes a branch named master by default Now create a new branch called milkshake-flavours. git is not too restrictive when it comes to naming our branches. It\u0026rsquo;s generally best to choose a name that has something to do with what the branch is for. Our branch is about milkshakes type in git branch. Notice the little *. check out your new branch. type in git branch again and look at the *. Can you see what it means? Try switching between the different branches and see how hings change. Make sure you are on the milkshake-flavours branch then type in nano milkshakes.md and write fill in a few flavours. Mmmm. save and exit what does git status tell you? commit your new file with the message \u0026quot;added initial flavours\u0026quot; take a look at your git log again. It should make sense checkout your master branch. It\u0026rsquo;ll look a little different. Can you see why? from your master branch, create a new branch called history and check it out. If you say git log it should only have three commits type in history \u0026gt; history.txt. Can you guess what it does? commit your changes with the message \u0026quot;added history\u0026quot;. Take a look at the git log now checkout your milkshake branch and look at the git log. it should have your three master commits and your one milkshake commit make some arbitrary changes to the readme file and make a new commit with the message \u0026quot;random readme changes\u0026quot; checkout history again and cat README.md now on your history branch do the following:  rm README.md echo \u0026quot;booya\u0026quot; \u0026gt; README.md  You should know what these lines do. commit your changes. Use the commit message \u0026quot;rewrote readme\u0026quot; checkout master again  Just make sure we are still on track If you have followed along up until this point then your branches should look like this:\nType in:\ngit checkout master ls  this outputs:\nREADME.md  Check the log:\ngit log  this outputs something like:\ncommit a57585d3cf93e64c04e62e58dfe8151d191503cf (HEAD -\u0026gt; master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Now lets look at milkshake-flavours:\ngit checkout milkshake-flavours ls  You will see two files:\nmilkshakes.md README.md  And git log will look like:\ncommit d2559d9758f3ec0f7928f6cbef705c6fa9679edf (HEAD -\u0026gt; milkshake-flavours) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:25:07 2019 +0200 added initial flavours commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  Finally history:\ngit checkout history ls  there should be two files:\nhistory.txt README.md  and git log outputs\ncommit 34025ac2b26accb7c5c18ec048a4982d3bae8909 (HEAD -\u0026gt; history) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:38:05 2019 +0200 rewrote readme commit b9e3c50fb65c7b2df0f09b921a15a7fc146e0bfb Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:36:04 2019 +0200 added history commit a57585d3cf93e64c04e62e58dfe8151d191503cf (master) Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:40 2019 +0200 third commit commit a48c005c761902395cf9a50f13ddbffeee4f5537 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 15:07:12 2019 +0200 second commit commit 2103b6418ecf4f70effabb639cfad6ac9d57c089 Author: Sheena O'Connell \u0026lt;sheena.oconnell@gmail.com\u0026gt; Date: Tue Apr 23 14:43:51 2019 +0200 initial commit  merging Now we want to get the master up to date with all out changes. Let\u0026rsquo;s start with the milkshake branch\n merge milkshake-flavours into master\ngit checkout master git merge milkshake-flavours  Use ls and git log to see what this did\n merge history into master\n Use ls and git log to see what this did As you can see a whole lot of changes have been made to the master branch\n Now lets take a look at the other branches\ngit checkout history git log ... git checkout milkshake-flavours git log  These branches were not effected by the merge!\n  In general if we want to merge branch X into branch Y:\ngit checkout Y git merge X  This adds a commit to branch Y and doesn\u0026rsquo;t change branch X\n merge the master branch into history. Use git log to see whats up. checkout master again. git log again. Can you spot any differences?  GitHub  Go to Github.com (using your browser of choice) and create a new public repository using the user interface. Name it git-basic-exercises\n You will see a bunch of weird looking things. There is a section entitled \u0026ldquo;…or push an existing repository from the command line\u0026rdquo;. We have an existing repository and a command line. So this seems appropriate. Copy the commands from there and paste them into your terminal. this will push your changes to github.\n Refresh your browser. Cool eh?\n  Now you should see a little dropdown box on github that says \u0026ldquo;Branch: master\u0026rdquo;. Click there. your other branches aren\u0026rsquo;t available.\n Push your other branches to github. We want all branches to be listed  Pulling and remotes  You should still be inside the git-basic-exercises directory. Let\u0026rsquo;s get out of there. cd ../ Now let\u0026rsquo;s clone a repo. point your browser here: https://github.com/Umuzi-org/tech-department Now there is a friendly green button that says \u0026ldquo;Clone or download\u0026rdquo;. Click on it. You will see a url come up. Copy it. You will need to paste it into the terminal in a moment In your terminal type in git clone $THE_URL_YOU_JUST_COPIED. It should look something like this: git clone https://github.com/Umuzi-org/tech-department cd into the tech-department directory that was just created explore a little using git branch and git log type in git branch -a. This shows the remote branches try to checkout the branch called project/git-basic-exercises on your local computer. You can do it, you\u0026rsquo;ll need to figure out how type in git remote -v  Going forward We just covered the basics here. Please make sure you understand this stuff. It\u0026rsquo;s super important. Git might seem like a weird theoretical thing to a lot of you. It might seem completely unrelated to the actual job of writing code. But it\u0026rsquo;s not. Git makes teamwork on dev teams possible. Without it we\u0026rsquo;d spend more time shouting at each other than writing useful code. So learn it. Be comfortable with it. When we start working in teams later on all will be made clear.\nIf you are curious now, spend some time googling git branching stratergies. We use the feature branching stratergy here. We\u0026rsquo;ll cover it in depth later on in the course.\n"
},
{
	"uri": "/tech-department/topics/git/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " What\u0026rsquo;s git all about? Git is an industry standard tool used for collaboration within teams. We teach it quite early on in our course because without it you will be fairly useless as a professional. Yes, it\u0026rsquo;s that important. The git book (below) has a better introduction.\nThe Git Book You don\u0026rsquo;t need to know absolutely everything about Git in order to start using it. We keep our git repos on Github so don\u0026rsquo;t worry about the server setup stuff.\nThe first three chapters will serve you well initially:\nhttps://git-scm.com/book/en/v2\nWhat we expect from you As you progress through this course you will have to write a lot of code. All your code will be submitted to us for review in the form of a git repo. You will be expected to be comfortable using git from the command line.\nGeneral best practices  make a separate repo for every project (we don\u0026rsquo;t want to have to sift through unrelated code when marking your work) make sure that you push your latest work before leaving the office every day if you are working on a team, make sure you pull the master branch often give your git branches meaningful and specific names give your commits meaningful messages  Github We use Github for keeping our code safe. Here is a little intro.\nFor our data recruits https://www.datacamp.com/courses/introduction-to-git-for-data-science\nFun fact about our syllabus This site that you are looking at is a repo stored on git. This is cool because it means that you can fork it and make changes to our content. For example:\n if you find a video that was really useful in understanding a topic, then you can add a link to that video to our course material if you see a typo you can fix it If you think one of our projects can be explained better then you can add more explanation  Here is the repo, and this guide tells you a bit about what we ae looking for.\nContributing to our syllabus is not compulsory, but it would be appreciated :)\n"
},
{
	"uri": "/tech-department/workshops/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": "https://drive.google.com/open?id=1vnS8HYC89xMTOYj0vAWaAR36zaQvhA-o\nhttps://docs.google.com/presentation/d/1Uz9PX1A-bDlxEMDXjrTaGs588QrbVwDDMhPEmuY8WA4/edit#slide=id.p\nhttps://docs.google.com/presentation/d/1N6EeW3BE2r9CZDOSgT5dUBYX9-d8QT15_tA-9OtnIfI/edit#slide=id.p\n"
},
{
	"uri": "/tech-department/topics/git/",
	"title": "Git intro",
	"tags": [],
	"description": "",
	"content": "Go through the Git slides and the Datacamp course \u0026lsquo;Introduction to Git for Data Science\u0026rsquo;: https://www.datacamp.com/courses/introduction-to-git-for-data-science\n"
},
{
	"uri": "/tech-department/workshops/google-forms-like-a-boss/",
	"title": "Google forms like a boss",
	"tags": [],
	"description": "",
	"content": "Slides\n"
},
{
	"uri": "/tech-department/topics/how-the-internet-works/",
	"title": "How the internet works",
	"tags": [],
	"description": "",
	"content": " What is The Internet? The Internet is a massive network of networks, a networking infrastructure. It connects billions of computers and internet-enabled devices together globally, forming a network in which any device can communicate with any other device as long as they are both connected to the Internet. Information that travels over the Internet does so via a variety of languages known as protocols.\n The Internet and The Web (World Wide Web)? The World Wide Web, or simply Web, is a way of accessing information over the medium of the Internet and it is the most major application of internet technology today. It is an information-sharing model that is built on top of the Internet.\nThese days, we often just say \u0026ldquo;The Internet\u0026rdquo; when we refer to anything we access via a web browser or smartphone. However, the World Wide Web and the Internet aren\u0026rsquo;t the same thing. The Web uses a specific protocol called HTTP (hypertext transfer protocol), which is just one of the protocols used to transmit information over the Internet. For example, the Internet, not the Web, is also used for e-mail (which uses IMAP, POP and SMTP), instant messaging, peer-to-peer networks, and FTP (file transfer protocol). So the Web is just a portion of the Internet, albeit a large portion, but the two terms are not synonymous and should not be confused.\nHow does the Internet work?  https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work\n https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\n https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name\n https://dev.opera.com/articles/http-basic-introduction/\n https://dev.opera.com/articles/http-lets-get-it-on/\n https://dev.opera.com/articles/http-response-codes/\n  To learn more about how the Internet works, including SMTP, TCP, FTP, and DNS protocols, you are encouraged to read this document:\nhttps://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm\nWhat does the web look like?  The Web is a distributed information system It is made up of web pages (files/documents) These pages contain multimedia (text, images, video, etc) They are linked together via hyperlinks A website is a collection of web pages Websites are stored on computers called web servers A web browser is a piece of software that uses HTTP (hypertext transfer protocol) to retrieve and view web pages It’s able to do this by using a website’s uniform resource locator (URL) - which can be found in the address bar of a current page Secure web pages use encryption like HTTPS to protect themselves from eavesdroppers  Intranet vs. Extranet What is an intranet? An intranet is a private computer network based on the communication standards of the Internet. It is a smaller, private version of the internet that only members of an organization can access. Companies can create this kind of secure and manageable version of the Web to disseminate and share only the information relevant to their business. This can increase productivity as corporate knowledge becomes more accessible and the data is specific, monitored and accurate.\nWhat is an extranet? An extranet is a computer network that allows controlled access from the outside, for specific business or educational purposes. In a business-to-business context, an extranet can be viewed as an extension of an organization\u0026rsquo;s intranet that is extended to users outside the organization; usually partners, vendors, and suppliers, in isolation from all other Internet users. It provides access to needed services for channel partners, without granting access to an organization\u0026rsquo;s entire network.\nWhat can you do with an intranet or an extranet? Here are a few examples:\nDocument distribution  Reducing cost and improving timeliness of distributed information Exchange large volumes of data using Electronic Data Interchange (EDI) Provide a secure medium for the distribution of confidential information  Inter-company communication  Share product catalogs exclusively with trade partners Database access  Provide interactive services  Conduct company wide surveys Develop and use training programs Manage customer support portal  Collaborate with other companies Provide or access services provided by one company to a group of other companies, eg. training, online banking application managed by one company on behalf of affiliated banks\nIntranet and extranets have a wide variety of advantages but like with anything they have their downsides too. For example extranets can be expensive to implement and maintain, especially if hosted internally rather than by an application service provider (e.g. hardware, software, employee training costs), and their security can be a concern when hosting valuable or proprietary information. Keep this in mind when considering using them.\nWeb applications The internet has expanded since its inception and nowadays we use it in a wide variety of ways. You should be familiar with communication methods it has provided like email, instant messaging and voice/video calling. There is also a huge selection of interactive interfaces that operate entirely on the internet and make use of cloud technologies and handheld devices. These web applications range from online shopping to business accounting, health monitoring, gaming, and everything in between.\nWebmail The term Webmail (or Web-based email) is an email service offered by a company or Internet service provider through a website. Common examples are Gmail or Yahoo! Mail.\nWebmail is more often than not accessed through an email client rather than a web browser. For example iOS and Android devices both have native Mail applications that use the IMAP, POP and SMTP protocols to receive and send mail. You can also find other applications that will do the same. This is not a new technology and has existed almost since the advent of the Internet but it has become more commonly used with mobile phones. Its main advantage is that you can manage multiple webmails through one application and you can access your mail even when you’re offline.\nInstant messaging (IM) This is a form of communication over the web that offers quick transmission of text-based messages from sender to receiver. More advanced instant messaging allows enhanced modes of communication, such as live voice or video calling, video chat and inclusion of hyperlinks to media. Telegram, Whatsapp, iMessage and Facebook Messenger are examples of instant messaging.\nVoIP VoIP (Voice over Internet Protocol) is a set of technologies that enable voice calls to be carried over the Internet. Skype and Whatsapp Audio calls are examples of this.\nHow VoIP works The basic process involved in a VoIP call is as follows:\n Conversion of the caller’s analogue voice signal into a digital format Compression and translation of the digital signal into discrete Internet Protocol packets Transmission of the packets over the Internet or other IP-based network Reverse translation of packets into an analogue voice signal for the call recipient  What you need to make a VoIP call To make a VoIP call, the consumer user requires VoIP software and a connection to the Internet. The software will handle the call routing to make sure the call reaches the intended destination. The software can be installed on a variety of hardware devices including traditional telephone handsets (using an adaptor that plugs into the telephone), or on your computer or smartphone.\n"
},
{
	"uri": "/tech-department/how-to-contribute/",
	"title": "How to Contribute",
	"tags": [],
	"description": "",
	"content": " If you want to contribute content to this repo there are a few things you need to know.\nFirstly, this is a Hugo based web site. If you are contributing to the content of this site you will be editing markdown files. So you wont need to know too much about how Hugo works in order to be effective. If you need to figure out the mechanics of this thing, best read the Hugo docs.\nRoad-map So this repo is very much a work in progress. There are a few major tasks that need doing:\n the syllabus page needs to be completed  all the links need to point to actual content all that content needs to be marked as ready (more on this later)  many individual topics, workshops, projects etc can be refined and upgraded. Eg: if a recruit finds a tutorial on the internet that was really helpful in the completion of a project then they might want to add a link to that tutorial into the project description look, feel and functionality. We have the basics down, but it would be very nice to make this site look better and there are likely a few widgets that can be better.  First you need to get yourself set up You\u0026rsquo;ll notice a link to our GitHub repo in the menu on the left. See it? Cool. You\u0026rsquo;ll need to fork that.\nThere are installation instructions in the README.\nOnce you have made your changes then:\n Run the application on your local computer and look at the changes and make sure they are nice looking. Make a pull request. Your pull request should have a nice description of what you are trying to do If it looks like nobody has noticed your pull request then slack one of the tech team members. Feel free to remind us of your contribution  Don\u0026rsquo;t make any changes to the public/ directory This is really important. It might be tempting to you to write some HTML, js or css in there. Resist that temptation. This is a Hugo based website. This means that the public directory is generated auto-magically. Any changes you make within the public directory will be overwritten.\nIf you want to make changes to look and feel or basic site functionality This gets interesting. Basically, Hugo allows the use of themes. The theme we are using is called Hugo-theme-learn and you can find it inside the themes directory in this repo. So most of the visual elements you see when looking at this website is generated through use of that theme.\nIf you want to override anything about how the theme behaves (maybe changing a colour or layout, or adding a functionality) then DO NOT directly edit the theme files.\nIf you want to change how a theme behaves then you need to override that behaviour WITHOUT directly editing the theme.\nTake a look at this directory structure:\n. ├── archetypes ├── config.toml ├── content ├── install_Hugo.sh ├── layouts ├── LICENSE.md ├── public ├── README.md ├── resources ├── static └── themes └── Hugo-theme-learn ├── archetypes ├── CHANGELOG.md ├── exampleSite ├── i18n ├── images ├── layouts ├── LICENSE.md ├── netlify.toml ├── README.md ├── static ├── theme.toml └── wercker.yml  This is a summary of the directory structure of this application. You\u0026rsquo;ll notice that the structure of the theme is very similar to the structure of the repo as a whole. If you want to override a piece of the theme\u0026rsquo;s functionality then you need to find the file in the theme that defines that functionality, then make a file with an equivalent path in the main repo. This might sound weird but it\u0026rsquo;s pretty easy to get the hang of.\nHave an example:\nLet\u0026rsquo;s say we want to change what the menu looks like. You would do something like this:\ncp themes/Hugo-theme-learn/layouts/partials/menu.html layouts/partials/menu.html  Cool, so now we have two copies of menu.html. Make your changes to the new one.\n... ├── config.toml ├── layouts | └── partials | └── menu.html ### EDIT THIS ONE ... └── themes └── Hugo-theme-learn ├── layouts └── partials └── menu.html ### NOT THIS ONE ...  Nice eh?\nThe other thing to know is that Hugo is written in go. So these html files are actually go templates. So that\u0026rsquo;s a topic you can read about on your own. Go templates are used in lots of interesting places.\nThe syllabus index page When you are running the development server (Hugo serve) then you can see this page here. This is where each supported curriculum is outlined, week by week.\nTake a look at the contents of week 1.\nYou will notice that the links there have a pretty consistent format. Eg:\nWORKSHOPS: How to be a professional TOPICS: [TODO] Introduction to Linux PROJECTS: [TODO] Linux INTRO  If you look at the markdown file (\u0026lsquo;content/syllabuses/_index.md\u0026rsquo;) you can see that these links are generated by using the contentlink shortcode.\nEg: WORKSHOPS: How to be a professional (take a look at this page\u0026rsquo;s markdown and take a look at what happened above)\nThis shortcode does a few things:\n it makes the link work it checks the type of the linked to content and writes it down (eg: WORKSHOPS) it checks the title of the linked to content and writes it down (eg: How to be a professional) it (sometimes) adds a [TODO]. If the markdown file is marked as \u0026ldquo;ready\u0026rdquo; then the TODO wont show up.  Eg looking at workshops/how-to-be-a-professional. If the frontmatter looks like this:\n--- title: How to be a professional ready: true ---  Then the TODO wont show up.\nThis functionality is here just so that we can explicitly mark which content we are happy with so we can properly direct our efforts. Once the syllabus is ready as a whole then the TODO functionality will be removed.\nIf you want to make changes to the course content All of the content displayed on the website comes from the content directory. You\u0026rsquo;ll notice a bunch of different directories inside content, each of these directories has a purpose. Try to put your stuff in the right place.\nHere are a few major kinds of content:\n WORKSHOP == instructor led event. TOPIC == self study material PROJECT == deliverable  Let\u0026rsquo;s say you want to make a new TOPIC entitled \u0026ldquo;Intro to BeautifulSoup\u0026rdquo;. What you will need to do is this:\nCreate a new file here: content/topics/python-specific/intro-to-beautifulsoup.md. Then add come content and make sure to include a title in your frontmatter/metadata:\n--- title: Intro to Beautifulsoup --- Your content goes here. ## some heading blah blah blah  Once you have saved your file then you should be able to see it in the it in the menu panel on the left hand side of the website.\nAnd you can make a content link to your new file like this:\nUse content-link will look like this: TOPICS: [MISSING title or page]Advanced frontmatter So you know how to specify a title in your frontmatter, there are a few more things to know about.\n weight: this effects the order of things as they show up in the menu on the left-hand side of the screen. Menu items are sorted in ascending weight order pre: This is stuff that shows up before the title in the menu on the left ready: we spoke about this earlier  The only really compulsory thing is the title.\nHere is the frontmatter of the content/syllabuses/_index.md\n--- title: Syllabus pre: \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; weight: 1 ---   since the weight is 1 this item shows up as the first item in the menu on the left the menu item is rendered with HTML something like this: \u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt; Syllabus  Advanced folder structure If you wanted to create a new section with subsections then you would be able to do that too. Experiment a little bit if you need to. Basically do something like this:\n└── content/ └── topics/ ├── beautifulsoup/ ├── _index.md ├── intro.md ├── advanced.md ├── something_else/ ├── _index.md  You can also use this kind of folder structure if you want to include other resources in your markdown. For example a diagram or witty gif.\nWhat not to include Please don\u0026rsquo;t include large binary files in the repo. Just link to that sort of thing. This includes PDFs, presentations, videos and other documents.\n"
},
{
	"uri": "/tech-department/topics/how-to-ask-the-right-questions/",
	"title": "How to ask the right questions",
	"tags": [],
	"description": "",
	"content": "A big part of learning to be a programmer of any kind is knowing how to get help. This means knowing how to ask questions.\nYour questions should be short and clear. Your question should include all the information that is needed to answer the question.\nStack Overflow is a wonderful resource. Take a look at this: https://stackoverflow.com/help/how-to-ask. Sign up for stackoverflow and try to use it.\nPractice asking good questions. It\u0026rsquo;s like a superpower. If you are easy to help then people will help you.\n"
},
{
	"uri": "/tech-department/workshops/how-to-be-a-professional/",
	"title": "How to be a professional",
	"tags": [],
	"description": "",
	"content": "This is a run down of what it means to be a professional and how we expect you to behave within the tech department.\n "
},
{
	"uri": "/tech-department/topics/python-specific/oop-for-python/",
	"title": "Intro OOP(Object-oriented Programming) for Python",
	"tags": [],
	"description": "",
	"content": " This is a reading presentation of Object-oriented Programming (OOP) for Python.\nNote This is an introduction, this is just to give you a clearer perspective on OOP.\nYoutube videos  Python OOP 1 - Classes and Instances Python OOP 2 - Class Variables Python OOP 3 - Classmethods and Staticmethods Python OOP 4 - Inheritance Python OOP 5 - Special (Magic/Dunder) Methods Python OOP 6 - Property Decorators  Reading Guttag. Introduction to Computation and Programming using Python. Chapter 8, Classes and Object Oriented Programming, p.90 - 110.\nSome Example Code The code below shows demonstrates composition and a little bit of inheritance. There is a lot more to be said about OOP.\n import random class Wheel: def __init__(self): self.tread = 1000 def still_ok(self): return self.tread \u0026gt; 0 def use(self, speed): self.tread -= random.random() * 10 * speed class Vehicle: # colour = \u0026#34;red\u0026#34; def __init__(self, color): self.color = color class Helicopter(Vehicle): pass class Car(Vehicle): has_fueltank = True def __init__(self, speed=1, wheels=4): print(f\u0026#34;entering constructor: {self} at address {id(self)}\u0026#34;) # super(Car,self).__init__(color=\u0026#34;red\u0026#34;) self.position = 0 self.speed = speed # self.wheels = [Wheel() for i in range(wheels)] self.wheels = [] for _ in range(wheels): self.wheels.append(Wheel()) print(\u0026#34;exiting constructor\u0026#34;) def drive_forward(self): print(\u0026#34;driving forwards\u0026#34;) self.position \u0026#43;= self.speed for wheel in self.wheels: wheel.use(self.speed) def needs_service(self): if self.position \u0026gt;= 10000: return True for wheel in self.wheels: if not wheel.still_ok(): return True return False  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-angular/",
	"title": "Intro to Angular",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/intro-to-css-architecture/",
	"title": "Intro to CSS architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/intro-to-docker/",
	"title": "Intro to Docker",
	"tags": [],
	"description": "",
	"content": "and docker compose\n"
},
{
	"uri": "/tech-department/workshops/intro-to-presentation/",
	"title": "Intro to Presentation",
	"tags": [],
	"description": "",
	"content": "Link to the slides: https://docs.google.com/presentation/d/1gictqI99Sn58VNwbCTB2H1X_u8osahXT_3j97ATLuAo/edit?usp=sharing\n"
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-react/",
	"title": "Intro to React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-vue/",
	"title": "Intro to Vue",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/functional-programming-intro/",
	"title": "Intro to functional programming",
	"tags": [],
	"description": "",
	"content": " This week is all about higher-order functions: map, reduce and filter. We\u0026rsquo;ll also see what the fuss about lazy evaluation and list comprehension is.\nBackground Material  Learn Functional Python in 10 Minutes Fun Fun Functions: Functional Programming: These videos show functional programming in Javascript, but they contain great explanations. Watch all the videos in the series. Great resource on map, filter and reduce  "
},
{
	"uri": "/tech-department/topics/basic-architecture-concepts/",
	"title": "Intro to software architecture",
	"tags": [],
	"description": "",
	"content": " Software architecture is a pretty vast topic. This here is just scratching the surface.\nSeparate display logic from data logic If your data and your gui get all mixed up then things get very hard to test. Here\u0026rsquo;s an approach you might consider:\n Think what your data should look like. What is the shape of it? These things shouldn\u0026rsquo;t know about HTML. For example, if you were writing a game server (with no front-end at all) then these data structures should be valid. Of course you would be setting up these structures and interactions in a TDD manner Figure out how your data will change. What are the inputs? What are the effects on the data? At this point we still haven\u0026rsquo;t considered drawing any pictures. Now for some display code. Here\u0026rsquo;s a pretty good example adapted from one of your predecessors. This code comes from a project to do with a 10-pin bowling scoring system:  function drawPlayerDetails(player) { document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + player.name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + player.totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + player.pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + player.score + \u0026quot;]\u0026quot;; }  This function does one thing, and it does that thing well and intuitively.\nSome oop resources  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6 SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design  "
},
{
	"uri": "/tech-department/workshops/intro-to-ncit/",
	"title": "Introdction to NCIT curriculum",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/tech-department/topics/python-specific/intro-to-apis/",
	"title": "Introduction to APIs",
	"tags": [],
	"description": "",
	"content": " https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask\n https://realpython.com/api-integration-in-python/\n  "
},
{
	"uri": "/tech-department/topics/intro-to-ajax/",
	"title": "Introduction to Ajax",
	"tags": [],
	"description": "",
	"content": "Ajax Tutorial\n"
},
{
	"uri": "/tech-department/topics/linux/intro-to-bash/",
	"title": "Introduction to Bash and the terminal",
	"tags": [],
	"description": "",
	"content": "Try this out.\n (Command line bootcamp)[http://rik.smith-unna.com/command_line_bootcamp/] http://korflab.ucdavis.edu/bootcamp.html https://drive.google.com/drive/folders/1Y_MkM737c1GHIuu9oM0AxAAoskms9maP?usp=sharing  "
},
{
	"uri": "/tech-department/workshops/intro-to-css/",
	"title": "Introduction to CSS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/intro-to-express/",
	"title": "Introduction to Express js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/apis/graphql/",
	"title": "Introduction to GraphQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/intro-to-jupyter-notebook/",
	"title": "Introduction to Jupyter Notebooks",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Environment Download and install miniconda on your machine. This will install python and the conda package manager for python. NB Make sure that you set the python path! Setting the path will allow you to simply type python into the terminal to open python.\nYou also want to install the following packages:\n jupyter-notebook numpy pandas matplotlib seaborn scipy scikit-learn  You can install packages by typing conda install name-of-package, e.g. conda install numpy.\nTo launch a new jupyter instance (kernel), open up a new terminal, navigate to the directory in which you want to be and type jupyter notebook(and press enter). A new jupyter kernel will open in your browser. You can now open an existing notebook (*.ipynb) or create a new notebook.\nWhen you are done, click \u0026lsquo;Close and Halt Kernel\u0026rsquo; or press Ctrl+C twice to shut down the kernel from the terminal.\nAssignment Complete the (Nobel Prize Winner assignment)[http://somewhere.nice] and upload it to Github. You will need to create a Github account if you do not already have one.\nYou may want to go through DataCamp\u0026rsquo;s Python Programming track to get the basic skills you will need to complete the assignment.\nSupporting Material  Python For Data Science Cheat Sheets Jupyter Notebook Keyboard Shortcuts Basic Python 3 Programming for Scientists  TOPICS: Jupyter notebooks best practices   "
},
{
	"uri": "/tech-department/topics/linux/intro-to-linux/",
	"title": "Introduction to Linux",
	"tags": [],
	"description": "",
	"content": "Linux is an operating system (much like windows is an operating system). Linux started of as one nerd\u0026rsquo;s hobby but quickly grew in fame. Linux is free, it\u0026rsquo;s source code is freely available, and it is created, developed and used by a large community\n Intro to linux mint: https://www.youtube.com/watch?v=HhHu-1glWps post install guide 1: https://gitlab.com/prelude-open-source/mint-post-install-guide post install guide 2: https://fossbytes.com/things-to-do-after-installing-linux-mint  If you are one of our Python cohorts you\u0026rsquo;ll need to get Python 3.7 installed alongside Python2.7.\n"
},
{
	"uri": "/tech-department/workshops/intro-to-linux/",
	"title": "Introduction to Linux",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/introduction-to-node/",
	"title": "Introduction to Node",
	"tags": [],
	"description": "",
	"content": " https://codeburst.io/getting-started-with-node-js-a-beginners-guide-b03e25bca71b https://docs.npmjs.com/about-packages-and-modules https://www.w3schools.com/nodejs/nodejs_npm.asp https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc https://medium.com/@richardkall/installing-node-js-using-node-version-manager-nvm-c21546a613bc  "
},
{
	"uri": "/tech-department/workshops/node-and-sql/",
	"title": "Introduction to Node and SQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/intro-to-pair-programming/",
	"title": "Introduction to pair programming",
	"tags": [],
	"description": "",
	"content": " What is it? Pair programming is when you get two (or three) programmers to work on the same piece of code on the same computer. Only one person is coding at a time and the rest of the people are being helpful in some way.\nBut why? Think about what can happen if you have multiple brains working on th same problem. There are lots of benefits.\n the coders can all leverage their own problem-solving strengths to solve the same problem, so the problem will get solved well the coders will learn from each other! You get to grow and help your peers grow. How cool is that? the coders catch each others mistakes and assumptions before they get into the code base  How to do it Pair programming works best if everyone gets a turn at the keyboard, team member roles get mixed around, and communication is prioritized. There are a few different approaches to getting this right:\nPing Pong This kind of pair programming works best when there is a natural cadence to the coding process. Eg: Alice writes a little function, then Bob writes a little functio, etc.\nThis works suuuper well when it comes to Test Driven Development (we cover TDD later in the course)\nDriver-navigator Basically in this form, one person is the driver (they drive the computer), and the other person gets to direct their efforts. The driver is writing all the code so they get to ask questions and suggest corrections if they think something is a bad idea.\nUnstructured In the absence of a plan, this tends to happen. It sounds like a terrible idea at first (if you fail to plan, you plan to fail) but it can work pretty well in some situations.\n if the coding pair is evenly matched if the coding pair already know how to work together if the pair have compatible styles of communication and code  So while you are still learning, rather stick to one of the other styles.\nHow to do it well  take turns. Set a timer if you have to try to communicate constantly and clearly. Communication can be hard, value it always be learning. Everyone has something to teach you. If you feel frustrated by your partner\u0026rsquo;s coding abilities then use this opportunity to learn how to explain yourself better (this skill will serve you well). Teamwork is really really important in life so learn how to team.  Extra reading https://medium.freecodecamp.org/want-to-be-a-developer-you-should-probably-be-pair-programming-2c6ec12c4866\nPractice Time! Here are a few basic problems for ya. Try the Driver-Navigator pattern out. For now, don\u0026rsquo;t worry about making any user interfaces. We are more interested in algorithmic thinking.\n Write a function that takes one integer as a parameter and then prints that many plusses (+). Here\u0026rsquo;s how you would call it:   print_plusses(1) this should output \u0026ldquo;+\u0026rdquo; print_plusses(3) this should output \u0026ldquo;+++\u0026rdquo; print_plusses(5) this should output \u0026ldquo;+++++\u0026rdquo;   allow your program to take a second argument for the number of rows of plusses you want to draw. Think of the output as a grid. Your function takes in two parameters, the first is the number of columns and the second is the number of rows.   print_plusses(1,1) this should output:  +   print_plusses(3,2) this should output:  +++ +++   print_plusses(2,3) this should output:  ++ ++ ++  https://docs.google.com/document/d/1IMCAba36CxJje0xPQjAy9_p9OtCuvUPqiw7Vl3noloo/edit ??\n"
},
{
	"uri": "/tech-department/workshops/intro-to-unit-testing-with-jasmine/",
	"title": "Introduction to unit tests with Jasmine",
	"tags": [],
	"description": "",
	"content": " A brief introduction to Jasmine  "
},
{
	"uri": "/tech-department/topics/intro-to-unit-tests-with-mocha/",
	"title": "Introduction to unit tests with Mocha",
	"tags": [],
	"description": "",
	"content": " https://github.com/dwyl/learn-tdd https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/ https://codeburst.io/javascript-unit-testing-using-mocha-and-chai-1d97d9f18e71 https://mochajs.org/ https://medium.com/@williamjoshualacey/unit-testing-with-mocha-fda6a6f360c6 https://blog.logrocket.com/a-quick-and-complete-guide-to-mocha-testing-d0e0ea09f09d  "
},
{
	"uri": "/tech-department/topics/web-frontend/intro-to-web-design/",
	"title": "Introduction to web design",
	"tags": [],
	"description": "",
	"content": " There is a lot to be said about web design. Before you can get into it you need some basic tools.\nYou will need to have basic familiarity of HTML and CSS if you want to make anything that looks good. Focus on understanding the basics for now.\nGuidelines User interfaces are for users. Think about your users and how they will interact with your work.\n Make sure your front-end is discoverable. What would a new user think to do when they arrive for the first time? Make sure that your front-end is learnable. If you need your users to take novel actions make sure that the users can remember how to do those actions later. The user is always right. If a user gets confused by your website then it means that your website is confusing. Swallow your pride and accept criticism Always have an escape strategy. If a user clicks on a button and navigates somewhere strange, they should be able to go back Don\u0026rsquo;t use too many colors. And remember that some of your users will be color-blind be consistent make sure that the most important parts of your site look important. Make them big, put them at the top. Guide your users to interact with the right components Make desired actions easy. Imagine two e-commerce sites with a similar style, selling similar items. On site A the user needs to click the mouse 10 times to make a purchase, on site B the user needs to click the mouse 3 times to make a purchase. Site B will make more sales. KISS. Don\u0026rsquo;t do this Familiarity breeds trust. If your website looks familiar then people will take it seriously https://www.orbitmedia.com/blog/web-design-standards/ https://www.pagecloud.com/blog/web-design-guide  Responsive design A responsive web site is one that changes shape so that it looks and feels good on many different devices. Since cellphones are so powerful and ubiquitous these days it is usually considered best practice to design your site in a \u0026ldquo;mobile first\u0026rdquo; way. This means that you should first make sure that your site works well on a phone, then you make sure it works well on larger devices.\nThese links will teach you the basics\n https://www.w3schools.com/html/html_responsive.asp https://www.w3schools.com/css/css_rwd_intro.asp  Accessibility https://www.w3.org/WAI/fundamentals/accessibility-intro/\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/",
	"title": "JS and Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/code-review/may-review-c13-c14f/",
	"title": "JS code review May 2019",
	"tags": [],
	"description": "",
	"content": " Use the git From the command line. Seriously. For all further projects forever.\nThe next person who gives us a drag and drop upload will be shamed with a bell.\nTake pride in your work There are some pieces of feedback that were given before that were not incorporated into your code. It makes the review process a pain in the neck because I like to keep my code review comments DRY.\nTo learn as much as you can from this feedback:\n make your work excellent don\u0026rsquo;t copy from tutorials you found on the internet, make sure you know how to make it work yourself  You are here to learn. So learn.\nLearn your technical skills and learn to produce like a professional\n your code should work if there is a front-end it should not be a complete mess. A lot of the time we don\u0026rsquo;t need something beautiful. But don\u0026rsquo;t give us something un-usable and did I mention git?  Obvious comments Obvious comments shouldn\u0026rsquo;t be left in the code. It just means there is more stuff to read, it doesn\u0026rsquo;t add value:\n /** * this contructor initialises variables and the variables are called by functions below */ constructor(totalTime, cards) {\u0026lt;!-- --\u0026gt;  Ideally:\n code should be self-documenting. Meaning, your code should be so obvious that comments aren\u0026rsquo;t even necessary if comments are required then that is OK, but don\u0026rsquo;t say obvious things.   /** * this contructor does constructor like things in order to allow my code to execute in an object orientated manner. */ constructor(totalTime, cards) {  Mixing UI and data This is a common thing that happens a lot. Should have spoken about it more before but\u0026hellip;\nThink about your project as a number of layers. You have a data and logic layer, this holds information about\u0026hellip;information. It doesn\u0026rsquo;t care about HTML. It doesn\u0026rsquo;t KNOW about HTML.\nThen there is the UI layer stuff. It generates DOM elements from the data. And it triggers data-layer functionality based on DOM events.\nYou\u0026rsquo;ll get to play with this concept more soon.\nThings to know about: Loose coupling\nLabelling your code with your name isn\u0026rsquo;t necessary. We have Git /** Michael: codeblock ends**/ //_________________________________________This is where Wandile's Edits starts__________________________________________________  Git can tell us the exact commit that made the change on every line of code. So we have all the info we can eat.\nDon\u0026rsquo;t leave junk lying around Usually it\u0026rsquo;s bad to leave stuff like this in your codebase:\n // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection);  Looooong comments  let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */  These tend to get out of date. It\u0026rsquo;s better to just have self-documenting code.\nFunctions should be short and have one purpose Let\u0026rsquo;s take a moment to appreciate\nfunction loadCards() { // var getSection = document.getElementById(\u0026quot;memory-game\u0026quot;); // getSection.parentNode.removeChild(getSection); /**Michael: added the array created dynamically with users input**/ let nums = createArray(), ranNums = [], i = nums.length, j = 0; /* the array nums will be shuffled and saved into array ranNums in their random order. The values of ranNums will be used as the index for the array of cards to randomly sort them when they are shuffled. * */ /******* ranNums *******/ while (i--) { j = Math.floor(Math.random() * (i+1)); ranNums.push(nums[j]); nums.splice(j,1); }; /* Create an HTML section and add the class memory-game to section. * */ /******* section *******/ let section = document.createElement(\u0026quot;section\u0026quot;); section.classList.add(\u0026quot;memory-game\u0026quot;); /* store the filenames of all the images that will be used in the game in an array. **/ let cards = [\u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/U_black.png\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/M.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/U_orange.jpeg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/Z.jpg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/I.jpeg\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;, \u0026quot;img/umuzi.png\u0026quot;]; console.log(\u0026quot;WE're about to go in...\u0026quot;); /**Michael: set card length to the value of the users input.**/ cards.length = userLevel; /* for-loop to load and shuffle cards. **/ for (let index = 0; index \u0026lt; cards.length; index++) { /** create a div then add to the div; a class named memory-card as well as a dataset of the card's filename **/ let cardDiv = document.createElement('div'); cardDiv.classList.add(\u0026quot;memory-card\u0026quot;); cardDiv.dataset.card = cards[ranNums[index]]; /** create an image tag then add to the tag a class named front and the source of the image **/ let frontImage = document.createElement(\u0026quot;img\u0026quot;); frontImage.classList.add(\u0026quot;front\u0026quot;); frontImage.src = cards[ranNums[index]]; /** make the image tag as a child of the div **/ cardDiv.appendChild(frontImage); /** create an image tag then add to the tag a class named back and the source of the image **/ let backImage = document.createElement(\u0026quot;img\u0026quot;); backImage.classList.add(\u0026quot;back\u0026quot;); backImage.src = \u0026quot;img/umuzi_logo.png\u0026quot;; /** make the image tag as a child of the div **/ cardDiv.appendChild(backImage); /** make the meomry-card div a child of the memory-game div **/ section.appendChild(cardDiv); } /** once all cards have been loaded, add div memory-game a child of section **/ document.body.appendChild(section); console.log(cards); cardSelector() var sectionId = document.getElementsByTagName(\u0026quot;section\u0026quot;)[0].setAttribute(\u0026quot;id\u0026quot;, \u0026quot;memory-game\u0026quot;); };  If you try to explain the low level functionality of a functions and you end up saying: \u0026ldquo;it does x, and it does y, and it does z, but only if q, until the condition w\u0026rdquo;. Stop. Just stop.\nPay attention to naming conventions even when naming files and directories Bk.js ?  If working with web, make sure your slashes are in the right direction: const cardPack = [\u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\a.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\body.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\br.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\Class.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\em.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;, \u0026quot;img\\\\html.jpg.jpg\u0026quot;]  This game only works on windows. Seriously, what URL looks\\like\\this?\nfunky indenting function loadGame(selection) { if (document.getElementById('gameDisplay').hasChildNodes()) { document.getElementById(\u0026quot;gameDisplay\u0026quot;).removeChild(gameDisplay.childNodes[0]); } //The arrays that store all the URLs to picks and the dataset names const cardPack = [...stuff for (var i = 0; i \u0026lt; selection * 2; i++) {  inconsistent indenting is hard to follow JUST USE PRETTIER (demo with Bk.js)  caPitalisatopn Matters  var Section = document.createElement('section')  Be consistent. It makes your code easier to work with.\nnames should be meaningful Can anyone guess what this means?\nfunction IncreaseCards(selection) {  Do they get bigger? Does the number of cards increase? None of the above.\nCall a hammer a hammer. Call a nail a nail. Etc\nOne git repo one project Don\u0026rsquo;t put arbitrary things that have nothing to do with each other in the same repo. What does a memory game have to do with bowling?\nIf it walks like a loop and quacks like a loop, try using a loop  frame1.innerHTML = game.frameScore['1'] frame2.innerHTML = game.frameScore['2'] frame3.innerHTML = game.frameScore['3'] frame4.innerHTML = game.frameScore['4'] frame5.innerHTML = game.frameScore['5'] frame6.innerHTML = game.frameScore['6'] frame7.innerHTML = game.frameScore['7'] frame8.innerHTML = game.frameScore['8'] frame9.innerHTML = game.frameScore['9'] frame10.innerHTML = game.frameScore['10']  frames = [frame1,frame2, etc] then loop...  there are still memory games that are js embedded in HTML Take some pride in your work. You are here to learn. Pursue excellence.\nFlat is better than nested \t} else { function flip2Back(){ var tile_1 = document.getElementById(memory_tile_ids[0]); var tile_2 = document.getElementById(memory_tile_ids[1]); tile_1.style.background = 'url(tile_bg.jpg) no-repeat'; tile_1.innerHTML = \u0026quot;\u0026quot;; tile_2.style.background = 'url(tile_bg.jpg) no-repeat'; tile_2.innerHTML = \u0026quot;\u0026quot;; memory_values = []; memory_tile_ids = []; } setTimeout(flip2Back, 700); }  The technical term for this kind of thing is: ugly\nInitialise arrays the simple way var cards = []; ... cards[22]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[23]=\u0026quot;images/JPEG/10S.jpg\u0026quot;; cards[24]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[25]=\u0026quot;images/JPEG/2S.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[27]=\u0026quot;images/JPEG/JS.jpg\u0026quot;; cards[28]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[29]=\u0026quot;images/JPEG/KD.jpg\u0026quot;; cards[30]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[31]=\u0026quot;images/JPEG/JD.jpg\u0026quot;; cards[32]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; cards[33]=\u0026quot;images/JPEG/QD.jpg\u0026quot;; ... even more stuff  I made a typo above, can you see it?\nComments should be useful for the next person reading the code //To randomise the positions of the cards on the board --\u0026gt; Learnt this syntax on ES6(Call right after creating function)  Sometimes if you are doing something novel it is good to talk about it a bit, something I often do in my code is:\n// the following is based on https://something.cool/I/found complicated_code_begins_here()  Loose coupling  https://stackoverflow.com/questions/226977/what-is-loose-coupling-please-provide-examples\n https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6\n SOLID: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\n  Model-view One way to make complicated logic easier to test and understand and more portable is to have a clear separation of concerns. Think of it as a bunch of layers.\nCreate a bunch of code that is all about describing data. This is frontend-agnostic. Then have a visual layer that ties into that and makes your data visible and accessible.\nThis is an example of loose-coupling\nTDD specific  your tests should be small and specific. Gigantic tests should not  some code just isn\u0026rsquo;t self documenting. In these cases add documentation Eg:\n scores(){ this.updateTotals(); if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.secondRoll[this.index].innerHTML = 0; if (this.firstRoll[this.index] \u0026amp;\u0026amp; this.index \u0026lt; 9){ //one strike if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); //two strikes if ((this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10) \u0026amp;\u0026amp; (this.firstRoll[this.index - 1].innerHTML == 10)) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //three strikes if (this.firstRoll[this.index - 2] \u0026amp;\u0026amp; this.firstRoll[this.index - 2].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index - 1].innerHTML == 10 \u0026amp;\u0026amp; this.firstRoll[this.index].innerHTML == 10) this.frameScore[this.index - 2].innerHTML = Number(this.firstRoll[this.index - 2].innerHTML) + Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); //spare if (this.firstRoll[this.index - 1] \u0026amp;\u0026amp; Number(this.firstRoll[this.index - 1].innerHTML) != 10 \u0026amp;\u0026amp; (Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) == 10)) this.frameScore[this.index - 1].innerHTML = Number(this.firstRoll[this.index - 1].innerHTML) + Number(this.secondRoll[this.index - 1].innerHTML) + Number(this.firstRoll[this.index].innerHTML); this.frameScore[this.index].innerHTML = Number(this.firstRoll[this.index].innerHTML) + Number(this.secondRoll[this.index].innerHTML); this.totalScore[0].innerHTML = Number(this.frameScore[0].innerHTML); if (this.index \u0026gt;= 1) this.updateTotals(); } else if (this.index == 9) { this.secondRoll[9].innerHTML = Math.floor(Math.random() * this.pins + 1); this.thirdRoll[0].innerHTML = Math.floor(Math.random() * this.pins + 1); } }  I shouldn\u0026rsquo;t have to read the body of the function to know what it does. The name and optional documentation should be enough. What would be a better name for this function?\nYour tests are not your application Don\u0026rsquo;t put the specrunner in your index.html file. Imagine you are building this for a client. They care about bowling. You care about doing a good job. The test runner and test results are not client-facing.\nPlay by the rules If this is a TDD project then do it in a test driven way. There are big parts of many people\u0026rsquo;s codebases without tests at all. Eg: if the manner in which players take turns in the game has some complexity, maybe it would be good to test the logic that chooses whose turn it is?\nUntested code is a form of technical debt.\nAlso, we give you these exercises for a reason. If we are playing chess then the easiest way to win might be to drop-kick your opponent but that\u0026rsquo;s not the point. If you have a TDD assignment then figure out how you can use your tests to inform the structure of your code, and figure out how to write testable code.\nHTML in JS Try make it tidy at least. Use one notation at a time. Care about indentation and readability.\ndocument.getElementById(\u0026quot;currentNext\u0026quot;).innerHTML = `\u0026lt;strong\u0026gt;Round: \u0026lt;/strong\u0026gt; ${Player.list[showPlayer].round - Player.list[showPlayer].numOfStrikes + 1} Throw#: ${Player.list[showPlayer].throw+1}` + \u0026quot;\u0026lt;div id='\u0026quot; + Player.list[showPlayer].name + \u0026quot;'\u0026gt;\u0026lt;strong\u0026gt;Current Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[showPlayer].name + \u0026quot; - \u0026quot; + Player.list[showPlayer]. totalScore + \u0026quot; points\u0026quot; + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Next Player: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[nextPlayer].name + \u0026quot; - \u0026quot; + Player.list[nextPlayer]. totalScore + \u0026quot; points\u0026lt;/div\u0026gt;\u0026quot;;  A cool example of separating concerns This function is all about drawing a picture of some details. It is in no way concerned with calculating those details. It just shows them. This function does only one thing, and it does that one thing well.\nfunction showDetails(player) { console.log(\u0026quot;Show details for \u0026quot; + Player.list[player -1].name); document.getElementById(\u0026quot;showDetails\u0026quot;).innerHTML = \u0026quot;\u0026lt;strong\u0026gt;Player Name: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].name + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Points: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].totalScore + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;Position: \u0026lt;/strong\u0026gt;\u0026quot; + Player.list[player - 1].pos + \u0026quot;\u0026lt;br\u0026gt;\u0026lt;strong\u0026gt;scores: \u0026lt;/strong\u0026gt; [\u0026quot; + Player.list[player - 1].score + \u0026quot;]\u0026quot;; }  (Nice one Axel)\nThis idea is at the core of modern js frontend frameworks. Exciting things are on the horizon for you guys.\nnames people function getPos() {  FTW?\nok this is just a bit strange  this.addPlayer = (playerName = new Player()) =\u0026gt; { this.players.push(playerName); }  What is playerName suposed to be here. A string or an object?\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/template-engines/",
	"title": "JavaScript template engines",
	"tags": [],
	"description": "",
	"content": " About javascript template engines (Short explanation) More on Javascript templates  "
},
{
	"uri": "/tech-department/topics/jupyter-notebooks-best-practices/",
	"title": "Jupyter notebooks best practices",
	"tags": [],
	"description": "",
	"content": " Why use a notebook? Working alone  Keep track of your thoughts Make sketch notes Add links to resources to review later Example notebook: https://danielfrg.com/blog/2013/03/kaggle-bulldozers-basic-cleaning/  Working in a team  For code review For colleagues to contribute to your notebook To write a report on your models As a tutorial guide To communicate with external clients/entities/blog Example notebook:  https://www.kaggle.com/burhanykiyakoglu/predicting-house-prices   Tips for effective and efficient use of (jupyter) notebooks for data science projects Follow standard coding practices:  Provide comments and documentation to your code Stick to a consistent naming scheme! Use meaningful names: answers_to_score is clearer than score_ans, which is clearer than score_1! Group code in a manner that allows anyone to follow the modelling process, e.g. data exploration (summary statistics, distributions, bar graphs, scatter plots), data transformation (outlier detection, counting \u0026amp; dropping/replacing NaN, renaming columns/rows etc), modelling and model evaluations (model scores and error) Limit length of code lines Refactor (restructuring) code whenever necessary to keep it simple  Make it easy for other to follow and improve your work  Have an author name and contact details in case someone wants to ask for clarity The notebook should be a standalone document that does not require someone to have to know about the problem being solved or in-depth knowledge of the algorithms. This will help others follow your thought processes and understand the data transformation/data analysis being done and why certain techniques are being used, since multiple techniques exist Tell the story: e.g. describe the problem being solved and how the model will solve that problem Summarise the data\u0026rsquo;s statistical characteristics (to show that your data cleaning will not introduce artefacts or new features, and to show that the data are appropriate for the model(s) you use). This includes showing the variables\u0026rsquo; distribution and central tendency, as well as amount of available data. Exploratory techniques for summarizing data should be used before you start formal modeling and can help development of more complex statistical models \u0026amp; to eliminate or sharpen potential hypotheses about the world that can be addressed by the data. You will almost always want to see graphs of variable distributions, relationships between variables and missing data patterns. Provide enough rationale for each coding task being carried out (you will find this information useful when you read your own notebooks later) Critique your own model, this will help pre-empt and address shortcomings of your model and avoid loss of confidence in your model by others  General tips  Keep cells of your notebook simple: don\u0026rsquo;t exceed the width of your cell Make sure that you don\u0026rsquo;t put too many unrelated functions in one cell. It\u0026rsquo;s neater to import all packages in the first code cell of your notebook Ensure graphics can display inline (use matplotlib inline magic commands \u0026amp; semicolons)  "
},
{
	"uri": "/tech-department/topics/data-science-specific/k-means-clustering/",
	"title": "K-Means Clustering",
	"tags": [],
	"description": "",
	"content": " Introduction K-Means clustering is an unsupervised learning technique used in processes such as market segmentation, document clustering, image segmentation and image compression. Usually we do K-Means clustering to:\n Understand the structure of the data, and group similar observations. Cluster the data into subgroups and then do different predictions on the different subgroups. If we think that subgroup behaviours differ substantially, then we will get more accurate models by making separate models for each subgroup, than one model for all groups.\n  Tutorials  EDA and K-Means example K-Means Clustering: Algorithm, Applications, Evaluation Methods, and Drawbacks  Assignments Easy clustering assignment: Flower features Data: Iris species\n Use K-Means cluster analysis to cluster different iris species. Make an elbow plot and/or use silhouette analysis to find the optimal number of clusters.\n What are the factors that differ between different iris species?\n Create a plot of the clusters.\n  Optional clustering assignment: Whisky clusters Data: Whisky Reviews\nCluster whisky types by reviewers\u0026rsquo; scores. Use the elbow or silhouette method to find the optimal number of clusters. Describe the main differences between the cluster - what are the factors that differ between differently rated whisky clusters?\n"
},
{
	"uri": "/tech-department/department-processes/linkz/",
	"title": "Linkz",
	"tags": [],
	"description": "",
	"content": " Calendars  Umuzi tech events FOR RECRUITS Umuzi Tech deadlines  Forms  code review code submission events attendance form? TODO  "
},
{
	"uri": "/tech-department/projects/linux/",
	"title": "Linux challenges",
	"tags": [],
	"description": "",
	"content": " Task 1 : Basic Task  Use the linux terminal to do the following :\n1. Find the desktop folder 2. Create a directory and name in myProject 3. Change directory to myProject 4. Create a files and name it ‘ app.js ’ 5. Change directory to Desktop and create another directory, name it myProject2 6. Copy ‘app.js’ from myProject to myProject2   Resources  Linux basic commands  Task 2 : Absolute and Relative Paths Create an empty file named exercise.txt and move this file to the /tmp directory, using a relative pathname from your home directory. Then, delete this file using an absolute pathname.\nResources  Paths in linux Absolute and Relative Paths (video)  Task 3 : Cat commands  Create 3 files namely umuzi.txt, recruits.txt and cohort.txt. Fill all 3 files with contents of your choice. Write a script that concatenates the content of umuzi.txt, recruit.txt, cohort.txt and displays the result on the screen. Write a script that takes the content of umuzi.txt, cohort.txt and recruits.txt to print/store the output into a new file named summary.txt. Write a script that create a new file named summary.txt with new content. The script need to be careful not to override the first existing summary.txt file but should rather append the new content below the old one.  Resources  Standard File Streams (video) The cat commands  Task 4 : The locate command  Write a script to help you locate a file named umuzi Write a second script that will search for the same file and send the result of the search to a file named search_result.txt  Resources  http://bit.ly/2GPWP9E http://bit.ly/2IUg2KH  Task 5 The locate command cont..  Create a file within mydocument folder, add to is a file named pad.txt change the working directory to Desktop create a folder and name it work copy pad.txt to the currently working directory as pad_copy.txt update the database used by locate by running updatedb. change the working directory to the previous one (cd -) locate pad_copy.txt  Note: foreach instruction write a script and save it under this task\nTask 6 Find commands  Create a script that searches the home directory for all existing files change directory to My document, create a file named search_result.text. Save and change directory to Descktop write a scritpt to retrive all directories,files and subdirectories, write the result to search_result.txt  Resources  https://bit.ly/2VQbkDK  Task 7 Installing softwares Task 8 Linux documentation how to Task 9 File operation Task 10 Text editor Task 11 User environment Task 12 Bash and basic scripting "
},
{
	"uri": "/tech-department/topics/data-science-specific/logistic-regression/",
	"title": "Logistic regression",
	"tags": [],
	"description": "",
	"content": " Tutorial Complete the DataCamp project Predicting credit card approvals\nBackground material Sensitivity and specificity\nUnderstanding ROC curves with Python\nAssignment Use a logistic regression model to find the factors that were most important in predicting survival on the titanic.\n Split your data (train.csv) into train and test sets. Get basic descriptive statistics for the training data and check for missing and incorrect values. Replace missing values if this makes sense to do. What are the factors that predict survival? (i.e. which variables significantly predict survival, p \u0026lt; 0.05) Create a classification report and confusion matrix of predicted and observed values. What is the accuracy, sensitivity and specificity of the model on the (a) training and (b) test data? Plot a Receiver Operating Characteristic (ROC) curve on the test data. What is overdispersion?  Find the data on Kaggle.\n"
},
{
	"uri": "/tech-department/projects/memory-game-vanilla/",
	"title": "Memory Game",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/memory-game-modern/",
	"title": "Memory Game: rebuild using a modern web frontend framework",
	"tags": [],
	"description": "",
	"content": " Prerequisites You should have already completed this: PROJECTS: [TODO] Memory Game You should also have some solid TDD skills.\nYou need to be familiar with either AngularJs or React.\nInstructions Part 1: MVP Create an MVP memory game using Angular or React. Follow a TDD procedure.\n The game should draw a grid with 6 columns and 5 rows The cards in the game should be randomized When the game finishes then display a message on the screen that says \u0026ldquo;Congratulations! You are done!\u0026rdquo; There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game  Part 2: Count-down  Draw a timer widget on the screen. It should start off showing 2 minutes and count down to zero The color of the timer should be green initially the timer should turn orange after one minute has passed the timer should turn red when there are 30 seconds left on the clock when the timer runs out:  flip all the cards over to reveal what is underneath display a message saying \u0026ldquo;Sorry! You lost the game\u0026rdquo;. There should be a button labelled \u0026ldquo;Play Again\u0026rdquo; that the player can use to restart the game   Part 3: Winning stats When the user wins the game then the congratulations message should include:\n the number of turns taken (1 turn == 2 clicks) the amount of time taken  Part 4: ExpressJs  Serve your game using ExpressJS (as static content) Connect a MongoDB database expose the following json api endpoints:  POST update_score: This should accept a json object like this {name:\u0026quot;a string\u0026quot;, time: number of seconds, turns: number of turns taken}. This endpoint must update the database GET leaderboard/time: This should return the top 10 fastest people to win the game GET leaderboard/turns: This should return the top 10 people to win the game using the fewest clicks   Part 5: Ajax  When the game starts then the user will need to enter their name\n Whenever a user successfully wins the game then:\n their score should be stored in MongoDB updated through use of the update_score endpoint the two leaderboards should be fetched and displayed on the page If the current user is on a leaderboard then they should be highlighted  Whenever a player loses the game\n display the two leaderboards   "
},
{
	"uri": "/tech-department/topics/js-and-node-specific/mongodb/",
	"title": "MongoDB and JavaScript",
	"tags": [],
	"description": "",
	"content": " https://goalkicker.com/MongoDBBook/ https://www.w3schools.com/nodejs/nodejs_mongodb.asp https://zellwk.com/blog/crud-express-mongodb/  "
},
{
	"uri": "/tech-department/topics/python-specific/mongodb/",
	"title": "MongoDB and Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/multivariate-linear-regression/",
	"title": "Multivariate Linear Regression",
	"tags": [],
	"description": "",
	"content": " This week is all about one-hot encoding and multiple regression.\nBackground materials  Robust One-Hot Encoding in Python Emulating R Regression Plots in Python Statsmodels Regression Plot Building and evaluating models. Test/Train Splits and Crossvalidation  Assignment We will predict employee salaries from different employee characteristics (or features). Import the data salary.csv to a Jupyter Notebook. A description of the variables is given in Salary metadata.csv. You will need the packages matplotlib / seaborn, pandas and statsmodels.\nSteps and questions  Split your data into a training and test set. Create scatterplots, histograms, and a descriptive statistics table of the variables of interest. Do any of the variables need to be transformed to be able to use them in a linear regression model? Which variables seem like good predictors of salary? One-hot encode the variable Field into three dummy variables, using HR as the reference category. You can use pandas\u0026rsquo; get_dummies() function for this. Produce a correlation matrix comparing the relationship of salary to the predictor variables. Is there any multicollinearity or other problems that may be a problem in the multiple regression? Use multiple linear regression to predict salary from all the variables in the training dataset. Interpret the standardised coefficients given in the statsmodels output. What are the most important features when predicting employee salary? Calculate the standardised residuals (resid()) and standardised predicted values (fittedvalues()). Plot the residuals versus the predicted values using seaborn\u0026rsquo;s residplot with fitted values as the x parameter, and the dependent variable as y, specify lowess=True.  Are there any problems with the regression?  Now run your model on the test set. How does your model compare when running it on the test set - what is the difference in the Root Mean Square Error (RMSE) between the training and test sets? Is there any indication that the model has been overfit or does it seem like a reasonably good model?  References Data is made up and inspired by Cohen, Cohen, West \u0026amp; Aiken. Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences, 3rd Edition.\n"
},
{
	"uri": "/tech-department/workshops/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Introduction (slides)  Introduction to Node\n Asynchronous vs Synchronous\n  Challenges "
},
{
	"uri": "/tech-department/projects/nodejs/",
	"title": "Nodejs Challenges",
	"tags": [],
	"description": "",
	"content": " Note These are NodeJS challenges. Your main focus here is to make sure your Node code is good. You will not be evaluated on the prettiness of your frontend. Your frontend just needs to work.\n  PROJECTS: Node \u0026amp; File IO   PROJECTS: Node \u0026amp; mongoDB assignment   PROJECTS: Express, forms and templates   PROJECTS: Expose a JSON API   PROJECTS: Add a little Ajax   "
},
{
	"uri": "/tech-department/workshops/nodejs-intro-to-socketio/",
	"title": "Nodejs intro to socketIO",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/makeumuzibetter/",
	"title": "Online Learning and bootcamp",
	"tags": [],
	"description": "",
	"content": "A recruit’s journey includes a three-week programme called #MakeUmuziBetter (MUB). Recruits from all departments form small cross-functional teams to tackle issues at Umuzi - anything from mental health to kitchen norms to the physical layout of our space. To accomplish this, they learn about and execute Human-Centered Design, a technique used throughout their time at Umuzi. Each team maps out user journeys, conducts interviews and surveys, designs a prototype of their solution, and presents it to the staff and external guests.\n"
},
{
	"uri": "/tech-department/projects/python-specific/",
	"title": "Python projects",
	"tags": [],
	"description": "",
	"content": "The projects in this folder are specific to the Python programming language.\nUnless otherwise stated, please use Python3.7+. Python2.7 is considered legacy Python.\nAlso, if your project calls for you to install external packages from a package manager, please consider using virtualenv.\n"
},
{
	"uri": "/tech-department/topics/regular-expressions/",
	"title": "Regular Expression Resources",
	"tags": [],
	"description": "",
	"content": " A regular expression, regex or regexp (sometimes called a rational expression) is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for \u0026ldquo;find\u0026rdquo; or \u0026ldquo;find and replace\u0026rdquo; operations on strings, or for input validation. \u0026ndash; wikipedia\nRegular expressions are very useful. We use them to:\n validate user input url matching: If you are working with any kind of web backend technology you will come across this extracting and cleaning data And many many other things  It\u0026rsquo;s not worth memorizing this stuff, but you should understand it.\nGeneral regular expressions  Video: Best of Fluent 2012: /Reg(exp){2}lained/: Demystifying Regular Expressions  Python Regular expressions  https://www.w3schools.com/python/python_regex.asp  Javascript Regular Expressions  https://www.w3schools.com/js/js_regexp.asp  "
},
{
	"uri": "/tech-department/projects/tdd/resturaunt/",
	"title": "Resturaunt menu system",
	"tags": [],
	"description": "",
	"content": " Create an OOP program that can be used to represent and manage a resturaunt\u0026rsquo;s menu.\n The menu contains items Each item can come in different sizes, the sizes have different prices. Eg you might want to order a small pizza or a large pizza Items have names and descriptions Items have different categories (eg: pizzas, hamburgers, drinks) Item\u0026rsquo;s can have different tags. Eg vegetarian, vegan, chef\u0026rsquo;s choice, new, spicey  Different kinds of people need to interact with the menu in different ways: - everyone needs to be able to view the menu - The resturaunt manager needs to be able to add/edit/delete everything on the menu\nCan you think of any other people who might want to interact with the menu? And how they might interact?\nInstructions 1. Draw the class hierarchy Before you start writing any code, draw a picture of your classes and how they interact. Are you making use of inheritance? What Objects contain other objects? You will be expected to be able to explain your class hierarchy so please take care.\nIf you are running linux then there\u0026rsquo;s a simple tool called dia that is quite useful for these kinds of diagrams. sudo apt install dia.\n2. Code the class hierarchy Then code up your class hierarchy. Note that at this point in the process there is no functionality exposed. There is no frontend or user interface. The only functions you have are constructors.\n3. Resturaunt Manager functions Create the functionality that the resturaunt manager would need. This functionality should be developed in a TDD way.\nNote: Don\u0026rsquo;t build a frontend yet. We just need the functions.\nThe following functionality should be exposed: - create/delete/list/edit categories - create/delete/list/edit tags - create/delete/list/edit menu items\nThis functionality will eventually be accessable through a user interface. Take some time to think about that user interface. How would a manager want to interact with it? How will these functions get called? What information will be required at each point?\n4. Now for the Customers  Customers should be able to create orders An order is composed of a bunch of menu items (or specific sizes) menu items can be added to the order at any point\n menu items can be removed from the order at any point\n   Update your class diagrams to show this new information Code the necessary classes Create the following functions:  order_instance.add_item(???) order_instance.remove_item(???) order_instance.get_total_price()   Additional Resources   TOPICS: Intro to software architecture  UML basics  UML is a very big topic, you dont need to understand all of it. Make sure you know how to represent:\n Associations Multiplicity Aggregation Composition Inheritance / Generalization  Realisation is also useful for certain Design Patterns, but for now it\u0026rsquo;s not needed.\n"
},
{
	"uri": "/tech-department/projects/sql/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": " NCIT Units 114048 \u0026amp; 114049 Background reading You should be familiar with:\nTOPICS: SQL Instructions Download MySQL and install on Ubuntu:\nsudo apt update sudo apt upgrade wget http://repo.mysql.com/mysql-apt-config_0.8.10-1_all.deb sudo dpkg -i mysql-apt-config_0.8.10-1_all.deb sudo apt update sudo apt install mysql-server  Run MySQL as root to complete the steps below: mysql -u root. You can run mysql-workbench to export your code in a script.\nPart 1: Creating a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n Create a database called \u0026ldquo;Umuzi\u0026rdquo;.\n Create the following tables in the Umuzi database:\n Customers Employees Orders Payments Products  Create a primary key for each table with auto-increment (make sure you correctly specify the data types, e.g. the ID field should be int).\n Create foreign keys so that every ID in the order table references an existing ID in the tables referenced (e.g., ProductID, EmployeeID, etc).\n INSERT the records in the tables below into the table you created in step 2.\n Document what information is stored in your database. Be sure to say what information is kept in what table, and which keys link the records between tables.\n  Customers Table    CustomerID (int) FirstName (varchar50) LastName (varchar50) Gender (varchar) Address (varchar200) Phone (int 10) Email (varchar100) City (varchar20) Country (varchar50)     1 John Hibert Male 284 chaucer st 084789657 john@gmail.com Johannesburg South Africa   2 Thando Sithole Female 240 Sect 1 0794445584 thando@gmail.com Cape Town South Africa   3 Leon Glen Male 81 Everton Rd,Gillits 0820832830 Leon@gmail.com Durban South Africa   4 Charl Muller Mal 290A Dorset Ecke +44856872553 Charl.muller@yahoo.com Berlin Germany   5 Julia Stein Female 2 Wernerring +448672445058 Js234@yahoo.com Frankfurt Germany    Employees Table    EmployeeID (int) FirstName (varchar50) LastName (varchar50) Email (varchar100) JobTitle (varchar20)     1 Kani Matthew mat@gmail.com Manager   2 Lesly Cronje LesC@gmail.com Clerk   3 Gideon Maduku m@gmail.com Accountant    Orders Table    OrderId (int) ProductID (int) PaymentID (int) FulfilledByEmployeeID (int) DateRequired (datetime) DateShipped (datetime) Status (varchar20)     1 1 1 2 05-09-2018  Not shipped   2 1 2 2 04-09-2018 03-09-2018 Shipped   3 3 3 3 06-09-2018  Not shipped    Payments Table    CustomerId (int) PaymentID (int) PaymentDate (datetime) Amount (decimal)     1 1 01-09-2018 R150.75   5 2 03-09-2018 R150.75   4 3 03-09-2018 R700.60    Products Table    ProductId (int) ProductName (varchar100) Description (varchar300) BuyPrice (decimal)     1 Harley Davidson Chopper This replica features working kickstand, front suspension, gear-shift lever R150.75   2 Classic Car Turnable front wheels, steering function R550.75   3 Sports car Turnable front wheels, steering function R700.60    Part 2: Querying a database Save all of your instructions in a script file - you will submit this file on Gnomio and github.\n SELECT ALL records from table Customers.\n SELECT records only from the name column in the Customers table.\n Show the name of the Customer whose CustomerID is 1.\n UPDATE the record for CustomerID = 1 on the Customer table so that the name is \u0026ldquo;Lerato Mabitso\u0026rdquo;.\n DELETE the record from the Customers table for customer 2 (CustomerID = 2).\n Select all unique statuses from the Orders table and get a count of the number of orders for each unique status.\n Return the MAXIMUM payment made on the PAYMENTS table.\n Select all customers from the \u0026ldquo;Customers\u0026rdquo; table, sorted by the \u0026ldquo;Country\u0026rdquo; column.\n Select all products with a price BETWEEN R100 and R600.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where country is \u0026ldquo;Germany\u0026rdquo; AND city is \u0026ldquo;Berlin\u0026rdquo;.\n Select all fields from \u0026ldquo;Customers\u0026rdquo; where city is \u0026ldquo;Cape Town\u0026rdquo; OR \u0026ldquo;Durban\u0026rdquo;.\n Select all records from Products where the Price is GREATER than R500.\n Return the sum of the Amounts on the Payments table.\n Count the number of shipped orders in the Orders table.\n Return the average price of all Products, in Rands and in Dollars (assume the exchange rate is R12 to the Dollar).\n Using INNER JOIN create a query that selects all Payments with Customer information.\n Select all products that have turnable front wheels.\n  "
},
{
	"uri": "/tech-department/topics/intro-to-relational-databases/",
	"title": "SQL",
	"tags": [],
	"description": "",
	"content": " Tutorial Complete the DataCamp Intro and Intermediate SQL courses:\n Intro to SQL for data science Intermediate SQL  Assignment See the SQL assignment in Projects: PROJECTS: SQL "
},
{
	"uri": "/tech-department/topics/python-specific/sql-and-python/",
	"title": "SQL and Python",
	"tags": [],
	"description": "",
	"content": "Python can be used to interface with SQL. To give you an idea of what can be done, complete the Datacamp skill track Importing \u0026amp; Cleaning Data with Python: https://www.datacamp.com/tracks/importing-cleaning-data-with-python\n"
},
{
	"uri": "/tech-department/department-processes/workshops_and_events/",
	"title": "Scheduling workshops and events",
	"tags": [],
	"description": "",
	"content": " This is specifically for workshops that are compulsory for specific cohorts and optional for others. Eg: This is allowed \u0026ldquo;Introduction to Unit testing with Jasmine, Compulsory C14B, All welcome\u0026rdquo;.\nProcess for staff members:\n Create the event on your personal umuzi calendar. Say who should be there. Include a useful description as much as possible, even links to materials if appropriate Invite the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar  if your event doesn\u0026rsquo;t clash with anything on the tech events calendar it will automatically be accepted if it DOES clash then it will automatically be rejected   This automation is set up on purpose. For the most part we should never make a recruit from any cohort unwelcome in any internal workshop or event. So they should not clash.\nUpdating events Workshops can be rescheduled at least a day in advance. If a workshop is happening TODAY then the time should be considered immutable. Because we don\u0026rsquo;t mess our recruits around. And because we want to demonstrate good time management and planning skills so that the recruits can learn good habits from us.\nTo reschedule an event simply update the event in your own calendar (if you set the event up in the first place)\nClashes Be mindful of how events get automatically rejected if they clash. If you put an event on this calendar then it should make sense in that context.\nScheduling External workshops and events (eg: meetups)  Post a link to the event in the slack channel #meetups-and-events Put the event on the \u0026ldquo;Umuzi tech events FOR RECRUITS\u0026rdquo; calendar Attach a form where recruits can sign up to attend (so that transport can be organized etc) (TODO) tell te recruits about when they need to fill in the form by, what\u0026rsquo;s the maximum number of people who can go etc  "
},
{
	"uri": "/tech-department/syllabuses/web-dev-short-course/self-study/",
	"title": "Self Study",
	"tags": [],
	"description": "",
	"content": "For the most part the web-dev short course is based on projects. Recruits are expected to walk away with a solid understanding of many topics. While projects are underway, the recruits are expected to work their way through the followingt material:\n Command-line bootcamp: This will get you up to speed with the basics of terminal usage: http://rik.smith-unna.com/command_line_bootcamp/ Intro to linux presentation: https://docs.google.com/presentation/d/1dhj1-p9Ufl4ilSy_Nu8sw-kuNVWkSvhp0dn5KGo9TyY/edit Sheena\u0026rsquo;s awesome linux mint post-install guide: https://gitlab.com/prelude-open-source/mint-post-install-guide (you can skip the parts about python, virtualenv, pip) There is a website called stackoverflow that is completely amazing. You can ask tech questions there and they will get answered by kind and knowledgeable strangers. So long as you ask proper questions: https://stackoverflow.com/help/how-to-ask This is the Git book.. Git is great. long live the git. https://git-scm.com/book/en/v2 Git should be installed by default on linux mint. We\u0026rsquo;ll be using github a lot. And this book is way too big. If you get familiar with chaplets 1-3 it will serve you well  You can also continue with the FreeCodeCamp syllabus on your own time. Ideally you will be pretty familiar with this stuff: Free Code Camp\n Javascript Algorithms And Data Structures Certification: Basic JavaScript Javascript Algorithms And Data Structures Certification: ES6 Javascript Algorithms And Data Structures Certification: Debugging Javascript Algorithms And Data Structures Certification: Basic Data Structures Javascript Algorithms And Data Structures Certification: Basic Algorithm Scripting Javascript Algorithms And Data Structures Certification: Object Oriented Programming\n Responsive Web Design Certification: HTML and HTML 5\n Responsive Web Design Certification: Basic CSS\n Front End Libraries Certification: Bootstrap\n Front End Libraries Certification: jQuery\n  "
},
{
	"uri": "/tech-department/topics/python-specific/sqlalchemy-and-alembic/",
	"title": "Sqlalchemy and Alembic",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-science-specific/statistical-thinking/",
	"title": "Statistical Thinking",
	"tags": [],
	"description": "",
	"content": " Background material  Crash Course Statistics: Measures of Spread Crash Course Statistics: Plots, Outliers and Justin Timberlake Crash Course Statistics: Correlation Doesn’t Equal Causation  Tutorials Complete the DataCamp courses Statistical Thinking in Python Part 1 and Statistical Thinking in Python Part 2.\nAssignment Instructions In the next series of challenges, we will predict employee salaries from different employee characteristics (or features). We ask employees working in four different fields to state their salary and some background information.\nImport the data salary.csv to a Jupyter Notebook. You will need the packages matplotlib, seaborn, pandas and statsmodels. A description of the variables is given in Salary metadata.csv.\nQuestions  How many responders are there? Are there any missing values in any of the variables? What is the lowest salary and highest salary in the group? What is the mean salary for the sample? Include the standard error of the mean. What is the standard deviation for the years worked? What is the median salary for the sample? What is the interquartile range for salary in the sample? How many men are there in the sample? How many women are there in the sample? Present this information in a table. How many women are executives compared to men? Create a histogram for the variable Salary. Examine the histogram and describe the distribution for Salary. Create a bar graph to show the different average salaries of men and women. (Bonus: Add error bars to the bars showing the 95% confidence interval). What does the graph tell you about the difference between men and women’s salaries? Create a scatterplot with seaborn showing the relationship between Years Worked and Salary (don’t forget to insert a trend line).  What is the relationship between Years Worked and Salary? Describe any patterns in the scatterplot. Do you notice any unusual/extreme values that do not fit the general trend? If you see any unusual values, briefly describe them (Who are they? In what way are they different?)  Using the pearsonr function from the scipy.stats package, calculate the Pearson correlation coefficient (and its corresponding p value) to determine the nature of the relationship between Years Worked and Salary. See help(pearsonr) for help on this function.  Interpret the size and direction of the correlation statistic. Is the relationship statistically significant? Report the appropriate statistic(s) to support your answer.   "
},
{
	"uri": "/tech-department/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/",
	"title": "Test Driven Development",
	"tags": [],
	"description": "",
	"content": "The excercises in this section can be done in any language. The aim is to have working logic, not a beautiful user interface. You will be expected to demonstrate your working code and also to build on lessons you have already learned.\n if you know oop please use it where it is appropriate write clean code (it will be revewed by your peers and by senior staff) use Git from the command line. This is a suuuper important skill in industry have fun :) (but not too much)  There are a few excercises here. Try the ones marked as easy first.\n"
},
{
	"uri": "/tech-department/topics/js-and-node-specific/dotenv/",
	"title": "The dotenv module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/tech-terminology/",
	"title": "The terminology of the tech landscape",
	"tags": [],
	"description": "",
	"content": " Learn the lingo of the tech landscape (API, database, data pipeline, etl, vm, container, open source, IAAS, etc)  "
},
{
	"uri": "/tech-department/workshops/time-managment/",
	"title": "Time Management",
	"tags": [],
	"description": "",
	"content": "TODO: which one?\nhttps://docs.google.com/presentation/d/1gRAGqSma21RkbnfoCO2KM565EfGCf9m4ZuJ9S7mcyFc\nhttps://docs.google.com/presentation/d/1gOBA6zen5jre1DxCKRU9zHpVDFh2n8yPMXw2STCOkCw\n"
},
{
	"uri": "/tech-department/",
	"title": "Umuzi Tech Department",
	"tags": [],
	"description": "",
	"content": " Umuzi Tech Department This website/repo is the source of truth around what and how we teach here in Umuzi\u0026rsquo;s tech department. Let me show you around:\nIf you want to contribute to this repo Take a look at the contribution guide guide. This guide will tell you basically how this application works and will give you info on what a good pull request looks like.\nIf you are a recruit This here is basically how we work.\nIf you want to see the entire syllabus (as it currently exists) then take a look here. What you see in this section is constantly evolving based on feedback from you and from industry.\nIf you think anything we have in here can be improved upon we would love to know! You can even make a pull request. If we merge your stuff then you will show up on out credits page. Cool, eh?\nIf you are a staff member You are probably looking for our department processes documentation. Take a look here.\nIf you are interested in getting in touch with Umuzi Hi friend, we would love to meet you. Check out our contact page for more info\n"
},
{
	"uri": "/tech-department/topics/unit-testing/",
	"title": "Unit testing (language agnostic concepts)",
	"tags": [],
	"description": "",
	"content": "The following videos use JavaScript to demonstrate and explain some key concepts around unit testing. Even if JS is not your vibe these are worth watching.\n Lesson 1: Why Unit Testing Lesson 2: Your first tests Lesson 3: Test Runners. This discussion on test runners mentions a bunch of JS stuff. But there are still many language agnostic concepts that are worth knowing about. Examples of Python test runners are unittest and pytest.  If you are actually doing JS then it\u0026rsquo;s worth watching the rest of this series of videos.\n"
},
{
	"uri": "/tech-department/workshops/js-unit-tewsting/",
	"title": "Unit testing Introduction",
	"tags": [],
	"description": "",
	"content": "A brief introduction to unit testing\n"
},
{
	"uri": "/tech-department/topics/python-specific/unit-testing/",
	"title": "Unit-testings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/js-and-node-specific/fetch/",
	"title": "Using the fetch api",
	"tags": [],
	"description": "",
	"content": " Fetch  "
},
{
	"uri": "/tech-department/projects/validating-user-input-for-web/",
	"title": "Validating user input for web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/virtual-envs/",
	"title": "Virtual Environments",
	"tags": [],
	"description": "",
	"content": "and os.environ\n"
},
{
	"uri": "/tech-department/topics/web-frontend/",
	"title": "Web Frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/python-specific/web-scraping/",
	"title": "Web scraping with Python",
	"tags": [],
	"description": "",
	"content": "Python\u0026rsquo;s beautifulsoup package is great for web-scraping. See the documentation at beautifulsoup.\nAn example of using web-scraping for a data project is I was looking for a house, so I built a web scraper in Python!.\n"
},
{
	"uri": "/tech-department/department-processes/what-recruits-need-to-know/",
	"title": "What You Need To Know (as a recruit)",
	"tags": [],
	"description": "",
	"content": " This is a guide to the Tech Department and how it works. It contains contact details, important links to documents we use and software that are useful.\nGround Rules In order to be efficient and productive we have some ground rules: You are expected to be at your desk most of the time between 9am and 5pm (barring lunch)\n Don\u0026rsquo;t be late for workshops. Don\u0026rsquo;t be late for standup. Don\u0026rsquo;t be disruptive and noisy in the work area, this is a place for focus.  Daily Tech Events These happen everyday and are compulsory for everyone to attend.\nStand up This is how we begin our day, announcements are shared and we discuss anything that hinders progress.\n Every morning at 09:00  Lunchtime presentation handled by Kii This is where we exercise our presentation muscle, one recruit prepares a 5 minute presentation about something tech related - what you’ve learnt, something you’re working on or any resources that you think might be useful. There is a [Schedule][ https://docs.google.com/spreadsheets/d/1zovv2tfk14iwyapa-htabexrja3gymp9sm4wpglr0qs/edit?usp=sharing] that specifies who will present on which day.\n Everyday after lunch at 13:30,  The Productivity Award Handled by Kii To encourage productivity, recruits are allocated points on a specific Criteria which comprises:\n Attendance Project Submission Posting relevant material on Slack Asking and/or providing solutions to a problem posted on Slack Presentations Reviewing someone else’s code Doing useful pull requests Having your code merged.  Here\u0026rsquo;s a link to the [Calendar][https://calendar.google.com/calendar/b/3?cid=dw11emkub3jnxzf1dgs1owjuc2rqmdnpzdi3zzlzzgjmb2ewqgdyb3vwlmnhbgvuzgfylmdvb2dszs5jb20]that all tech events are scheduled on. This is where yu will find dates for Workshops, Talks and Meetups. Check this everyday.\nTech Meetups Handled by Singi\nAt least once a month (usually more) we attend a meetup. We get to learn on what\u0026rsquo;s new in the tech world, learn more on the technology and languages we already know. Meetups are free, no cost to you.\nHere\u0026rsquo;s a link to the [Meetup Form for RSVPing][https://docs.google.com/forms/d/e/1faipqlsdcie6nu44zfybmsd_hhau8efm7lgiuq5wxcjfe3kapqgru4q/viewform] Use the form to RSVP for transport (which we provide).\nCommunication Communication is a crucial part of the department and also encourages productivity. We use:\nSlack This is the most important platform for communication. There are various slack channels for different purposes. The sole purpose is to administer communication between recruits and the tech staff:\n To get feedback from managers. To share relevant material and opportunities with fellow recruits. To get departmental and cohort specific announcements.  Make sure you check your slack at least 3 times a day.\nWhy is slack important?\n Slack (and tools like slack) are industry standards. So start developing good habits now our staff are not always in the office, sometimes work happens off site. But communication should still happen  Emails For any official communication and setting up meetings, events and workshops. Check your emails at least once a day.\nWhatsApp groups For communication within cohorts and the mighty Coding Department WhatsApp group for the whole department.\nNCIT Material \u0026amp; Assessments As you will be doing assessments for your National Certificate in Information Technology - Systems Development The material and assessments are found on Gnomio. This is where you will also submit these assessments\nImportant Spreadsheets, Forms and Calendars (I suggest you bookmark these)  Coding \u0026amp; Data Programme Outline This spreadsheet is the source of truth, make sure to check it regularly. The tech staff updates the spreadsheet once per week, usually on Monday afternoon.\n Code Project Submission Form This form is to submit your code projects which makes it easier for the facilitators and Senior managers to review your work.\n Deadline Calendar This is where every date for submission is posted. It corresponds with the dates that are in the Program Outline.\n  If you have any queries, these are the people to contact:\nJunior Tech Facilitators Web Development:\n @Kii - Mhlanganisi Kii Gxobole - mhlanganisi.gxobole@umuzi.org @Tshepo - Tshepo Modise - tshepo.modise@umuzi.org @Johan - Johan Khanye - johan.khanye@umuzi.org  Data:\n @Singi - Singita Ngobeni - singita.ngobeni@umuzi.org @Makakole - Makakole Mafane - owen.mafane@umuzi.org @Webster Gova - Webster Gova - webster.gova@umuzi.org @Johan - Johan Khanye - johan.khanye@umuzi.org  Senior Staff Web Development:\n @dibwe - Dibwe Kalangu - dibwe.kalangu@umuzi.org  Department Heads  @sheena - Sheena O’Connell - sheena.oconnell@umuzi.org @Data Michelle - Michelle Hoogenhout - michelle.hoogenhout@umuzi.org  Softwares to use Text Editors These are all good. Choose your favorite\n Visual Studio Code - https://code.visualstudio.com/download Atom - https://atom.io/ Sublime Text - https://www.sublimetext.com/3  Time Management \u0026amp; Project Management tool  Trello, https://trello.com/ Rescue Time,https://www.rescuetime.com/  Useful android apps  https://play.google.com/store/apps/details?id=org.withouthat.acalendar https://play.google.com/store/apps/details?id=com.Slack https://play.google.com/store/apps/details?id=com.trello  "
},
{
	"uri": "/tech-department/workshops/what-to-put-on-a-cv/",
	"title": "What to Put On A CV",
	"tags": [],
	"description": "",
	"content": "This is a rundown on how to make a proper CV.\n "
},
{
	"uri": "/tech-department/topics/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/workshops/what-to-put-in-your-cv/",
	"title": "What to put in your CV",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/topics/data-infrastructure/choosing-a-task-queue/",
	"title": "ZeroMQ versus RabbitMQ versus Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/department-processes/code-review/",
	"title": "code review process",
	"tags": [],
	"description": "",
	"content": " Goals We have a few goals for code review:\n We need to keep track of who has submitted code and who hasn\u0026rsquo;t. deadlines should be taken seriously by recruits which means that WE need to take them seriously We need to know what the recruits need. If they need help then we need to help them quickly. If disciplinery action is needed then we should act fast Code review aids in knowledge sharing within our team Code review is a useful skill that should be taught to recruits  Process and Roles When deadlines are set up then a few different staff members are assigned different roles. This will be done by populating columns in the (mighty) Coding and Data program outline spreadsheet.\nThe roles are as follows:\ndeadline-tracker:  checks that people have submitted in time keeps track of excuses for late submissions and acts with good judgment can adjust deadlines if needed. MUST tell the project owner about any adjustments issues verbal warnings for late submissions (fills out the verbal warning form as needed)  junior reviewers:  performs first and possibly second review usingthe code review form explicitly alerts senior reviewer about any RED FLAGs immediately (send a message on slack) if the reviewer is unhappy with the code but thinks that they can assist then they need to: send the recruit a summary of the problems that need to be fixed and an expected time frame (eg: fix by the end of tomorrow) inform the deadline-tracker review the re-submitted code or find another junior reviewer to do so  senior reviewer:  make sure that the junior reviewers understand the project submission requirements ahead of time deal with any RED FLAGs on a case by case basis re-review a few random code bases that various junior reviewers are happy with get a summary of common problems that came up in the review and update documentation as needed and/or create a workshop as needed ideally start reviewing as soon as possible in order to catch any problems that come up in the junior review process use the same code review form that the junior reviewers use send any problems found to all other reviewers involved and the recruit  MUSTs, SHOULDs and whatnots  every piece of code submitted by any recruit MUST be reviewed by a staff member OR by a recruit that has proven themselves at least once when a recruit submits code then they MUST receive their initial review comments by the end of the following day. If the cohort is large then the day after that is acceptable deadline-tracker SHOULD be a junior facilitator  Using our recruits to help with code review TODO. I think they should use the same code review form?\n Let a recruit review a few code submissions and let a junior or senior staff member check their work keep track of what recruits are good at code review and then dont require staff members to double check their work so much senior reviewers are in charge of making sure that juniors understand instructions junior reviewers are in charge of making sure that recruits understand instructions  "
},
{
	"uri": "/tech-department/projects/python-consuming-an-api-with-requests/",
	"title": "consuming APIs with the requests module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/build-rest-api-with-db/",
	"title": "create a REST api to interact with actual database",
	"tags": [],
	"description": "",
	"content": "project\n"
},
{
	"uri": "/tech-department/projects/data-validation-with-python-and-regex/",
	"title": "data-validation-with-python-and-regex",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/python-specific/expose-rest-api-simple/",
	"title": "expose a simple JSON rest api",
	"tags": [],
	"description": "",
	"content": " Instructions Part 1: Data layer  Create a class called Visitor. Instances of this class should have the following properties:   full name age date of visit time of visit comments name of the person who assisted the visitor   Create a function called save that saves the visitor\u0026rsquo;s data to a JSON file. The file name should be named like this visitor_{some_number}.json. The number part of the file name should be automatically generated as you save the visitor. eg:  alice.save() # results in visitor_1.json bob.save() # results in visitor_2.json charlie.save() # results in visitor_3.json   Create a function called load that takes in a number and returns a Visitor object that was saved to file.  eg:\nalice = load(1) bob = load(2)   Make sure that this kind of functionality works appropriately  alice = Visitor(...stuff) alice.save() # creates a file alice.age = 93 alice.save() # DOES NOT create a file. This updates the original file  This should also work:\nbob = load(2) bob.comments = \u0026quot;great personality\u0026quot; bob.save() # should update visitor_2.json  Part 2: Expose JSON api Use Flask to expose the following functionality:\n create a new Visitor in the database delete a single Visitor from the database delete all Visitors view all Visitors view a single Visitor update a single Visitor  Something to think about Imagine that your api is hosted somewhere on the internet and is very popular. Lots of people are using it.\n What might happen if many people access the \u0026ldquo;create visitor\u0026rdquo; functionality at the same time? what might happen if many people ty to update the same visitor at the same time? what might happen if someone deletes all the visitors while someone else is trying to create a new one?  A lot of really weird bugs can creep in. This class of error is generally referred to as a race condition. There are tools and techniques that exist to help deal with this kind of thing. In general it\u0026rsquo;s good to keep race conditions in mind whenever dealing with processes that access data in parallel.\nResources  Python and JSON Official Python tutorial Official Flask tutorial  "
},
{
	"uri": "/tech-department/projects/tdd/factorials/",
	"title": "factorials",
	"tags": [],
	"description": "",
	"content": " Write a script with a function called calculate_factorial that takes a number and returns its factorial.\nIn a separate file, write some tests that prove that your code works.\nJavascript instructions  Name your script factorial.js Use jasmine to test your code  Python instructions  Name your script factorial.py Use pytest to test your code  Steps:  Think about which tests you want to do to test that the factorial function works. Write the tests first (before creating the function). Test an empty function called factorial - it should fail the tests Add code for returning the factorial of a number - it should pass for numbers \u0026gt;= 1 Add code for dealing with zero - should pass unit test for zero and for numbers \u0026gt;= 1 Add code for dealing with negative numbers Add code for dealing with non-numeric input  Make sure you use Github to keep track of your progress.\nReferences: Factorial Numbers\n"
},
{
	"uri": "/tech-department/topics/linux/",
	"title": "linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/collection/",
	"title": "lots and lots of tdd katas",
	"tags": [],
	"description": "",
	"content": "http://codingdojo.org/kata/\n"
},
{
	"uri": "/tech-department/topics/optimizations-and-big-o/",
	"title": "optimizations and bigO",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/password-checker/",
	"title": "password-checker",
	"tags": [],
	"description": "",
	"content": " Implement the following function by following a TDD methodology:\npassword_is_valid(password)  password_is_valid will check a a few different conditions. If a condition is fails then an error/exception should be raised/thrown. That error/exception can have a message of your choosing.\n password should be larger than 8 chars password should not be null password should have at least one uppercase letter password should have at least one lowercase letter password should have at least one number  Next, implement a function called password_is_ok(password). If the given password meets at least three of the criteria listed above then this function should return true, otherwise it should return false.\nAdd a feature: the password is never OK if conditions 1 and 2 are not met\nJS Resources  JS Errors Errors and Jasmine  Python Resources  Python Errors Exceptions and Pytest  "
},
{
	"uri": "/tech-department/topics/python-specific/",
	"title": "python specific resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tech-department/projects/tdd/recursive_search/",
	"title": "recursive search",
	"tags": [],
	"description": "",
	"content": " This should be written following a TDD process. Remember that this means: RED, GREEN, REFACTOR. The refactor part of this is very very important.\nYou have a data structure like this:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR }, { name: \u0026#34;workspace\u0026#34;, type: DIR }, { name: \u0026#34;house_cats.mp4\u0026#34;, type: FILE }, { name: \u0026#34;house_cats.txt\u0026#34;, type: FILE } ] };  This represents a directory structure with files and directories. (directory == folder)\nPart 1  Write a function that returns a list/array of all .mov files. Call this function find_all_movs Write a function that returns a list/array of all .mp4 files. Call this function find_all_mp4s Write a function that returns a list/array of all cat videos (mp4 and mov files that have the word \u0026ldquo;cat\u0026rdquo; in their name). . Call this function find_all_cat_videos  You will notice that there is a lot of repetition in the functionality you implemented. Each of these functions need to visit every FILE in the directory structure and then check if that file matches the search criteria.\nNow consider te following:\n const DIR = \u0026#34;dir\u0026#34;; const FILE = \u0026#34;file\u0026#34;; const root = { name: \u0026#34;home\u0026#34;, type: DIR, children: [ { name: \u0026#34;house_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;movies\u0026#34;, type: DIR, children: [ { name: \u0026#34;horror\u0026#34;, type: DIR, children: [ { name: \u0026#34;really_awful_cats.mp4\u0026#34;, type: FILE } ] }, { name: \u0026#34;adventure\u0026#34;, type: DIR, children: [ { name: \u0026#34;adventure_cats.mov\u0026#34;, type: FILE }, { name: \u0026#34;adventure_dogs.mov\u0026#34;, type: FILE } ] }, { name: \u0026#34;tragedy\u0026#34;, type: DIR, children: [{ name: \u0026#34;a sad story about cats.md\u0026#34;, type: FILE }] } ] }, { name: \u0026#34;workspace\u0026#34;, type: DIR, children: [ { name: \u0026#34;grumpy_cats.mp4\u0026#34;, type: FILE } ] } ] };  Directory structures usually have some depth. Directories have sub directories. Sub directories also contain stuff.\nPart 2 make sure find_all_movs,find_all_mp4s,find_all_cat_videos work with nested directory structures.\nHINT: you\u0026rsquo;ll be using a technique called \u0026ldquo;recursion\u0026rdquo; here. play with it a little bit. The just of it is: You can call a function from within itself. Play with this a little bit\nfunction my_recursive_function(i){ console.log(i) ; if (i \u0026gt; 100) // this terminates the recursion return my_recursive_function(i + 1); // this does the recursion }  "
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part1/",
	"title": "simple-calculator part 1",
	"tags": [],
	"description": "",
	"content": " We\u0026rsquo;ll build a calculator to do some basic arithmetic. Please follow the instructions below. Please take all the naming conventions in this document with a gran of salt. There are lots and lots of test frameworks in existence, each with its own conventions. Please follow whatever conventions are set out by the test tool that you are using.\nAlso, please don\u0026rsquo;t build a frontend.\nWe\u0026rsquo;ll follow a TDD approach. The basic approach is\n RED: we will write ONE failing test GREEN: we will make sure our test (and all tests written so far) pass REFACTOR: if our code is untidy we will clean it up repeat all the steps until all the functionality we need has been built and tested  1. Make a function that adds two numbers First write a test function. it can be called test_function or something similar. It needs to make sure that the add function works. (of course we haven\u0026rsquo;t written add yet. We\u0026rsquo;ll write our tests first).\n write a test to demonstrate that add(0,0) will return 0. Run the test. It should fail. Now make the test pass by creating an add function. write a test to demonstrate that add(-1,-1) should return -2 then edit add to make your test pass write a test to demonstrate that add(4,5) should return 9 then edit add to make the test pass  2. Make sure you can add as many numbers as you want Now write a test to make sure you can add a bunch of numbers. Eg add(1,2,3,4) should return 10. Think of the tests yourself\n3. Create a multiply function that can multiply 2 numbers multiply(1,2) and other similar combinations should work. Run with it\n4. Make sure multiply can handle multiple numbers multiply(1,2,3,4) should work\n"
},
{
	"uri": "/tech-department/projects/tdd/simple-calculator-part2/",
	"title": "simple-calculator part 2",
	"tags": [],
	"description": "",
	"content": " This a continuation of PROJECTS: simple-calculator part 1 . If you haven\u0026rsquo;t done that yet then please do. At this point you should have a well tested add and multiply function.\nThis exercise will require a little OOP knowledge. Brace yourself.\nIntroducing the calculator class Update your tests so that they expect the add and multiply functions to be part of a class. Now make those tests pass.\nFor now on this document will just describe the features we need the Calculator to have. You need to figure out the tests and implementation yourself.\nNote This is an extension of PROJECTS: simple-calculator part 1 . In other words, previously implemented functionality should still work.\n# this should still work calculator_instance.add(3,5) # should return 8 calculator_instance.multiply(30,2) # should return 60 # and multiple arguments should work too calculator_instance.add(3,5,2) # should return 10  The multiply functionality should also still work.\nRemember the last result The calculator should have a function called last that returns the last result. Example usage:\ncalculator_instance.add(1,2) calculator_instance.last() # should return 3  Use the last result in other calculations The add and multiply functions should allow \u0026quot;LAST\u0026quot; as a parameter.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.multiply(\u0026quot;LAST\u0026quot;,5) # should return 15  Memory Slots Allow the calculator to remember more stuff by implementing a set_slot function. The set_slot function should take a single number as an argument. That argument is called the slot number. Also implement get_slot for getting the value from a memory slot. Neither get_slot or set_slot should effect the output of last.\nExample usage:\ncalculator_instance.add(1,2) calculator_instance.set_slot(1) calculator_instance.get_slot(1) # should return 3 calculator_instance.add(10,20) calculator_instance.set_slot(2) calculator_instance.get_slot(2) # should return 30 calculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300  Allow the use of memory slots and LAST as arguments The add and multiply functions should allow memory slots as parameters. If we were using memory slot 5 as an argument then we would represent it like this \u0026quot;SLOT_5\u0026quot;.\nExample usage: Following from the previous example:\ncalculator_instance.add(100,200) # returns 300. The \u0026quot;last\u0026quot; value is updated calculator_instance.get_slot(1) # should return 3 calculator_instance.get_slot(2) # should return 30 calculator_instance.last() # should return 300 (just like before) # THE FOLLOWING FUNCTIONALITY SHOULD WORK calculator_instance.add(\u0026quot;LAST\u0026quot;,10) # should return 310 (= 300 + 10) calculator_instance.add(\u0026quot;SLOT_1\u0026quot;,5) # should return 8 (= 3 + 5) calculator_instance.multiply(\u0026quot;SLOT_2\u0026quot;,2) # should return 60 (= 30 * 2)  "
},
{
	"uri": "/tech-department/projects/tdd/string-calculator/",
	"title": "string-calculator",
	"tags": [],
	"description": "",
	"content": "Do this: https://osherove.com/tdd-kata-1/\nDo all the steps (1 - 9).\n"
},
{
	"uri": "/tech-department/projects/tdd/bowling/",
	"title": "ten-pin bowling scoring system",
	"tags": [],
	"description": "",
	"content": " Take Note This is a Test Driven Development Project. Please follow a test driven methodologies. That means that you write your test code first!\nThe basic idea of TDD is to write the test code before you write any actual code. So you write a test (which will fail) then you write the code that will make the test pass.\nWhen you submit your code (on Github people!) then your tests MUST BE included in your code base.\nIn a professional setting, untested code is incomplete code.\nIn general: Follow recognized best practices around whatever language and test framework you are using. Eg: consistent naming conventions of functions, test files and literally everything else. Literally.\nAlso this is a team project. Do this in groups of two following a TDD ping-pong approach as described here: WORKSHOPS: [TODO] Introduction to pair programming Instructions Write a software system for keeping track of bowling scores. You can read about traditional 10 pin bowling scoring here.\nPlease put your tests in a directory named \u0026ldquo;tests\u0026rdquo; unless the testing framework you are using follows some other convention.\nProject Description Gameplay This project is more about data, tests and algorithms than html. It needs a WORKING frontend but don\u0026rsquo;t spend too much time making it beautiful. Here is how it will work:\n As the game starts the user will be allowed to enter the names of the players eg \u0026ldquo;Uncle Bob Martin\u0026rdquo; and \u0026ldquo;Ada Lovelace\u0026rdquo; The user then chooses to start the game The user should be able to see the scores of all the players at all times. This includes scores for individual throws and frames, and their total scores The user should be able to see whose turn it is The user should be able to submit the number of pins hit on each throw. One by one. Eg, it\u0026rsquo;s Uncle Bob\u0026rsquo;s turn, so he throws and misses everything. The user submits a 0. The user interface shows that Bob\u0026rsquo;s score is unchanged and it\u0026rsquo;s still his turn. Bob throws again and hits 2 pins, the user submits a 2 and Bob\u0026rsquo;s score is updated and it\u0026rsquo;s still his turn. He throws again and misses. The user enters a 0. We now see that it is Ada\u0026rsquo;s turn. She throws and hits all the pins because she is awesome. The user enters a 10. Ada\u0026rsquo;s score is updated. Now it\u0026rsquo;s Bob\u0026rsquo;s turn again. Get it?  Notes about frontends For those of you doing this in JS: Your user interface will be a web page.\nFor those of you completing this in Python, don\u0026rsquo;t get too fancy. Python is usually considered to be bad t user interfaces so it\u0026rsquo;s really not worth learning a python frontend framework at this point. Just use the terminal. Take a look here for some details.\nAnd everyone: Always remember KISS.\nMore Outputs We should be able to see at any point in time:\n the total score of any player the \u0026ldquo;leaderboard\u0026rdquo; of the current game (who is in first place, second, third etc) the points any person accumulated during a single turn (aka frame) how many turns are left who\u0026rsquo;s turn is it now? whose turn is it next?  Please don\u0026rsquo;t PLEASE DO NOT IMPLEMENT A FANCY GUI. We don\u0026rsquo;t care to see the bowling pins or the ball, we don\u0026rsquo;t care about physics.\nResources and things to know This is not a simple project. To build something awesome you should be aware of a few architectural concepts.\n  TOPICS: Intro to software architecture   "
}]